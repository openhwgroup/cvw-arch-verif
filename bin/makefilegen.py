#!/usr/bin/env python3

import os
import re
import sys


def Orginize(directory):
    """ Organize the directory structure and generate a Makefile for self-check tests."""
    make_txt = ""
    build_str= "# WARNING: DO NOT EDIT. THIS FILE IS GENERATED BY makefilegen.py <directory>\n\
# E.G. cd $WALLY/addins/cvw-arch-verif\n\
#      bin/makefilegen.py tests/rv32\n\
#      make -f gen.make\n\n\
# THEORY OF OPERATION:\n\
# 1: Compile test.S to test-sig.elf \n\
# 2: Simulate test-sig.elf on reference model (e.g. Sail) to generate signature file: test.signature\n\
# 3: Back-annotate test.signature into test.S to produce test-selfcheck.S\n\
# 4: Compile test-selfcheck.S to test-selfcheck.elf\n\n\
# DEFAULT TARGET TO BUILD ALL TESTS FOR SELFCHECK\n\
build: "
    extensions_str = ""
#    clean_str = "clean:\n" #TODO
    for dirpath, dirnames, filenames in os.walk(directory):
        if any(f.endswith('.S') for f in filenames):
            print(dirpath)
            make_txt_temp, build_str_temp, extensions_str_temp = BuildDir(dirpath)
            make_txt += make_txt_temp
            build_str += "build_" + build_str_temp
            extensions_str += "build_" + extensions_str_temp +"\n\n"
    #Combine full make file
    make_txt = build_str + "\n\n" + "# EXTENSION TARGETS WITH ALL INSTRUCTIONS\n" + extensions_str + "\n\n" + make_txt
    with open("gen.make", "w") as f:
        f.write(make_txt)
    return



def BuildDir(directory):
    """
    Build the Makefile for get selfcheck elf files for all tests in given directory or file.
    """
    ###FIRST ITERATION: ONE EXTENSION
    #print(directory)
    #print(os.listdir(directory))

    tests = [f for f in os.listdir(directory) if f.endswith('.S')]
    dir_path =  re.split("/", directory)
    print(dir_path)
    os.makedirs(f"work/{directory}", exist_ok=True) #create path if it does not exist
    #get the full path of the test file
    work_path = f"work/tests/{dir_path[1]}/{dir_path[2]}"
    extension_str = f"{dir_path[-2]}_{dir_path[-1]}: "
    indent_count = len(extension_str) + 6 # align files under target
    build_str = extension_str[:-2]+ " "
    make_txt = ""
    count = 0
    for test in tests:
        test_path = os.path.join(directory, test).split("/")
        #print(test_path)
        test_pathstr = "/".join(test_path)
        march_base = test_path[1]
        extension = str(test_path[-2])
        march = march_base + "i"
        dash_D = "-DTEST_CASE_1=TRUE"
        if test_path[1] == "rv32":
            mabi = "ilp32"
            dash_D += " -DXLEN=32"
        else:
            mabi ="lp64"
            dash_D += " -DXLEN=64"
        if "I" in extension:
            #march += 'i'
            extension = extension.replace("I","")
        if "E" in extension:
            march += 'e'
            extension = extension.replace("E","")
        if "M" in extension:
            march+= 'm'
            extension = extension.replace("M","")
        if "A" in extension:
            march += 'a'
            extension = extension.replace("A","")
        if "C" in extension:
            march += 'c'
            extension = extension.replace("C", "")
        if "F" in extension or "f" in extension:
            march += 'f'
            dash_D += " -DFLEN=32"
            extension = extension.replace("F","")
        if "D" in extension:
            march += 'd'
            dash_D =  dash_D.replace("-DFLEN=32"," -DFLEN=64") if "F" in extension or 'f'  in extension else dash_D + " -DFLEN=64"
            extension = extension.replace("D","")
        if "Q" in extension:
            march += 'q'
            extension = extension.replace("Q","")
            #dash_D += "-DFLEN=128" if "F" not in extension or "D" not in extension else ""   ###TODO
        if "V" in extension:
            march += 'v'
            extension = extension.replace("V", "")
        if "Zcd" in extension: #FIND BETTER FIX TO ADD dash-D
            dash_D += " -DFLEN=64"
        if "Zcf" in extension: #FIND BETTER FIX TO ADD dash-D
            dash_D += " -DFLEN=32"
        if "Zalrsc" in extension:   #SAIL BUG: zalrsc is not supported in Sail
            extension = extension.replace("Zalrsc", "a")
            if "Zaamo" in extension:
                extension = extension.repalce("Zaamo", "")
        elif "Zaamo" in extension: #SAIL BUG: Zaamo is not supported in Sail
            extension = extension.replace("Zaamo", "a")
        parts = re.split(r'(?=Z)', extension)
        extension = '_'.join(parts)
        march += extension.lower()
        if count%2 == 0 and count!=0:
            extension_str += "\\\n" + " "*indent_count
        count += 1
        extension_str += f"{work_path}/{test[:-2]}-selfcheck.elf "
        #print(march_base + " " + str(march))
        make_txt += BuildExt(test_pathstr, work_path, test[:-2], march, mabi, dash_D)
    #make_txt =  extension_str + "\n\n" + make_txt
    #print(make_txt)
    return make_txt, build_str, extension_str

def BuildExt(test_pathstr, work_path, test_name, march, mabi, dash_D ):
    ''' Build the Makefile for get selfcheck elf files for a single test. '''
    rv_xlen = march[0:4]
    make_txt = "############### " + test_name + " ####################################\n"
    make_txt +=  "# COMPILE TEST FOR REF SGNITURE\n"
    make_txt += f"{work_path}/{test_name}-sig.elf: {test_pathstr} sail_cSim/env/link.ld\n"
    make_txt += f"\triscv64-unknown-elf-gcc -march={march} -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles \\\n\
\t\t-Tsail_cSim/env/link.ld \\\n\
\t\t-Isail_cSim/env/ \\\n\
\t\t-Ienv/ -mabi={mabi} {test_pathstr} -o{work_path}/{test_name}-sig.elf {dash_D} \n\n"

    make_txt += "# SIMULATE ON REF FOR SIGNATURE\n"
    make_txt += f"{work_path}/{test_name}.signature: {work_path}/{test_name}-sig.elf\n"
    make_txt += f"\triscv_sim_{rv_xlen}d --config sail_cSim/{rv_xlen}gc.json --trace=step --test-signature={work_path}/{test_name}.signature {work_path}/{test_name}-sig.elf > {work_path}/{test_name}.log 2>&1\n\n"

    make_txt += "# COMBINE SIGNATURE AND COMMENTS WITH TESTFILE \n"
    make_txt += f"{work_path}/{test_name}-selfcheck.S: {work_path}/{test_name}.signature\n"
    make_txt += f"\tbin/combineSigWithComments.py {test_pathstr} {work_path}/{test_name}.signature {work_path}/{test_name}-selfcheck.S\n\n"

    make_txt += "# COMPILE SELF CHECK TEST\n"
    make_txt += f"{work_path}/{test_name}-selfcheck.elf: {work_path}/{test_name}-selfcheck.S sail_cSim/env/link.ld\n"
    make_txt += f"\triscv64-unknown-elf-gcc -march={march} -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles \\\n\
\t\t-T sail_cSim/env/link.ld \\\n\
\t\t-I sail_cSim/env/ \\\n\
\t\t-I env/  -mabi={mabi} {work_path}/{test_name}-selfcheck.S -o {work_path}/{test_name}-selfcheck.elf {dash_D}\n\n"
    #print(make_txt)
    return make_txt


if __name__ == "__main__":
    if len(sys.argv) == 2:
        directory = sys.argv[1]
        Orginize(directory)
        #BuildDir(directory)
    else:
        print("Invalid number of arguments. \nUsage: combineSigWithComments.py <DIRECTORY>")

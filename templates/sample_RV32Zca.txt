function void rv32zca_sample(int hart, int issue);
    ins_rv32zca_t ins;

    if (traceDataQ[hart][issue][0].insn[1:0] != 3) begin // compressed instruction
        $display("Examining compressed instruction rv32zca_sample with inst_name = %s disass = %s", traceDataQ[hart][issue][0].inst_name, traceDataQ[hart][issue][0].disass);
        case (traceDataQ[hart][issue][0].inst_name)
            // Distinguish among the three types of addi compressed instructions
            "addi"     : begin 
                if (traceDataQ[hart][issue][0].insn[1:0] == 2'b00 & traceDataQ[hart][issue][0].insn[15:13] == 3'b000) begin // addi4spn
                    ins = new(hart, issue, traceDataQ); 
                    ins.add_rd(0);
                    ins.add_rs1(1);
                    ins.add_imm(2);
                    c_addi4spn_cg.sample(ins); 
                end else if (traceDataQ[hart][issue][0].insn[1:0] == 2'b01 & traceDataQ[hart][issue][0].insn[15:13] == 3'b011) begin // addi16sp
                    ins = new(hart, issue, traceDataQ); 
                    ins.add_rd(0);
                    ins.add_imm(1);
                    c_addi16sp_cg.sample(ins); 
                end else begin // ordinary addi
                    ins = new(hart, issue, traceDataQ); 
                    ins.add_rd(0);
                    ins.add_imm(2);
                    c_addi_cg.sample(ins); 
                end
            end
            "lw"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                ins.add_rs1(2);
                ins.current.inst_category = INST_CAT_LOAD;
                ins.add_mem_address();
                c_lw_cg.sample(ins); 
            end
            "sw"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rs2(0);
                ins.add_imm(1);
                ins.add_rs1(2);
                ins.current.inst_category = INST_CAT_STORE;
                ins.add_mem_address();
                c_sw_cg.sample(ins); 
            end
            "nop"     : begin 
                ins = new(hart, issue, traceDataQ); 
                c_nop_cg.sample(ins); 
            end
            "li"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                c_li_cg.sample(ins); 
            end
            "lui"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                c_lui_cg.sample(ins); 
            end
            "srli"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(2);
                c_srli_cg.sample(ins); 
            end
            "srai"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(2);
                c_srai_cg.sample(ins); 
            end
            "andi"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                c_andi_cg.sample(ins); 
            end
            "sub"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_sub_cg.sample(ins); 
            end
            "xor"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_xor_cg.sample(ins); 
            end
            "or"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_or_cg.sample(ins); 
            end
            "and"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_and_cg.sample(ins); 
            end
            "j"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_imm_addr(0);
                c_j_cg.sample(ins); 
            end
            "beqz"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                c_beqz_cg.sample(ins); 
            end
            "bnez"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                c_bnez_cg.sample(ins); 
            end
            "slli"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(2);
                c_slli_cg.sample(ins);
            end
            "lwsp"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_imm(1);
                ins.add_rs1(2);
                ins.current.inst_category = INST_CAT_LOAD;
                ins.add_mem_address();
                c_lwsp_cg.sample(ins); 
            end
            "jr"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rs1(0);
                c_jr_cg.sample(ins); 
            end
            "mv"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_mv_cg.sample(ins); 
            end
            "jalr"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rs1(0);
                c_jalr_cg.sample(ins); 
            end
            "add"     : begin 
                $display("recording compressed add");
                ins = new(hart, issue, traceDataQ); 
                ins.add_rd(0);
                ins.add_rs2(1);
                c_add_cg.sample(ins); 
            end
            "swsp"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_rs2(0);
                ins.add_imm(1);
                ins.add_rs1(2);
                ins.current.inst_category = INST_CAT_STORE;
                ins.add_mem_address();
                c_swsp_cg.sample(ins); 
            end
            "jal"     : begin 
                ins = new(hart, issue, traceDataQ); 
                ins.add_imm_addr(0);
                c_jal_cg.sample(ins); 
            end
        endcase
    end
endfunction
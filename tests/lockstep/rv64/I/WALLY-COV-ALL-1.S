//
// Copyright (C) 2024 Harvey Mudd College & Oklahoma State University, Habib University, UET Lahore
//
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
///////////////////////////////////////////

#include "macros.h"

.section .text.init
.globl rvtest_entry_point

rvtest_entry_point:

# initialize signature pointer
la x4, begin_signature

    

// ******************
// Tests from: WALLY-COV-jal.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
jal x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x1)
jal x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x2)
jal x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x3)
jal x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
jal x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
jal x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
jal x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
jal x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x8)
jal x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x9)
jal x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x10)
jal x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x11)
jal x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x12)
jal x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x13)
jal x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x14)
jal x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x15)
jal x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x16)
jal x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x17)
jal x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x18)
jal x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x19)
jal x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x20)
jal x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x21)
jal x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x22)
jal x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x23)
jal x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x24)
jal x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x25)
jal x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x26)
jal x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x27)
jal x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x28)
jal x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x29)
jal x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x30)
jal x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x31)
jal x31, 1f # perform operation
nop
nop
1:

# Testcase cp_imm_corners_jal 2
.align 14
 # start all tests on a multiple of the largest one
jal x1, 1f
1: 
jal x1, f3_jal

# Testcase cp_imm_corners_jal 3
.align 2
b2_jal:
jal x9, f4_jal # jump to aligned address to stress immediate
.align 2
f3_jal:
jal x9, b2_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 4
.align 3
b3_jal:
jal x29, f5_jal # jump to aligned address to stress immediate
.align 3
f4_jal:
jal x29, b3_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 5
.align 4
b4_jal:
jal x9, f6_jal # jump to aligned address to stress immediate
.align 4
f5_jal:
jal x9, b4_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 6
.align 5
b5_jal:
jal x31, f7_jal # jump to aligned address to stress immediate
.align 5
f6_jal:
jal x31, b5_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 7
.align 6
b6_jal:
jal x7, f8_jal # jump to aligned address to stress immediate
.align 6
f7_jal:
jal x7, b6_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 8
.align 7
b7_jal:
jal x12, f9_jal # jump to aligned address to stress immediate
.align 7
f8_jal:
jal x12, b7_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 9
.align 8
b8_jal:
jal x2, f10_jal # jump to aligned address to stress immediate
.align 8
f9_jal:
jal x2, b8_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 10
.align 9
b9_jal:
jal x29, f11_jal # jump to aligned address to stress immediate
.align 9
f10_jal:
jal x29, b9_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 11
.align 10
b10_jal:
jal x31, f12_jal # jump to aligned address to stress immediate
.align 10
f11_jal:
jal x31, b10_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 12
.align 11
b11_jal:
jal x31, f13_jal # jump to aligned address to stress immediate
.align 11
f12_jal:
jal x31, b11_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 13
.align 12
b12_jal:
jal x12, f14_jal # jump to aligned address to stress immediate
.align 12
f13_jal:
jal x12, b12_jal # jump to aligned address to stress immediate
f14_jal:

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x5, x16 # perform first operation
jal x8, arbitraryLabel151
nop
arbitraryLabel151:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x17, x30 # perform first operation
jal x10, arbitraryLabel152
nop
arbitraryLabel152:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x30, x13, x22 # perform first operation
jal x18, arbitraryLabel153
nop
arbitraryLabel153:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x30, x10, x16 # perform first operation
jal x30, arbitraryLabel154
nop
arbitraryLabel154:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x10, x21 # perform first operation
jal x12, arbitraryLabel155
nop
arbitraryLabel155:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x5, x16, x11 # perform first operation
jal x5, arbitraryLabel156
nop
arbitraryLabel156:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x5, x31 # perform first operation
jal x5, arbitraryLabel157
nop
arbitraryLabel157:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x14, x20 # perform first operation
jal x20, arbitraryLabel158
nop
arbitraryLabel158:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x10, x11 # perform first operation
jal x9, arbitraryLabel159
nop
arbitraryLabel159:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-ld.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x21, 0x5ee18f1e0bfbce7f # initialize rs2
la x1, scratch # base address 
addi x1, x1, 192 # sub immediate from rs1 to counter offset
sd x21, -192 (x1) # store value to put something in memory
ld x19, -192(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x10, 0xb6e123d9efe0dcaa # initialize rs2
la x2, scratch # base address 
addi x2, x2, 955 # sub immediate from rs1 to counter offset
sd x10, -955 (x2) # store value to put something in memory
ld x30, -955(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x2, 0x3bab3846bdfd72a9 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1335 # sub immediate from rs1 to counter offset
sd x2, -1335 (x3) # store value to put something in memory
ld x6, -1335(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x28, 0x10b612a403fd1182 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1649 # sub immediate from rs1 to counter offset
sd x28, -1649 (x4) # store value to put something in memory
ld x15, -1649(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x785ad902ca1e4600 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 545 # sub immediate from rs1 to counter offset
sd x9, -545 (x5) # store value to put something in memory
ld x13, -545(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x13, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0x033396e5e63a1de3 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -70 # sub immediate from rs1 to counter offset
sd x17, 70 (x6) # store value to put something in memory
ld x19, 70(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x19, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x619d5ddd8100847f # initialize rs2
la x7, scratch # base address 
addi x7, x7, -990 # sub immediate from rs1 to counter offset
sd x11, 990 (x7) # store value to put something in memory
ld x8, 990(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x29, 0xf588a8fb0fc64e5b # initialize rs2
la x8, scratch # base address 
addi x8, x8, 838 # sub immediate from rs1 to counter offset
sd x29, -838 (x8) # store value to put something in memory
ld x30, -838(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x15, 0x95dfc776ac09fbf6 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 348 # sub immediate from rs1 to counter offset
sd x15, -348 (x9) # store value to put something in memory
ld x26, -348(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x6, 0x556f18a9f2ec34fe # initialize rs2
la x10, scratch # base address 
addi x10, x10, -314 # sub immediate from rs1 to counter offset
sd x6, 314 (x10) # store value to put something in memory
ld x31, 314(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x3, 0x69e62a736545fa35 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1191 # sub immediate from rs1 to counter offset
sd x3, -1191 (x11) # store value to put something in memory
ld x13, -1191(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x26, 0x7fe5ef3905431bfe # initialize rs2
la x12, scratch # base address 
addi x12, x12, 147 # sub immediate from rs1 to counter offset
sd x26, -147 (x12) # store value to put something in memory
ld x17, -147(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x27, 0xcc98745e8955fcaa # initialize rs2
la x13, scratch # base address 
addi x13, x13, -932 # sub immediate from rs1 to counter offset
sd x27, 932 (x13) # store value to put something in memory
ld x19, 932(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x28, 0x0d84a746ae12a894 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 498 # sub immediate from rs1 to counter offset
sd x28, -498 (x14) # store value to put something in memory
ld x16, -498(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x7, 0x2305bc95d8fb4e13 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 373 # sub immediate from rs1 to counter offset
sd x7, -373 (x15) # store value to put something in memory
ld x23, -373(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x18, 0xe43092aa19bfc155 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 347 # sub immediate from rs1 to counter offset
sd x18, -347 (x16) # store value to put something in memory
ld x3, -347(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x30, 0x8841279988a52c58 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1518 # sub immediate from rs1 to counter offset
sd x30, 1518 (x17) # store value to put something in memory
ld x21, 1518(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x1, 0x56633a98241b971a # initialize rs2
la x18, scratch # base address 
addi x18, x18, -555 # sub immediate from rs1 to counter offset
sd x1, 555 (x18) # store value to put something in memory
ld x14, 555(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x14, 0x0374a806770302aa # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1374 # sub immediate from rs1 to counter offset
sd x14, -1374 (x19) # store value to put something in memory
ld x1, -1374(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x6, 0x2c0380eda0fcf842 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -465 # sub immediate from rs1 to counter offset
sd x6, 465 (x20) # store value to put something in memory
ld x8, 465(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x3, 0xd350587734ef2e71 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1661 # sub immediate from rs1 to counter offset
sd x3, -1661 (x21) # store value to put something in memory
ld x13, -1661(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x28, 0x11d76f888aca3568 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1770 # sub immediate from rs1 to counter offset
sd x28, -1770 (x22) # store value to put something in memory
ld x8, -1770(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x27, 0x5c9c9ca21c2470eb # initialize rs2
la x23, scratch # base address 
addi x23, x23, -797 # sub immediate from rs1 to counter offset
sd x27, 797 (x23) # store value to put something in memory
ld x6, 797(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x17, 0xdceed97226d1b5ef # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1514 # sub immediate from rs1 to counter offset
sd x17, -1514 (x24) # store value to put something in memory
ld x3, -1514(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x29, 0xd3d119090a489420 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 299 # sub immediate from rs1 to counter offset
sd x29, -299 (x25) # store value to put something in memory
ld x17, -299(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x29, 0x14e7a7aa22abea93 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1915 # sub immediate from rs1 to counter offset
sd x29, -1915 (x26) # store value to put something in memory
ld x18, -1915(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x14, 0x27b0d600619baa9d # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1281 # sub immediate from rs1 to counter offset
sd x14, -1281 (x27) # store value to put something in memory
ld x29, -1281(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x2, 0xdacad027a99dc237 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1565 # sub immediate from rs1 to counter offset
sd x2, -1565 (x28) # store value to put something in memory
ld x14, -1565(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x20, 0x695f08fd8b21714b # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1318 # sub immediate from rs1 to counter offset
sd x20, -1318 (x29) # store value to put something in memory
ld x16, -1318(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x17, 0x5088d18137fc811a # initialize rs2
la x30, scratch # base address 
addi x30, x30, -810 # sub immediate from rs1 to counter offset
sd x17, 810 (x30) # store value to put something in memory
ld x7, 810(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x12, 0x04657444f09ad49d # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1231 # sub immediate from rs1 to counter offset
sd x12, -1231 (x31) # store value to put something in memory
ld x17, -1231(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 240)

# Testcase cp_rd (Test destination rd = x0)
li x26, 0x50473155717c10a9 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 916 # sub immediate from rs1 to counter offset
sd x26, -916 (x9) # store value to put something in memory
ld x0, -916(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x16, 0x8ab41631dbf66314 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 637 # sub immediate from rs1 to counter offset
sd x16, -637 (x20) # store value to put something in memory
ld x1, -637(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x8, 0xe7f614e2bd80efc2 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 476 # sub immediate from rs1 to counter offset
sd x8, -476 (x10) # store value to put something in memory
ld x2, -476(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x1, 0x9bc2e6191d509d6d # initialize rs2
la x31, scratch # base address 
addi x31, x31, 930 # sub immediate from rs1 to counter offset
sd x1, -930 (x31) # store value to put something in memory
ld x3, -930(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x31, 0x5ffed15723f687b5 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1075 # sub immediate from rs1 to counter offset
sd x31, 1075 (x26) # store value to put something in memory
ld x4, 1075(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0xc458add0c728bf90 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -807 # sub immediate from rs1 to counter offset
sd x9, 807 (x23) # store value to put something in memory
ld x5, 807(x23) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x1, 0xc47920023ba36990 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -781 # sub immediate from rs1 to counter offset
sd x1, 781 (x16) # store value to put something in memory
ld x6, 781(x16) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x14, 0x384d8a0c57610112 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 408 # sub immediate from rs1 to counter offset
sd x14, -408 (x18) # store value to put something in memory
ld x7, -408(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x25, 0x2934fd11e8ed7344 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1972 # sub immediate from rs1 to counter offset
sd x25, -1972 (x12) # store value to put something in memory
ld x8, -1972(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x6, 0x692607d19c471ead # initialize rs2
la x1, scratch # base address 
addi x1, x1, -2030 # sub immediate from rs1 to counter offset
sd x6, 2030 (x1) # store value to put something in memory
ld x9, 2030(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x29, 0x8f0dbd1b277d354c # initialize rs2
la x5, scratch # base address 
addi x5, x5, 9 # sub immediate from rs1 to counter offset
sd x29, -9 (x5) # store value to put something in memory
ld x10, -9(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x20, 0x0ebc5c4d76df5425 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1872 # sub immediate from rs1 to counter offset
sd x20, -1872 (x6) # store value to put something in memory
ld x11, -1872(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x26, 0xb68fc4d5e23c7b3f # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1964 # sub immediate from rs1 to counter offset
sd x26, 1964 (x29) # store value to put something in memory
ld x12, 1964(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x17, 0x8acc259ee68e9f30 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 2018 # sub immediate from rs1 to counter offset
sd x17, -2018 (x24) # store value to put something in memory
ld x13, -2018(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x20, 0x0772588664a6302b # initialize rs2
la x26, scratch # base address 
addi x26, x26, 42 # sub immediate from rs1 to counter offset
sd x20, -42 (x26) # store value to put something in memory
ld x14, -42(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x24, 0x3826a906405e8ffe # initialize rs2
la x21, scratch # base address 
addi x21, x21, -43 # sub immediate from rs1 to counter offset
sd x24, 43 (x21) # store value to put something in memory
ld x15, 43(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x23, 0x35c4d2560d7cea4a # initialize rs2
la x3, scratch # base address 
addi x3, x3, 554 # sub immediate from rs1 to counter offset
sd x23, -554 (x3) # store value to put something in memory
ld x16, -554(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x30, 0x81d28b56466f4fc3 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1432 # sub immediate from rs1 to counter offset
sd x30, -1432 (x2) # store value to put something in memory
ld x17, -1432(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x23, 0x3918e64c3ac290ea # initialize rs2
la x26, scratch # base address 
addi x26, x26, 122 # sub immediate from rs1 to counter offset
sd x23, -122 (x26) # store value to put something in memory
ld x18, -122(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0xf6f3ba3701866187 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1985 # sub immediate from rs1 to counter offset
sd x28, -1985 (x30) # store value to put something in memory
ld x19, -1985(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0x1bce0eb9b8af4517 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1819 # sub immediate from rs1 to counter offset
sd x1, -1819 (x29) # store value to put something in memory
ld x20, -1819(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x30, 0xe51154b23bcc24d4 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1644 # sub immediate from rs1 to counter offset
sd x30, -1644 (x29) # store value to put something in memory
ld x21, -1644(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x15, 0x15a4ac6b61bedfae # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1043 # sub immediate from rs1 to counter offset
sd x15, -1043 (x31) # store value to put something in memory
ld x22, -1043(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x22, 0xf0cd19237f9adcac # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1083 # sub immediate from rs1 to counter offset
sd x22, 1083 (x9) # store value to put something in memory
ld x23, 1083(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x24, 0x4102cafff052d63d # initialize rs2
la x27, scratch # base address 
addi x27, x27, 304 # sub immediate from rs1 to counter offset
sd x24, -304 (x27) # store value to put something in memory
ld x24, -304(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x14, 0xfe81953cd55d7144 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 591 # sub immediate from rs1 to counter offset
sd x14, -591 (x28) # store value to put something in memory
ld x25, -591(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x19, 0x7e64c1e4a0e316a6 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 209 # sub immediate from rs1 to counter offset
sd x19, -209 (x31) # store value to put something in memory
ld x26, -209(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x7, 0x808c0a282d02892d # initialize rs2
la x10, scratch # base address 
addi x10, x10, 17 # sub immediate from rs1 to counter offset
sd x7, -17 (x10) # store value to put something in memory
ld x27, -17(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x14, 0xb34ca871db5aa344 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 563 # sub immediate from rs1 to counter offset
sd x14, -563 (x17) # store value to put something in memory
ld x28, -563(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x21, 0x35048a1182474cf9 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1600 # sub immediate from rs1 to counter offset
sd x21, 1600 (x10) # store value to put something in memory
ld x29, 1600(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x6, 0xd95e79a329929173 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1930 # sub immediate from rs1 to counter offset
sd x6, -1930 (x29) # store value to put something in memory
ld x30, -1930(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0x3e4196856063b479 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 55 # sub immediate from rs1 to counter offset
sd x13, -55 (x7) # store value to put something in memory
ld x31, -55(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x8, 0x2e286a59d2bf0cf2 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 604 # sub immediate from rs1 to counter offset
sd x8, -604 (x1) # store value to put something in memory
ld x1, -604(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x5, 0x15ceb5f9583055f0 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 275 # sub immediate from rs1 to counter offset
sd x5, -275 (x2) # store value to put something in memory
ld x2, -275(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x17, 0x91181f4e3f53674a # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1210 # sub immediate from rs1 to counter offset
sd x17, 1210 (x3) # store value to put something in memory
ld x3, 1210(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0x53e8ff54a2a80bb2 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1018 # sub immediate from rs1 to counter offset
sd x5, -1018 (x4) # store value to put something in memory
ld x4, -1018(x4) # perform operation
RVTEST_SIGUPD(x6, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
li x8, 0x21aa705d8384b75e # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1467 # sub immediate from rs1 to counter offset
sd x8, -1467 (x5) # store value to put something in memory
ld x5, -1467(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0x654a7cb41c51e89f # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1653 # sub immediate from rs1 to counter offset
sd x13, -1653 (x6) # store value to put something in memory
ld x6, -1653(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0xad43a1f2ebc9c52b # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1896 # sub immediate from rs1 to counter offset
sd x12, 1896 (x7) # store value to put something in memory
ld x7, 1896(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x20, 0xd78b29c5900d6e79 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1740 # sub immediate from rs1 to counter offset
sd x20, 1740 (x8) # store value to put something in memory
ld x8, 1740(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x3d97d826fd310348 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -704 # sub immediate from rs1 to counter offset
sd x9, 704 (x9) # store value to put something in memory
ld x9, 704(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x7474f370970b5154 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1973 # sub immediate from rs1 to counter offset
sd x10, -1973 (x10) # store value to put something in memory
ld x10, -1973(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x21, 0xae7098a4dead9db7 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1881 # sub immediate from rs1 to counter offset
sd x21, 1881 (x11) # store value to put something in memory
ld x11, 1881(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x16, 0x82ea049f70a90d63 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 992 # sub immediate from rs1 to counter offset
sd x16, -992 (x12) # store value to put something in memory
ld x12, -992(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x14, 0xccfaff77d018ce4b # initialize rs2
la x13, scratch # base address 
addi x13, x13, 837 # sub immediate from rs1 to counter offset
sd x14, -837 (x13) # store value to put something in memory
ld x13, -837(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x30, 0xa60fd4b9c1880719 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1186 # sub immediate from rs1 to counter offset
sd x30, 1186 (x14) # store value to put something in memory
ld x14, 1186(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x19, 0x28105a375f68b511 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1227 # sub immediate from rs1 to counter offset
sd x19, -1227 (x15) # store value to put something in memory
ld x15, -1227(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x27, 0xc334dcb8799bb196 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -891 # sub immediate from rs1 to counter offset
sd x27, 891 (x16) # store value to put something in memory
ld x16, 891(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x28, 0x52ccca323a1aee3b # initialize rs2
la x17, scratch # base address 
addi x17, x17, 668 # sub immediate from rs1 to counter offset
sd x28, -668 (x17) # store value to put something in memory
ld x17, -668(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x20, 0x15cf24f4007e4f98 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1802 # sub immediate from rs1 to counter offset
sd x20, -1802 (x18) # store value to put something in memory
ld x18, -1802(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x25, 0xa9fde8ae418e76fe # initialize rs2
la x19, scratch # base address 
addi x19, x19, 2035 # sub immediate from rs1 to counter offset
sd x25, -2035 (x19) # store value to put something in memory
ld x19, -2035(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x1, 0xf24ad4dbc8bb82c9 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1381 # sub immediate from rs1 to counter offset
sd x1, -1381 (x20) # store value to put something in memory
ld x20, -1381(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x9, 0xe21960f3198c3c5f # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1140 # sub immediate from rs1 to counter offset
sd x9, -1140 (x21) # store value to put something in memory
ld x21, -1140(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x25, 0xb5acaa708712c8a8 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1484 # sub immediate from rs1 to counter offset
sd x25, -1484 (x22) # store value to put something in memory
ld x22, -1484(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x21, 0x0073786ffdd86a0c # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1879 # sub immediate from rs1 to counter offset
sd x21, 1879 (x23) # store value to put something in memory
ld x23, 1879(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x13, 0xad23b934a3d067c7 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1046 # sub immediate from rs1 to counter offset
sd x13, -1046 (x24) # store value to put something in memory
ld x24, -1046(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x30, 0x1f1b98434a729801 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1926 # sub immediate from rs1 to counter offset
sd x30, -1926 (x25) # store value to put something in memory
ld x25, -1926(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x29, 0xa7ec23fc115339d3 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -411 # sub immediate from rs1 to counter offset
sd x29, 411 (x26) # store value to put something in memory
ld x26, 411(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x12, 0x3ea0617fdc5d0370 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -36 # sub immediate from rs1 to counter offset
sd x12, 36 (x27) # store value to put something in memory
ld x27, 36(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x1, 0x886bba2e585c5166 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 985 # sub immediate from rs1 to counter offset
sd x1, -985 (x28) # store value to put something in memory
ld x28, -985(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x21, 0xf93ebc2137dbb868 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1066 # sub immediate from rs1 to counter offset
sd x21, -1066 (x29) # store value to put something in memory
ld x29, -1066(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x10, 0xf81dadad26aa33f2 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 955 # sub immediate from rs1 to counter offset
sd x10, -955 (x30) # store value to put something in memory
ld x30, -955(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x15, 0xb59958e8ef2013a4 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1408 # sub immediate from rs1 to counter offset
sd x15, -1408 (x31) # store value to put something in memory
ld x31, -1408(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x15, 0x17c1f8bad3058bef # initialize rs2
la x26, scratch # base address 
addi x26, x26, 0 # sub immediate from rs1 to counter offset
sd x15, 0 (x26) # store value to put something in memory
ld x8, 0(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 752)

# Testcase cp_imm_corners
li x15, 0x3f89f22dc2731ec5 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1 # sub immediate from rs1 to counter offset
sd x15, 1 (x14) # store value to put something in memory
ld x16, 1(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 760)

# Testcase cp_imm_corners
li x23, 0xfc3cb76479b9dd11 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -2 # sub immediate from rs1 to counter offset
sd x23, 2 (x3) # store value to put something in memory
ld x31, 2(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 768)

# Testcase cp_imm_corners
li x29, 0x48b048461afe2b1b # initialize rs2
la x11, scratch # base address 
addi x11, x11, -3 # sub immediate from rs1 to counter offset
sd x29, 3 (x11) # store value to put something in memory
ld x19, 3(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 776)

# Testcase cp_imm_corners
li x15, 0x159ab996445bbe82 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -4 # sub immediate from rs1 to counter offset
sd x15, 4 (x7) # store value to put something in memory
ld x28, 4(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 784)

# Testcase cp_imm_corners
li x3, 0x1efe8e840671a9c1 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -8 # sub immediate from rs1 to counter offset
sd x3, 8 (x11) # store value to put something in memory
ld x29, 8(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 792)

# Testcase cp_imm_corners
li x17, 0x54a16e816b6ed108 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -16 # sub immediate from rs1 to counter offset
sd x17, 16 (x30) # store value to put something in memory
ld x26, 16(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 800)

# Testcase cp_imm_corners
li x19, 0xeec06bcc042ce183 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -32 # sub immediate from rs1 to counter offset
sd x19, 32 (x22) # store value to put something in memory
ld x15, 32(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 808)

# Testcase cp_imm_corners
li x2, 0xeb2c482a75d31293 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -64 # sub immediate from rs1 to counter offset
sd x2, 64 (x28) # store value to put something in memory
ld x6, 64(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 816)

# Testcase cp_imm_corners
li x23, 0xf29b4cc0c6e99c7a # initialize rs2
la x5, scratch # base address 
addi x5, x5, -128 # sub immediate from rs1 to counter offset
sd x23, 128 (x5) # store value to put something in memory
ld x28, 128(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 824)

# Testcase cp_imm_corners
li x1, 0x2a0df061b92965a2 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -256 # sub immediate from rs1 to counter offset
sd x1, 256 (x31) # store value to put something in memory
ld x29, 256(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 832)

# Testcase cp_imm_corners
li x8, 0xf814fa0941be9b5e # initialize rs2
la x30, scratch # base address 
addi x30, x30, -512 # sub immediate from rs1 to counter offset
sd x8, 512 (x30) # store value to put something in memory
ld x7, 512(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 840)

# Testcase cp_imm_corners
li x6, 0x706ab088383de9eb # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1023 # sub immediate from rs1 to counter offset
sd x6, 1023 (x17) # store value to put something in memory
ld x16, 1023(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 848)

# Testcase cp_imm_corners
li x29, 0x44598197a7fd19d9 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1024 # sub immediate from rs1 to counter offset
sd x29, 1024 (x24) # store value to put something in memory
ld x21, 1024(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 856)

# Testcase cp_imm_corners
li x11, 0xdfbc2e48c95bd4da # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1795 # sub immediate from rs1 to counter offset
sd x11, 1795 (x21) # store value to put something in memory
ld x5, 1795(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 864)

# Testcase cp_imm_corners
li x28, 0x4e449be587b6ee80 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -2047 # sub immediate from rs1 to counter offset
sd x28, 2047 (x15) # store value to put something in memory
ld x23, 2047(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 872)

# Testcase cp_imm_corners
li x12, 0xb3d1e042f3117c28 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2047 # increment rs1 by 2047 
addi x1, x1, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x12, -2048 (x1) # store value to put something in memory
ld x9, -2048(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 880)

# Testcase cp_imm_corners
li x6, 0xb10dbf0a4e7d89aa # initialize rs2
la x12, scratch # base address 
addi x12, x12, 2047 # sub immediate from rs1 to counter offset
sd x6, -2047 (x12) # store value to put something in memory
ld x10, -2047(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 888)

# Testcase cp_imm_corners
li x18, 0xe57ebef8700917ab # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2 # sub immediate from rs1 to counter offset
sd x18, -2 (x1) # store value to put something in memory
ld x6, -2(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 896)

# Testcase cp_imm_corners
li x30, 0xb04e4e441f5399d5 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1 # sub immediate from rs1 to counter offset
sd x30, -1 (x25) # store value to put something in memory
ld x24, -1(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x26, scratch
addi x26, x26, 1544
add x5, x3, x1 # perform first operation
ld x10, -1544(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x31, scratch
addi x31, x31, -1384
add x26, x8, x27 # perform first operation
ld x2, 1384(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x28, scratch
addi x28, x28, -1805
add x24, x29, x25 # perform first operation
ld x2, 1805(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x29, scratch
addi x29, x29, -655
add x29, x29, x0 # perform first operation
ld x31, 655(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x10, scratch
addi x10, x10, 1078
add x10, x10, x0 # perform first operation
ld x25, -1078(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x7, scratch
addi x7, x7, -1965
add x7, x7, x0 # perform first operation
ld x6, 1965(x7) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x13, scratch
addi x13, x13, 2035
add x5, x7, x10 # perform first operation
ld x5, -2035(x13) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x23, scratch
addi x23, x23, 533
add x17, x26, x18 # perform first operation
ld x17, -533(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x21, scratch
addi x21, x21, 448
add x16, x5, x2 # perform first operation
ld x16, -448(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x9, scratch
addi x9, x9, -555
add x29, x25, x26 # perform first operation
ld x25, 555(x9) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x20, scratch
addi x20, x20, -511
add x26, x5, x28 # perform first operation
ld x28, 511(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x9, scratch
addi x9, x9, 871
add x20, x13, x16 # perform first operation
ld x31, -871(x9) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-fence.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_asm_count
fence

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-srai.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xc979e6d57f243803 # initialize rs1
srai x10, x0, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5b3bdbf710f85eeb # initialize rs1
srai x9, x1, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x3bb9b6f4653888bd # initialize rs1
srai x6, x2, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x76330535cb42479d # initialize rs1
srai x29, x3, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xdb84d4cf56d86a2f # initialize rs1
srai x2, x4, 38 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2ffef9c7fca9864a # initialize rs1
srai x6, x5, 30 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0x0b18846158a60d98 # initialize rs1
srai x12, x6, 61 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf2c78364e3b4c8de # initialize rs1
srai x14, x7, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xcc22bb1bc750bb91 # initialize rs1
srai x30, x8, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x51667714a926d535 # initialize rs1
srai x16, x9, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x09e774809261f739 # initialize rs1
srai x19, x10, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x421927cc3c6a44b9 # initialize rs1
srai x29, x11, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x45584fc49492e772 # initialize rs1
srai x16, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x7449d0c069f67e52 # initialize rs1
srai x7, x13, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x6e8228e192018252 # initialize rs1
srai x21, x14, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xca5542049e152225 # initialize rs1
srai x25, x15, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xe827f0da96e3ac19 # initialize rs1
srai x29, x16, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x6bb965167dbf6a8f # initialize rs1
srai x9, x17, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x05aeb88a98ce6704 # initialize rs1
srai x14, x18, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xa47dbc51a830c03d # initialize rs1
srai x20, x19, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xbe0b7f578d6bc69b # initialize rs1
srai x3, x20, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x7cb1131e1e5e77a9 # initialize rs1
srai x8, x21, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x2ab791863b1797bd # initialize rs1
srai x16, x22, 63 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x5103ae4b7c6c0582 # initialize rs1
srai x5, x23, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x8c63126379254304 # initialize rs1
srai x26, x24, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x6e5d76987c74c1bf # initialize rs1
srai x22, x25, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x7a1804f5ec717a0c # initialize rs1
srai x16, x26, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe559f3485f559207 # initialize rs1
srai x14, x27, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x1008c84f918eda0e # initialize rs1
srai x26, x28, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x5ce1e962551cc313 # initialize rs1
srai x17, x29, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xaeba544ac8560432 # initialize rs1
srai x1, x30, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x8bd34ed4f5a198bf # initialize rs1
srai x7, x31, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 248)

# Testcase cp_rd (Test destination rd = x0)
li x23, 0xdf89b99cc277c745 # initialize rs1
srai x0, x23, 48 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x24, 0x6a672a44ebbd2ee1 # initialize rs1
srai x1, x24, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x13, 0x7a1065c56c4238ed # initialize rs1
srai x2, x13, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x13, 0x1065a37bd62f3431 # initialize rs1
srai x3, x13, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x19, 0xdce292b66aeb3594 # initialize rs1
srai x4, x19, 49 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0xb4d2792826f59bb7 # initialize rs1
srai x5, x14, 23 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0x3e513e6ce641603c # initialize rs1
srai x6, x27, 20 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0x2b82b9e75ae9c946 # initialize rs1
srai x7, x10, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x17, 0x54b5a8f037a02a47 # initialize rs1
srai x8, x17, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x30, 0x982832d07853f63d # initialize rs1
srai x9, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x26, 0xde83817ca85bdb44 # initialize rs1
srai x10, x26, 40 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x9, 0x5e6d43d4608d11a3 # initialize rs1
srai x11, x9, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x3, 0x450789b977c55ce8 # initialize rs1
srai x12, x3, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x18, 0xc49ef785e38c2dc9 # initialize rs1
srai x13, x18, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x25, 0xe56cc64f8f5b5f04 # initialize rs1
srai x14, x25, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x22, 0xf5a45aede0c08dd7 # initialize rs1
srai x15, x22, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x26, 0xe69005c53e63593f # initialize rs1
srai x16, x26, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x26, 0xc0d35d437ded4527 # initialize rs1
srai x17, x26, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x26, 0xcb7b3e8086c778bf # initialize rs1
srai x18, x26, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x17, 0xfbfae6792948e87f # initialize rs1
srai x19, x17, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0x680318cd8745c6ac # initialize rs1
srai x20, x1, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x9, 0xa8226607a4557209 # initialize rs1
srai x21, x9, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x15, 0x0731515c27903f4c # initialize rs1
srai x22, x15, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x28, 0x96c90aa71652c9b4 # initialize rs1
srai x23, x28, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0xd0e7093bd8a4a14d # initialize rs1
srai x24, x14, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x24, 0x4039ac32c7df57d8 # initialize rs1
srai x25, x24, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x3, 0x88b7d4b2cf4f9634 # initialize rs1
srai x26, x3, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x29, 0x6717b1b2bffb8463 # initialize rs1
srai x27, x29, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x10, 0x29d5164a7e752446 # initialize rs1
srai x28, x10, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x29, 0x76138c784c772aca # initialize rs1
srai x29, x29, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x1, 0xaf9c4f57a83af37f # initialize rs1
srai x30, x1, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x7, 0xf21ceb7fecbd178c # initialize rs1
srai x31, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x0000000000000000 # initialize rs1
srai x26, x30, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x13, 0x0000000000000001 # initialize rs1
srai x3, x13, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x28, 0x0000000000000002 # initialize rs1
srai x13, x28, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x13, 0x8000000000000000 # initialize rs1
srai x3, x13, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x13, 0x8000000000000001 # initialize rs1
srai x21, x13, 63 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x24, 0x7fffffffffffffff # initialize rs1
srai x11, x24, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x11, 0x7ffffffffffffffe # initialize rs1
srai x18, x11, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x17, 0xffffffffffffffff # initialize rs1
srai x29, x17, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x11, 0xfffffffffffffffe # initialize rs1
srai x16, x11, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x21, 0x5bbc887763ae86f2 # initialize rs1
srai x22, x21, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
srai x8, x28, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x9, 0x5555555555555555 # initialize rs1
srai x24, x9, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x2, 0x00000000ffffffff # initialize rs1
srai x28, x2, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
srai x20, x11, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x26, 0x0000000100000000 # initialize rs1
srai x19, x26, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x6, 0x0000000100000001 # initialize rs1
srai x29, x6, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x6f79f0087ba70d59 # initialize rs1
srai x0, x0, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x09ab85a0bb1306f0 # initialize rs1
srai x1, x1, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x4aadf6e46f18e119 # initialize rs1
srai x2, x2, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xe174b81d070d0421 # initialize rs1
srai x3, x3, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xde9ccd2d57115be1 # initialize rs1
srai x4, x4, 33 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x58e37135f25efafd # initialize rs1
srai x5, x5, 9 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x60fd178cfb36c0d7 # initialize rs1
srai x6, x6, 12 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa4465565ad5fde8a # initialize rs1
srai x7, x7, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xbe96ae6aa347c5b3 # initialize rs1
srai x8, x8, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x2d4e4cbd9ed37c91 # initialize rs1
srai x9, x9, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x3845fd48063e3be3 # initialize rs1
srai x10, x10, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xae56461eb259ee92 # initialize rs1
srai x11, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x5958db65f3815aa6 # initialize rs1
srai x12, x12, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xd41970d0617cb215 # initialize rs1
srai x13, x13, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x134a94072b6ba62e # initialize rs1
srai x14, x14, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xaf1b4695e794c492 # initialize rs1
srai x15, x15, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xfe7d3a072239e79a # initialize rs1
srai x16, x16, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xb5e16d0db83c4e7d # initialize rs1
srai x17, x17, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x0c8eaf425566a099 # initialize rs1
srai x18, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa9590786e52a0a9b # initialize rs1
srai x19, x19, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xf90c8ccbeb10b6f2 # initialize rs1
srai x20, x20, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xc78c7ad8e51be523 # initialize rs1
srai x21, x21, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x2d66f56201fa21f6 # initialize rs1
srai x22, x22, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x42b84cbd38cf7d7b # initialize rs1
srai x23, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xbb7f2453d5c191cd # initialize rs1
srai x24, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xd82828fc6e06cc4b # initialize rs1
srai x25, x25, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3d60887cd6e5b2e5 # initialize rs1
srai x26, x26, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xa839361e1b9ec47d # initialize rs1
srai x27, x27, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xdc50bdc29be93f6a # initialize rs1
srai x28, x28, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x6a548eec9b77b545 # initialize rs1
srai x29, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x0e23fb7176102b82 # initialize rs1
srai x30, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xc33ab95bb99719a2 # initialize rs1
srai x31, x31, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm (Test bit = 0)
li x11, 0x31d321fb97ab25b7 # initialize rs1
srai x18, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 896)

# Testcase cp_uimm (Test bit = 1)
li x25, 0x349eb4edec796211 # initialize rs1
srai x17, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 904)

# Testcase cp_uimm (Test bit = 2)
li x5, 0x537b8681316d845a # initialize rs1
srai x22, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 912)

# Testcase cp_uimm (Test bit = 3)
li x7, 0xb3f0498efe572fd5 # initialize rs1
srai x22, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 920)

# Testcase cp_uimm (Test bit = 4)
li x15, 0x8653fc9ae03d84b3 # initialize rs1
srai x9, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 928)

# Testcase cp_uimm (Test bit = 5)
li x15, 0x503989c217ab8072 # initialize rs1
srai x29, x15, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 936)

# Testcase cp_uimm (Test bit = 6)
li x19, 0x1f42d4fcb5595a60 # initialize rs1
srai x23, x19, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 944)

# Testcase cp_uimm (Test bit = 7)
li x21, 0x5e16c638eb9746a3 # initialize rs1
srai x1, x21, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 952)

# Testcase cp_uimm (Test bit = 8)
li x11, 0x427395f151c50872 # initialize rs1
srai x23, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 960)

# Testcase cp_uimm (Test bit = 9)
li x13, 0xcfad5041337d8fe4 # initialize rs1
srai x29, x13, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 968)

# Testcase cp_uimm (Test bit = 10)
li x3, 0x38b6b5be195e1944 # initialize rs1
srai x22, x3, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 976)

# Testcase cp_uimm (Test bit = 11)
li x10, 0xd2650be4ecdf36ee # initialize rs1
srai x6, x10, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 984)

# Testcase cp_uimm (Test bit = 12)
li x14, 0x461692a4c7e55d60 # initialize rs1
srai x7, x14, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 992)

# Testcase cp_uimm (Test bit = 13)
li x18, 0x7aa7e5f8de3ae31d # initialize rs1
srai x5, x18, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1000)

# Testcase cp_uimm (Test bit = 14)
li x18, 0x45cd51e460e5b72a # initialize rs1
srai x12, x18, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1008)

# Testcase cp_uimm (Test bit = 15)
li x10, 0x91e442fbba10785f # initialize rs1
srai x15, x10, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1016)

# Testcase cp_uimm (Test bit = 16)
li x19, 0x0f400e0f0276c5e6 # initialize rs1
srai x26, x19, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1024)

# Testcase cp_uimm (Test bit = 17)
li x5, 0x89d24bafe92788fc # initialize rs1
srai x13, x5, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1032)

# Testcase cp_uimm (Test bit = 18)
li x28, 0xd83042489cba10d2 # initialize rs1
srai x7, x28, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cp_uimm (Test bit = 19)
li x18, 0x27e3402922ca9ecd # initialize rs1
srai x21, x18, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1048)

# Testcase cp_uimm (Test bit = 20)
li x20, 0x34c944b8f19cd6db # initialize rs1
srai x18, x20, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1056)

# Testcase cp_uimm (Test bit = 21)
li x1, 0xda55e382c983ad6b # initialize rs1
srai x26, x1, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1064)

# Testcase cp_uimm (Test bit = 22)
li x20, 0xf773eae1345245ef # initialize rs1
srai x9, x20, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1072)

# Testcase cp_uimm (Test bit = 23)
li x5, 0x8f08e61061e494ff # initialize rs1
srai x19, x5, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1080)

# Testcase cp_uimm (Test bit = 24)
li x3, 0x43ed96f5445bbb2a # initialize rs1
srai x21, x3, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1088)

# Testcase cp_uimm (Test bit = 25)
li x25, 0xe5458ea0b2692234 # initialize rs1
srai x6, x25, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1096)

# Testcase cp_uimm (Test bit = 26)
li x30, 0xe22a8392209255fc # initialize rs1
srai x17, x30, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1104)

# Testcase cp_uimm (Test bit = 27)
li x22, 0x676f0e144b6f7c69 # initialize rs1
srai x2, x22, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1112)

# Testcase cp_uimm (Test bit = 28)
li x26, 0x6a0539d6531c3fc0 # initialize rs1
srai x14, x26, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1120)

# Testcase cp_uimm (Test bit = 29)
li x19, 0x89008421b019f152 # initialize rs1
srai x12, x19, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1128)

# Testcase cp_uimm (Test bit = 30)
li x15, 0xd887e4acb3a51687 # initialize rs1
srai x28, x15, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1136)

# Testcase cp_uimm (Test bit = 31)
li x27, 0x64ca71bd1ad1867c # initialize rs1
srai x13, x27, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1144)

# Testcase cp_uimm (Test bit = 32)
li x3, 0xc7b35f2f379cd864 # initialize rs1
srai x29, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1152)

# Testcase cp_uimm (Test bit = 33)
li x8, 0xc1db7109b337c200 # initialize rs1
srai x28, x8, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1160)

# Testcase cp_uimm (Test bit = 34)
li x12, 0xb20ea901c6ef4b26 # initialize rs1
srai x11, x12, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1168)

# Testcase cp_uimm (Test bit = 35)
li x31, 0x52ad22e31ae9f5ff # initialize rs1
srai x27, x31, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1176)

# Testcase cp_uimm (Test bit = 36)
li x3, 0x24f8a88a32040cc8 # initialize rs1
srai x19, x3, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1184)

# Testcase cp_uimm (Test bit = 37)
li x2, 0x1aff5816b4281b69 # initialize rs1
srai x30, x2, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1192)

# Testcase cp_uimm (Test bit = 38)
li x2, 0xa8d45d923bb26f18 # initialize rs1
srai x8, x2, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1200)

# Testcase cp_uimm (Test bit = 39)
li x9, 0xe10ccf1dd9c5be37 # initialize rs1
srai x2, x9, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1208)

# Testcase cp_uimm (Test bit = 40)
li x25, 0x8c8ffeaf47beabd9 # initialize rs1
srai x29, x25, 40 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1216)

# Testcase cp_uimm (Test bit = 41)
li x21, 0xee839d99f923fbb6 # initialize rs1
srai x23, x21, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1224)

# Testcase cp_uimm (Test bit = 42)
li x14, 0x3921402d4826a758 # initialize rs1
srai x22, x14, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1232)

# Testcase cp_uimm (Test bit = 43)
li x17, 0xa93ae965d5dc1a32 # initialize rs1
srai x12, x17, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1240)

# Testcase cp_uimm (Test bit = 44)
li x5, 0x993cee39a4633234 # initialize rs1
srai x24, x5, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1248)

# Testcase cp_uimm (Test bit = 45)
li x25, 0xf1cca986aad8aa79 # initialize rs1
srai x5, x25, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1256)

# Testcase cp_uimm (Test bit = 46)
li x26, 0x9bf6881f2b65c04b # initialize rs1
srai x19, x26, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1264)

# Testcase cp_uimm (Test bit = 47)
li x23, 0xb4dd8751c5dc5e79 # initialize rs1
srai x2, x23, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cp_uimm (Test bit = 48)
li x17, 0x0d6e384553b5e399 # initialize rs1
srai x3, x17, 48 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1280)

# Testcase cp_uimm (Test bit = 49)
li x17, 0x1e5fb3018cf27cb2 # initialize rs1
srai x3, x17, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1288)

# Testcase cp_uimm (Test bit = 50)
li x7, 0x99cb084c1bf16e55 # initialize rs1
srai x19, x7, 50 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1296)

# Testcase cp_uimm (Test bit = 51)
li x9, 0x6e9069b8da1718ff # initialize rs1
srai x7, x9, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1304)

# Testcase cp_uimm (Test bit = 52)
li x5, 0xfaa69a4016ec60cf # initialize rs1
srai x25, x5, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1312)

# Testcase cp_uimm (Test bit = 53)
li x8, 0x94f05de9e3d7660b # initialize rs1
srai x9, x8, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1320)

# Testcase cp_uimm (Test bit = 54)
li x25, 0xb2ab2f631690263f # initialize rs1
srai x6, x25, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1328)

# Testcase cp_uimm (Test bit = 55)
li x6, 0xbf2ced61490fc6de # initialize rs1
srai x17, x6, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1336)

# Testcase cp_uimm (Test bit = 56)
li x1, 0xb282fe17020e8fa0 # initialize rs1
srai x22, x1, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1344)

# Testcase cp_uimm (Test bit = 57)
li x9, 0x9389df4c443331cf # initialize rs1
srai x18, x9, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1352)

# Testcase cp_uimm (Test bit = 58)
li x17, 0xa1f71fa93a082115 # initialize rs1
srai x24, x17, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cp_uimm (Test bit = 59)
li x3, 0x931336068595e423 # initialize rs1
srai x11, x3, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1368)

# Testcase cp_uimm (Test bit = 60)
li x3, 0x1584641f7a6417a8 # initialize rs1
srai x18, x3, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1376)

# Testcase cp_uimm (Test bit = 61)
li x7, 0x4779d38dda630ecd # initialize rs1
srai x28, x7, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1384)

# Testcase cp_uimm (Test bit = 62)
li x21, 0x37df8b3424b64b7a # initialize rs1
srai x9, x21, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1392)

# Testcase cp_uimm (Test bit = 63)
li x21, 0xe421b4d3773d99c4 # initialize rs1
srai x12, x21, 63 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1400)

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x20, x10 # perform first operation
srai x5, x2, 15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x3, x10 # perform first operation
srai x21, x27, 49 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x12, x3 # perform first operation
srai x9, x7, 14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x15, x3, x25 # perform first operation
srai x15, x15, 4 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x19, x23 # perform first operation
srai x17, x12, 48 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x10, x9, x18 # perform first operation
srai x1, x9, 27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x28, x31 # perform first operation
srai x22, x27, 48 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x26, x31 # perform first operation
srai x23, x22, 45 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x26, x19 # perform first operation
srai x23, x16, 42 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x1, x24 # perform first operation
srai x1, x27, 6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x1, x24 # perform first operation
srai x24, x15, 32 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x31, x14 # perform first operation
srai x3, x5, 10 # perform second (triggering) operation

#.EQU SIGSIZE,1408


// ******************
// Tests from: WALLY-COV-bgeu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x68427b04b394d1c4 # initialize rs1
li x19, 0x859e94b55e29ab49 # initialize rs2
bgeu x0, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x859e94b55e29ab49 # initialize rs1
li x19, 0x859e94b55e29ab49 # initialize rs2
bgeu x0, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x24a4da20fba304eb # initialize rs1
li x21, 0xeb74c51d5804d0a6 # initialize rs2
bgeu x1, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xeb74c51d5804d0a6 # initialize rs1
li x21, 0xeb74c51d5804d0a6 # initialize rs2
bgeu x1, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x4c4ac12d06cc4e9e # initialize rs1
li x1, 0x88309c3783bb50bd # initialize rs2
bgeu x2, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x88309c3783bb50bd # initialize rs1
li x1, 0x88309c3783bb50bd # initialize rs2
bgeu x2, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x12c0d06261304a5d # initialize rs1
li x26, 0x53c078d116c7cef0 # initialize rs2
bgeu x3, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x53c078d116c7cef0 # initialize rs1
li x26, 0x53c078d116c7cef0 # initialize rs2
bgeu x3, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5fdfd06a1f031769 # initialize rs1
li x7, 0xbbccfa374f425258 # initialize rs2
bgeu x4, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xbbccfa374f425258 # initialize rs1
li x7, 0xbbccfa374f425258 # initialize rs2
bgeu x4, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x00a8a460a8429bed # initialize rs1
li x31, 0xfe4e34fb1a8b413d # initialize rs2
bgeu x5, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xfe4e34fb1a8b413d # initialize rs1
li x31, 0xfe4e34fb1a8b413d # initialize rs2
bgeu x5, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x395f6376193671d9 # initialize rs1
li x12, 0xd937cde72709aed4 # initialize rs2
bgeu x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xd937cde72709aed4 # initialize rs1
li x12, 0xd937cde72709aed4 # initialize rs2
bgeu x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x7e3742402783f86c # initialize rs1
li x1, 0xcb6fdbc5be7fdeb8 # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xcb6fdbc5be7fdeb8 # initialize rs1
li x1, 0xcb6fdbc5be7fdeb8 # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x81b2d4a17c8560e2 # initialize rs1
li x23, 0xe7e1d8bd0bfef08f # initialize rs2
bgeu x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xe7e1d8bd0bfef08f # initialize rs1
li x23, 0xe7e1d8bd0bfef08f # initialize rs2
bgeu x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x2d5383941bcf99f8 # initialize rs1
li x26, 0x94b95ede0a9b32d5 # initialize rs2
bgeu x9, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x94b95ede0a9b32d5 # initialize rs1
li x26, 0x94b95ede0a9b32d5 # initialize rs2
bgeu x9, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xb0b321a1a67e3474 # initialize rs1
li x31, 0xaedb3bc285bcda33 # initialize rs2
bgeu x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xaedb3bc285bcda33 # initialize rs1
li x31, 0xaedb3bc285bcda33 # initialize rs2
bgeu x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x8330d2a1d0a78a65 # initialize rs1
li x14, 0x7835a367c4b9e67e # initialize rs2
bgeu x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7835a367c4b9e67e # initialize rs1
li x14, 0x7835a367c4b9e67e # initialize rs2
bgeu x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xd1939230c501d4e2 # initialize rs1
li x11, 0x1288d62e80b7e300 # initialize rs2
bgeu x12, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x1288d62e80b7e300 # initialize rs1
li x11, 0x1288d62e80b7e300 # initialize rs2
bgeu x12, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x451f4c317c18f80f # initialize rs1
li x28, 0x6be5f67b07ea46e0 # initialize rs2
bgeu x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x6be5f67b07ea46e0 # initialize rs1
li x28, 0x6be5f67b07ea46e0 # initialize rs2
bgeu x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x8e11987f9bc0619c # initialize rs1
li x20, 0xac6ff974aee84c38 # initialize rs2
bgeu x14, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xac6ff974aee84c38 # initialize rs1
li x20, 0xac6ff974aee84c38 # initialize rs2
bgeu x14, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x722406d280eb8016 # initialize rs1
li x28, 0x45df7a4402bfc849 # initialize rs2
bgeu x15, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x45df7a4402bfc849 # initialize rs1
li x28, 0x45df7a4402bfc849 # initialize rs2
bgeu x15, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x73de25987f00281b # initialize rs1
li x5, 0xba058206464a68ee # initialize rs2
bgeu x16, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xba058206464a68ee # initialize rs1
li x5, 0xba058206464a68ee # initialize rs2
bgeu x16, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x988f302cfee7a6e0 # initialize rs1
li x3, 0xdff99143e7947416 # initialize rs2
bgeu x17, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xdff99143e7947416 # initialize rs1
li x3, 0xdff99143e7947416 # initialize rs2
bgeu x17, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x2098570347b2c9d3 # initialize rs1
li x7, 0x4c6204c30493f51d # initialize rs2
bgeu x18, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x4c6204c30493f51d # initialize rs1
li x7, 0x4c6204c30493f51d # initialize rs2
bgeu x18, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x2add70c129743cc9 # initialize rs1
li x3, 0x2c4b0ef916d32dfc # initialize rs2
bgeu x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2c4b0ef916d32dfc # initialize rs1
li x3, 0x2c4b0ef916d32dfc # initialize rs2
bgeu x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe451d21234bbb0a0 # initialize rs1
li x23, 0x20ccdc58d3cd0f99 # initialize rs2
bgeu x20, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x20ccdc58d3cd0f99 # initialize rs1
li x23, 0x20ccdc58d3cd0f99 # initialize rs2
bgeu x20, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xe83afe4fce12b375 # initialize rs1
li x18, 0xaddd05e9f7eaba16 # initialize rs2
bgeu x21, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaddd05e9f7eaba16 # initialize rs1
li x18, 0xaddd05e9f7eaba16 # initialize rs2
bgeu x21, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x6d44dcc61d7579fc # initialize rs1
li x8, 0xfd2e6c6ef3c8e6db # initialize rs2
bgeu x22, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfd2e6c6ef3c8e6db # initialize rs1
li x8, 0xfd2e6c6ef3c8e6db # initialize rs2
bgeu x22, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xc2888dd849b9920b # initialize rs1
li x16, 0xcb1e83f2f4086d09 # initialize rs2
bgeu x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xcb1e83f2f4086d09 # initialize rs1
li x16, 0xcb1e83f2f4086d09 # initialize rs2
bgeu x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x4bbb55f493b197fa # initialize rs1
li x26, 0x3e1fb6c023a4ca74 # initialize rs2
bgeu x24, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x3e1fb6c023a4ca74 # initialize rs1
li x26, 0x3e1fb6c023a4ca74 # initialize rs2
bgeu x24, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x8621c8563c4bdd7d # initialize rs1
li x31, 0x15b34f8db4abbc52 # initialize rs2
bgeu x25, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x15b34f8db4abbc52 # initialize rs1
li x31, 0x15b34f8db4abbc52 # initialize rs2
bgeu x25, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xa36fd6dea407cf23 # initialize rs1
li x10, 0x36fc9b3418f05c91 # initialize rs2
bgeu x26, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x36fc9b3418f05c91 # initialize rs1
li x10, 0x36fc9b3418f05c91 # initialize rs2
bgeu x26, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xc6caffc581bde11c # initialize rs1
li x19, 0x42936e572261ab98 # initialize rs2
bgeu x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x42936e572261ab98 # initialize rs1
li x19, 0x42936e572261ab98 # initialize rs2
bgeu x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xfad2fd5ebb4052c3 # initialize rs1
li x7, 0x5fc0de92ebc89a2c # initialize rs2
bgeu x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5fc0de92ebc89a2c # initialize rs1
li x7, 0x5fc0de92ebc89a2c # initialize rs2
bgeu x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x79b7aaf7caba7fd8 # initialize rs1
li x23, 0x1d587a971c3120de # initialize rs2
bgeu x29, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x1d587a971c3120de # initialize rs1
li x23, 0x1d587a971c3120de # initialize rs2
bgeu x29, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xea3553d14805f07d # initialize rs1
li x14, 0x0ae69c25fc514cac # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0ae69c25fc514cac # initialize rs1
li x14, 0x0ae69c25fc514cac # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x9b87d2cabeb8684c # initialize rs1
li x25, 0x8824da840011e0a7 # initialize rs2
bgeu x31, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8824da840011e0a7 # initialize rs1
li x25, 0x8824da840011e0a7 # initialize rs2
bgeu x31, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x20, 0x5a5a50be5b33ea85 # initialize rs1
li x0, 0xc9808410b46fdef2 # initialize rs2
bgeu x20, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xc9808410b46fdef2 # initialize rs1
li x0, 0xc9808410b46fdef2 # initialize rs2
bgeu x20, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x28, 0xb92cd59999f1421a # initialize rs1
li x1, 0x4e254b2b11e0124d # initialize rs2
bgeu x28, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x4e254b2b11e0124d # initialize rs1
li x1, 0x4e254b2b11e0124d # initialize rs2
bgeu x28, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x18, 0x3897ed0469bab8a9 # initialize rs1
li x2, 0x090b87428a579640 # initialize rs2
bgeu x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x090b87428a579640 # initialize rs1
li x2, 0x090b87428a579640 # initialize rs2
bgeu x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x21, 0xbe4815056f742d87 # initialize rs1
li x3, 0x2e0096191ece388b # initialize rs2
bgeu x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x2e0096191ece388b # initialize rs1
li x3, 0x2e0096191ece388b # initialize rs2
bgeu x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x16, 0xc6bd4f223631cfcf # initialize rs1
li x4, 0x9b48b920c3d194ae # initialize rs2
bgeu x16, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x9b48b920c3d194ae # initialize rs1
li x4, 0x9b48b920c3d194ae # initialize rs2
bgeu x16, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x29, 0x6ed44fce982543ee # initialize rs1
li x5, 0x77d418e8d82e17b2 # initialize rs2
bgeu x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x77d418e8d82e17b2 # initialize rs1
li x5, 0x77d418e8d82e17b2 # initialize rs2
bgeu x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0x7692282fe03a9462 # initialize rs1
li x6, 0x459ea989e7d6f25d # initialize rs2
bgeu x22, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x459ea989e7d6f25d # initialize rs1
li x6, 0x459ea989e7d6f25d # initialize rs2
bgeu x22, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0x275dd8d0c08b7c4f # initialize rs1
li x7, 0xa61cf851177acdba # initialize rs2
bgeu x10, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xa61cf851177acdba # initialize rs1
li x7, 0xa61cf851177acdba # initialize rs2
bgeu x10, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x27, 0x5394b2f260490ba7 # initialize rs1
li x8, 0x4b024106391a49ba # initialize rs2
bgeu x27, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x4b024106391a49ba # initialize rs1
li x8, 0x4b024106391a49ba # initialize rs2
bgeu x27, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x22, 0x432ad8455d7d8d11 # initialize rs1
li x9, 0x81308ab2464749ec # initialize rs2
bgeu x22, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x81308ab2464749ec # initialize rs1
li x9, 0x81308ab2464749ec # initialize rs2
bgeu x22, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x23, 0xe9ecba5f0daf31af # initialize rs1
li x10, 0xea99f610a764ab63 # initialize rs2
bgeu x23, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xea99f610a764ab63 # initialize rs1
li x10, 0xea99f610a764ab63 # initialize rs2
bgeu x23, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x14, 0xb25dc7d0baa4eacf # initialize rs1
li x11, 0x6453dc0e1bbb3c68 # initialize rs2
bgeu x14, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x6453dc0e1bbb3c68 # initialize rs1
li x11, 0x6453dc0e1bbb3c68 # initialize rs2
bgeu x14, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x31, 0x7542d3b11d4f6a66 # initialize rs1
li x12, 0xe6ee78fe4a64c9c4 # initialize rs2
bgeu x31, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xe6ee78fe4a64c9c4 # initialize rs1
li x12, 0xe6ee78fe4a64c9c4 # initialize rs2
bgeu x31, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x6, 0x7c60f989afcd0bb1 # initialize rs1
li x13, 0x77aa14bcce19bf3c # initialize rs2
bgeu x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x77aa14bcce19bf3c # initialize rs1
li x13, 0x77aa14bcce19bf3c # initialize rs2
bgeu x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x8, 0xc1ba98d3eb38e0e2 # initialize rs1
li x14, 0x1e4a7d3acc5102bd # initialize rs2
bgeu x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x1e4a7d3acc5102bd # initialize rs1
li x14, 0x1e4a7d3acc5102bd # initialize rs2
bgeu x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x30, 0x2ddccd499ac3ffb3 # initialize rs1
li x15, 0xb9c50e6905b66ad7 # initialize rs2
bgeu x30, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xb9c50e6905b66ad7 # initialize rs1
li x15, 0xb9c50e6905b66ad7 # initialize rs2
bgeu x30, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x21, 0xb1cc72837682d4f6 # initialize rs1
li x16, 0xac29e0ef16487e71 # initialize rs2
bgeu x21, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xac29e0ef16487e71 # initialize rs1
li x16, 0xac29e0ef16487e71 # initialize rs2
bgeu x21, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0xbc92cd86b296aebc # initialize rs1
li x17, 0xb81210ca22ad1b12 # initialize rs2
bgeu x6, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xb81210ca22ad1b12 # initialize rs1
li x17, 0xb81210ca22ad1b12 # initialize rs2
bgeu x6, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x30, 0x7126ce115f8561e4 # initialize rs1
li x18, 0xbcdbd5de0eb52748 # initialize rs2
bgeu x30, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xbcdbd5de0eb52748 # initialize rs1
li x18, 0xbcdbd5de0eb52748 # initialize rs2
bgeu x30, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x18, 0x6308e1c700e19ff8 # initialize rs1
li x19, 0xdc5b3a2ded7cfa5e # initialize rs2
bgeu x18, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xdc5b3a2ded7cfa5e # initialize rs1
li x19, 0xdc5b3a2ded7cfa5e # initialize rs2
bgeu x18, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x18, 0xc1c8de1c56825bf3 # initialize rs1
li x20, 0x11c859c784edd7e4 # initialize rs2
bgeu x18, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x11c859c784edd7e4 # initialize rs1
li x20, 0x11c859c784edd7e4 # initialize rs2
bgeu x18, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x26, 0xe22aec98f6f10b61 # initialize rs1
li x21, 0x5b5a6770d6638004 # initialize rs2
bgeu x26, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5b5a6770d6638004 # initialize rs1
li x21, 0x5b5a6770d6638004 # initialize rs2
bgeu x26, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x2, 0x27959211664ba933 # initialize rs1
li x22, 0x311597268a7bbb48 # initialize rs2
bgeu x2, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x311597268a7bbb48 # initialize rs1
li x22, 0x311597268a7bbb48 # initialize rs2
bgeu x2, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x25, 0x3d52812b9a5718c9 # initialize rs1
li x23, 0xb19862f545b264a7 # initialize rs2
bgeu x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xb19862f545b264a7 # initialize rs1
li x23, 0xb19862f545b264a7 # initialize rs2
bgeu x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x10, 0x8094d3ccaee57669 # initialize rs1
li x24, 0x009739dfba99cbc6 # initialize rs2
bgeu x10, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x009739dfba99cbc6 # initialize rs1
li x24, 0x009739dfba99cbc6 # initialize rs2
bgeu x10, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x30, 0x5332971df71d43ff # initialize rs1
li x25, 0x28f4af8c2494005c # initialize rs2
bgeu x30, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x28f4af8c2494005c # initialize rs1
li x25, 0x28f4af8c2494005c # initialize rs2
bgeu x30, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x20, 0xfae08efaf767b2df # initialize rs1
li x26, 0xa664c0cfc3ce1cb0 # initialize rs2
bgeu x20, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xa664c0cfc3ce1cb0 # initialize rs1
li x26, 0xa664c0cfc3ce1cb0 # initialize rs2
bgeu x20, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x25, 0x4e31c2a74d5d5592 # initialize rs1
li x27, 0x83babe81c661b4fa # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x83babe81c661b4fa # initialize rs1
li x27, 0x83babe81c661b4fa # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x19, 0xc806bc23a98220f9 # initialize rs1
li x28, 0x6120f3c7502e3471 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x6120f3c7502e3471 # initialize rs1
li x28, 0x6120f3c7502e3471 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x24, 0x3801d571df13d332 # initialize rs1
li x29, 0x2d7fd5f9fa517458 # initialize rs2
bgeu x24, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x2d7fd5f9fa517458 # initialize rs1
li x29, 0x2d7fd5f9fa517458 # initialize rs2
bgeu x24, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x22, 0x959b801c9fe3e7dd # initialize rs1
li x30, 0xfac2beb7b6919dc7 # initialize rs2
bgeu x22, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfac2beb7b6919dc7 # initialize rs1
li x30, 0xfac2beb7b6919dc7 # initialize rs2
bgeu x22, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x30, 0x35422b582a914748 # initialize rs1
li x31, 0x7968e7c6f8f1d3f0 # initialize rs2
bgeu x30, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7968e7c6f8f1d3f0 # initialize rs1
li x31, 0x7968e7c6f8f1d3f0 # initialize rs2
bgeu x30, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x22, 0x0000000000000000 # initialize rs1
li x11, 0x065f476a90fae277 # initialize rs2
bgeu x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x065f476a90fae277 # initialize rs1
li x11, 0x065f476a90fae277 # initialize rs2
bgeu x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x12, 0x0000000000000001 # initialize rs1
li x3, 0xcf4f5f36b6071719 # initialize rs2
bgeu x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xcf4f5f36b6071719 # initialize rs1
li x3, 0xcf4f5f36b6071719 # initialize rs2
bgeu x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x12, 0x0000000000000002 # initialize rs1
li x9, 0xf598549112921b85 # initialize rs2
bgeu x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xf598549112921b85 # initialize rs1
li x9, 0xf598549112921b85 # initialize rs2
bgeu x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x6, 0x8000000000000000 # initialize rs1
li x3, 0xc75dec41a5ef9051 # initialize rs2
bgeu x6, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xc75dec41a5ef9051 # initialize rs1
li x3, 0xc75dec41a5ef9051 # initialize rs2
bgeu x6, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x24, 0x8000000000000001 # initialize rs1
li x3, 0x2905f023a565de70 # initialize rs2
bgeu x24, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x2905f023a565de70 # initialize rs1
li x3, 0x2905f023a565de70 # initialize rs2
bgeu x24, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x28, 0x6fbb3d77dffc3e6d # initialize rs2
bgeu x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x6fbb3d77dffc3e6d # initialize rs1
li x28, 0x6fbb3d77dffc3e6d # initialize rs2
bgeu x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x7, 0x7ffffffffffffffe # initialize rs1
li x18, 0x0a9258834226657a # initialize rs2
bgeu x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0a9258834226657a # initialize rs1
li x18, 0x0a9258834226657a # initialize rs2
bgeu x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x6, 0xffffffffffffffff # initialize rs1
li x29, 0xb30f406b3edad40e # initialize rs2
bgeu x6, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xb30f406b3edad40e # initialize rs1
li x29, 0xb30f406b3edad40e # initialize rs2
bgeu x6, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x17, 0xfffffffffffffffe # initialize rs1
li x8, 0xd1696c4b8a9cfe2c # initialize rs2
bgeu x17, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xd1696c4b8a9cfe2c # initialize rs1
li x8, 0xd1696c4b8a9cfe2c # initialize rs2
bgeu x17, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x49cb3d6872d2efba # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x49cb3d6872d2efba # initialize rs1
li x31, 0x49cb3d6872d2efba # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xb929b852af2a7d88 # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xb929b852af2a7d88 # initialize rs1
li x19, 0xb929b852af2a7d88 # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x25, 0x5555555555555555 # initialize rs1
li x27, 0xc6fdd1ca205ce5b7 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xc6fdd1ca205ce5b7 # initialize rs1
li x27, 0xc6fdd1ca205ce5b7 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x20, 0x776fd362a356be55 # initialize rs2
bgeu x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x776fd362a356be55 # initialize rs1
li x20, 0x776fd362a356be55 # initialize rs2
bgeu x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x21, 0x00000000fffffffe # initialize rs1
li x2, 0x5a096bb0b5d87baa # initialize rs2
bgeu x21, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5a096bb0b5d87baa # initialize rs1
li x2, 0x5a096bb0b5d87baa # initialize rs2
bgeu x21, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x12, 0x0000000100000000 # initialize rs1
li x28, 0x063820126aa03750 # initialize rs2
bgeu x12, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x063820126aa03750 # initialize rs1
li x28, 0x063820126aa03750 # initialize rs2
bgeu x12, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x24, 0x0000000100000001 # initialize rs1
li x5, 0xa090d62b6979dcda # initialize rs2
bgeu x24, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xa090d62b6979dcda # initialize rs1
li x5, 0xa090d62b6979dcda # initialize rs2
bgeu x24, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x31, 0xd600df1526ed2a3b # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x8, 0xdfe284d19392f71b # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
bgeu x8, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
bgeu x8, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x25, 0x55bbe7b1c51a6dee # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bgeu x25, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000002 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bgeu x25, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x10, 0x5ed8059a4fc3dba5 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bgeu x10, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bgeu x10, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x3, 0x290fd68066a64f1e # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bgeu x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bgeu x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x23, 0xe0478cea4089a2bc # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x12, 0x010b974851f48bd6 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bgeu x12, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7ffffffffffffffe # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bgeu x12, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x14, 0x164932988d8bd098 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xffffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x10, 0xba1412021b1cda33 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bgeu x10, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bgeu x10, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x11, 0x4898d1779e340b55 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bgeu x11, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bgeu x11, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x15, 0xce74395f1c375f65 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x15, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x15, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x15, 0x5eb46cf7bb9dee51 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bgeu x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x5555555555555555 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bgeu x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x25, 0xdeaec68d04769d78 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bgeu x25, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bgeu x25, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x9, 0x2c235f791a4cb88c # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bgeu x9, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bgeu x9, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x2, 0xfeea1236bf860062 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000000 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x14, 0x3cb53e583539e8c8 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
bgeu x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
bgeu x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x27, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x27, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x27, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x3, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bgeu x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bgeu x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x1, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bgeu x1, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bgeu x1, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x20, 0x0000000000000000 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
bgeu x20, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
bgeu x20, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x12, 0x0000000000000000 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bgeu x12, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bgeu x12, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000000000000 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
bgeu x15, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7fffffffffffffff # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
bgeu x15, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000000000000 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bgeu x3, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bgeu x3, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x9, 0x0000000000000000 # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bgeu x9, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bgeu x9, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x18, 0x0000000000000000 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bgeu x18, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bgeu x18, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x17, 0x0000000000000000 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bgeu x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bgeu x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000000000000 # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x21, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x21, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x21, 0x0000000000000000 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
bgeu x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5555555555555555 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
bgeu x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x9, 0x0000000000000000 # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x9, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x9, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x25, 0x0000000000000000 # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000fffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x23, 0x0000000000000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x28, 0x0000000000000000 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
bgeu x28, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
bgeu x28, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x27, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
bgeu x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000000 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
bgeu x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x30, 0x0000000000000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bgeu x30, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000000000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bgeu x30, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x13, 0x0000000000000001 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bgeu x13, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bgeu x13, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x31, 0x0000000000000001 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x2, 0x0000000000000001 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bgeu x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000001 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bgeu x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x23, 0x0000000000000001 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
bgeu x23, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
bgeu x23, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x27, 0x0000000000000001 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
bgeu x27, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
bgeu x27, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x2, 0x0000000000000001 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x2, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x2, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000000000001 # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
bgeu x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffffffffffe # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
bgeu x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x19, 0x0000000000000001 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x0000000000000001 # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x30, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x30, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x19, 0x0000000000000001 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
bgeu x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5555555555555555 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
bgeu x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x6, 0x0000000000000001 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
bgeu x6, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
bgeu x6, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x13, 0x0000000000000001 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bgeu x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000fffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bgeu x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x18, 0x0000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bgeu x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bgeu x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x19, 0x0000000000000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bgeu x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bgeu x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x12, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x12, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bgeu x12, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x14, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bgeu x14, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bgeu x14, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x20, 0x0000000000000002 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bgeu x20, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bgeu x20, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x27, 0x0000000000000002 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bgeu x27, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bgeu x27, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x5, 0x0000000000000002 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bgeu x5, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bgeu x5, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x30, 0x0000000000000002 # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7fffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000002 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x30, 0x0000000000000002 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bgeu x30, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xffffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bgeu x30, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x18, 0x0000000000000002 # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
bgeu x18, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xfffffffffffffffe # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
bgeu x18, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x12, 0x0000000000000002 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x0000000000000002 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x6, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x6, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x25, 0x0000000000000002 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5555555555555555 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x30, 0x0000000000000002 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bgeu x30, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000ffffffff # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bgeu x30, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x16, 0x0000000000000002 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
bgeu x16, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000000fffffffe # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
bgeu x16, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x24, 0x0000000000000002 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bgeu x24, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000000 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bgeu x24, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x26, 0x0000000000000002 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bgeu x26, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000001 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bgeu x26, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x14, 0x8000000000000000 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
bgeu x14, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
bgeu x14, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x23, 0x8000000000000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bgeu x23, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bgeu x23, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x27, 0x8000000000000000 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
bgeu x27, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000002 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
bgeu x27, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x17, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bgeu x17, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bgeu x17, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x23, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
bgeu x23, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
bgeu x23, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x23, 0x8000000000000000 # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x13, 0x8000000000000000 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffffffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x1, 0x8000000000000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x17, 0x8000000000000000 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bgeu x17, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bgeu x17, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x21, 0x8000000000000000 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
bgeu x21, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
bgeu x21, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x8000000000000000 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x11, 0x8000000000000000 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bgeu x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bgeu x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x15, 0x8000000000000000 # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bgeu x15, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bgeu x15, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x17, 0x8000000000000000 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bgeu x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bgeu x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x29, 0x8000000000000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
bgeu x29, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000100000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
bgeu x29, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x9, 0x8000000000000000 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
bgeu x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000100000001 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
bgeu x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x25, 0x8000000000000001 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
bgeu x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
bgeu x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x19, 0x8000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bgeu x19, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bgeu x19, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x13, 0x8000000000000001 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bgeu x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bgeu x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x25, 0x8000000000000001 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bgeu x25, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bgeu x25, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x3, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bgeu x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bgeu x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x25, 0x8000000000000001 # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffffffffffff # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x20, 0x8000000000000001 # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bgeu x20, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bgeu x20, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x29, 0x8000000000000001 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xffffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x8, 0x8000000000000001 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bgeu x8, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bgeu x8, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x9, 0x8000000000000001 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
bgeu x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
bgeu x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x8000000000000001 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x12, 0x8000000000000001 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5555555555555555 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x10, 0x8000000000000001 # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
bgeu x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
bgeu x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x3, 0x8000000000000001 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
bgeu x3, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000000 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
bgeu x3, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x28, 0x8000000000000001 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bgeu x28, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bgeu x28, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x21, 0x7fffffffffffffff # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bgeu x21, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bgeu x21, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x9, 0x7fffffffffffffff # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
bgeu x9, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000001 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
bgeu x9, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x8, 0x7fffffffffffffff # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bgeu x8, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bgeu x8, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x20, 0x7fffffffffffffff # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x23, 0x7fffffffffffffff # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bgeu x23, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bgeu x23, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x14, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
bgeu x14, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
bgeu x14, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x3, 0x7fffffffffffffff # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bgeu x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffffffffffe # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bgeu x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x29, 0x7fffffffffffffff # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
bgeu x29, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xffffffffffffffff # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
bgeu x29, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x31, 0x7fffffffffffffff # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bgeu x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bgeu x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x12, 0x7fffffffffffffff # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x7fffffffffffffff # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x6, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x6, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x21, 0x7fffffffffffffff # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
bgeu x21, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5555555555555555 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
bgeu x21, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
bgeu x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000ffffffff # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
bgeu x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x20, 0x7fffffffffffffff # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x20, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x20, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x6, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
bgeu x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
bgeu x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x7, 0x7fffffffffffffff # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bgeu x7, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bgeu x7, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x24, 0x7ffffffffffffffe # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bgeu x24, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bgeu x24, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x2, 0x7ffffffffffffffe # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
bgeu x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000001 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
bgeu x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x22, 0x7ffffffffffffffe # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bgeu x22, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bgeu x22, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x21, 0x7ffffffffffffffe # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
bgeu x21, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x8000000000000000 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
bgeu x21, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x1, 0x7ffffffffffffffe # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bgeu x1, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bgeu x1, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x30, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7fffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x30, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bgeu x30, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bgeu x30, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0x7ffffffffffffffe # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bgeu x19, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xffffffffffffffff # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bgeu x19, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x21, 0x7ffffffffffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
bgeu x21, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffffffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
bgeu x21, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x12, 0x7ffffffffffffffe # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
bgeu x12, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x7ffffffffffffffe # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x29, 0x7ffffffffffffffe # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bgeu x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bgeu x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x9, 0x7ffffffffffffffe # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
bgeu x9, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
bgeu x9, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x3, 0x7ffffffffffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bgeu x3, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bgeu x3, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x23, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
bgeu x23, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
bgeu x23, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x19, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x18, 0xffffffffffffffff # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
bgeu x18, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000000 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
bgeu x18, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x26, 0xffffffffffffffff # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
bgeu x26, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
bgeu x26, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x7, 0xffffffffffffffff # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bgeu x7, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bgeu x7, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x8, 0xffffffffffffffff # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bgeu x8, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bgeu x8, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x27, 0xffffffffffffffff # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x2, 0xffffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bgeu x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7fffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bgeu x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x15, 0xffffffffffffffff # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bgeu x15, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bgeu x15, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x1, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bgeu x1, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bgeu x1, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x8, 0xffffffffffffffff # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bgeu x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bgeu x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x1, 0xffffffffffffffff # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bgeu x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bgeu x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0xffffffffffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x1, 0xffffffffffffffff # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bgeu x1, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5555555555555555 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bgeu x1, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x8, 0xffffffffffffffff # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x7, 0xffffffffffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x12, 0xffffffffffffffff # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bgeu x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000000 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bgeu x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x18, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bgeu x18, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bgeu x18, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x15, 0xfffffffffffffffe # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bgeu x15, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bgeu x15, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x3, 0xfffffffffffffffe # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bgeu x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bgeu x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x1, 0xfffffffffffffffe # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
bgeu x1, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
bgeu x1, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x3, 0xfffffffffffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bgeu x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000000 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bgeu x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x25, 0xfffffffffffffffe # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bgeu x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bgeu x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x25, 0xfffffffffffffffe # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bgeu x25, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bgeu x25, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x23, 0xfffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bgeu x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bgeu x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x16, 0xfffffffffffffffe # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bgeu x16, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bgeu x16, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bgeu x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bgeu x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x9, 0xfffffffffffffffe # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0xfffffffffffffffe # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x16, 0xfffffffffffffffe # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
bgeu x16, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5555555555555555 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
bgeu x16, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x20, 0xfffffffffffffffe # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bgeu x20, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bgeu x20, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x17, 0xfffffffffffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x17, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x17, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x25, 0xfffffffffffffffe # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
bgeu x25, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000100000000 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
bgeu x25, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x6, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bgeu x6, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bgeu x6, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000000 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bgeu x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bgeu x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000002 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bgeu x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bgeu x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x26, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x26, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bgeu x24, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bgeu x24, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
bgeu x27, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
bgeu x27, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
bgeu x25, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffffffffffe # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
bgeu x25, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x17, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x17, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
bgeu x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5555555555555555 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
bgeu x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bgeu x2, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bgeu x2, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bgeu x6, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bgeu x6, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bgeu x27, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bgeu x27, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bgeu x18, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bgeu x18, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
bgeu x24, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
bgeu x24, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
bgeu x28, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000000 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
bgeu x28, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x11, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bgeu x11, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bgeu x1, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bgeu x1, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bgeu x2, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffffffffffe # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bgeu x2, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
bgeu x9, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
bgeu x9, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bgeu x5, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xfffffffffffffffe # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bgeu x5, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bgeu x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bgeu x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x29, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x29, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bgeu x11, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bgeu x11, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x20, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000ffffffff # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
bgeu x20, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
bgeu x26, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000fffffffe # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
bgeu x26, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bgeu x21, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bgeu x21, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bgeu x23, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bgeu x23, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x21, 0x5555555555555555 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bgeu x21, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bgeu x21, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x31, 0x5555555555555555 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bgeu x31, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bgeu x31, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x12, 0x5555555555555555 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bgeu x12, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bgeu x12, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x20, 0x5555555555555555 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bgeu x20, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bgeu x20, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x8, 0x5555555555555555 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
bgeu x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
bgeu x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x20, 0x5555555555555555 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bgeu x20, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bgeu x20, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x2, 0x5555555555555555 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bgeu x2, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffffffffffe # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bgeu x2, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x6, 0x5555555555555555 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bgeu x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bgeu x6, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bgeu x6, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x28, 0x5555555555555555 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bgeu x28, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bgeu x28, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x5555555555555555 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x7, 0x5555555555555555 # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x14, 0x5555555555555555 # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bgeu x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bgeu x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x7, 0x5555555555555555 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bgeu x7, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bgeu x7, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x26, 0x5555555555555555 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bgeu x26, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bgeu x26, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x24, 0x5555555555555555 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
bgeu x24, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000001 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
bgeu x24, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x31, 0x00000000ffffffff # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bgeu x31, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bgeu x31, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x17, 0x00000000ffffffff # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bgeu x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bgeu x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x20, 0x00000000ffffffff # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bgeu x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x7, 0x00000000ffffffff # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
bgeu x7, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x8000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
bgeu x7, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x2, 0x00000000ffffffff # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bgeu x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bgeu x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bgeu x7, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7fffffffffffffff # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bgeu x7, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x26, 0x00000000ffffffff # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bgeu x26, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffffffffffe # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bgeu x26, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bgeu x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bgeu x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x30, 0x00000000ffffffff # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bgeu x30, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bgeu x30, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x27, 0x00000000ffffffff # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000ffffffff # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x5, 0x00000000ffffffff # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
bgeu x5, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5555555555555555 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
bgeu x5, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x25, 0x00000000ffffffff # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
bgeu x25, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x28, 0x00000000ffffffff # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
bgeu x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000000fffffffe # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
bgeu x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x21, 0x00000000ffffffff # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bgeu x21, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bgeu x21, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x17, 0x00000000ffffffff # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bgeu x17, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bgeu x17, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x23, 0x00000000fffffffe # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x1, 0x00000000fffffffe # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bgeu x1, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000001 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bgeu x1, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x10, 0x00000000fffffffe # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bgeu x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bgeu x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x15, 0x00000000fffffffe # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bgeu x15, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bgeu x15, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x28, 0x00000000fffffffe # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bgeu x28, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bgeu x28, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x9, 0x00000000fffffffe # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
bgeu x9, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffffffffffff # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
bgeu x9, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x12, 0x00000000fffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bgeu x12, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bgeu x12, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x25, 0x00000000fffffffe # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
bgeu x25, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xffffffffffffffff # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
bgeu x25, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x31, 0x00000000fffffffe # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bgeu x31, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffffffffffe # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bgeu x31, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x21, 0x00000000fffffffe # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bgeu x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bgeu x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x00000000fffffffe # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x31, 0x00000000fffffffe # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bgeu x31, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5555555555555555 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bgeu x31, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x20, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000ffffffff # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x26, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bgeu x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bgeu x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x27, 0x00000000fffffffe # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bgeu x27, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bgeu x27, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x2, 0x00000000fffffffe # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bgeu x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000001 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bgeu x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x8, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
bgeu x8, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
bgeu x8, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x12, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bgeu x12, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bgeu x12, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x13, 0x0000000100000000 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bgeu x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000002 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bgeu x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x21, 0x0000000100000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
bgeu x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x8000000000000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
bgeu x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x26, 0x0000000100000000 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x7, 0x0000000100000000 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7fffffffffffffff # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x15, 0x0000000100000000 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
bgeu x15, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffffffffffe # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
bgeu x15, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x10, 0x0000000100000000 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
bgeu x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffffffffffff # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
bgeu x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x31, 0x0000000100000000 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bgeu x31, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffffffffffe # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bgeu x31, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x5, 0x0000000100000000 # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
bgeu x5, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
bgeu x5, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000100000000 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x27, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x27, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x13, 0x0000000100000000 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bgeu x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bgeu x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x16, 0x0000000100000000 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
bgeu x16, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000000ffffffff # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
bgeu x16, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bgeu x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x14, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x18, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
bgeu x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000001 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
bgeu x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x13, 0x0000000100000001 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bgeu x13, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bgeu x13, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x31, 0x0000000100000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
bgeu x31, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
bgeu x31, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x24, 0x0000000100000001 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bgeu x24, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000002 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bgeu x24, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x14, 0x0000000100000001 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bgeu x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bgeu x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x22, 0x0000000100000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
bgeu x22, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
bgeu x22, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x14, 0x0000000100000001 # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bgeu x14, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bgeu x14, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x23, 0x0000000100000001 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffffffffffe # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000001 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bgeu x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bgeu x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
bgeu x24, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfffffffffffffffe # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
bgeu x24, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x7, 0x0000000100000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
bgeu x7, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
bgeu x7, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x0000000100000001 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x30, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bgeu x30, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x23, 0x0000000100000001 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
bgeu x23, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5555555555555555 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
bgeu x23, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x6, 0x0000000100000001 # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
bgeu x6, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
bgeu x6, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x9, 0x0000000100000001 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
bgeu x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
bgeu x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x1, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bgeu x1, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bgeu x1, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x26, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bgeu x26, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bgeu x26, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xa655f9f83225f2f9 # initialize rs1
li x0, 0xe093b340dd2fb61d # initialize rs2
bgeu x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xe093b340dd2fb61d # initialize rs1
li x0, 0xe093b340dd2fb61d # initialize rs2
bgeu x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xc11b9bbf5500dd2d # initialize rs1
li x1, 0xf7af0c096c3eac03 # initialize rs2
bgeu x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xf7af0c096c3eac03 # initialize rs1
li x1, 0xf7af0c096c3eac03 # initialize rs2
bgeu x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x4cb51dacad1dc8e6 # initialize rs1
li x2, 0x59dd634fa6720ad3 # initialize rs2
bgeu x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x59dd634fa6720ad3 # initialize rs1
li x2, 0x59dd634fa6720ad3 # initialize rs2
bgeu x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x40c4f036884af756 # initialize rs1
li x3, 0x31c43883b7ebcfc0 # initialize rs2
bgeu x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x31c43883b7ebcfc0 # initialize rs1
li x3, 0x31c43883b7ebcfc0 # initialize rs2
bgeu x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x47a128ce9623fb5d # initialize rs1
li x4, 0x9e36421bc2577580 # initialize rs2
bgeu x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x9e36421bc2577580 # initialize rs1
li x4, 0x9e36421bc2577580 # initialize rs2
bgeu x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9e47398a810a2712 # initialize rs1
li x5, 0x3418dd6171f98c45 # initialize rs2
bgeu x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x3418dd6171f98c45 # initialize rs1
li x5, 0x3418dd6171f98c45 # initialize rs2
bgeu x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x61acb331202b3ed7 # initialize rs1
li x6, 0x2b19edef78ce45ee # initialize rs2
bgeu x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x2b19edef78ce45ee # initialize rs1
li x6, 0x2b19edef78ce45ee # initialize rs2
bgeu x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd14fb1bfb4458ac1 # initialize rs1
li x7, 0xccf2a3df96002871 # initialize rs2
bgeu x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xccf2a3df96002871 # initialize rs1
li x7, 0xccf2a3df96002871 # initialize rs2
bgeu x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x8c5f9d8041a2c65f # initialize rs1
li x8, 0x861f8020170952df # initialize rs2
bgeu x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x861f8020170952df # initialize rs1
li x8, 0x861f8020170952df # initialize rs2
bgeu x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xa16d056470cb359c # initialize rs1
li x9, 0x1f7cac8d20fb4c5e # initialize rs2
bgeu x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x1f7cac8d20fb4c5e # initialize rs1
li x9, 0x1f7cac8d20fb4c5e # initialize rs2
bgeu x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x213a0d77bfaa2bcf # initialize rs1
li x10, 0x76951d6cc4e30192 # initialize rs2
bgeu x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x76951d6cc4e30192 # initialize rs1
li x10, 0x76951d6cc4e30192 # initialize rs2
bgeu x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x236d31d5762c63b4 # initialize rs1
li x11, 0x5e8678f187ca7418 # initialize rs2
bgeu x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5e8678f187ca7418 # initialize rs1
li x11, 0x5e8678f187ca7418 # initialize rs2
bgeu x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x912e828b98c7008f # initialize rs1
li x12, 0x3929898f8f1c7661 # initialize rs2
bgeu x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x3929898f8f1c7661 # initialize rs1
li x12, 0x3929898f8f1c7661 # initialize rs2
bgeu x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x51484eb241737ca6 # initialize rs1
li x13, 0x06dc72ef7f7094d9 # initialize rs2
bgeu x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x06dc72ef7f7094d9 # initialize rs1
li x13, 0x06dc72ef7f7094d9 # initialize rs2
bgeu x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x7924709d8c2df752 # initialize rs1
li x14, 0xd58b12f45546e556 # initialize rs2
bgeu x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xd58b12f45546e556 # initialize rs1
li x14, 0xd58b12f45546e556 # initialize rs2
bgeu x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xdc3a266812d264c5 # initialize rs1
li x15, 0x39e7f3c547312c1e # initialize rs2
bgeu x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x39e7f3c547312c1e # initialize rs1
li x15, 0x39e7f3c547312c1e # initialize rs2
bgeu x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x665fde3bee6006b5 # initialize rs1
li x16, 0x80ce46fe486a9559 # initialize rs2
bgeu x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x80ce46fe486a9559 # initialize rs1
li x16, 0x80ce46fe486a9559 # initialize rs2
bgeu x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x6270123f4c5a9183 # initialize rs1
li x17, 0x129516d4ee0e9644 # initialize rs2
bgeu x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x129516d4ee0e9644 # initialize rs1
li x17, 0x129516d4ee0e9644 # initialize rs2
bgeu x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x44892a13c452663c # initialize rs1
li x18, 0xbf33662176fd1ca1 # initialize rs2
bgeu x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xbf33662176fd1ca1 # initialize rs1
li x18, 0xbf33662176fd1ca1 # initialize rs2
bgeu x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x8535235536fff49a # initialize rs1
li x19, 0xe38525e03357c5c4 # initialize rs2
bgeu x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xe38525e03357c5c4 # initialize rs1
li x19, 0xe38525e03357c5c4 # initialize rs2
bgeu x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x773d491db3fa9759 # initialize rs1
li x20, 0x273e83ad16fe1fe8 # initialize rs2
bgeu x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x273e83ad16fe1fe8 # initialize rs1
li x20, 0x273e83ad16fe1fe8 # initialize rs2
bgeu x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x9045820f80114cdb # initialize rs1
li x21, 0x407743541f80075a # initialize rs2
bgeu x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x407743541f80075a # initialize rs1
li x21, 0x407743541f80075a # initialize rs2
bgeu x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xaaf311252da01588 # initialize rs1
li x22, 0xacb0365c45d2cb63 # initialize rs2
bgeu x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xacb0365c45d2cb63 # initialize rs1
li x22, 0xacb0365c45d2cb63 # initialize rs2
bgeu x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xb2171975801f3648 # initialize rs1
li x23, 0xe1bdd07bb50548ff # initialize rs2
bgeu x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xe1bdd07bb50548ff # initialize rs1
li x23, 0xe1bdd07bb50548ff # initialize rs2
bgeu x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xacbdfab123be6dc8 # initialize rs1
li x24, 0x77c4a9e28edbc2fc # initialize rs2
bgeu x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x77c4a9e28edbc2fc # initialize rs1
li x24, 0x77c4a9e28edbc2fc # initialize rs2
bgeu x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x22174dfe2184c741 # initialize rs1
li x25, 0xf04d3f0595aafda8 # initialize rs2
bgeu x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xf04d3f0595aafda8 # initialize rs1
li x25, 0xf04d3f0595aafda8 # initialize rs2
bgeu x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xe525a084309a8ab3 # initialize rs1
li x26, 0x73082f071a85becc # initialize rs2
bgeu x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x73082f071a85becc # initialize rs1
li x26, 0x73082f071a85becc # initialize rs2
bgeu x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xdb81f3b072015a07 # initialize rs1
li x27, 0x11ad18a210286dc7 # initialize rs2
bgeu x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x11ad18a210286dc7 # initialize rs1
li x27, 0x11ad18a210286dc7 # initialize rs2
bgeu x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x4fe98d29e8f8cbe4 # initialize rs1
li x28, 0xf4125e6e80dbf8e3 # initialize rs2
bgeu x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xf4125e6e80dbf8e3 # initialize rs1
li x28, 0xf4125e6e80dbf8e3 # initialize rs2
bgeu x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x5c789ad367858a51 # initialize rs1
li x29, 0x0c5f9b67c5d55509 # initialize rs2
bgeu x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0c5f9b67c5d55509 # initialize rs1
li x29, 0x0c5f9b67c5d55509 # initialize rs2
bgeu x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x4849247f1eb52f7b # initialize rs1
li x30, 0x22e6865556975fef # initialize rs2
bgeu x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x22e6865556975fef # initialize rs1
li x30, 0x22e6865556975fef # initialize rs2
bgeu x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xd83c19f5734f88ed # initialize rs1
li x31, 0x727e40c00c63bf80 # initialize rs2
bgeu x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x727e40c00c63bf80 # initialize rs1
li x31, 0x727e40c00c63bf80 # initialize rs2
bgeu x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bgeu x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x30, x8, x26 # perform first operation
bgeu x6, x21, arbitraryLabel127
nop
arbitraryLabel127:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x5, x16, x1 # perform first operation
bgeu x21, x11, arbitraryLabel128
nop
arbitraryLabel128:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x5, x11 # perform first operation
bgeu x6, x9, arbitraryLabel129
nop
arbitraryLabel129:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x27, x26 # perform first operation
bgeu x18, x7, arbitraryLabel130
nop
arbitraryLabel130:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x21, x6 # perform first operation
bgeu x28, x15, arbitraryLabel131
nop
arbitraryLabel131:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x30, x22 # perform first operation
bgeu x3, x29, arbitraryLabel132
nop
arbitraryLabel132:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-and.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x93c3e53cae7a1f00 # initialize rs1
li x17, 0x3e35faa86213db88 # initialize rs2
and x20, x0, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xceda80b373d750b7 # initialize rs1
li x13, 0xbeae16261d11c79a # initialize rs2
and x18, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x40cee6b81c380a37 # initialize rs1
li x16, 0x34b1822b22a51bc2 # initialize rs2
and x13, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x6b5c2f291be2b7ce # initialize rs1
li x10, 0x037aaf5e4a841dbe # initialize rs2
and x21, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc2f51e3cdb863aea # initialize rs1
li x17, 0x14d0b1e4de871d6c # initialize rs2
and x16, x4, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xebdf835bcf8d5e01 # initialize rs1
li x6, 0x5100c4f2c648320c # initialize rs2
and x22, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x22, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0x2aba7df90f5cc988 # initialize rs1
li x11, 0xec2411ef0ae175a9 # initialize rs2
and x25, x6, x11 # perform operation
RVTEST_SIGUPD(x7, x0, x25, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9cb0131f6cfb178f # initialize rs1
li x11, 0x2ac13b8a51a81c27 # initialize rs2
and x27, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x46476ddf09aea206 # initialize rs1
li x17, 0x4ea94bbbca8fdfe8 # initialize rs2
and x25, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xe571583fae886c58 # initialize rs1
li x8, 0x4156f6c3b22899d5 # initialize rs2
and x2, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xa27a11d3a3907333 # initialize rs1
li x25, 0x982b6a3f6349fa0a # initialize rs2
and x26, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xc6a61c28deb91bf4 # initialize rs1
li x28, 0x218447d3417343bd # initialize rs2
and x25, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xeea007b9e9e0b1ef # initialize rs1
li x15, 0x81dc321a40a0100b # initialize rs2
and x1, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xf74a0c35d06cc994 # initialize rs1
li x11, 0x61cc50e5fc9fd75e # initialize rs2
and x24, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xca2d6f3554f62c5a # initialize rs1
li x30, 0xf2858ccd66a490eb # initialize rs2
and x12, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x932e8780cef5443e # initialize rs1
li x19, 0x5a85612a87ca0af3 # initialize rs2
and x8, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x4313e7197dc85bd7 # initialize rs1
li x19, 0xeaf918b3241dda2d # initialize rs2
and x31, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xc464be3c38d0fc46 # initialize rs1
li x3, 0x43792f6852ed3f7a # initialize rs2
and x9, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x4abf01a22acdbaaf # initialize rs1
li x22, 0x2ed6c284292cb690 # initialize rs2
and x25, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xb047a6ad548f303a # initialize rs1
li x21, 0x59fe5dd666092c9c # initialize rs2
and x18, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x37220ba1e05c0a7d # initialize rs1
li x31, 0xe69bc1d4eae2cb4e # initialize rs2
and x16, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x9858db9d89d9301f # initialize rs1
li x12, 0xe3c22ebb0c338944 # initialize rs2
and x26, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x48116fd5c9401b04 # initialize rs1
li x24, 0x36ed5722a71f80b1 # initialize rs2
and x13, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x47c4e85cd4dc354f # initialize rs1
li x8, 0x7192ad1b0ff9967a # initialize rs2
and x29, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x159574957ea3586d # initialize rs1
li x14, 0x903568cac918e72c # initialize rs2
and x23, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x022e0b1dea18865c # initialize rs1
li x24, 0x2e2034fc34d8d50a # initialize rs2
and x3, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x00ddd337a60e9713 # initialize rs1
li x25, 0x54ecc24d9fc9cb0a # initialize rs2
and x12, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x44cfc23418ded206 # initialize rs1
li x23, 0xedb0ead623ec861e # initialize rs2
and x8, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xb16cb3b48bff8b6f # initialize rs1
li x14, 0x042093e41fec0236 # initialize rs2
and x26, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x2a5507873cb1ffe0 # initialize rs1
li x1, 0x4993d06924d41fd5 # initialize rs2
and x7, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe2de0bb7413fb93f # initialize rs1
li x3, 0x306ca3a99bf01d50 # initialize rs2
and x27, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xe28a98364dd141f5 # initialize rs1
li x5, 0x3a60e7bd3f1436cc # initialize rs2
and x23, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x15, 0x6e93378f7b7dac62 # initialize rs1
li x0, 0x0c9bdc73e402e8ca # initialize rs2
and x9, x15, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x17, 0x83a636a0f43d13ae # initialize rs1
li x1, 0x215efd5532579398 # initialize rs2
and x16, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x27, 0x1bd1d6a9270bb11f # initialize rs1
li x2, 0x7ccfc95b64542c66 # initialize rs2
and x31, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x7, 0xe60b681b22a878fc # initialize rs1
li x3, 0xbd465598d84d58aa # initialize rs2
and x19, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xde30f2b9d6d8c962 # initialize rs1
li x4, 0x965bd94e20f8109e # initialize rs2
and x14, x15, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x6920d83f89a4bfb6 # initialize rs1
li x5, 0x39dc3270789f5e17 # initialize rs2
and x14, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x14, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0xf16339fbdb48be1d # initialize rs1
li x6, 0xeb0511e1c1b86abe # initialize rs2
and x12, x4, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0x515d75b94cd511c2 # initialize rs1
li x7, 0xada1408fc954eb07 # initialize rs2
and x19, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x5, 0x831ded30c001e6ce # initialize rs1
li x8, 0x9ca787d2654a93e3 # initialize rs2
and x20, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x8, 0xc69cafaedd58ba11 # initialize rs1
li x9, 0x23272c6c437f3034 # initialize rs2
and x2, x8, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x9, 0x4d55876ad24d4df2 # initialize rs1
li x10, 0x5a02dbb408d0b6f0 # initialize rs2
and x29, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x14, 0xfc9f2d915e9f032a # initialize rs1
li x11, 0xc01f3cee8726842e # initialize rs2
and x5, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x19, 0x405ce9ee976a7e37 # initialize rs1
li x12, 0xe4d53d9a1ed7e0b6 # initialize rs2
and x21, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x21, 0x140d6a3d51491144 # initialize rs1
li x13, 0x6ed4ecf41fd66d89 # initialize rs2
and x12, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x3, 0xebb33fcdae5f9408 # initialize rs1
li x14, 0x716f2402e787cd4c # initialize rs2
and x30, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x22, 0x64d030515cdee9eb # initialize rs1
li x15, 0x08848bf02390b88f # initialize rs2
and x19, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x20, 0x8578aaa7ced8cdaf # initialize rs1
li x16, 0x10f23a316e1d4f4d # initialize rs2
and x6, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x9, 0xf2aa19ff0faaf4c1 # initialize rs1
li x17, 0x4642a6457c3a4b0f # initialize rs2
and x23, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x10, 0x5aaa64e280d3be37 # initialize rs1
li x18, 0xa4970bafb8cd7880 # initialize rs2
and x7, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x8, 0x20b064a84fd9c0f2 # initialize rs1
li x19, 0x5849b90453b3b4ba # initialize rs2
and x26, x8, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x13, 0xc6e924a3e2cd9f33 # initialize rs1
li x20, 0xc09763156beee3d7 # initialize rs2
and x17, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x16, 0xc8c229f3f555a651 # initialize rs1
li x21, 0x442730763c075f3b # initialize rs2
and x1, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x21, 0xcfdebc962e00f89b # initialize rs1
li x22, 0x8eb49009a59f9ee0 # initialize rs2
and x17, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x31, 0xe3a9c98497cd2acd # initialize rs1
li x23, 0xbdeaba80dce2ac62 # initialize rs2
and x15, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x17, 0xfbf78b738e248b24 # initialize rs1
li x24, 0xca43bd7a459f2021 # initialize rs2
and x27, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x31, 0x589cf5b3cfedced7 # initialize rs1
li x25, 0xfaecefe119a8e070 # initialize rs2
and x7, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x16, 0x15ff563528468a22 # initialize rs1
li x26, 0x2d88a1c0360565d8 # initialize rs2
and x23, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x15, 0xc7bddc9f8990f352 # initialize rs1
li x27, 0x543d203c3bb56ea5 # initialize rs2
and x11, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x22, 0x00d3145841172c81 # initialize rs1
li x28, 0xb52ef35c77f80a25 # initialize rs2
and x23, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x21, 0x8447f71860ee5bce # initialize rs1
li x29, 0x07de816b9eba6998 # initialize rs2
and x20, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x25, 0x9336616cdb246047 # initialize rs1
li x30, 0x0fd4eb77eda57350 # initialize rs2
and x5, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x29, 0x2301714b31daa258 # initialize rs1
li x31, 0x7b2376ca7cbb164c # initialize rs2
and x26, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 504)

# Testcase cp_rd (Test destination rd = x0)
li x14, 0x0884b289d3d869e2 # initialize rs1
li x10, 0x125a4a4bfeb0415d # initialize rs2
and x0, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x27, 0xee7a2bb046ebbe13 # initialize rs1
li x1, 0x3b92e4cbfe90b8a7 # initialize rs2
and x1, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x19, 0xf14854a71111a08e # initialize rs1
li x1, 0x16e0f7737146e3e8 # initialize rs2
and x2, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x18, 0x7d1d01024165f189 # initialize rs1
li x20, 0xa7c67e6f0fabbb8c # initialize rs2
and x3, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x30, 0x7cca7a0a4696758b # initialize rs1
li x24, 0xc6bc0bafe5e194a9 # initialize rs2
and x4, x30, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x31, 0x18e6b02d9ff297c7 # initialize rs1
li x14, 0xa68f9f092cfaf0cb # initialize rs2
and x5, x31, x14 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x7, 0xa4a5edb4872146f3 # initialize rs1
li x3, 0x0a30b9b33b716f5c # initialize rs2
and x6, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
li x1, 0xc9a5d28051bce2f2 # initialize rs1
li x24, 0xcf757bbf99806e32 # initialize rs2
and x7, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x24, 0xeb6b03f135a207d6 # initialize rs1
li x27, 0x3f17bfc4c5c39e44 # initialize rs2
and x8, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0xb1354bde4417a50b # initialize rs1
li x6, 0xc48456aab82d551e # initialize rs2
and x9, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x18, 0x0313dfe88e9de947 # initialize rs1
li x3, 0x263e5331e6557411 # initialize rs2
and x10, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x17, 0x5944c054a5d6120f # initialize rs1
li x18, 0x63d08b467f5618c4 # initialize rs2
and x11, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x25, 0xef48654eb298330c # initialize rs1
li x29, 0x7471766dd404fa43 # initialize rs2
and x12, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x27, 0x8caf7d6a3e22f4ca # initialize rs1
li x16, 0xfd3d65f58f4db2a3 # initialize rs2
and x13, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x6, 0xc4ecbda7702f7034 # initialize rs1
li x11, 0xdc2bc18726190f95 # initialize rs2
and x14, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x12, 0xa75f9f19bf725d8c # initialize rs1
li x16, 0xfd5ec05cc6da0be8 # initialize rs2
and x15, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x6, 0xc0f11842d9d8c55b # initialize rs1
li x18, 0x6179a64ca8a0833e # initialize rs2
and x16, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x18, 0x3771dd21e8dade52 # initialize rs1
li x3, 0x1ea8eaf0835bcd9c # initialize rs2
and x17, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0xa5265caec727bb07 # initialize rs1
li x22, 0x5d87202626fb3a0a # initialize rs2
and x18, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x16, 0x1ddc9a068c450dfb # initialize rs1
li x1, 0xdfcfbce4f48136f6 # initialize rs2
and x19, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x28, 0x86545e8e02b8bf59 # initialize rs1
li x17, 0x0af40098017495a2 # initialize rs2
and x20, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x30, 0x5a5c3ee452e17e2c # initialize rs1
li x11, 0x23599491e2c1c565 # initialize rs2
and x21, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x11, 0xcc03e08ed9401ba6 # initialize rs1
li x7, 0x9b1d33a0b46f14f6 # initialize rs2
and x22, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x24, 0x5205210b5f50641f # initialize rs1
li x10, 0x6a5c0fd43ec4f220 # initialize rs2
and x23, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x31, 0x851d6dfcce66823d # initialize rs1
li x10, 0xe77b5c7506e98199 # initialize rs2
and x24, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x29, 0x9105f1ff37ed8137 # initialize rs1
li x31, 0x7a0cdaa2379601e0 # initialize rs2
and x25, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x17, 0x7c976571ae009420 # initialize rs1
li x27, 0x944ec592095322f7 # initialize rs2
and x26, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x24, 0x1dacc0e301eaae28 # initialize rs1
li x31, 0xfa16857a44a54175 # initialize rs2
and x27, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x8, 0x960cd9c0db17b7be # initialize rs1
li x20, 0xb374c8ff1cd44ee2 # initialize rs2
and x28, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x9, 0xbbbfe5951660007c # initialize rs1
li x7, 0xfa8d5e219bc239fc # initialize rs2
and x29, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x6, 0x84d8e49fd15efd1c # initialize rs1
li x19, 0x9eb681eb5ec93439 # initialize rs2
and x30, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x9, 0xcabac4a34260686e # initialize rs1
li x15, 0xe45c0a444f23ac29 # initialize rs2
and x31, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x17, 0x0000000000000000 # initialize rs1
li x11, 0xa64cb4f8b367d1a5 # initialize rs2
and x9, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x7, 0x0000000000000001 # initialize rs1
li x5, 0xa8ea8b2d1fe6ac5f # initialize rs2
and x14, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x25, 0x0000000000000002 # initialize rs1
li x10, 0xc0f5866ed5b1e615 # initialize rs2
and x5, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x6, 0x8000000000000000 # initialize rs1
li x8, 0xde89426c5f34e9e8 # initialize rs2
and x31, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x12, 0x8000000000000001 # initialize rs1
li x17, 0x61663c598fbca71e # initialize rs2
and x1, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x21, 0x7fffffffffffffff # initialize rs1
li x26, 0x17f5d5a5a99b8919 # initialize rs2
and x19, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x7, 0x7ffffffffffffffe # initialize rs1
li x30, 0xb78b9a70b814a99f # initialize rs2
and x31, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x29, 0xffffffffffffffff # initialize rs1
li x2, 0x570f005ddf9ae1e8 # initialize rs2
and x27, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x7, 0xfffffffffffffffe # initialize rs1
li x29, 0x26dd71c556606fd9 # initialize rs2
and x11, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x92770dab0a14f0f3 # initialize rs2
and x10, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x0a02a0191611ef41 # initialize rs2
and x22, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x27, 0x5555555555555555 # initialize rs1
li x6, 0x75067a016cab03cf # initialize rs2
and x13, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x23, 0xa164524727adbe06 # initialize rs2
and x24, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x14, 0x00000000fffffffe # initialize rs1
li x23, 0xeb600708d6e4314e # initialize rs2
and x3, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x15, 0x0000000100000000 # initialize rs1
li x10, 0x97375464630dd35e # initialize rs2
and x18, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x22, 0x0000000100000001 # initialize rs1
li x11, 0x7c4e229c4f41295d # initialize rs2
and x5, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x8, 0x86388a545df9a416 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
and x12, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0x2ce7a16c86099a65 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
and x15, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x17, 0xdc05f25aae91146b # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
and x2, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x15, 0x9edbcdcdd37eaa1d # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
and x31, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x28, 0xde39e9eed6a1ecf8 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
and x11, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x13, 0xee847dc071f02a4c # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
and x12, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x3, 0x3e916177361c58ac # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
and x30, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x30, 0x2046b4f3fc2081fe # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
and x8, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x22, 0x8b186f3fc207318c # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
and x6, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x20, 0x533a6760bad35bc1 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
and x6, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x6, 0xa686d539801b8d46 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x23, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x1, 0xf6f814db9284aaa6 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
and x5, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x24, 0x87af2d8dfc9b4fc3 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
and x17, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x8, 0x3f6b01bff95e9c5f # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
and x27, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x24, 0xb3a98b3a7c738cad # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
and x11, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x1, 0xabb9beb7347a3b5a # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
and x14, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x8, 0x0000000000000000 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
and x5, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x8, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
and x10, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x22, 0x0000000000000000 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
and x28, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x3, 0x0000000000000000 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
and x13, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x5, 0x0000000000000000 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
and x11, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000000000000 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
and x28, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000000000000 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
and x23, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x3, 0x0000000000000000 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
and x9, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000000000000 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
and x10, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x12, 0x0000000000000000 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
and x22, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0x0000000000000000 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x7, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x10, 0x0000000000000000 # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
and x29, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x22, 0x0000000000000000 # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
and x8, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x13, 0x0000000000000000 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
and x22, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x25, 0x0000000000000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
and x23, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x2, 0x0000000000000000 # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
and x23, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x12, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
and x18, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x12, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
and x16, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x8, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
and x18, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x6, 0x0000000000000001 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
and x21, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x11, 0x0000000000000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
and x27, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x18, 0x0000000000000001 # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
and x10, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x28, 0x0000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
and x8, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x12, 0x0000000000000001 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
and x20, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000000000001 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
and x16, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000000000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
and x25, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000000000001 # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x2, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x13, 0x0000000000000001 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
and x8, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x7, 0x0000000000000001 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
and x13, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x15, 0x0000000000000001 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
and x24, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x3, 0x0000000000000001 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
and x13, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x6, 0x0000000000000001 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
and x31, x6, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x8, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
and x2, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x28, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
and x6, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x12, 0x0000000000000002 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
and x7, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x28, 0x0000000000000002 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
and x12, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x14, 0x0000000000000002 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
and x5, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x7, 0x0000000000000002 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
and x18, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x27, 0x0000000000000002 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
and x7, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
and x5, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x7, 0x0000000000000002 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
and x30, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x18, 0x0000000000000002 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
and x19, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x0000000000000002 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x18, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x2, 0x0000000000000002 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
and x5, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x2, 0x0000000000000002 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
and x21, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x24, 0x0000000000000002 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
and x30, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x31, 0x0000000000000002 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
and x10, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x6, 0x0000000000000002 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
and x17, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x30, 0x8000000000000000 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
and x28, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x14, 0x8000000000000000 # initialize rs1
li x31, 0x0000000000000001 # initialize rs2
and x7, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x22, 0x8000000000000000 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
and x19, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x30, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
and x6, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x24, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
and x14, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x20, 0x8000000000000000 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
and x27, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x22, 0x8000000000000000 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
and x30, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x23, 0x8000000000000000 # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
and x19, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x24, 0x8000000000000000 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
and x9, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x14, 0x8000000000000000 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
and x18, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x8000000000000000 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x19, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x9, 0x8000000000000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
and x12, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x18, 0x8000000000000000 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
and x30, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x17, 0x8000000000000000 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
and x18, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x18, 0x8000000000000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
and x30, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x5, 0x8000000000000000 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
and x10, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x3, 0x8000000000000001 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
and x31, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x27, 0x8000000000000001 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
and x5, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x30, 0x8000000000000001 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
and x9, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x30, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
and x16, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x25, 0x8000000000000001 # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
and x15, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x13, 0x8000000000000001 # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
and x5, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x13, 0x8000000000000001 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
and x21, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x8, 0x8000000000000001 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
and x6, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x21, 0x8000000000000001 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
and x6, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x7, 0x8000000000000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
and x8, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x8000000000000001 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x16, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x6, 0x8000000000000001 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
and x29, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
and x3, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x8, 0x8000000000000001 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
and x22, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x25, 0x8000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
and x19, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x19, 0x8000000000000001 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
and x31, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x12, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
and x9, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x29, 0x7fffffffffffffff # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
and x15, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x18, 0x7fffffffffffffff # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
and x10, x18, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x11, 0x7fffffffffffffff # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
and x12, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x28, 0x7fffffffffffffff # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
and x20, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x16, 0x7fffffffffffffff # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
and x1, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x1, 0x7fffffffffffffff # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
and x22, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x26, 0x7fffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
and x7, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x1, 0x7fffffffffffffff # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
and x20, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x10, 0x7fffffffffffffff # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
and x28, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x7fffffffffffffff # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x16, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x18, 0x7fffffffffffffff # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
and x25, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x24, 0x7fffffffffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
and x9, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x30, 0x7fffffffffffffff # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
and x8, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x21, 0x7fffffffffffffff # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
and x2, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x13, 0x7fffffffffffffff # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
and x24, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x13, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
and x16, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x31, 0x7ffffffffffffffe # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
and x19, x31, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x13, 0x7ffffffffffffffe # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
and x27, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x15, 0x7ffffffffffffffe # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
and x27, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x18, 0x7ffffffffffffffe # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
and x22, x18, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x7, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
and x15, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
and x12, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0x7ffffffffffffffe # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
and x12, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
and x23, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x21, 0x7ffffffffffffffe # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
and x23, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x7ffffffffffffffe # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x11, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x26, 0x7ffffffffffffffe # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
and x28, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x26, 0x7ffffffffffffffe # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
and x22, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x20, 0x7ffffffffffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
and x29, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x31, 0x7ffffffffffffffe # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
and x30, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x22, 0x7ffffffffffffffe # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
and x21, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x31, 0xffffffffffffffff # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
and x23, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x3, 0xffffffffffffffff # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
and x29, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x30, 0xffffffffffffffff # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
and x25, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x19, 0xffffffffffffffff # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
and x10, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x18, 0xffffffffffffffff # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
and x8, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x13, 0xffffffffffffffff # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
and x22, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x14, 0xffffffffffffffff # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
and x1, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x18, 0xffffffffffffffff # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
and x26, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x30, 0xffffffffffffffff # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
and x10, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x31, 0xffffffffffffffff # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
and x6, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0xffffffffffffffff # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x11, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x10, 0xffffffffffffffff # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
and x28, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x2, 0xffffffffffffffff # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
and x25, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x23, 0xffffffffffffffff # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
and x19, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x2, 0xffffffffffffffff # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
and x15, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x10, 0xffffffffffffffff # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
and x20, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x25, 0xfffffffffffffffe # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
and x3, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x2, 0xfffffffffffffffe # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
and x14, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x5, 0xfffffffffffffffe # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
and x1, x5, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x12, 0xfffffffffffffffe # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
and x31, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x31, 0xfffffffffffffffe # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
and x27, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x30, 0xfffffffffffffffe # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
and x26, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x27, 0xfffffffffffffffe # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
and x21, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x2, 0xfffffffffffffffe # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
and x5, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x23, 0xfffffffffffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
and x18, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x12, 0xfffffffffffffffe # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
and x23, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0xfffffffffffffffe # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x31, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x17, 0xfffffffffffffffe # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
and x7, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x10, 0xfffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
and x27, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
and x29, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x5, 0xfffffffffffffffe # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
and x6, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x23, 0xfffffffffffffffe # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
and x14, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
and x12, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
and x28, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
and x23, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
and x20, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
and x18, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
and x20, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
and x24, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
and x7, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
and x1, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
and x9, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x31, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
and x12, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
and x21, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
and x29, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
and x3, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
and x19, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
and x6, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
and x14, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
and x9, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
and x26, x24, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
and x16, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
and x28, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
and x8, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
and x26, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
and x24, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
and x5, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x20, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
and x18, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
and x23, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
and x31, x5, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
and x13, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
and x3, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x9, 0x5555555555555555 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
and x31, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x10, 0x5555555555555555 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
and x20, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x10, 0x5555555555555555 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
and x15, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x13, 0x5555555555555555 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
and x29, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x21, 0x5555555555555555 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
and x9, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x15, 0x5555555555555555 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
and x10, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x20, 0x5555555555555555 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
and x2, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x11, 0x5555555555555555 # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
and x26, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
and x5, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x23, 0x5555555555555555 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
and x21, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x5555555555555555 # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x18, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x29, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
and x31, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x24, 0x5555555555555555 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
and x7, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
and x18, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x24, 0x5555555555555555 # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
and x16, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x1, 0x5555555555555555 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
and x9, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x9, 0x00000000ffffffff # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
and x5, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x29, 0x00000000ffffffff # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
and x26, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x22, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
and x26, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x7, 0x00000000ffffffff # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
and x14, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x20, 0x00000000ffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
and x1, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x25, 0x00000000ffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
and x11, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x2, 0x00000000ffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
and x5, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
and x6, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x28, 0x00000000ffffffff # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
and x21, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x17, 0x00000000ffffffff # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
and x21, x17, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x00000000ffffffff # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x3, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x30, 0x00000000ffffffff # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
and x17, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
and x18, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x24, 0x00000000ffffffff # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
and x28, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x18, 0x00000000ffffffff # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
and x29, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x21, 0x00000000ffffffff # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
and x18, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x17, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
and x11, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x13, 0x00000000fffffffe # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
and x24, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x20, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
and x11, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x21, 0x00000000fffffffe # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
and x20, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x14, 0x00000000fffffffe # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
and x2, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x18, 0x00000000fffffffe # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
and x1, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
and x7, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x29, 0x00000000fffffffe # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
and x5, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
and x26, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x6, 0x00000000fffffffe # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
and x1, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0x00000000fffffffe # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x12, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x3, 0x00000000fffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
and x11, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x21, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
and x1, x21, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
and x13, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x12, 0x00000000fffffffe # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
and x19, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x9, 0x00000000fffffffe # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
and x13, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x6, 0x0000000100000000 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
and x13, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x28, 0x0000000100000000 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
and x3, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x22, 0x0000000100000000 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
and x9, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x5, 0x0000000100000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
and x6, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x16, 0x0000000100000000 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
and x27, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
and x5, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x16, 0x0000000100000000 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
and x8, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000000 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
and x15, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
and x16, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x25, 0x0000000100000000 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
and x2, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x0000000100000000 # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x7, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x18, 0x0000000100000000 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
and x11, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x29, 0x0000000100000000 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
and x10, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x12, 0x0000000100000000 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
and x26, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x17, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
and x15, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x8, 0x0000000100000000 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
and x17, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x26, 0x0000000100000001 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
and x16, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x22, 0x0000000100000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
and x16, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x20, 0x0000000100000001 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
and x6, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x27, 0x0000000100000001 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
and x20, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x15, 0x0000000100000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
and x22, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x14, 0x0000000100000001 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
and x16, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000100000001 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
and x10, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x31, 0x0000000100000001 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
and x22, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000100000001 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
and x1, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x2, 0x0000000100000001 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
and x13, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x0000000100000001 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
and x11, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x10, 0x0000000100000001 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
and x29, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x1, 0x0000000100000001 # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
and x19, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x20, 0x0000000100000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
and x14, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x17, 0x0000000100000001 # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
and x24, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x28, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
and x3, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xc40fa9cd7d86a225 # initialize rs1
li x0, 0x7e9249037094c424 # initialize rs2
and x21, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x31436217898e21ee # initialize rs1
li x1, 0xa3322bdabe20a202 # initialize rs2
and x30, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x25ba464361911a8a # initialize rs1
li x2, 0xcc7c111146299493 # initialize rs2
and x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x1e5a5cfa02b0ef44 # initialize rs1
li x3, 0x4ad646e799d7c08d # initialize rs2
and x23, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x98b52a01144a6b88 # initialize rs1
li x4, 0x6a376524b3c44019 # initialize rs2
and x11, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x5e8d2bb77400f629 # initialize rs1
li x5, 0x820bc61deb65e045 # initialize rs2
and x11, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x11, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xcfc29099d217d0b8 # initialize rs1
li x6, 0xc5e7baf54413fe11 # initialize rs2
and x22, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x22, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x0603d97024f81964 # initialize rs1
li x7, 0x9aef0463d60a5e77 # initialize rs2
and x31, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x5fa6f6418e2d9a0f # initialize rs1
li x8, 0x581e7551258f2f7e # initialize rs2
and x9, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xece4385a4caa1534 # initialize rs1
li x9, 0xdc5f56346680346d # initialize rs2
and x18, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x8971f9d8ff3ca030 # initialize rs1
li x10, 0x0cda812e211118a0 # initialize rs2
and x29, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x2bc46b4c48eab716 # initialize rs1
li x11, 0xea8ba01efd00c0f2 # initialize rs2
and x15, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x1f40e1d6f6594440 # initialize rs1
li x12, 0xda33ca624821f10f # initialize rs2
and x24, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x49ca963444265a13 # initialize rs1
li x13, 0xb7a6a08fc8afdb5e # initialize rs2
and x26, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xef56a73bd1bb1bc6 # initialize rs1
li x14, 0x93689c33a7be3851 # initialize rs2
and x23, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x6166c2a7c9b0bc8d # initialize rs1
li x15, 0x90b75105e134d7b2 # initialize rs2
and x1, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x3046ccee712e1475 # initialize rs1
li x16, 0x5947f15b947afb79 # initialize rs2
and x13, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x09b33964920ee752 # initialize rs1
li x17, 0xcc68e41174d5f97f # initialize rs2
and x19, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x5b24d6fbe540ae3f # initialize rs1
li x18, 0xdf95cd368d652b0f # initialize rs2
and x28, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x2b9001284ca43e9f # initialize rs1
li x19, 0x909926802e8a2344 # initialize rs2
and x22, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xf939ef07b08c36f6 # initialize rs1
li x20, 0x9e1184b0c397d3df # initialize rs2
and x31, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x1cc461282816d724 # initialize rs1
li x21, 0xa214f6a2b13a156e # initialize rs2
and x12, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xb50bd8aa7817d896 # initialize rs1
li x22, 0x766a707876ec7785 # initialize rs2
and x9, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x2aff75b9fe1d4187 # initialize rs1
li x23, 0xc3ad3cec775032d1 # initialize rs2
and x28, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xd2f731b5ee7de797 # initialize rs1
li x24, 0x599624506ba365e5 # initialize rs2
and x31, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xd844d383784ab856 # initialize rs1
li x25, 0x285a6fd26cd85889 # initialize rs2
and x13, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x09302e66970cf942 # initialize rs1
li x26, 0x2e71678f1c235c3c # initialize rs2
and x18, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x03103be38dd0ca8e # initialize rs1
li x27, 0x643cece0c1369e16 # initialize rs2
and x25, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x8c9eda2e768a0727 # initialize rs1
li x28, 0xa3b61b00d44d5bae # initialize rs2
and x13, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xb0eabccf92531a35 # initialize rs1
li x29, 0x10060ada37b4eb7d # initialize rs2
and x8, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xb346141581d2f81a # initialize rs1
li x30, 0x1adc9fa2d050cae1 # initialize rs2
and x3, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x463bff9809f6bed1 # initialize rs1
li x31, 0x655957fa1daf54e1 # initialize rs2
and x7, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xa23fdc73c4d2914d # initialize rs1
li x22, 0x0d9951bbadee1703 # initialize rs2
and x0, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x61fd528cf92bcebb # initialize rs1
li x2, 0x76092e3949280020 # initialize rs2
and x1, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x6f4f2b7453c32ea2 # initialize rs1
li x29, 0x94f38da56089dad6 # initialize rs2
and x2, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x5daa0a93c47405d5 # initialize rs1
li x6, 0x4d4f274180111602 # initialize rs2
and x3, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x601c1914627b04e9 # initialize rs1
li x1, 0x8a35168b9b1ca5c3 # initialize rs2
and x4, x4, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x56d4dad8d3d517a4 # initialize rs1
li x6, 0x98eb3b8dcb16d2b0 # initialize rs2
and x5, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
li x6, 0x65fff04d0bbbc1b2 # initialize rs1
li x21, 0xbfbb63877de29eb3 # initialize rs2
and x6, x6, x21 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xcd8db90b6c946166 # initialize rs1
li x8, 0xa5a553db2f3ccd4f # initialize rs2
and x7, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x228f3ba43f1f4f5c # initialize rs1
li x25, 0x44d0c50d179459ba # initialize rs2
and x8, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x3d2e79a87b831fd4 # initialize rs1
li x20, 0x60f052c4e1e22c95 # initialize rs2
and x9, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x16231eabcbc30158 # initialize rs1
li x19, 0x37192307ecf3294b # initialize rs2
and x10, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x2c207dadf5bd6295 # initialize rs1
li x17, 0xde2d008215cb216e # initialize rs2
and x11, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x6ee18856f82609bc # initialize rs1
li x23, 0x705d1f42b1073ebd # initialize rs2
and x12, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x7418381a3b6e689f # initialize rs1
li x25, 0xa07f08364ccab218 # initialize rs2
and x13, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xcd403af74573f09a # initialize rs1
li x7, 0xc4fb041a6d38bf98 # initialize rs2
and x14, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xc49febfac9d0bd68 # initialize rs1
li x20, 0xdd4c78fac3628f84 # initialize rs2
and x15, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x9c67e9749474a11b # initialize rs1
li x8, 0x80c22d3abe748e7d # initialize rs2
and x16, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xe00d55a982bdc3f5 # initialize rs1
li x24, 0xe122991ad6949da2 # initialize rs2
and x17, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x8c3c01e00bd59650 # initialize rs1
li x15, 0xcf1313a756c04d4b # initialize rs2
and x18, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x648c4c0ae43d93f8 # initialize rs1
li x12, 0x228cbc106613b87e # initialize rs2
and x19, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xdd28fab15cb29a28 # initialize rs1
li x31, 0x846f7acd435dc59a # initialize rs2
and x20, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x8fae39994ece3c75 # initialize rs1
li x25, 0xda376008eb7552cb # initialize rs2
and x21, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x1752f8047745c2fd # initialize rs1
li x10, 0xda765218b52db6ba # initialize rs2
and x22, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x98a3db46e9de54c8 # initialize rs1
li x29, 0x9c15e1ddb7ccdbe3 # initialize rs2
and x23, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x2b4d83660d1ee379 # initialize rs1
li x19, 0xaf4de9316916ab9f # initialize rs2
and x24, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xef353acb2a6f9c90 # initialize rs1
li x9, 0x554693411f9e8a73 # initialize rs2
and x25, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x0eae018370d443b1 # initialize rs1
li x8, 0xa09af4646a6938ee # initialize rs2
and x26, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xdce62bb1ce5e1624 # initialize rs1
li x6, 0xd063d25861b54700 # initialize rs2
and x27, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x40d2de42c59260f0 # initialize rs1
li x28, 0xddd597a3c6856752 # initialize rs2
and x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x4fb6c85c474e9e45 # initialize rs1
li x26, 0x01f49f1b86bc9612 # initialize rs2
and x29, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x074cd1661d8b5acf # initialize rs1
li x16, 0x2f7cb938f9e2570c # initialize rs2
and x30, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x8a109d07495cd5c8 # initialize rs1
li x15, 0xe7d39383ca141484 # initialize rs2
and x31, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x29, 0x01085e1c26a3d320 # initialize rs1
li x0, 0x041509ec1782b151 # initialize rs2
and x0, x29, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x29, 0x42fac7740a37471c # initialize rs1
li x1, 0x144266f5641e2110 # initialize rs2
and x1, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x12, 0x3190b7d5bc0ae328 # initialize rs1
li x2, 0x131e54e1ceeb8665 # initialize rs2
and x2, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x14, 0x447bf27f72666983 # initialize rs1
li x3, 0xca040c35b8367375 # initialize rs2
and x3, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0xf538131250330dfc # initialize rs1
li x4, 0x3cfa738136ea7d17 # initialize rs2
and x4, x22, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x20, 0x08b8094652a6f781 # initialize rs1
li x5, 0x12466129370de0f3 # initialize rs2
and x5, x20, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x19, 0x9a3270e72c486fe9 # initialize rs1
li x6, 0xf03da0c92fa45373 # initialize rs2
and x6, x19, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0x5f9a908c1624f990 # initialize rs1
li x7, 0xcec88b4b508cab91 # initialize rs2
and x7, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x15, 0xfe1bf335e1f18bb0 # initialize rs1
li x8, 0x552da3749926c52f # initialize rs2
and x8, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x6, 0x4722e4f4f900012a # initialize rs1
li x9, 0x533032eae0cfa7e8 # initialize rs2
and x9, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x17, 0x9c2e0ae783d835a0 # initialize rs1
li x10, 0x78e1ff3fa7f90f12 # initialize rs2
and x10, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x30, 0xe164bf7a11a2ffce # initialize rs1
li x11, 0x5e40cb3eabd9cf28 # initialize rs2
and x11, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x29, 0x12d056b4a21ae56c # initialize rs1
li x12, 0xe974dccf08ac0931 # initialize rs2
and x12, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0xc83811703c42ac3d # initialize rs1
li x13, 0x8c223602fb2943c9 # initialize rs2
and x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x22, 0xe7f77c0e04d11324 # initialize rs1
li x14, 0x54389363d7948a30 # initialize rs2
and x14, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x16, 0x171d922ac82a1738 # initialize rs1
li x15, 0xcc0c7c4a089fbe5a # initialize rs2
and x15, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x19, 0xde9bb2182e7039e7 # initialize rs1
li x16, 0xee9285e3b7b06a44 # initialize rs2
and x16, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x28, 0x3350b4deb7d08b22 # initialize rs1
li x17, 0xbca5ae98d4ceb377 # initialize rs2
and x17, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x11, 0x5b7185ebed099586 # initialize rs1
li x18, 0x17812be31b8bbac5 # initialize rs2
and x18, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x2, 0x4fb213eabfc6410c # initialize rs1
li x19, 0xab040295359d690d # initialize rs2
and x19, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x3, 0x0bbdb994ea94bb7a # initialize rs1
li x20, 0xe1e73ad25fc6febf # initialize rs2
and x20, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x31, 0xc249d5155ad15daa # initialize rs1
li x21, 0xd56a224e17245b7e # initialize rs2
and x21, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x12, 0xf95a3a48e8337f25 # initialize rs1
li x22, 0x8a32c02d4cac5353 # initialize rs2
and x22, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x2, 0x5b19469b1d623188 # initialize rs1
li x23, 0xb4b98c8d7367a2fa # initialize rs2
and x23, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x17, 0x048293b8dc24740e # initialize rs1
li x24, 0xd085fe48d454ba3c # initialize rs2
and x24, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x28, 0x0607983dfb7270fc # initialize rs1
li x25, 0xc53577a812a93991 # initialize rs2
and x25, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x11, 0xd9831fb374e17236 # initialize rs1
li x26, 0x4bc448f16675de60 # initialize rs2
and x26, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x25, 0x7f8b094f3d895301 # initialize rs1
li x27, 0x7ddaef707d964c41 # initialize rs2
and x27, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x8, 0xd01dfdee92b550d0 # initialize rs1
li x28, 0xe5fc8348a5f0efbc # initialize rs2
and x28, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x18, 0x1f878c4cd972be80 # initialize rs1
li x29, 0x8f4da43be1b01cc8 # initialize rs2
and x29, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x17, 0x86df672a69b1173c # initialize rs1
li x30, 0x9d49017fe739566a # initialize rs2
and x30, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x14, 0x62b106c3bfd36069 # initialize rs1
li x31, 0x361d628631a2ac72 # initialize rs2
and x31, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x90a77f0bfee4cca5 # initialize rs1
li x0, 0xa7a187f38b700b70 # initialize rs2
and x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xb15530fd68a70c0f # initialize rs1
li x1, 0x1452538fb637e26c # initialize rs2
and x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x1b703b8662e9278c # initialize rs1
li x2, 0x01e8da46ec6d717d # initialize rs2
and x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xb918d9fa980729fc # initialize rs1
li x3, 0x6f0d31e3b8c635f6 # initialize rs2
and x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x8b0efb803d0b6439 # initialize rs1
li x4, 0xe4fe857ce0be2845 # initialize rs2
and x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa4f0672a1d6cf92f # initialize rs1
li x5, 0xbe9a6a6322a1def5 # initialize rs2
and x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc3cf9cd195726440 # initialize rs1
li x6, 0x05c35e70819a0229 # initialize rs2
and x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xdb26d9282abfd762 # initialize rs1
li x7, 0xfbcc05c461b73f6a # initialize rs2
and x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x501c574fad316415 # initialize rs1
li x8, 0x0fae76bba750cdd9 # initialize rs2
and x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x4693a4e3b1d0b399 # initialize rs1
li x9, 0xdcddbdaea8b35199 # initialize rs2
and x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x19e97f2d09b01b6d # initialize rs1
li x10, 0xbdaac2d6c92ee7a3 # initialize rs2
and x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x827557e6f2d1719f # initialize rs1
li x11, 0xb0e248efb63e54c4 # initialize rs2
and x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x637f6d54eab3d9d4 # initialize rs1
li x12, 0xb0d85592ef75fa5a # initialize rs2
and x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x5a67806de2e6e81f # initialize rs1
li x13, 0x896ccdadbb1c3a74 # initialize rs2
and x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xa8012c521f15e96f # initialize rs1
li x14, 0x1c1df5777c83dcb5 # initialize rs2
and x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xc5d49825e80b379f # initialize rs1
li x15, 0x74581e22061d69ee # initialize rs2
and x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xc828565568d690c2 # initialize rs1
li x16, 0xff6f760682a2896a # initialize rs2
and x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xaf8afed5f092a203 # initialize rs1
li x17, 0x70e42d35d227d2fa # initialize rs2
and x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x4ac28a05722d211f # initialize rs1
li x18, 0x6902579bee0747cc # initialize rs2
and x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x8fc462eff394b921 # initialize rs1
li x19, 0xcc92a62a5755aca2 # initialize rs2
and x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x1f834b7e9aac9c74 # initialize rs1
li x20, 0x07a476b00fb9041a # initialize rs2
and x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x3b36ac1d195034e5 # initialize rs1
li x21, 0x0124cf95a7f49e35 # initialize rs2
and x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xbb6925fc602032da # initialize rs1
li x22, 0x85236c066f7ecb63 # initialize rs2
and x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x6f8d345247ea1c08 # initialize rs1
li x23, 0x77dd39a7103d1fa0 # initialize rs2
and x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x6228f0faae8559de # initialize rs1
li x24, 0xbb19e45675706466 # initialize rs2
and x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x863e8ce215d86195 # initialize rs1
li x25, 0x3d50207e52988a84 # initialize rs2
and x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xf91464286980f464 # initialize rs1
li x26, 0x3a36b3d73b8decb9 # initialize rs2
and x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x347adbd4eba74cbd # initialize rs1
li x27, 0x6b28a3d42ad7cdbe # initialize rs2
and x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x89bd597003c7b8c6 # initialize rs1
li x28, 0xa41353c326498ff7 # initialize rs2
and x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x5849e496d8f696d1 # initialize rs1
li x29, 0x2f1c8b739d91c58c # initialize rs2
and x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xff172cb87dce282b # initialize rs1
li x30, 0xe2a67ef7b134758e # initialize rs2
and x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x19ea075bbfb4dd1c # initialize rs1
li x31, 0x61670789692d96d8 # initialize rs2
and x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x25, x6 # perform first operation
and x15, x1, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x14, x5 # perform first operation
and x9, x18, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x24, x19 # perform first operation
and x26, x13, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x31, x9 # perform first operation
and x7, x7, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x22, x25, x18 # perform first operation
and x18, x6, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x10, x3 # perform first operation
and x10, x20, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x31, x26 # perform first operation
and x12, x25, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x17, x11, x31 # perform first operation
and x17, x29, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x27, x11, x15 # perform first operation
and x27, x2, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x11, x2 # perform first operation
and x11, x31, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x11, x29, x19 # perform first operation
and x19, x26, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x1, x19 # perform first operation
and x11, x23, x6 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-slliw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x476fee0194a67c18 # initialize rs1
slliw x17, x0, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xd3ca3717d653d035 # initialize rs1
slliw x23, x1, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xef02d771395e3ebf # initialize rs1
slliw x3, x2, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xf2b053b68f289829 # initialize rs1
slliw x2, x3, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x2900bcf89a7df26b # initialize rs1
slliw x24, x4, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xb32fd7121faddf25 # initialize rs1
slliw x9, x5, 9 # perform operation
RVTEST_SIGUPD(x6, x0, x9, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x72a804c0f7ca02da # initialize rs1
slliw x5, x6, 10 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8313be6cbe818df0 # initialize rs1
slliw x16, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf32e0a6e81c42e60 # initialize rs1
slliw x21, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xa0ab4ca024412ec5 # initialize rs1
slliw x14, x9, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x495163eaaed8f568 # initialize rs1
slliw x3, x10, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x628d7091a49d59f1 # initialize rs1
slliw x14, x11, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xcb98122fc8573085 # initialize rs1
slliw x14, x12, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xe7aa57ae85183f16 # initialize rs1
slliw x1, x13, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x2bb60cc6a29c5cbc # initialize rs1
slliw x28, x14, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x21235b9d0f3b6943 # initialize rs1
slliw x12, x15, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x4fc6f46bf16f06d1 # initialize rs1
slliw x13, x16, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xf1f9752946d21ebd # initialize rs1
slliw x16, x17, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x525f023b3b655c72 # initialize rs1
slliw x1, x18, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xdf40fdf8ef9897b0 # initialize rs1
slliw x14, x19, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xbaa5498fbc8b913d # initialize rs1
slliw x12, x20, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x9e4f7008f4cdb08f # initialize rs1
slliw x31, x21, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x06b223026cd1715b # initialize rs1
slliw x5, x22, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x06f63b32e13268a9 # initialize rs1
slliw x19, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x3870d46044934100 # initialize rs1
slliw x8, x24, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xaf37c02872be911d # initialize rs1
slliw x29, x25, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x18b108481a38bf72 # initialize rs1
slliw x29, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x3790f6ab332fb010 # initialize rs1
slliw x3, x27, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xcc8bae11018acddf # initialize rs1
slliw x26, x28, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xdbf96e3ff2446f25 # initialize rs1
slliw x6, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x16f56d78b12c0a6d # initialize rs1
slliw x10, x30, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x34f54224f2b448ff # initialize rs1
slliw x9, x31, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 248)

# Testcase cp_rd (Test destination rd = x0)
li x23, 0xb7d643679311f083 # initialize rs1
slliw x0, x23, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x21, 0xc20b70db45148707 # initialize rs1
slliw x1, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x5, 0xc888bbebbe395dd8 # initialize rs1
slliw x2, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x30, 0x6db32ac62d415b7c # initialize rs1
slliw x3, x30, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x1, 0xcda6e54d98b54865 # initialize rs1
slliw x4, x1, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x1, 0x202c76172697f848 # initialize rs1
slliw x5, x1, 14 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x25, 0x5813dfb8c93bda5b # initialize rs1
slliw x6, x25, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
li x2, 0x016298b339bc0f64 # initialize rs1
slliw x7, x2, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x23, 0xe28b01b3cadcd887 # initialize rs1
slliw x8, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x3b7135829dd3a73a # initialize rs1
slliw x9, x27, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x23, 0x6dfe598c0aa1fc8a # initialize rs1
slliw x10, x23, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x3, 0x0c33f04a5f919cf5 # initialize rs1
slliw x11, x3, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x2, 0x8de7daa48dc1b0f3 # initialize rs1
slliw x12, x2, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x16, 0x55c5fbdb2f0654c3 # initialize rs1
slliw x13, x16, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x30, 0xb99c361c800d56a9 # initialize rs1
slliw x14, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x20, 0xaaec8a7e7ddf3bce # initialize rs1
slliw x15, x20, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x10, 0x4ce3e958d38e464d # initialize rs1
slliw x16, x10, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x10, 0x05fac89408e7693c # initialize rs1
slliw x17, x10, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x15, 0x20385f52901b0b0d # initialize rs1
slliw x18, x15, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0xb564860cfb7a9e0e # initialize rs1
slliw x19, x28, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x9, 0x6a2c3b39d4b61325 # initialize rs1
slliw x20, x9, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x3, 0xf03fa7b5f97095e4 # initialize rs1
slliw x21, x3, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x11, 0xe9ebb50e6ce2159d # initialize rs1
slliw x22, x11, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x18, 0xbee1c7f4b9d575cb # initialize rs1
slliw x23, x18, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x8, 0xe89240d7132e24b2 # initialize rs1
slliw x24, x8, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x29, 0xc65f909500f7e4a1 # initialize rs1
slliw x25, x29, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x5, 0x1c38b8fc98826d48 # initialize rs1
slliw x26, x5, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x7, 0xe88a887f131ef74d # initialize rs1
slliw x27, x7, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x23, 0x2c0a882ec6794a9b # initialize rs1
slliw x28, x23, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x28, 0x1e2f08c46a8b2ad6 # initialize rs1
slliw x29, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x19, 0xbc6fe57bbc6c8183 # initialize rs1
slliw x30, x19, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x7, 0xc9ed915b2d75f620 # initialize rs1
slliw x31, x7, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x0000000000000000 # initialize rs1
slliw x12, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x6, 0x0000000000000001 # initialize rs1
slliw x21, x6, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x6, 0x0000000000000002 # initialize rs1
slliw x8, x6, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x25, 0x8000000000000000 # initialize rs1
slliw x6, x25, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x17, 0x8000000000000001 # initialize rs1
slliw x14, x17, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x7, 0x7fffffffffffffff # initialize rs1
slliw x24, x7, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x3, 0x7ffffffffffffffe # initialize rs1
slliw x26, x3, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x26, 0xffffffffffffffff # initialize rs1
slliw x3, x26, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x8, 0xfffffffffffffffe # initialize rs1
slliw x9, x8, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x31, 0x5bbc887763ae86f2 # initialize rs1
slliw x12, x31, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
slliw x15, x25, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x2, 0x5555555555555555 # initialize rs1
slliw x27, x2, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x19, 0x00000000ffffffff # initialize rs1
slliw x9, x19, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x9, 0x00000000fffffffe # initialize rs1
slliw x19, x9, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x18, 0x0000000100000000 # initialize rs1
slliw x22, x18, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x16, 0x0000000100000001 # initialize rs1
slliw x6, x16, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xe7eaaf2bdb1d9243 # initialize rs1
slliw x0, x0, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x79fa6740bbe311ef # initialize rs1
slliw x1, x1, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x8a9b7c0e05080ca6 # initialize rs1
slliw x2, x2, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x4d29bd6377fa6fc6 # initialize rs1
slliw x3, x3, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5f0391b190675a30 # initialize rs1
slliw x4, x4, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x95dd516ad24e1c19 # initialize rs1
slliw x5, x5, 17 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa11ca14c54f61a05 # initialize rs1
slliw x6, x6, 0 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x526aece646fc117f # initialize rs1
slliw x7, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xf94399eed4c14f7b # initialize rs1
slliw x8, x8, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xadf65ee585f9cff0 # initialize rs1
slliw x9, x9, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x1e9cddfcb8cc3fa3 # initialize rs1
slliw x10, x10, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x1560ca70b3263144 # initialize rs1
slliw x11, x11, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x0b52c546e5b8321f # initialize rs1
slliw x12, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x95a7cb07bf8d261c # initialize rs1
slliw x13, x13, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x7d0970279539ec12 # initialize rs1
slliw x14, x14, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x81cc64cd0616aa72 # initialize rs1
slliw x15, x15, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x499b06779cb26128 # initialize rs1
slliw x16, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x247418fc10fac20d # initialize rs1
slliw x17, x17, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xc82a9213ffbcd3a7 # initialize rs1
slliw x18, x18, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x54c698473a9c7059 # initialize rs1
slliw x19, x19, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x89c2d5561ee006f1 # initialize rs1
slliw x20, x20, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x7d9aff13809f141a # initialize rs1
slliw x21, x21, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xab3321368291e5ad # initialize rs1
slliw x22, x22, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x5c320cbdb53b129a # initialize rs1
slliw x23, x23, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x934b00aeba437d0c # initialize rs1
slliw x24, x24, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x87f461bb0a8a9b01 # initialize rs1
slliw x25, x25, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xbd696d17c2402478 # initialize rs1
slliw x26, x26, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xa44c94485db17262 # initialize rs1
slliw x27, x27, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xbba417bac7399076 # initialize rs1
slliw x28, x28, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x9508ef863effecfc # initialize rs1
slliw x29, x29, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xf91d5b4b9f0b9f42 # initialize rs1
slliw x30, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x45f6f5fe4c848516 # initialize rs1
slliw x31, x31, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm_5 (Test bit = 0)
li x9, 0xf691974430cf361b # initialize rs1
slliw x7, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 896)

# Testcase cp_uimm_5 (Test bit = 1)
li x18, 0xbc946ae3529e1ef4 # initialize rs1
slliw x2, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cp_uimm_5 (Test bit = 2)
li x30, 0x18e63706d4c4fa00 # initialize rs1
slliw x5, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 912)

# Testcase cp_uimm_5 (Test bit = 3)
li x17, 0x84deb6c65a3507c8 # initialize rs1
slliw x10, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 920)

# Testcase cp_uimm_5 (Test bit = 4)
li x21, 0x6291d9744599468e # initialize rs1
slliw x29, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 928)

# Testcase cp_uimm_5 (Test bit = 5)
li x28, 0xecee95ca33a213e2 # initialize rs1
slliw x2, x28, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 936)

# Testcase cp_uimm_5 (Test bit = 6)
li x21, 0xca57993063de2853 # initialize rs1
slliw x23, x21, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 944)

# Testcase cp_uimm_5 (Test bit = 7)
li x10, 0x07a002f6055ab1ba # initialize rs1
slliw x23, x10, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 952)

# Testcase cp_uimm_5 (Test bit = 8)
li x24, 0xefee63869339816e # initialize rs1
slliw x30, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 960)

# Testcase cp_uimm_5 (Test bit = 9)
li x27, 0xb8f0bb1c374eeed1 # initialize rs1
slliw x8, x27, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 968)

# Testcase cp_uimm_5 (Test bit = 10)
li x10, 0xeceb53ef5b4526e6 # initialize rs1
slliw x15, x10, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 976)

# Testcase cp_uimm_5 (Test bit = 11)
li x6, 0x3c532a6590dd9d30 # initialize rs1
slliw x15, x6, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 984)

# Testcase cp_uimm_5 (Test bit = 12)
li x12, 0xdcc13e2dce892179 # initialize rs1
slliw x14, x12, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 992)

# Testcase cp_uimm_5 (Test bit = 13)
li x19, 0xab30d915e39f8ae9 # initialize rs1
slliw x14, x19, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1000)

# Testcase cp_uimm_5 (Test bit = 14)
li x26, 0x2c8ca67a08853be9 # initialize rs1
slliw x23, x26, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1008)

# Testcase cp_uimm_5 (Test bit = 15)
li x23, 0xebfe193e6e1f87b7 # initialize rs1
slliw x8, x23, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1016)

# Testcase cp_uimm_5 (Test bit = 16)
li x29, 0x3105ea28adffc73a # initialize rs1
slliw x7, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1024)

# Testcase cp_uimm_5 (Test bit = 17)
li x23, 0x0ab11663c6bf15f4 # initialize rs1
slliw x10, x23, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1032)

# Testcase cp_uimm_5 (Test bit = 18)
li x27, 0xa9857549b1710ee3 # initialize rs1
slliw x31, x27, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1040)

# Testcase cp_uimm_5 (Test bit = 19)
li x26, 0x321ce82003217773 # initialize rs1
slliw x6, x26, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1048)

# Testcase cp_uimm_5 (Test bit = 20)
li x12, 0xbfa06fb0ee790bbf # initialize rs1
slliw x7, x12, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1056)

# Testcase cp_uimm_5 (Test bit = 21)
li x19, 0x3746a2bfcdd4c645 # initialize rs1
slliw x27, x19, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1064)

# Testcase cp_uimm_5 (Test bit = 22)
li x14, 0x0b0869e02578e3ae # initialize rs1
slliw x22, x14, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1072)

# Testcase cp_uimm_5 (Test bit = 23)
li x19, 0xd853ad192b371bf3 # initialize rs1
slliw x18, x19, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1080)

# Testcase cp_uimm_5 (Test bit = 24)
li x22, 0x34ca7c017016948f # initialize rs1
slliw x10, x22, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1088)

# Testcase cp_uimm_5 (Test bit = 25)
li x27, 0x9f34427adfc4cb13 # initialize rs1
slliw x28, x27, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1096)

# Testcase cp_uimm_5 (Test bit = 26)
li x22, 0x22c6b96e112bb409 # initialize rs1
slliw x16, x22, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1104)

# Testcase cp_uimm_5 (Test bit = 27)
li x9, 0xe95e042976c52024 # initialize rs1
slliw x20, x9, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1112)

# Testcase cp_uimm_5 (Test bit = 28)
li x13, 0x108a68ec61912af8 # initialize rs1
slliw x18, x13, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1120)

# Testcase cp_uimm_5 (Test bit = 29)
li x13, 0x4e7d2976a4955414 # initialize rs1
slliw x12, x13, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1128)

# Testcase cp_uimm_5 (Test bit = 30)
li x25, 0x25b90a194ac3f93b # initialize rs1
slliw x12, x25, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1136)

# Testcase cp_uimm_5 (Test bit = 31)
li x13, 0x6c463b95c355df8f # initialize rs1
slliw x24, x13, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1144)

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x13, x2 # perform first operation
slliw x9, x5, 26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x2, x24 # perform first operation
slliw x7, x19, 14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x31, x6, x25 # perform first operation
slliw x5, x21, 12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x19, x26 # perform first operation
slliw x1, x17, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x8, x30 # perform first operation
slliw x17, x16, 14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x22, x6, x19 # perform first operation
slliw x6, x22, 1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x9, x26, x3 # perform first operation
slliw x9, x31, 12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x6, x20 # perform first operation
slliw x1, x19, 8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x28, x1 # perform first operation
slliw x8, x20, 4 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x18, x12 # perform first operation
slliw x18, x24, 31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x7, x24, x17 # perform first operation
slliw x17, x2, 26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x12, x6 # perform first operation
slliw x19, x9, 2 # perform second (triggering) operation

#.EQU SIGSIZE,1152


// ******************
// Tests from: WALLY-COV-slt.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x55c068ddea562851 # initialize rs1
li x5, 0x1d03f01cc76f2e68 # initialize rs2
slt x18, x0, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xfc2bf3d1c28eddc1 # initialize rs1
li x30, 0x25d4526952374929 # initialize rs2
slt x13, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x6a41459d1440db30 # initialize rs1
li x24, 0x65bf44a5e5cd076d # initialize rs2
slt x7, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xeaf4116ff2086599 # initialize rs1
li x2, 0xa42552f9db23d730 # initialize rs2
slt x24, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x95cf84dc26d767f9 # initialize rs1
li x23, 0x1502b1e576281cdc # initialize rs2
slt x10, x4, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x48e03f440c767078 # initialize rs1
li x15, 0x04d3dcbecade230c # initialize rs2
slt x18, x5, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x18, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x76316311c1bbdc8f # initialize rs1
li x28, 0x930a718f23c99010 # initialize rs2
slt x3, x6, x28 # perform operation
RVTEST_SIGUPD(x7, x0, x3, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x25f23f25a8777f28 # initialize rs1
li x11, 0xe0f3853388638d21 # initialize rs2
slt x27, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x78cf5e773ec27f23 # initialize rs1
li x24, 0x65ac615966a01617 # initialize rs2
slt x31, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xf9093fb72e063e94 # initialize rs1
li x11, 0xb378aaffb2d3f6c5 # initialize rs2
slt x7, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xd2378587ec245cab # initialize rs1
li x11, 0x1e66a88baff19d05 # initialize rs2
slt x29, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xe0bf5f55c7be2ec5 # initialize rs1
li x12, 0x803203f0ff279775 # initialize rs2
slt x2, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xd4a2c7a8af8e0146 # initialize rs1
li x6, 0xe0ef2fccb17ce69b # initialize rs2
slt x25, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xf2a8d934b76754a0 # initialize rs1
li x5, 0x2a7849cbecea15ab # initialize rs2
slt x6, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x83219ef21e9edc38 # initialize rs1
li x3, 0x3044a4bf50de03c1 # initialize rs2
slt x23, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x904048b7ec26f193 # initialize rs1
li x30, 0x053ed37ff7b7a803 # initialize rs2
slt x7, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x0910c245b5682222 # initialize rs1
li x19, 0x9ca3c25751aa8288 # initialize rs2
slt x5, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xb53c6beafe4a1a0e # initialize rs1
li x31, 0x78bc3e713b2389df # initialize rs2
slt x23, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x17056b1cf932c70b # initialize rs1
li x3, 0x20d3146bdb30cbc6 # initialize rs2
slt x30, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x27a5587b7f2ac1bd # initialize rs1
li x14, 0x179862e06f1231c7 # initialize rs2
slt x6, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe92142bf67f1df13 # initialize rs1
li x19, 0x26c9bb7b63bb4bc4 # initialize rs2
slt x30, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xad607d1b44ccee6b # initialize rs1
li x23, 0xd6b59edbe94d46fd # initialize rs2
slt x16, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x66bcbee5ffe63e19 # initialize rs1
li x28, 0x7131a3a1ad10f0d2 # initialize rs2
slt x11, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x8dd5ddf45037d851 # initialize rs1
li x6, 0x2e50bfaae2ae5068 # initialize rs2
slt x15, x23, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xc720109c2d760644 # initialize rs1
li x5, 0x0aca104cb5a3e471 # initialize rs2
slt x30, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x00636ef10351f060 # initialize rs1
li x6, 0x9951bead4dce7026 # initialize rs2
slt x11, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xe811ce42c36360f5 # initialize rs1
li x16, 0x26b7f93f49806687 # initialize rs2
slt x1, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x00ad3d36e0189c87 # initialize rs1
li x31, 0xcb7bb084006358b4 # initialize rs2
slt x24, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xaf5d1b3ab48954f4 # initialize rs1
li x17, 0xdd1ecd05f938668d # initialize rs2
slt x27, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x399c424a157fc269 # initialize rs1
li x17, 0xce87554da2d4af71 # initialize rs2
slt x1, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x59f7537562baa939 # initialize rs1
li x24, 0xae5ff2af43db0978 # initialize rs2
slt x25, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x2fdde6a02d005fe3 # initialize rs1
li x9, 0x5f5ae91e62c719dc # initialize rs2
slt x6, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x9, 0x4fdecda5ec558aa1 # initialize rs1
li x0, 0xeb0c209260e9bfc4 # initialize rs2
slt x19, x9, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x9, 0x73835097158b17d6 # initialize rs1
li x1, 0x5cb1a8cf2a6d710f # initialize rs2
slt x22, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x29, 0x5587f13d6304e1b0 # initialize rs1
li x2, 0x847096cc44de1b85 # initialize rs2
slt x3, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x25, 0xf1e0428b6773e23c # initialize rs1
li x3, 0x62f956e575729144 # initialize rs2
slt x26, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x29, 0x3553f981e7048f70 # initialize rs1
li x4, 0x647efec7bc0fdace # initialize rs2
slt x11, x29, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0xa8e67e2e032d4066 # initialize rs1
li x5, 0x9fc31013bcb22a15 # initialize rs2
slt x24, x11, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x24, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x2, 0x82dffa7daff3508d # initialize rs1
li x6, 0x849475f5dd65cbb6 # initialize rs2
slt x24, x2, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x24, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0xb6b6fa32a9cb79e3 # initialize rs1
li x7, 0x1b54e3376cfa4906 # initialize rs2
slt x1, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x17, 0x249703ad75be8719 # initialize rs1
li x8, 0xd4a87b457071410f # initialize rs2
slt x24, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x27, 0x611372f52568b20c # initialize rs1
li x9, 0x2700744babc06c1b # initialize rs2
slt x26, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x29, 0xd88cfecd498f8965 # initialize rs1
li x10, 0xe72b876578ed3efa # initialize rs2
slt x23, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x6, 0xeeb43dec013c7c13 # initialize rs1
li x11, 0xb97f178c5b6a1dbb # initialize rs2
slt x8, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x19, 0xa6b0a12d3081078d # initialize rs1
li x12, 0x9b61a1f15432fe54 # initialize rs2
slt x24, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x14, 0x1eeeec9a4f6894ec # initialize rs1
li x13, 0x98a1c45294d3ac98 # initialize rs2
slt x23, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x16, 0x7d523a6d425163dd # initialize rs1
li x14, 0x814e64868a6eadbb # initialize rs2
slt x8, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x22, 0xaf63918281c70064 # initialize rs1
li x15, 0x5783ed64961facb7 # initialize rs2
slt x17, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x26, 0x127cce117d07f3c5 # initialize rs1
li x16, 0x716c98631c83e251 # initialize rs2
slt x2, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0x54e6cee64fc18dfe # initialize rs1
li x17, 0xfe13bf0895389825 # initialize rs2
slt x15, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x24, 0x59e3f682c75cbfb6 # initialize rs1
li x18, 0xa7a707aa67ad0198 # initialize rs2
slt x7, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x17, 0xa46d48be8b5997b7 # initialize rs1
li x19, 0x95d387c1bd994a01 # initialize rs2
slt x2, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x25, 0x5c98272c16f03ef8 # initialize rs1
li x20, 0xea5fc5c7fa4fa62a # initialize rs2
slt x14, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x6, 0x76e839578467fd1c # initialize rs1
li x21, 0x35dffc3348c23510 # initialize rs2
slt x29, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x28, 0x9f3a4ec0e4983d39 # initialize rs1
li x22, 0x5f7ab6dfc007eb5d # initialize rs2
slt x20, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x27, 0x3c212147433ec94a # initialize rs1
li x23, 0x9873a53f86d42f1c # initialize rs2
slt x21, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x18, 0xf98fcf925626e9fe # initialize rs1
li x24, 0x494ed597ace14480 # initialize rs2
slt x28, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x27, 0x7f33e7ccd9d925e6 # initialize rs1
li x25, 0x43736a52d9bdcb50 # initialize rs2
slt x12, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x28, 0x21bb0ff1eb140b0d # initialize rs1
li x26, 0x6c8e100ce9b298e1 # initialize rs2
slt x1, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x7, 0xd2bb93d89eb6a171 # initialize rs1
li x27, 0x4c980c2d82852bfc # initialize rs2
slt x22, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x30, 0xc5dc9f84aa97f4af # initialize rs1
li x28, 0x866d24c84f8462cd # initialize rs2
slt x11, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x30, 0x7e1c0f80acd7a84c # initialize rs1
li x29, 0x33bf573fb688dd77 # initialize rs2
slt x20, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x24, 0x90ee3b8848d02220 # initialize rs1
li x30, 0xf88274308e0a3252 # initialize rs2
slt x18, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x10, 0xfab4696bc44ac1b7 # initialize rs1
li x31, 0xdcc9d4af5449fa17 # initialize rs2
slt x13, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 504)

# Testcase cp_rd (Test destination rd = x0)
li x17, 0x4f6e4c7216874ce9 # initialize rs1
li x16, 0xc85f60eaf2f4011e # initialize rs2
slt x0, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x7, 0x0f95793ea323f340 # initialize rs1
li x22, 0x68df6b34abb47313 # initialize rs2
slt x1, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x3, 0x5d5cbf22bfc67305 # initialize rs1
li x31, 0x290cebd9e92b48ea # initialize rs2
slt x2, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x20, 0x57dd015d84802487 # initialize rs1
li x29, 0x4b8b71c4aded1d27 # initialize rs2
slt x3, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x8, 0x2f6cf7d5cd411a20 # initialize rs1
li x17, 0x3e99baaf3ab07ee1 # initialize rs2
slt x4, x8, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0x3f8ece5af2ed7768 # initialize rs1
li x15, 0xf2a4016b16a1e0dd # initialize rs2
slt x5, x22, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x30, 0x65142ef33020b92d # initialize rs1
li x24, 0xe3fe3b36e005ee71 # initialize rs2
slt x6, x30, x24 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x18, 0x17b76bf2750b9565 # initialize rs1
li x1, 0x564c45e45d5d8458 # initialize rs2
slt x7, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x2, 0x8e758e4399396134 # initialize rs1
li x14, 0xe99657f24447a4f3 # initialize rs2
slt x8, x2, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x25, 0x2e27a72ae4664c2c # initialize rs1
li x3, 0xbcda48195ced8aa1 # initialize rs2
slt x9, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x9, 0xdac7ee9387f847a7 # initialize rs1
li x5, 0xe2d9c0485e0bb739 # initialize rs2
slt x10, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x7, 0x9b61e55fd560aa75 # initialize rs1
li x28, 0x544b6f5add56f70e # initialize rs2
slt x11, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x26, 0x4a38fdd820f77e2f # initialize rs1
li x17, 0x74ea8662453084a7 # initialize rs2
slt x12, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x27, 0xf2b68e7ad8d5e98f # initialize rs1
li x29, 0xa10dc3fd65348bb4 # initialize rs2
slt x13, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x15, 0x64983467c0386b5c # initialize rs1
li x26, 0x2258be140f480f5f # initialize rs2
slt x14, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0xe43e0e54d5aaf0e0 # initialize rs1
li x21, 0xa5a5acbf1ec444c1 # initialize rs2
slt x15, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x9, 0xbb39c27451779a0b # initialize rs1
li x25, 0x8b61326048a481da # initialize rs2
slt x16, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x26, 0x921c1ecdf0631f36 # initialize rs1
li x10, 0x2194193f25eb288e # initialize rs2
slt x17, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x17, 0x6f720a7cd79d58fc # initialize rs1
li x24, 0xe9bd9bd402ca8d0e # initialize rs2
slt x18, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x16, 0xeaa1712c43982a54 # initialize rs1
li x8, 0x09a9aeeef5c16005 # initialize rs2
slt x19, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x23, 0x9d6711336c033abd # initialize rs1
li x16, 0xf5259e48e79e8ae4 # initialize rs2
slt x20, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x27, 0xb4dbc8d76522e55d # initialize rs1
li x2, 0x7147bdbcfdafeb50 # initialize rs2
slt x21, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x13, 0x07edc0c36d147ae5 # initialize rs1
li x15, 0xa2408dcad2f520b1 # initialize rs2
slt x22, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x6, 0x5090da015ef77e84 # initialize rs1
li x29, 0x6f4101070b344515 # initialize rs2
slt x23, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x19, 0x306f97d267473c79 # initialize rs1
li x15, 0xb7b7133492b89a2d # initialize rs2
slt x24, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x18, 0x5b20998d24810846 # initialize rs1
li x19, 0x0fe3b2e900b06324 # initialize rs2
slt x25, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x15, 0x5c63e1977f951ad0 # initialize rs1
li x23, 0x7945b905fd7c2dc4 # initialize rs2
slt x26, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x20, 0x323626ea48ae5ac9 # initialize rs1
li x21, 0x2628b803f88ad1ef # initialize rs2
slt x27, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x2, 0x72d24c9e36392310 # initialize rs1
li x5, 0xda26a1f04383512a # initialize rs2
slt x28, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x3, 0x47a08ff91f15d140 # initialize rs1
li x31, 0x9635a294e0508d8f # initialize rs2
slt x29, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x16, 0xb7a886ccaa38021a # initialize rs1
li x25, 0x95aefbd683b0c62e # initialize rs2
slt x30, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x20, 0x288203a7c8becece # initialize rs1
li x22, 0x97231506e64233e3 # initialize rs2
slt x31, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x2, 0x0000000000000000 # initialize rs1
li x12, 0x5de34c586829ea23 # initialize rs2
slt x29, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x22, 0x0000000000000001 # initialize rs1
li x13, 0x4648658137c191ac # initialize rs2
slt x25, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x29, 0x0000000000000002 # initialize rs1
li x15, 0xe94158a8da0bf7c2 # initialize rs2
slt x8, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x10, 0x8000000000000000 # initialize rs1
li x21, 0xb2203da05eb7d61e # initialize rs2
slt x23, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x10, 0x8000000000000001 # initialize rs1
li x26, 0x8da2e966785fa048 # initialize rs2
slt x30, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x17, 0x7fffffffffffffff # initialize rs1
li x14, 0x1c1ee7bb4af50fe5 # initialize rs2
slt x21, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x8, 0x7ffffffffffffffe # initialize rs1
li x16, 0x3d1905e176635c46 # initialize rs2
slt x24, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x13, 0xffffffffffffffff # initialize rs1
li x15, 0x0179bbd5557b4e1b # initialize rs2
slt x18, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x2, 0xc27bf7a7044bb21d # initialize rs2
slt x23, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0xd56191945a8c3ac2 # initialize rs2
slt x25, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xffb049e9a5dea2de # initialize rs2
slt x3, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x22, 0x5555555555555555 # initialize rs1
li x24, 0xa0fa2290cbd5e103 # initialize rs2
slt x3, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x6, 0x00000000ffffffff # initialize rs1
li x9, 0xd782dc7c9560cd6c # initialize rs2
slt x17, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x27, 0x3a9445d2a6bc4c79 # initialize rs2
slt x17, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x3, 0x0000000100000000 # initialize rs1
li x10, 0x2fcfe72a5b48e2d0 # initialize rs2
slt x18, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x24, 0x0000000100000001 # initialize rs1
li x2, 0xcaa3ce53122ff26c # initialize rs2
slt x15, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x17, 0x0be8e8abde9eb0a3 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
slt x25, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x22, 0xee41544579d9e64f # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
slt x2, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x20, 0xf94449ad52d2d0c5 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
slt x17, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x22, 0xad3635440d9a28db # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
slt x27, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x31, 0xcfa444426b99d15c # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
slt x28, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x29, 0xd5e0a004a7dfa380 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
slt x21, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x7, 0x525ebebe66a688dd # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
slt x21, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x31, 0xc3328ae14e42976e # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
slt x22, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x20, 0xfd9ca9767aff1359 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
slt x23, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x24, 0xe8859f512e63bb18 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
slt x6, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x10, 0x7da77c77be949e97 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x13, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x1, 0x3ff3c4df1403cbf0 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
slt x28, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x2, 0xd5fc177dd00d9f08 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
slt x19, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x1, 0x42de86e3eea147e7 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
slt x19, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x13, 0x8c5e3adf9c4cf6ec # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
slt x3, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x7, 0x5c314d9c6af1fbb7 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
slt x10, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x6, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
slt x20, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x26, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
slt x6, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x27, 0x0000000000000000 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
slt x7, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x6, 0x0000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
slt x15, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x29, 0x0000000000000000 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
slt x1, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000000000000 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
slt x31, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000000000000 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
slt x24, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x18, 0x0000000000000000 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
slt x29, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x26, 0x0000000000000000 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
slt x6, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x31, 0x0000000000000000 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
slt x21, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000000000000 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x6, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x21, 0x0000000000000000 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
slt x10, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x7, 0x0000000000000000 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
slt x14, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x31, 0x0000000000000000 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
slt x21, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x7, 0x0000000000000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
slt x17, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x31, 0x0000000000000000 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
slt x12, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x30, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
slt x11, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x7, 0x0000000000000001 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
slt x6, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x8, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
slt x6, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x1, 0x0000000000000001 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
slt x23, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x12, 0x0000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
slt x1, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x6, 0x0000000000000001 # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
slt x12, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
slt x21, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x16, 0x0000000000000001 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
slt x25, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x25, 0x0000000000000001 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
slt x8, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x24, 0x0000000000000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
slt x29, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x0000000000000001 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x3, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x14, 0x0000000000000001 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
slt x31, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x19, 0x0000000000000001 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
slt x20, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x9, 0x0000000000000001 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
slt x22, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x6, 0x0000000000000001 # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
slt x29, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x9, 0x0000000000000001 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
slt x18, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x14, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
slt x6, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x17, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
slt x24, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x9, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
slt x22, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x10, 0x0000000000000002 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
slt x18, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x27, 0x0000000000000002 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
slt x11, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x27, 0x0000000000000002 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
slt x17, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x7, 0x0000000000000002 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
slt x6, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x27, 0x0000000000000002 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
slt x7, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x12, 0x0000000000000002 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
slt x9, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x30, 0x0000000000000002 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
slt x17, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x0000000000000002 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x13, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x15, 0x0000000000000002 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
slt x22, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x31, 0x0000000000000002 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
slt x14, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x5, 0x0000000000000002 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
slt x20, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x19, 0x0000000000000002 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
slt x13, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x19, 0x0000000000000002 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
slt x11, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x25, 0x8000000000000000 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
slt x5, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x29, 0x8000000000000000 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
slt x27, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x17, 0x8000000000000000 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
slt x28, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x1, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
slt x24, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x30, 0x8000000000000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
slt x28, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x21, 0x8000000000000000 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
slt x11, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x24, 0x8000000000000000 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
slt x12, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x15, 0x8000000000000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
slt x26, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x15, 0x8000000000000000 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
slt x3, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x3, 0x8000000000000000 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
slt x23, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x8000000000000000 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x1, x9, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x17, 0x8000000000000000 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
slt x25, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x2, 0x8000000000000000 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
slt x12, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x6, 0x8000000000000000 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
slt x18, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x28, 0x8000000000000000 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
slt x6, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x6, 0x8000000000000000 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
slt x31, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x29, 0x8000000000000001 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
slt x9, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x1, 0x8000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
slt x16, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x26, 0x8000000000000001 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
slt x5, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x29, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
slt x8, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x22, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
slt x1, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
slt x31, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x27, 0x8000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
slt x24, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x23, 0x8000000000000001 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
slt x16, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x3, 0x8000000000000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
slt x30, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x31, 0x8000000000000001 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
slt x17, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x8000000000000001 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x17, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x23, 0x8000000000000001 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
slt x16, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x7, 0x8000000000000001 # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
slt x31, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x5, 0x8000000000000001 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
slt x12, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x27, 0x8000000000000001 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
slt x6, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x11, 0x8000000000000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
slt x7, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x5, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
slt x20, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x16, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
slt x13, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x5, 0x7fffffffffffffff # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
slt x22, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x8, 0x7fffffffffffffff # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
slt x1, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x19, 0x7fffffffffffffff # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
slt x9, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x24, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
slt x22, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x9, 0x7fffffffffffffff # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
slt x11, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x5, 0x7fffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
slt x25, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x18, 0x7fffffffffffffff # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
slt x28, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x26, 0x7fffffffffffffff # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
slt x2, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x7fffffffffffffff # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x9, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x6, 0x7fffffffffffffff # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
slt x9, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x5, 0x7fffffffffffffff # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
slt x24, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x13, 0x7fffffffffffffff # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
slt x30, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x23, 0x7fffffffffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
slt x2, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x21, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
slt x1, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x20, 0x7ffffffffffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
slt x27, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x3, 0x7ffffffffffffffe # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
slt x1, x3, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x1, 0x7ffffffffffffffe # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
slt x29, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x22, 0x7ffffffffffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
slt x26, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x21, 0x7ffffffffffffffe # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
slt x12, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
slt x14, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x31, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
slt x22, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x9, 0x7ffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
slt x12, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x19, 0x7ffffffffffffffe # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
slt x7, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x3, 0x7ffffffffffffffe # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
slt x24, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x7ffffffffffffffe # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x6, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x24, 0x7ffffffffffffffe # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
slt x1, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x9, 0x7ffffffffffffffe # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
slt x23, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x10, 0x7ffffffffffffffe # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
slt x5, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x16, 0x7ffffffffffffffe # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
slt x7, x16, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x2, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
slt x27, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x8, 0xffffffffffffffff # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
slt x1, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x29, 0xffffffffffffffff # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
slt x3, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x9, 0xffffffffffffffff # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
slt x13, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x2, 0xffffffffffffffff # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
slt x8, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x28, 0xffffffffffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
slt x2, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x17, 0xffffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
slt x19, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x21, 0xffffffffffffffff # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
slt x9, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x2, 0xffffffffffffffff # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
slt x14, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x17, 0xffffffffffffffff # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
slt x5, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x7, 0xffffffffffffffff # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
slt x27, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0xffffffffffffffff # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x8, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x5, 0xffffffffffffffff # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
slt x3, x5, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x30, 0xffffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
slt x6, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x10, 0xffffffffffffffff # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
slt x16, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x14, 0xffffffffffffffff # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
slt x28, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x25, 0xffffffffffffffff # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
slt x23, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x29, 0xfffffffffffffffe # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
slt x20, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x6, 0xfffffffffffffffe # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
slt x24, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x5, 0xfffffffffffffffe # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
slt x30, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x19, 0xfffffffffffffffe # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
slt x29, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x26, 0xfffffffffffffffe # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
slt x25, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x7, 0xfffffffffffffffe # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
slt x9, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0xfffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
slt x3, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
slt x8, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x3, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
slt x2, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x17, 0xfffffffffffffffe # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
slt x29, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0xfffffffffffffffe # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x24, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x6, 0xfffffffffffffffe # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
slt x8, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x26, 0xfffffffffffffffe # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
slt x30, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x20, 0xfffffffffffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
slt x11, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x11, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
slt x26, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x12, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
slt x3, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
slt x31, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
slt x8, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
slt x10, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
slt x30, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
slt x20, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
slt x31, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
slt x25, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
slt x1, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
slt x16, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
slt x18, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x11, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
slt x2, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
slt x17, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
slt x14, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
slt x16, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
slt x15, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
slt x22, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
slt x17, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
slt x6, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
slt x30, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
slt x17, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
slt x7, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
slt x12, x18, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
slt x16, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
slt x7, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
slt x28, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x11, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
slt x26, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
slt x16, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
slt x25, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
slt x23, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
slt x15, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x9, 0x5555555555555555 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
slt x27, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x10, 0x5555555555555555 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
slt x16, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x23, 0x5555555555555555 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
slt x14, x23, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x26, 0x5555555555555555 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
slt x14, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x24, 0x5555555555555555 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
slt x18, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x16, 0x5555555555555555 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
slt x31, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x19, 0x5555555555555555 # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
slt x28, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x10, 0x5555555555555555 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
slt x19, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x18, 0x5555555555555555 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
slt x17, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x15, 0x5555555555555555 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
slt x6, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x5555555555555555 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x2, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x11, 0x5555555555555555 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
slt x14, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x9, 0x5555555555555555 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
slt x22, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x2, 0x5555555555555555 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
slt x28, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x17, 0x5555555555555555 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
slt x12, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x11, 0x5555555555555555 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
slt x5, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x3, 0x00000000ffffffff # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
slt x30, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x10, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
slt x20, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x31, 0x00000000ffffffff # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
slt x22, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x24, 0x00000000ffffffff # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
slt x16, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x16, 0x00000000ffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
slt x6, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x18, 0x00000000ffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
slt x23, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x12, 0x00000000ffffffff # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
slt x22, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x25, 0x00000000ffffffff # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
slt x11, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x28, 0x00000000ffffffff # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
slt x5, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x21, 0x00000000ffffffff # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
slt x22, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x00000000ffffffff # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x23, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x8, 0x00000000ffffffff # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
slt x13, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
slt x14, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x27, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
slt x7, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x24, 0x00000000ffffffff # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
slt x2, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x13, 0x00000000ffffffff # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
slt x21, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x6, 0x00000000fffffffe # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
slt x9, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x24, 0x00000000fffffffe # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
slt x18, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x24, 0x00000000fffffffe # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
slt x14, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x27, 0x00000000fffffffe # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
slt x15, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x2, 0x00000000fffffffe # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
slt x5, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x30, 0x00000000fffffffe # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
slt x11, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x20, 0x00000000fffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
slt x1, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x19, 0x00000000fffffffe # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
slt x1, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x6, 0x00000000fffffffe # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
slt x8, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x9, 0x00000000fffffffe # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
slt x30, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x00000000fffffffe # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x29, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x21, 0x00000000fffffffe # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
slt x13, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x21, 0x00000000fffffffe # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
slt x6, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x13, 0x00000000fffffffe # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
slt x10, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x26, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
slt x14, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x17, 0x00000000fffffffe # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
slt x18, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x28, 0x0000000100000000 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
slt x13, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x26, 0x0000000100000000 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
slt x21, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x22, 0x0000000100000000 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
slt x24, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x16, 0x0000000100000000 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
slt x7, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x6, 0x0000000100000000 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
slt x12, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x26, 0x0000000100000000 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
slt x31, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
slt x5, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000000 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
slt x26, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
slt x11, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x15, 0x0000000100000000 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
slt x1, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x0000000100000000 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x28, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x13, 0x0000000100000000 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
slt x15, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
slt x16, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x11, 0x0000000100000000 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
slt x6, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x9, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
slt x19, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x29, 0x0000000100000000 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
slt x22, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x19, 0x0000000100000001 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
slt x28, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x8, 0x0000000100000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
slt x7, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x9, 0x0000000100000001 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
slt x14, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x12, 0x0000000100000001 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
slt x28, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x1, 0x0000000100000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
slt x29, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x23, 0x0000000100000001 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
slt x21, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000001 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
slt x18, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x12, 0x0000000100000001 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
slt x21, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
slt x18, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000100000001 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
slt x10, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x0000000100000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
slt x20, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x6, 0x0000000100000001 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
slt x21, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x22, 0x0000000100000001 # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
slt x27, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x11, 0x0000000100000001 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
slt x3, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x11, 0x0000000100000001 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
slt x23, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x16, 0x0000000100000001 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
slt x7, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x0443e5710842b03c # initialize rs1
li x0, 0x66041f8f729894a7 # initialize rs2
slt x6, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xc326fd84f258d6c0 # initialize rs1
li x1, 0x5e134537ed376f2b # initialize rs2
slt x14, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x8d512034cc3cedfc # initialize rs1
li x2, 0x2d4d0f1c7c2a6b38 # initialize rs2
slt x6, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x724153a63df61e6d # initialize rs1
li x3, 0x5a5738956eb130b2 # initialize rs2
slt x29, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9c0abc16c232ccbe # initialize rs1
li x4, 0x665863589c2a5e49 # initialize rs2
slt x5, x4, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
li x5, 0x2a6142b5fedd0a73 # initialize rs1
li x5, 0xe96ec128f74bca8b # initialize rs2
slt x20, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x312a71cd6740d322 # initialize rs1
li x6, 0x5d2e06f7c6c94f2a # initialize rs2
slt x4, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x4, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xe792ebba8e46b312 # initialize rs1
li x7, 0x5e97e153a8b49dc8 # initialize rs2
slt x19, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x881d6352b00053f2 # initialize rs1
li x8, 0x473f30340b3d9d32 # initialize rs2
slt x13, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x1aae455db2f812d3 # initialize rs1
li x9, 0xfa23c9c9a0d64f73 # initialize rs2
slt x16, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x9ebb726e6c2858b9 # initialize rs1
li x10, 0xc9225b93ae2c24e0 # initialize rs2
slt x7, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x57a4f12eb611a711 # initialize rs1
li x11, 0x9238017236a5f7b5 # initialize rs2
slt x5, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x172499c73dc2acd7 # initialize rs1
li x12, 0xc3747e55031ebbf6 # initialize rs2
slt x18, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xecbcdaa5a69da670 # initialize rs1
li x13, 0x803fd4d472872962 # initialize rs2
slt x10, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xff35350992ccb2b9 # initialize rs1
li x14, 0xf9f5ec025ee5ee83 # initialize rs2
slt x1, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x2992ad248ec30f21 # initialize rs1
li x15, 0x9c47b249b21d262e # initialize rs2
slt x16, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x8b87e5dc75c201e1 # initialize rs1
li x16, 0xb13f59c2c2a8ee24 # initialize rs2
slt x2, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xfa49b41da02cfc42 # initialize rs1
li x17, 0xbc621d6385b711ee # initialize rs2
slt x24, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x9ab710039ebbac8e # initialize rs1
li x18, 0x911923a248f9d642 # initialize rs2
slt x17, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x7950064de47d8d61 # initialize rs1
li x19, 0x2e609932b417c966 # initialize rs2
slt x20, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x2964394fcf57a70c # initialize rs1
li x20, 0xfb744e6d49774de4 # initialize rs2
slt x25, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x0c5536dacaf412dd # initialize rs1
li x21, 0x0cd36877e349496d # initialize rs2
slt x19, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x644c50a74df39266 # initialize rs1
li x22, 0x7935b13b6e59981b # initialize rs2
slt x30, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x1593d7bd6e4869a6 # initialize rs1
li x23, 0xbcadc5c1d0a41f0c # initialize rs2
slt x13, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x5d40bf7bdb8c067b # initialize rs1
li x24, 0xee8cbd39268451a3 # initialize rs2
slt x29, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x6dceb0a2aae39452 # initialize rs1
li x25, 0x25b7837275d60bf1 # initialize rs2
slt x31, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xbdfa1e3828b86ede # initialize rs1
li x26, 0xbe39cc4a4a6844c2 # initialize rs2
slt x23, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x2db6860ef5465842 # initialize rs1
li x27, 0x8a03a1739f4b39d9 # initialize rs2
slt x20, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x24be4e40e9f79dc6 # initialize rs1
li x28, 0xed59278a90c62671 # initialize rs2
slt x11, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x82aac98e44c35930 # initialize rs1
li x29, 0x2d6ee24302917e29 # initialize rs2
slt x12, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x14348df702bfe9a7 # initialize rs1
li x30, 0x18885e8897275734 # initialize rs2
slt x19, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xaeeb37143abd1880 # initialize rs1
li x31, 0x1509779bb020852c # initialize rs2
slt x13, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x28a63281238e28a4 # initialize rs1
li x25, 0x58e6abd2eefeac09 # initialize rs2
slt x0, x0, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xb140f1e47dd7c2d3 # initialize rs1
li x1, 0x98725643f7c4c7b2 # initialize rs2
slt x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x5c28ede1dade4629 # initialize rs1
li x18, 0x6b16fac6b59ceaae # initialize rs2
slt x2, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x02b86a9aef91f6f4 # initialize rs1
li x31, 0xcb4b7bb89953a919 # initialize rs2
slt x3, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x88dc254dbee5137e # initialize rs1
li x7, 0xcc180971d0e64c4c # initialize rs2
slt x4, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6d97c060e22411f9 # initialize rs1
li x10, 0xed04d5c67b8619dd # initialize rs2
slt x5, x5, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9c7e11ea3fbb294f # initialize rs1
li x3, 0x29808f43c17ffeff # initialize rs2
slt x6, x6, x3 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x43c97defc207ac03 # initialize rs1
li x2, 0x74656739511f8bc9 # initialize rs2
slt x7, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x9d37b32f490fa6ca # initialize rs1
li x23, 0x5fd455caf3592264 # initialize rs2
slt x8, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xebe2499fa664e3fc # initialize rs1
li x26, 0x2dab2b5ef1244b4d # initialize rs2
slt x9, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xf9acf51a6662aa2b # initialize rs1
li x31, 0x7ff1f08668fd26e4 # initialize rs2
slt x10, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x33652894be1afc88 # initialize rs1
li x12, 0x1362d703d80523d6 # initialize rs2
slt x11, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x95d086f7ab990629 # initialize rs1
li x24, 0x647ddd66916c3362 # initialize rs2
slt x12, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xd9313ceb99ec2ca4 # initialize rs1
li x5, 0xb4b8bfa660768711 # initialize rs2
slt x13, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xbaa59cfc2a5772da # initialize rs1
li x9, 0x2614c7ae2d88841b # initialize rs2
slt x14, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x9b1e9e3cd6d2f2e0 # initialize rs1
li x18, 0x5c79d43f3498a5dd # initialize rs2
slt x15, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x92f57324a8ee108e # initialize rs1
li x19, 0xc417ae209300316a # initialize rs2
slt x16, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x3d9ca88a87279a58 # initialize rs1
li x30, 0x4a2fb9345bac2f87 # initialize rs2
slt x17, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xaa781fcc708f5582 # initialize rs1
li x16, 0x35df4ce4ce4d2285 # initialize rs2
slt x18, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x9f83474631daf1f5 # initialize rs1
li x6, 0x1d640f7c4cc5a20b # initialize rs2
slt x19, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x43f8d7abd5b2e74b # initialize rs1
li x2, 0xf61c2475b241ed1f # initialize rs2
slt x20, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x0efa07d920902a0b # initialize rs1
li x30, 0x23f5b9577f4b0de8 # initialize rs2
slt x21, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x0ae963266f56109c # initialize rs1
li x17, 0x581710594b3e2b2b # initialize rs2
slt x22, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xa6dd9a126c1f2c61 # initialize rs1
li x28, 0xf9588beba2623bed # initialize rs2
slt x23, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x3f22a6eae8eb5bed # initialize rs1
li x27, 0xd788dfb001fe0b02 # initialize rs2
slt x24, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x99c65320af0616e4 # initialize rs1
li x25, 0xa7190d1c7b10eb08 # initialize rs2
slt x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xcd3e2564bd15c032 # initialize rs1
li x5, 0xe15e8abc981301bc # initialize rs2
slt x26, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x35381672abbe3b1d # initialize rs1
li x15, 0xf5de6de89fed8860 # initialize rs2
slt x27, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x26c40b0b7634b357 # initialize rs1
li x28, 0x2e3408a9ed105198 # initialize rs2
slt x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x1f69f38908c2feaf # initialize rs1
li x19, 0x4b02a03ab619e065 # initialize rs2
slt x29, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x7a89d2977fc5f6bc # initialize rs1
li x3, 0x557d29ae92c9761e # initialize rs2
slt x30, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x46c949de95b7bdb3 # initialize rs1
li x9, 0x7d4bca5007d91168 # initialize rs2
slt x31, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x18, 0xd06b09a8cb605813 # initialize rs1
li x0, 0x14aeea91618d3eb2 # initialize rs2
slt x0, x18, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x22, 0x1e6920c3484c3dcb # initialize rs1
li x1, 0xbaf088b3c4a08052 # initialize rs2
slt x1, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x6, 0x5fee4c6ff9aa3bc1 # initialize rs1
li x2, 0xd9a6bfabbc187b08 # initialize rs2
slt x2, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x5, 0x08698abe613c2a3f # initialize rs1
li x3, 0x3f0f617751e6f0b6 # initialize rs2
slt x3, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0xa18aa9ae33732284 # initialize rs1
li x4, 0x701cf5926aedd8d5 # initialize rs2
slt x4, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0xdbd66c8854ca9008 # initialize rs1
li x5, 0x3e5c44d90ca381d9 # initialize rs2
slt x5, x4, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x1, 0xf0503ad3ff22a388 # initialize rs1
li x6, 0x83912331a73ed04a # initialize rs2
slt x6, x1, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0xf334a5e3fe74a92c # initialize rs1
li x7, 0x391c287e863f190c # initialize rs2
slt x7, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x29, 0xf7c460b949152f46 # initialize rs1
li x8, 0x8fc6b5fd1c1f1567 # initialize rs2
slt x8, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x16, 0x2866c67c4ce8802e # initialize rs1
li x9, 0x7aca71e907f62104 # initialize rs2
slt x9, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x28, 0x46ea7a24c72dd5c6 # initialize rs1
li x10, 0x5812d2ad9da1a800 # initialize rs2
slt x10, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x24, 0xcd9edd37d6e115f9 # initialize rs1
li x11, 0xc96701b2f323ae31 # initialize rs2
slt x11, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x5, 0x99a720840c722ab9 # initialize rs1
li x12, 0x89bff512bab40887 # initialize rs2
slt x12, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x8, 0x20efa37c49e44fb5 # initialize rs1
li x13, 0xd2d4f69402be80d7 # initialize rs2
slt x13, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x11, 0xd22142846da3c2f9 # initialize rs1
li x14, 0x8c037b9b1a8a6265 # initialize rs2
slt x14, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x30, 0x0053706a46018582 # initialize rs1
li x15, 0xff3151f88e94736c # initialize rs2
slt x15, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x23, 0x454d5d4e754043c6 # initialize rs1
li x16, 0xfeb323eeb6af1797 # initialize rs2
slt x16, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x27, 0x870733562f1b5aff # initialize rs1
li x17, 0xa2d7bd72fdd71a9f # initialize rs2
slt x17, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x29, 0x3d769c6ca3278a3b # initialize rs1
li x18, 0xed164fc287eb8ef3 # initialize rs2
slt x18, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x12, 0x5bff84a971738c28 # initialize rs1
li x19, 0x70b9efbf79da4ec2 # initialize rs2
slt x19, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x13, 0x8bfd9ae70315cfdf # initialize rs1
li x20, 0xa320a40112ffc908 # initialize rs2
slt x20, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x25, 0xfbec6e87eba03027 # initialize rs1
li x21, 0x04c67d6c5a4b4daa # initialize rs2
slt x21, x25, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x17, 0x0598b3751ef2ac2e # initialize rs1
li x22, 0x9d4c906e7b8d1daf # initialize rs2
slt x22, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x26, 0xe4716c527aa6cff9 # initialize rs1
li x23, 0xe84d700ec45233ad # initialize rs2
slt x23, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x8, 0x8cc69080433a5b3d # initialize rs1
li x24, 0x37f9ff079c5de2bf # initialize rs2
slt x24, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x7, 0x6f307108965babda # initialize rs1
li x25, 0x7eea409d1c249438 # initialize rs2
slt x25, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x12, 0x01a70a5614f1ec49 # initialize rs1
li x26, 0x16645d152d43c25f # initialize rs2
slt x26, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x12, 0x8f2cb49ac7837983 # initialize rs1
li x27, 0xd51853524beaa187 # initialize rs2
slt x27, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x10, 0x7be31280b9313e9f # initialize rs1
li x28, 0xd5bd13826c3aee82 # initialize rs2
slt x28, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x16, 0x5e9f4bd344013aae # initialize rs1
li x29, 0x79922fe577340e2f # initialize rs2
slt x29, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x17, 0x5702c37336804e25 # initialize rs1
li x30, 0x37c0041787b2b70b # initialize rs2
slt x30, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x22, 0x3f64aabee01da202 # initialize rs1
li x31, 0xe802d53f2ec5b37b # initialize rs2
slt x31, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x4b8882ff77e6f5c1 # initialize rs1
li x0, 0xdbd78c5d52f947b1 # initialize rs2
slt x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x30365b900f7e6095 # initialize rs1
li x1, 0x933a1b29d0a7c081 # initialize rs2
slt x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x5a816e1998122f77 # initialize rs1
li x2, 0x36c1196d7756fa39 # initialize rs2
slt x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xe6134c92788c9792 # initialize rs1
li x3, 0xf6caab135827b7e9 # initialize rs2
slt x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb993b513312d308d # initialize rs1
li x4, 0x6e912244479b2d29 # initialize rs2
slt x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1831a915a71ffe28 # initialize rs1
li x5, 0x9da312bfbfa8486c # initialize rs2
slt x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x63afe16f5879fac3 # initialize rs1
li x6, 0x2f52b0a90e383251 # initialize rs2
slt x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xeeac5217d2b4c8ed # initialize rs1
li x7, 0xa46d29102177ac44 # initialize rs2
slt x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xec929bd01bb274e9 # initialize rs1
li x8, 0x1e83af9b43d75de9 # initialize rs2
slt x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x8fa240902ef67a5f # initialize rs1
li x9, 0x80f3a057753dacda # initialize rs2
slt x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x9b973b5fe5b2d172 # initialize rs1
li x10, 0x805353dc0871734a # initialize rs2
slt x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x79039a557bb68f5e # initialize rs1
li x11, 0x39884ea5b463e9e6 # initialize rs2
slt x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xeb289eca1f0d5f02 # initialize rs1
li x12, 0x2ce26efeaa446325 # initialize rs2
slt x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xf5b00c413894cdc9 # initialize rs1
li x13, 0xa0298b0f2e395190 # initialize rs2
slt x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x8044e4b4300defef # initialize rs1
li x14, 0xb7ba2a72d782d65e # initialize rs2
slt x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x325c8f494e60f37c # initialize rs1
li x15, 0x70bd85a768b14d47 # initialize rs2
slt x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x4f728e22e12b2afa # initialize rs1
li x16, 0xf5e30b388fd21956 # initialize rs2
slt x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x9ea842982716d2c9 # initialize rs1
li x17, 0x0b7de46846597b79 # initialize rs2
slt x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x18dec99bc5908e17 # initialize rs1
li x18, 0xed6ed85dccb2706c # initialize rs2
slt x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xc0b7c7bb54d890ce # initialize rs1
li x19, 0xb238e2a2b4fe410a # initialize rs2
slt x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x0f0ec6181707ca2c # initialize rs1
li x20, 0xee013cfa48dc561d # initialize rs2
slt x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x0f96afddf3d308f4 # initialize rs1
li x21, 0xc435f020f5efd5f7 # initialize rs2
slt x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x0e98448f08540391 # initialize rs1
li x22, 0xcc33abc56f4e6d03 # initialize rs2
slt x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x2626b8375b833065 # initialize rs1
li x23, 0x3691f3cee5c1869b # initialize rs2
slt x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xc3a821a697c758ff # initialize rs1
li x24, 0x4ad036f4f5e20245 # initialize rs2
slt x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x2a154677ecc92990 # initialize rs1
li x25, 0x9c79a60acbfa8a99 # initialize rs2
slt x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x3839d47629ea3eb7 # initialize rs1
li x26, 0xa1caee1014310de7 # initialize rs2
slt x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xc872aca369a6805e # initialize rs1
li x27, 0xae9b6fc8581fdc8d # initialize rs2
slt x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x0495853a14b72df2 # initialize rs1
li x28, 0xd52ce41c09a480c0 # initialize rs2
slt x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x4f163739b473db20 # initialize rs1
li x29, 0x79a7c11dae93982f # initialize rs2
slt x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x957e2e85e6634e16 # initialize rs1
li x30, 0xb8bbeb7920a0dadd # initialize rs2
slt x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x87acfb5aa82f7cf3 # initialize rs1
li x31, 0x421edce0bf1a11ec # initialize rs2
slt x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x26, x18 # perform first operation
slt x8, x11, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x21, x3, x12 # perform first operation
slt x29, x31, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x24, x2 # perform first operation
slt x27, x9, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x6, x7, x25 # perform first operation
slt x22, x6, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x3, x24, x7 # perform first operation
slt x24, x1, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x11, x9, x20 # perform first operation
slt x20, x10, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x22, x16 # perform first operation
slt x24, x5, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x9, x31, x17 # perform first operation
slt x9, x26, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x10, x2 # perform first operation
slt x7, x3, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x9, x19 # perform first operation
slt x9, x24, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x24, x1, x17 # perform first operation
slt x17, x2, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x22, x9, x7 # perform first operation
slt x26, x29, x28 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-add.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xeaa512b33f4a8abd # initialize rs1
li x24, 0xa673bdbd2995452a # initialize rs2
add x25, x0, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xf175f3dfb907ad96 # initialize rs1
li x30, 0xb2605c395c4b7ea1 # initialize rs2
add x16, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x7103a60caefe3c9c # initialize rs1
li x19, 0x99201c67cc5ce5dc # initialize rs2
add x17, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x06587591f533cf5a # initialize rs1
li x15, 0x0ddcce40076240f5 # initialize rs2
add x31, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xabc0f8991478ddcf # initialize rs1
li x26, 0xa8c9c0060c2d9615 # initialize rs2
add x22, x4, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x29463b9a8f865f5c # initialize rs1
li x4, 0x3e498d4923a2996d # initialize rs2
add x23, x5, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x23, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb8679e11c53bfcaf # initialize rs1
li x2, 0x9f2f62e9df4a5f55 # initialize rs2
add x29, x6, x2 # perform operation
RVTEST_SIGUPD(x7, x0, x29, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x6, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa60bef0cc4ff89ba # initialize rs1
li x4, 0xf6c6e227c7a9137e # initialize rs2
add x5, x7, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf65de99814a84cc0 # initialize rs1
li x24, 0x66aa280a22773413 # initialize rs2
add x26, x8, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xdd26fc4c41b2ac37 # initialize rs1
li x20, 0x08c2eb61b72635c8 # initialize rs2
add x7, x9, x20 # perform operation
RVTEST_SIGUPD(x6, x0, x7, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x5b6f1137dbc60702 # initialize rs1
li x5, 0x429ebecd8541527b # initialize rs2
add x15, x10, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x15, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xa7bb3ee598fea259 # initialize rs1
li x8, 0xaabf7cf743c647b1 # initialize rs2
add x16, x11, x8 # perform operation
RVTEST_SIGUPD(x6, x0, x16, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x471a0e78e81fbae6 # initialize rs1
li x21, 0xedccfc10ce0520a3 # initialize rs2
add x13, x12, x21 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xbaf03ed8cf1bfa5e # initialize rs1
li x19, 0x0286770119108578 # initialize rs2
add x28, x13, x19 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x7dfb2019dee8e75a # initialize rs1
li x22, 0xab3413c6d452b1aa # initialize rs2
add x20, x14, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x560b0a31f80c75e2 # initialize rs1
li x13, 0xae0a69d1aa6da444 # initialize rs2
add x21, x15, x13 # perform operation
RVTEST_SIGUPD(x6, x0, x21, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x5c60e245657a553d # initialize rs1
li x5, 0xd37f503768c62473 # initialize rs2
add x8, x16, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x8, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x765d24bd2f125793 # initialize rs1
li x9, 0x7dfa8c7996cabe72 # initialize rs2
add x25, x17, x9 # perform operation
RVTEST_SIGUPD(x6, x0, x25, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x65e9b870d899aed3 # initialize rs1
li x1, 0x81687b82c1f1ce78 # initialize rs2
add x20, x18, x1 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x0a2c1f61d8ef9e09 # initialize rs1
li x23, 0x345ae9f21903fcbe # initialize rs2
add x1, x19, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x44a57e924c360efc # initialize rs1
li x23, 0xb2f85aaef8134c69 # initialize rs2
add x1, x20, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xd7456f173a304e92 # initialize rs1
li x13, 0xc31c0d20da414075 # initialize rs2
add x25, x21, x13 # perform operation
RVTEST_SIGUPD(x6, x0, x25, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xc87725fcd02f01be # initialize rs1
li x2, 0x7341bdb0c4e3f776 # initialize rs2
add x4, x22, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x004484779c6fb66b # initialize rs1
li x24, 0x04fb36ba72b94eec # initialize rs2
add x10, x23, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xde892c29be5741ca # initialize rs1
li x31, 0x8bf87680ed7c42dc # initialize rs2
add x22, x24, x31 # perform operation
RVTEST_SIGUPD(x6, x0, x22, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xe899a96ddb9bf83a # initialize rs1
li x5, 0x72f41290d9bc2508 # initialize rs2
add x31, x25, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x30cad8b46bd7b3b0 # initialize rs1
li x24, 0x81aa00e9a5706d6a # initialize rs2
add x13, x26, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x3865952aa7c19a55 # initialize rs1
li x30, 0xfb6974b7f78c152d # initialize rs2
add x19, x27, x30 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xac34d45377509398 # initialize rs1
li x27, 0x055a779be94276b6 # initialize rs2
add x13, x28, x27 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xa0fd16fa86947a2a # initialize rs1
li x2, 0xaa5cbe6d7fb25c07 # initialize rs2
add x26, x29, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xa8cbca7480abaaa7 # initialize rs1
li x22, 0x896c11dd4964c761 # initialize rs2
add x13, x30, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x17dc6ab01191d3eb # initialize rs1
li x23, 0x160a3d17cd6d87ab # initialize rs2
add x28, x31, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x31, 0x2c23a096867ee1d1 # initialize rs1
li x0, 0xcf650437b4737f6b # initialize rs2
add x12, x31, x0 # perform operation
RVTEST_SIGUPD(x6, x0, x12, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x21, 0xabde2caee8510754 # initialize rs1
li x1, 0xa019fd5d7c812696 # initialize rs2
add x26, x21, x1 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x10, 0x2587e0d95926fe45 # initialize rs1
li x2, 0x7c20a9df8818ebd1 # initialize rs2
add x1, x10, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x24, 0x4d3e36f534a1a140 # initialize rs1
li x3, 0x049c24625e44271a # initialize rs2
add x10, x24, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
li x18, 0x128e3c158c2ab9e7 # initialize rs1
li x4, 0x545959064579f763 # initialize rs2
add x28, x18, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
li x15, 0xa6dd3cfeb61f3383 # initialize rs1
li x5, 0xc21eccb01e3e9d5a # initialize rs2
add x9, x15, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x9, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x12, 0xbd346c593e80450b # initialize rs1
li x6, 0xcd3a3208b1b60c2e # initialize rs2
add x19, x12, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x19, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0x3ce3e7fbc824ee49 # initialize rs1
li x7, 0x79a28c996eda0414 # initialize rs2
add x9, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x25, 0x5639a8adad8552a1 # initialize rs1
li x8, 0x8a1af462bb5a1302 # initialize rs2
add x7, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x29, 0xdfcf6182bba0120a # initialize rs1
li x9, 0x5a7f969fc6e566bb # initialize rs2
add x18, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x8, 0x503cec9762485bb0 # initialize rs1
li x10, 0x5a9b914e171ed8e8 # initialize rs2
add x5, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x12, 0xe2a240ed0e1adf3e # initialize rs1
li x11, 0xfeef4a1cd6c2de04 # initialize rs2
add x3, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x8, 0x31d15543d6e80caa # initialize rs1
li x12, 0x687221de13d924e0 # initialize rs2
add x24, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x19, 0x74155d487161c407 # initialize rs1
li x13, 0x47b499c1ec37b3f6 # initialize rs2
add x15, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x19, 0xa6208c266f1a1418 # initialize rs1
li x14, 0x0fa2713a54b0bd90 # initialize rs2
add x7, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x30, 0x02605100e2b2a528 # initialize rs1
li x15, 0xb8a64ff01df6fd75 # initialize rs2
add x24, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x30, 0x317ae68aa7004992 # initialize rs1
li x16, 0x9377e1183677f399 # initialize rs2
add x10, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x20, 0x7edce4c7b143e934 # initialize rs1
li x17, 0x08eead03273d99b3 # initialize rs2
add x7, x20, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x19, 0xe13083195a84c4f4 # initialize rs1
li x18, 0x1e8ad341d48f5523 # initialize rs2
add x10, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x7, 0x4a385905b80b00de # initialize rs1
li x19, 0xbde101c76669f293 # initialize rs2
add x29, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x31, 0xe1b6486a141a09bf # initialize rs1
li x20, 0xa0814c17705da2d4 # initialize rs2
add x11, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x17, 0x9bef3fbc1feba290 # initialize rs1
li x21, 0xabf5a09289ac71db # initialize rs2
add x10, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x7, 0x9984d1c0c9590a2d # initialize rs1
li x22, 0xcf1404cacfb2f30a # initialize rs2
add x5, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x21, 0x16cc5de529f67b34 # initialize rs1
li x23, 0x09d1c824a253b61f # initialize rs2
add x15, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x8, 0x3e1680a702676369 # initialize rs1
li x24, 0xb42a704ddce80b85 # initialize rs2
add x10, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x1, 0xb04855fbcf4f8157 # initialize rs1
li x25, 0xf0d1b0e9dbecc3d2 # initialize rs2
add x5, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x6, 0x94da01aa879e3f90 # initialize rs1
li x26, 0x9505e95da1415090 # initialize rs2
add x7, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x10, 0xb5ca9efb254adbca # initialize rs1
li x27, 0x0f29792414af9af3 # initialize rs2
add x6, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x21, 0xb5482e706f3156e1 # initialize rs1
li x28, 0x20936e61c1f4a91f # initialize rs2
add x13, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x3, 0x78e7918264267188 # initialize rs1
li x29, 0x0ba58d2e55ebfa2b # initialize rs2
add x12, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x9, 0x05d85cafce07bac4 # initialize rs1
li x30, 0x59e97a817f4311ca # initialize rs2
add x24, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x11, 0x3c76bbff4a0d9d8f # initialize rs1
li x31, 0x2f712b875e6822b7 # initialize rs2
add x25, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 504)

# Testcase cp_rd (Test destination rd = x0)
li x19, 0x67ceb07b1d01c852 # initialize rs1
li x9, 0x1bfbf146c5c29b42 # initialize rs2
add x0, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x15, 0x2df19c49bf9d2b53 # initialize rs1
li x3, 0xe21482b7cfc50d6b # initialize rs2
add x1, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x24, 0x214606929e470dd7 # initialize rs1
li x23, 0x2391fecd330ad053 # initialize rs2
add x2, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x12, 0xbd1b0cc22724b344 # initialize rs1
li x16, 0xbde6e2cfb5ee26ae # initialize rs2
add x3, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0x730d76e6351f8a76 # initialize rs1
li x15, 0x96b85b2a7e777eb0 # initialize rs2
add x4, x9, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x15, 0x61e6daa3ef638255 # initialize rs1
li x11, 0x335c35761f43cfe6 # initialize rs2
add x5, x15, x11 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0x92258f546dddc320 # initialize rs1
li x3, 0x3f25b0d1832b3566 # initialize rs2
add x6, x17, x3 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0x9c30788bde7f0f95 # initialize rs1
li x22, 0xd6fa2832e1029c63 # initialize rs2
add x7, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x14, 0xd6f2fa5e299ca5b0 # initialize rs1
li x6, 0x3babc7ce48e256d5 # initialize rs2
add x8, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x24, 0x722fc529abd547b5 # initialize rs1
li x27, 0x58a41f69761853a8 # initialize rs2
add x9, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x28, 0xd234b0b9a96acb3a # initialize rs1
li x23, 0x4d82a97af9420d89 # initialize rs2
add x10, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x29, 0xe52f458c447b4913 # initialize rs1
li x25, 0x506e0cb7a1ccba0d # initialize rs2
add x11, x29, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x15, 0x2ff6fb2739fa9f15 # initialize rs1
li x21, 0x99b96e125d502fef # initialize rs2
add x12, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x27, 0xb5393de234878449 # initialize rs1
li x2, 0x274043893150eca1 # initialize rs2
add x13, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x16, 0x752b6ef56b1a4a24 # initialize rs1
li x18, 0x4caf5728ae5c5fb6 # initialize rs2
add x14, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x8, 0x91ca2a0cad7173f3 # initialize rs1
li x10, 0x0a5fae4910ea9c6e # initialize rs2
add x15, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x29, 0x911cc2cb7ee64a02 # initialize rs1
li x27, 0xbe0e448a7c1d290e # initialize rs2
add x16, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x17, 0x41e50737bb9593ce # initialize rs1
li x14, 0xf3fbf58a770e9e1a # initialize rs2
add x17, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x23, 0xb3639c2a73db3138 # initialize rs1
li x29, 0xcdcad8c4574b4d2c # initialize rs2
add x18, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x19, 0xea5bdc986d7cad3a # initialize rs1
li x22, 0x359dfb35c4a12a8b # initialize rs2
add x19, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x18, 0x1b45516e307ebfa4 # initialize rs1
li x3, 0xa733fd8ce26a1786 # initialize rs2
add x20, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x9, 0x13cf4051bcf0ced0 # initialize rs1
li x31, 0x856251ed590c2b80 # initialize rs2
add x21, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x13, 0x6ab7cc247f505c5e # initialize rs1
li x17, 0x7b9d3be5894c4cb1 # initialize rs2
add x22, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x24, 0xa0a71cbcae4fca60 # initialize rs1
li x23, 0xd329eb7cd3cf7515 # initialize rs2
add x23, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x6, 0x3ded8f179b1fe1ca # initialize rs1
li x22, 0xa9ca19e367e311c8 # initialize rs2
add x24, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x27, 0xb36926e47f327ad1 # initialize rs1
li x26, 0x4788209b8360ea47 # initialize rs2
add x25, x27, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x31, 0x57837cf5b3c19898 # initialize rs1
li x14, 0x86090df0a0fcec24 # initialize rs2
add x26, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x8, 0x2f519a268cccb7f7 # initialize rs1
li x12, 0x840d2ad75b8a58d2 # initialize rs2
add x27, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x2, 0x0e15cae41f49ec4e # initialize rs1
li x19, 0x6e907cd7ff2a7212 # initialize rs2
add x28, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x19, 0xea92d50933697752 # initialize rs1
li x22, 0x1d3e035ce1739ac5 # initialize rs2
add x29, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x2, 0x73aa482737fc10a9 # initialize rs1
li x25, 0xebef50b12aeaaa07 # initialize rs2
add x30, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x19, 0x5ce1541309990c1e # initialize rs1
li x5, 0xc734fef144475eb2 # initialize rs2
add x31, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x17, 0x0000000000000000 # initialize rs1
li x11, 0xcfc4fdfe6e4d0687 # initialize rs2
add x26, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x31, 0x0000000000000001 # initialize rs1
li x21, 0xef0d27eb02325f87 # initialize rs2
add x19, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x2, 0x0000000000000002 # initialize rs1
li x24, 0xcaa2220af78bf6da # initialize rs2
add x6, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x14, 0x8000000000000000 # initialize rs1
li x5, 0x4c22332fc4834979 # initialize rs2
add x2, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
li x16, 0xadb72cf6e7a4e4c5 # initialize rs2
add x22, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
li x15, 0x8fcfbc84c29020cf # initialize rs2
add x21, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x25, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0b23e84db5a24c56 # initialize rs2
add x12, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x26, 0xffffffffffffffff # initialize rs1
li x13, 0xc2d1833850ffa733 # initialize rs2
add x18, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
li x3, 0x4202068717b42fab # initialize rs2
add x31, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0xc0eb017752ad2539 # initialize rs2
add x29, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x6581e48afb5f28f6 # initialize rs2
add x1, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x21, 0x5555555555555555 # initialize rs1
li x14, 0xc41a85c4a8d1af22 # initialize rs2
add x17, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x22, 0x00000000ffffffff # initialize rs1
li x17, 0x0ea4468a0deef137 # initialize rs2
add x13, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x30, 0x00000000fffffffe # initialize rs1
li x3, 0x408a36ce2ee71b0b # initialize rs2
add x16, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x22, 0x0000000100000000 # initialize rs1
li x6, 0xc3a185e8cf4fa685 # initialize rs2
add x9, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x8, 0x0000000100000001 # initialize rs1
li x14, 0xc64b1afbdd071d14 # initialize rs2
add x2, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x20, 0x31ef3545a80726a0 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
add x12, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x11, 0xcf49d1d56496ce3a # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
add x18, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x13, 0xf1b25527047af290 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
add x2, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x6, 0x6df08a6a6069de81 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
add x18, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x17, 0x0e515d398ada5aed # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
add x7, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x7, 0x709fbba360a566cb # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
add x13, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x20, 0xb857032db8112c60 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
add x19, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x16, 0x368456dadbf2e0f3 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
add x6, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x17, 0xacf61cbaaf3b0a2c # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
add x21, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x14, 0xf7db6d543caa25f5 # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
add x7, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x1, 0xc44f987d0f3a9189 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x9, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x17, 0x917734dad46f6b2d # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
add x10, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x30, 0xa9fe8cc3d51dde13 # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
add x12, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x3, 0x4b48f90f76fb913d # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
add x24, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x1, 0xa705c37aaf3809ea # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
add x16, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x21, 0xa74b14bd36ca14d2 # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
add x8, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x15, 0x0000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
add x11, x15, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x2, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
add x21, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x29, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
add x16, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x2, 0x0000000000000000 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
add x19, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x13, 0x0000000000000000 # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
add x8, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x29, 0x0000000000000000 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
add x8, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x7, 0x0000000000000000 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
add x9, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
add x21, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x26, 0x0000000000000000 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
add x23, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000000000000 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
add x18, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x0000000000000000 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x23, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x16, 0x0000000000000000 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
add x23, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x17, 0x0000000000000000 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
add x3, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x23, 0x0000000000000000 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
add x13, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x18, 0x0000000000000000 # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
add x30, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x27, 0x0000000000000000 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
add x20, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x12, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
add x17, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x25, 0x0000000000000001 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
add x26, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x31, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
add x24, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x31, 0x0000000000000001 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
add x19, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x7, 0x0000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
add x30, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x26, 0x0000000000000001 # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
add x17, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x28, 0x0000000000000001 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
add x18, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x6, 0x0000000000000001 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
add x29, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x25, 0x0000000000000001 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
add x21, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x1, 0x0000000000000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
add x24, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x12, 0x0000000000000001 # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x17, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x7, 0x0000000000000001 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
add x25, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x7, 0x0000000000000001 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
add x1, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x11, 0x0000000000000001 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
add x19, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x30, 0x0000000000000001 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
add x12, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x16, 0x0000000000000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
add x14, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x19, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
add x12, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x29, 0x0000000000000002 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
add x3, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x7, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
add x27, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x31, 0x0000000000000002 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
add x26, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x12, 0x0000000000000002 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
add x20, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x7, 0x0000000000000002 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
add x1, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x1, 0x0000000000000002 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
add x3, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x20, 0x0000000000000002 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
add x2, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000000000002 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
add x7, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x17, 0x0000000000000002 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
add x14, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x0000000000000002 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x29, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x23, 0x0000000000000002 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
add x20, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x15, 0x0000000000000002 # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
add x23, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x9, 0x0000000000000002 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
add x30, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x1, 0x0000000000000002 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
add x29, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x28, 0x0000000000000002 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
add x27, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x1, 0x8000000000000000 # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
add x13, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x7, 0x8000000000000000 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
add x21, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x31, 0x8000000000000000 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
add x10, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x21, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
add x6, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x26, 0x8000000000000000 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
add x2, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x21, 0x8000000000000000 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
add x16, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x10, 0x8000000000000000 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
add x29, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x23, 0x8000000000000000 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
add x25, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x5, 0x8000000000000000 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
add x3, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x24, 0x8000000000000000 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
add x8, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x8000000000000000 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x19, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x10, 0x8000000000000000 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
add x6, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x16, 0x8000000000000000 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
add x17, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x2, 0x8000000000000000 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
add x25, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x26, 0x8000000000000000 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
add x8, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x9, 0x8000000000000000 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
add x18, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x23, 0x8000000000000001 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
add x28, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x23, 0x8000000000000001 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
add x15, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x30, 0x8000000000000001 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
add x17, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x11, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
add x23, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x31, 0x8000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
add x1, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x19, 0x8000000000000001 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
add x3, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x13, 0x8000000000000001 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
add x6, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x1, 0x8000000000000001 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
add x13, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x6, 0x8000000000000001 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
add x10, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x13, 0x8000000000000001 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
add x23, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x8000000000000001 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x12, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x2, 0x8000000000000001 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
add x19, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x8, 0x8000000000000001 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
add x13, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x3, 0x8000000000000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
add x14, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x10, 0x8000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
add x17, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x5, 0x8000000000000001 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
add x13, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x31, 0x7fffffffffffffff # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
add x14, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x25, 0x7fffffffffffffff # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
add x22, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x31, 0x7fffffffffffffff # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
add x2, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x24, 0x7fffffffffffffff # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
add x16, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x14, 0x7fffffffffffffff # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
add x9, x14, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x25, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
add x22, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x19, 0x7fffffffffffffff # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
add x15, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
add x14, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x31, 0x7fffffffffffffff # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
add x29, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x2, 0x7fffffffffffffff # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
add x11, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x7fffffffffffffff # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x18, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x13, 0x7fffffffffffffff # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
add x8, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x22, 0x7fffffffffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
add x9, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x7, 0x7fffffffffffffff # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
add x24, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x8, 0x7fffffffffffffff # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
add x31, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x9, 0x7fffffffffffffff # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
add x10, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x29, 0x7ffffffffffffffe # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
add x23, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x24, 0x7ffffffffffffffe # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
add x20, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x31, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
add x13, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x5, 0x7ffffffffffffffe # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
add x20, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x16, 0x7ffffffffffffffe # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
add x29, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x19, 0x7ffffffffffffffe # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
add x30, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
add x13, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x18, 0x7ffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
add x9, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x14, 0x7ffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
add x29, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x26, 0x7ffffffffffffffe # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
add x1, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x7ffffffffffffffe # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x16, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x9, 0x7ffffffffffffffe # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
add x15, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x16, 0x7ffffffffffffffe # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
add x8, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
add x8, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x27, 0x7ffffffffffffffe # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
add x29, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x21, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
add x22, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x31, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
add x12, x31, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x22, 0xffffffffffffffff # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
add x28, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x15, 0xffffffffffffffff # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
add x7, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x19, 0xffffffffffffffff # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
add x16, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x23, 0xffffffffffffffff # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
add x21, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x24, 0xffffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
add x28, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x25, 0xffffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
add x9, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x7, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
add x12, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x13, 0xffffffffffffffff # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
add x22, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x9, 0xffffffffffffffff # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
add x12, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0xffffffffffffffff # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x14, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x22, 0xffffffffffffffff # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
add x28, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x7, 0xffffffffffffffff # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
add x10, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x14, 0xffffffffffffffff # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
add x30, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x23, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
add x19, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x21, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
add x3, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x15, 0xfffffffffffffffe # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
add x1, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x28, 0xfffffffffffffffe # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
add x27, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x30, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
add x5, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x17, 0xfffffffffffffffe # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
add x7, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x7, 0xfffffffffffffffe # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
add x22, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x17, 0xfffffffffffffffe # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
add x2, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
add x14, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x3, 0xfffffffffffffffe # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
add x6, x3, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x2, 0xfffffffffffffffe # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
add x18, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x2, 0xfffffffffffffffe # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
add x20, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0xfffffffffffffffe # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x23, x16, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x31, 0xfffffffffffffffe # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
add x2, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x20, 0xfffffffffffffffe # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
add x9, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x18, 0xfffffffffffffffe # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
add x16, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x30, 0xfffffffffffffffe # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
add x24, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x29, 0xfffffffffffffffe # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
add x17, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
add x3, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
add x31, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
add x29, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
add x29, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
add x21, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
add x26, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
add x29, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
add x21, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
add x9, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
add x8, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x6, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
add x8, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
add x7, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
add x31, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
add x19, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
add x11, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
add x26, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
add x24, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
add x9, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
add x22, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
add x22, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
add x14, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
add x10, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
add x10, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
add x21, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
add x13, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x25, x20, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
add x21, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
add x6, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
add x13, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
add x22, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
add x24, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x24, 0x5555555555555555 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
add x20, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x13, 0x5555555555555555 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
add x14, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x11, 0x5555555555555555 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
add x2, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x3, 0x5555555555555555 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
add x28, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x15, 0x5555555555555555 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
add x21, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x31, 0x5555555555555555 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
add x1, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x12, 0x5555555555555555 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
add x5, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x15, 0x5555555555555555 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
add x24, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x12, 0x5555555555555555 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
add x31, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x12, 0x5555555555555555 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
add x8, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x5555555555555555 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x24, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x29, 0x5555555555555555 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
add x10, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x30, 0x5555555555555555 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
add x11, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x29, 0x5555555555555555 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
add x24, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x20, 0x5555555555555555 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
add x18, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x5, 0x5555555555555555 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
add x2, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x12, 0x00000000ffffffff # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
add x27, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x7, 0x00000000ffffffff # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
add x11, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x15, 0x00000000ffffffff # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
add x9, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x5, 0x00000000ffffffff # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
add x31, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x20, 0x00000000ffffffff # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
add x29, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x21, 0x00000000ffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
add x26, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x9, 0x00000000ffffffff # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
add x23, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x11, 0x00000000ffffffff # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
add x1, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x15, 0x00000000ffffffff # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
add x3, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x31, 0x00000000ffffffff # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
add x22, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000ffffffff # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x29, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x11, 0x00000000ffffffff # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
add x13, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
add x24, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x18, 0x00000000ffffffff # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
add x25, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x19, 0x00000000ffffffff # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
add x22, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x13, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
add x31, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x8, 0x00000000fffffffe # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
add x23, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x22, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
add x3, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x18, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
add x25, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x21, 0x00000000fffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
add x2, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x1, 0x00000000fffffffe # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
add x28, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x15, 0x00000000fffffffe # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
add x9, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x10, 0x00000000fffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
add x14, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x22, 0x00000000fffffffe # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
add x25, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
add x24, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x14, 0x00000000fffffffe # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
add x2, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x00000000fffffffe # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x21, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x13, 0x00000000fffffffe # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
add x12, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x19, 0x00000000fffffffe # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
add x28, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x3, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
add x20, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x10, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
add x11, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x9, 0x00000000fffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
add x12, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x13, 0x0000000100000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
add x28, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x29, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
add x1, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x17, 0x0000000100000000 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
add x31, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x16, 0x0000000100000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
add x14, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x16, 0x0000000100000000 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
add x14, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x25, 0x0000000100000000 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
add x21, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x7, 0x0000000100000000 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
add x23, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x22, 0x0000000100000000 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
add x30, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x12, 0x0000000100000000 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
add x16, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x11, 0x0000000100000000 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
add x29, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0x0000000100000000 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x7, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x2, 0x0000000100000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
add x11, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x20, 0x0000000100000000 # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
add x18, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x29, 0x0000000100000000 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
add x13, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x28, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
add x11, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x6, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
add x18, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x29, 0x0000000100000001 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
add x9, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x30, 0x0000000100000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
add x26, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x16, 0x0000000100000001 # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
add x28, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x12, 0x0000000100000001 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
add x25, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x31, 0x0000000100000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
add x29, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x16, 0x0000000100000001 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
add x2, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
add x6, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x22, 0x0000000100000001 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
add x26, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000100000001 # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
add x30, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000100000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
add x27, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000100000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
add x3, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x22, 0x0000000100000001 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
add x3, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x27, 0x0000000100000001 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
add x19, x27, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x27, 0x0000000100000001 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
add x6, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x15, 0x0000000100000001 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
add x23, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x12, 0x0000000100000001 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
add x14, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xbb0abf30ab8a4c83 # initialize rs1
li x0, 0x1c1927b0e39c4a01 # initialize rs2
add x25, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x6f1df1ea6ab15f50 # initialize rs1
li x1, 0x9e88736ef6868040 # initialize rs2
add x6, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x35a0f3d4057fbb8c # initialize rs1
li x2, 0x03b438971f2dfcf9 # initialize rs2
add x17, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x4a9527e8bc52b5ec # initialize rs1
li x3, 0x221abb0acd4932f5 # initialize rs2
add x1, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9eb33c93d388a6de # initialize rs1
li x4, 0xe96434837d13e222 # initialize rs2
add x1, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x10b1f43070c129c5 # initialize rs1
li x5, 0xaf9dd50a98056ecc # initialize rs2
add x25, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x25, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xfeeb3eacede37412 # initialize rs1
li x6, 0x64982b4e73c34b2a # initialize rs2
add x12, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xc71d5c136ab0ca9e # initialize rs1
li x7, 0xe3492b235b6d61e1 # initialize rs2
add x5, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x36f26b28afbd03aa # initialize rs1
li x8, 0x0566132fc1cbc846 # initialize rs2
add x13, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x799de966c3e58899 # initialize rs1
li x9, 0x784bc8cbde40e8a5 # initialize rs2
add x3, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x87a15622e86fd29e # initialize rs1
li x10, 0x71d56b92e4566dca # initialize rs2
add x3, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xa93c5fbd7a2697e8 # initialize rs1
li x11, 0xb76690173b4fd285 # initialize rs2
add x12, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xf5899ae5cc908ff1 # initialize rs1
li x12, 0x063984b8c88c34b8 # initialize rs2
add x22, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x7e1818ccefadd6ae # initialize rs1
li x13, 0xb357845555544459 # initialize rs2
add x2, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xeb318db695d91da0 # initialize rs1
li x14, 0x39dca97ad8ee2a9c # initialize rs2
add x22, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x26f5124dbe5871d9 # initialize rs1
li x15, 0x795b6a3fdff8a390 # initialize rs2
add x24, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xa2bfb9a7dd738a73 # initialize rs1
li x16, 0x5accf8923b615351 # initialize rs2
add x1, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xfcf350c0c4e7755d # initialize rs1
li x17, 0x9e369427f3346dc7 # initialize rs2
add x27, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x60ad7fcfb1487535 # initialize rs1
li x18, 0x65b1f8a38582c8a2 # initialize rs2
add x15, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x72a047df089eb8ba # initialize rs1
li x19, 0x3173bc29cc608d12 # initialize rs2
add x11, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xb72e5af62d682909 # initialize rs1
li x20, 0x1cc523aa8522df0e # initialize rs2
add x11, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x1fb9d294a12f587a # initialize rs1
li x21, 0xf2121294b86db77f # initialize rs2
add x8, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x6b85a99c293cc29d # initialize rs1
li x22, 0x81cd4699d2b25c78 # initialize rs2
add x28, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xdf7754fb7176a71e # initialize rs1
li x23, 0x3260876df9cbc80d # initialize rs2
add x12, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xee77630760d85fb5 # initialize rs1
li x24, 0x81a08aeab6987156 # initialize rs2
add x26, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x63d1466be7977f87 # initialize rs1
li x25, 0x0781ba0842535c0b # initialize rs2
add x6, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x8de3ebba7fc1d18e # initialize rs1
li x26, 0x2aae439959033bb0 # initialize rs2
add x25, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x3dec5320e9111ec3 # initialize rs1
li x27, 0xd3e1f54476c1ccb6 # initialize rs2
add x14, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xefa2217cadabf80f # initialize rs1
li x28, 0x07d9152dfb9b90aa # initialize rs2
add x15, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x87d084d78bfede87 # initialize rs1
li x29, 0x6c02e5d9a3ff58d4 # initialize rs2
add x21, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x827da8d2cb8c313d # initialize rs1
li x30, 0x9659a55b7f24495a # initialize rs2
add x2, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xc3f1a35090af55fb # initialize rs1
li x31, 0xb90ca147faa7d7b5 # initialize rs2
add x28, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xb014774c7193a356 # initialize rs1
li x7, 0xe475c77fe9673fe7 # initialize rs2
add x0, x0, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x26532c1b2d93a27c # initialize rs1
li x8, 0xf9e0fa72540da988 # initialize rs2
add x1, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xeae48a3327056621 # initialize rs1
li x8, 0x9011eede5268918c # initialize rs2
add x2, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xbe298aae5e2c0a26 # initialize rs1
li x31, 0xf592da6e54995033 # initialize rs2
add x3, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc5603e7aa216b8a0 # initialize rs1
li x20, 0x87bb2a70eb959a32 # initialize rs2
add x4, x4, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbbbb2c2be65c8f24 # initialize rs1
li x3, 0x6499acff544a85e2 # initialize rs2
add x5, x5, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xbb8495856dce1668 # initialize rs1
li x23, 0xa5c0fe146c2a2fe7 # initialize rs2
add x6, x6, x23 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf370dd1abd79ed3c # initialize rs1
li x17, 0x7eeb6e440cf3785a # initialize rs2
add x7, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x5692000bff6630a3 # initialize rs1
li x19, 0xc4922a7a8470503b # initialize rs2
add x8, x8, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x26b63fea1e380349 # initialize rs1
li x12, 0x73844b43d57e4f28 # initialize rs2
add x9, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x35d9501e7b8cea49 # initialize rs1
li x28, 0xc1f68b9d62ecfb6e # initialize rs2
add x10, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x2b9b523d0d627eb9 # initialize rs1
li x23, 0x799ab627b66c58ef # initialize rs2
add x11, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x89973cb593b07bdf # initialize rs1
li x31, 0x8462a9a7d37c0913 # initialize rs2
add x12, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x7b75b2d68eae3d1b # initialize rs1
li x21, 0x0fb82384f5e63969 # initialize rs2
add x13, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x8c5aaf42feb7691a # initialize rs1
li x26, 0x9db2546166d8a180 # initialize rs2
add x14, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x46e00a54dd8a2dae # initialize rs1
li x17, 0xc10acfc6a91e824e # initialize rs2
add x15, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x23fdf8bcb33c8a49 # initialize rs1
li x15, 0xc991428836b7c1de # initialize rs2
add x16, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x310f39890d82a1c4 # initialize rs1
li x13, 0xfb7a807e2575b3e3 # initialize rs2
add x17, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x28628236010e9fb1 # initialize rs1
li x3, 0x87c6633ccf86ab0f # initialize rs2
add x18, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1e5ab3debbdf6ad0 # initialize rs1
li x24, 0x78515ff1cdf0b96d # initialize rs2
add x19, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x69e2bb4f9a6bc81a # initialize rs1
li x30, 0x93773eef4a6436ec # initialize rs2
add x20, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x41e4faa861b52c91 # initialize rs1
li x16, 0xb78b62ad4d0b0148 # initialize rs2
add x21, x21, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xb682b91b3b4ed6b5 # initialize rs1
li x26, 0x4e96e708f230817d # initialize rs2
add x22, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x11d8355c519ff3d1 # initialize rs1
li x28, 0x3cfe83891f8e5feb # initialize rs2
add x23, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x0882f659b7eef007 # initialize rs1
li x30, 0x159470e732316209 # initialize rs2
add x24, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x92fce1fc830d95ad # initialize rs1
li x16, 0x0686cdc02937e6db # initialize rs2
add x25, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x8e86755993a7870f # initialize rs1
li x7, 0x09f2996a56aa956c # initialize rs2
add x26, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xbbb5955fb251041a # initialize rs1
li x6, 0x528f13df9792ca07 # initialize rs2
add x27, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x6a7fa25838434174 # initialize rs1
li x20, 0xfc3df00e66ac35bc # initialize rs2
add x28, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x05f5beb2e73baa9a # initialize rs1
li x9, 0x484911c3c99a1442 # initialize rs2
add x29, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x90a6c4b366545958 # initialize rs1
li x1, 0xf3bd88e4ab3fdb9b # initialize rs2
add x30, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x4a7c1693abc83bda # initialize rs1
li x22, 0x7970df0996102f05 # initialize rs2
add x31, x31, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x12, 0xe96a18e6483031a4 # initialize rs1
li x0, 0xc2a3edbed201ef21 # initialize rs2
add x0, x12, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x13, 0xf4d90a8734fb8990 # initialize rs1
li x1, 0x46abedb9419c6366 # initialize rs2
add x1, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x30, 0x88fd4b09265fb67d # initialize rs1
li x2, 0xf185dde139fae5ae # initialize rs2
add x2, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x20, 0x220cbdac5d91a4d6 # initialize rs1
li x3, 0x8f653fb9e4e0e371 # initialize rs2
add x3, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0x4b1b613c794bb74f # initialize rs1
li x4, 0x14d4cecd30f8f568 # initialize rs2
add x4, x10, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x12, 0xfdae30f7d5398b30 # initialize rs1
li x5, 0xacb3eb5adc5e11ad # initialize rs2
add x5, x12, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x60d24e928d12258a # initialize rs1
li x6, 0xb204c113bcb00518 # initialize rs2
add x6, x24, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x29, 0x610d781d682b472d # initialize rs1
li x7, 0xe7058c6516403c37 # initialize rs2
add x7, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x23, 0x124c60ff58d021ba # initialize rs1
li x8, 0x83f9b4524d21c9ad # initialize rs2
add x8, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x24, 0xb361858835214a24 # initialize rs1
li x9, 0xb34502075d531310 # initialize rs2
add x9, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x16, 0x400b31ef062215f9 # initialize rs1
li x10, 0xee8e28f64429fc53 # initialize rs2
add x10, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x18, 0xb090e7e2665523c4 # initialize rs1
li x11, 0xd9f5ec0278dcdd9a # initialize rs2
add x11, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x23, 0xb10c89de3e882afa # initialize rs1
li x12, 0x3158ff0e04237203 # initialize rs2
add x12, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x17, 0xdd014cb0403abc0d # initialize rs1
li x13, 0x69a740c9b0d91b48 # initialize rs2
add x13, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x10, 0xd7ad0f272e81facd # initialize rs1
li x14, 0x091f7cc83cdc101c # initialize rs2
add x14, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x9, 0xa2f2227086327b8f # initialize rs1
li x15, 0x27ff0588fc9fe035 # initialize rs2
add x15, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x27, 0x59739e6678f3de1f # initialize rs1
li x16, 0x496e4797bac5c89c # initialize rs2
add x16, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x18, 0xb4befc8565a27cd7 # initialize rs1
li x17, 0x523b860f26cf2eb9 # initialize rs2
add x17, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x9, 0x2c37afc409da142f # initialize rs1
li x18, 0xc7c3b4db1afbcfce # initialize rs2
add x18, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x14, 0x4c0be216a9b87c6f # initialize rs1
li x19, 0x0969d034558dada5 # initialize rs2
add x19, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x7, 0x8fb8f04feb20c9f0 # initialize rs1
li x20, 0x4cde8a13cc8b29cc # initialize rs2
add x20, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x29, 0x38615150cb5958af # initialize rs1
li x21, 0x3ab2c8390fcb6646 # initialize rs2
add x21, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x19, 0x4fc4215edfa7916a # initialize rs1
li x22, 0x5152c6d7b391eb8d # initialize rs2
add x22, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x1, 0x79541c3b9ee617e7 # initialize rs1
li x23, 0x467dd52374dd94c6 # initialize rs2
add x23, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x26, 0xea4c32920ae9c170 # initialize rs1
li x24, 0xdc7dd9732a75cdc6 # initialize rs2
add x24, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x23, 0xf90e11386fb2752d # initialize rs1
li x25, 0xae6be018b49aaeff # initialize rs2
add x25, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x1, 0xb9201e8e2b43640c # initialize rs1
li x26, 0x0e464373fecf96fe # initialize rs2
add x26, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x2, 0x1f699c19644451b7 # initialize rs1
li x27, 0xa6166b58ce208563 # initialize rs2
add x27, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x20, 0xfb584a6437e3d0aa # initialize rs1
li x28, 0x269863e6807cba4a # initialize rs2
add x28, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x16, 0xfde4cce916424c4b # initialize rs1
li x29, 0x48b7b4ec0682f8ca # initialize rs2
add x29, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x23, 0x04b2ae7596334430 # initialize rs1
li x30, 0x65c3f567cfa97f53 # initialize rs2
add x30, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x20, 0x80eedea4cb8ef29c # initialize rs1
li x31, 0xafdd5d15d490398f # initialize rs2
add x31, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xca584c85f71bdcf0 # initialize rs1
li x0, 0x31ae1e78afa9008d # initialize rs2
add x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x00e0bc7aa423cc60 # initialize rs1
li x1, 0xea410cde30ddd4bc # initialize rs2
add x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0xccb1b75d2d0f1396 # initialize rs1
li x2, 0x7021ba8d692e1dcb # initialize rs2
add x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xb529aa8d32a76650 # initialize rs1
li x3, 0x26adb99d3673eaa6 # initialize rs2
add x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x82ad0ee540fe381e # initialize rs1
li x4, 0x3ae3c17dd439a97f # initialize rs2
add x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x639482dfd17c4547 # initialize rs1
li x5, 0x08bd603e487316b1 # initialize rs2
add x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x49761a4808a67c4e # initialize rs1
li x6, 0x104a0434ce54e998 # initialize rs2
add x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd4308b8f02f162c4 # initialize rs1
li x7, 0xa7b7876b4cc7a58e # initialize rs2
add x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x8458d60e4fc32b62 # initialize rs1
li x8, 0x27e3513313a7cd5e # initialize rs2
add x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x7566eddfb40b7e63 # initialize rs1
li x9, 0x9839989f8bdd4401 # initialize rs2
add x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x03b17c966f16cfaa # initialize rs1
li x10, 0x085990fecb60baab # initialize rs2
add x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xe9e581f76f05f793 # initialize rs1
li x11, 0x73719c1a84ec3cd5 # initialize rs2
add x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x4a39d3ad27c40e79 # initialize rs1
li x12, 0x6c69a05d5b1b0245 # initialize rs2
add x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xe8925767f2d473d7 # initialize rs1
li x13, 0xeb295e18cc7aca8d # initialize rs2
add x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x20822a2970a6d495 # initialize rs1
li x14, 0x5e6494f9fe49cdc5 # initialize rs2
add x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x284a53535e3a8e8b # initialize rs1
li x15, 0xae98f640f3e01c31 # initialize rs2
add x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x6242bd04a2a3973b # initialize rs1
li x16, 0x06d64aaaaab18166 # initialize rs2
add x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x16daf3a244f97af4 # initialize rs1
li x17, 0x1209d01900b91ba9 # initialize rs2
add x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xd1a3dccd7ad2de3e # initialize rs1
li x18, 0xe43fd02783b60119 # initialize rs2
add x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x21a5ae2e8c66e754 # initialize rs1
li x19, 0x31d7c12cf894191a # initialize rs2
add x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x17ddb1a59e9f08ca # initialize rs1
li x20, 0x20014dec0b71bc5f # initialize rs2
add x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x53dc16426d6764cc # initialize rs1
li x21, 0x817141a8788512e8 # initialize rs2
add x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x684be5d1b62bc475 # initialize rs1
li x22, 0x8149f295edf247d3 # initialize rs2
add x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xe93358ada35c3d94 # initialize rs1
li x23, 0x0c804ab7e7b1df81 # initialize rs2
add x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x82e68a41bcd1ecb6 # initialize rs1
li x24, 0xf750f134f5b389ec # initialize rs2
add x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xaf6b68b3cab98c25 # initialize rs1
li x25, 0xda4cfe0fabd7de23 # initialize rs2
add x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x22a2c09c286d4d7d # initialize rs1
li x26, 0x29853d084f191aa3 # initialize rs2
add x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xb942c51453603c25 # initialize rs1
li x27, 0xd50726e5f0061082 # initialize rs2
add x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xe9c6adcec524076e # initialize rs1
li x28, 0xb623b1836b3def19 # initialize rs2
add x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xf23f7d5b2060ea4f # initialize rs1
li x29, 0xc1e208c30b295ac9 # initialize rs2
add x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x1693751d3a7af28b # initialize rs1
li x30, 0xa6e2054e7a1e7408 # initialize rs2
add x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xbc1b5318e564970f # initialize rs1
li x31, 0x97c65040f34c2398 # initialize rs2
add x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x21, x3, x26 # perform first operation
add x27, x14, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x31, x15 # perform first operation
add x19, x21, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x8, x31 # perform first operation
add x25, x9, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x13, x10 # perform first operation
add x13, x2, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x8, x31, x16 # perform first operation
add x8, x17, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x21, x12 # perform first operation
add x12, x30, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x11, x2 # perform first operation
add x16, x30, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x30, x10, x2 # perform first operation
add x30, x7, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x20, x15 # perform first operation
add x12, x8, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x1, x13, x15 # perform first operation
add x13, x25, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x19, x26 # perform first operation
add x26, x10, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x7, x2 # perform first operation
add x27, x16, x28 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-bne.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x5d7f1466abf3dd30 # initialize rs1
li x18, 0x7a6b994288c1742e # initialize rs2
bne x0, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x7a6b994288c1742e # initialize rs1
li x18, 0x7a6b994288c1742e # initialize rs2
bne x0, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x159f969d13c3239c # initialize rs1
li x14, 0xfdab1d8a62565653 # initialize rs2
bne x1, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfdab1d8a62565653 # initialize rs1
li x14, 0xfdab1d8a62565653 # initialize rs2
bne x1, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x9d605daae177d0b9 # initialize rs1
li x19, 0xb9aa49bbf61e160a # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xb9aa49bbf61e160a # initialize rs1
li x19, 0xb9aa49bbf61e160a # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x32b6797d36503360 # initialize rs1
li x19, 0xd9605a2b67bb4843 # initialize rs2
bne x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xd9605a2b67bb4843 # initialize rs1
li x19, 0xd9605a2b67bb4843 # initialize rs2
bne x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x7452072b1336a53a # initialize rs1
li x15, 0xb82bc517d7c63372 # initialize rs2
bne x4, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xb82bc517d7c63372 # initialize rs1
li x15, 0xb82bc517d7c63372 # initialize rs2
bne x4, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbc06483fb6b8494f # initialize rs1
li x17, 0xabd63a0bfac2e2b0 # initialize rs2
bne x5, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xabd63a0bfac2e2b0 # initialize rs1
li x17, 0xabd63a0bfac2e2b0 # initialize rs2
bne x5, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb84724748d4fdb41 # initialize rs1
li x2, 0xf70e04a2c950eab3 # initialize rs2
bne x6, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xf70e04a2c950eab3 # initialize rs1
li x2, 0xf70e04a2c950eab3 # initialize rs2
bne x6, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9953143b5cb7710a # initialize rs1
li x4, 0xc20c713c51cd8bda # initialize rs2
bne x7, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xc20c713c51cd8bda # initialize rs1
li x4, 0xc20c713c51cd8bda # initialize rs2
bne x7, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x7fa9ea091eca9101 # initialize rs1
li x2, 0xefde4a91c0147da6 # initialize rs2
bne x8, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xefde4a91c0147da6 # initialize rs1
li x2, 0xefde4a91c0147da6 # initialize rs2
bne x8, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xf816726e8521de5d # initialize rs1
li x1, 0x7237be5c70275385 # initialize rs2
bne x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7237be5c70275385 # initialize rs1
li x1, 0x7237be5c70275385 # initialize rs2
bne x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x686d7568bf2cec3f # initialize rs1
li x9, 0xed599e48d0dd3d46 # initialize rs2
bne x10, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xed599e48d0dd3d46 # initialize rs1
li x9, 0xed599e48d0dd3d46 # initialize rs2
bne x10, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xdaf533b2d635ab88 # initialize rs1
li x30, 0xa98bf277a132bffa # initialize rs2
bne x11, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xa98bf277a132bffa # initialize rs1
li x30, 0xa98bf277a132bffa # initialize rs2
bne x11, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xedf9013447958cc9 # initialize rs1
li x10, 0x89d3995242e847d0 # initialize rs2
bne x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x89d3995242e847d0 # initialize rs1
li x10, 0x89d3995242e847d0 # initialize rs2
bne x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x9b0109f01b850acd # initialize rs1
li x17, 0x0bdede58f630e7b9 # initialize rs2
bne x13, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0bdede58f630e7b9 # initialize rs1
li x17, 0x0bdede58f630e7b9 # initialize rs2
bne x13, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x2361aa086fb82317 # initialize rs1
li x17, 0x9ad97c2793f7db79 # initialize rs2
bne x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x9ad97c2793f7db79 # initialize rs1
li x17, 0x9ad97c2793f7db79 # initialize rs2
bne x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x792465d3e05ace26 # initialize rs1
li x20, 0x409eafd2712ac917 # initialize rs2
bne x15, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x409eafd2712ac917 # initialize rs1
li x20, 0x409eafd2712ac917 # initialize rs2
bne x15, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x70edd9ec788d8e85 # initialize rs1
li x27, 0x3ccfce5f68a64ff9 # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x3ccfce5f68a64ff9 # initialize rs1
li x27, 0x3ccfce5f68a64ff9 # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xfced66175df33ecc # initialize rs1
li x30, 0xd969e2436883f6cf # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xd969e2436883f6cf # initialize rs1
li x30, 0xd969e2436883f6cf # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x5e14c02fdf55d7bb # initialize rs1
li x24, 0x989d47748f761deb # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x989d47748f761deb # initialize rs1
li x24, 0x989d47748f761deb # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xcd9cb5b339d4f586 # initialize rs1
li x17, 0x869cc92da5d65f17 # initialize rs2
bne x19, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x869cc92da5d65f17 # initialize rs1
li x17, 0x869cc92da5d65f17 # initialize rs2
bne x19, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x8af6a8b1e164e354 # initialize rs1
li x28, 0xff9b19bb05b7b3f7 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xff9b19bb05b7b3f7 # initialize rs1
li x28, 0xff9b19bb05b7b3f7 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x6f586ae56553ac9d # initialize rs1
li x9, 0xb1f5c24f38eb39c5 # initialize rs2
bne x21, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xb1f5c24f38eb39c5 # initialize rs1
li x9, 0xb1f5c24f38eb39c5 # initialize rs2
bne x21, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x5b6236977eae9e84 # initialize rs1
li x24, 0xbe03dfa5c473087f # initialize rs2
bne x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xbe03dfa5c473087f # initialize rs1
li x24, 0xbe03dfa5c473087f # initialize rs2
bne x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x9052b22233e4b924 # initialize rs1
li x11, 0xea28933afbcaf1bd # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xea28933afbcaf1bd # initialize rs1
li x11, 0xea28933afbcaf1bd # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x314f46c2ab7ab28e # initialize rs1
li x4, 0x3d0763481376a7fe # initialize rs2
bne x24, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x3d0763481376a7fe # initialize rs1
li x4, 0x3d0763481376a7fe # initialize rs2
bne x24, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x622838203f01fca7 # initialize rs1
li x26, 0x3c9328710db9e17b # initialize rs2
bne x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x3c9328710db9e17b # initialize rs1
li x26, 0x3c9328710db9e17b # initialize rs2
bne x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xf9492a161eb59a3c # initialize rs1
li x3, 0x204213afcc8966cb # initialize rs2
bne x26, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x204213afcc8966cb # initialize rs1
li x3, 0x204213afcc8966cb # initialize rs2
bne x26, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xf19a980e5e30e5b0 # initialize rs1
li x17, 0xdae3feed9829395f # initialize rs2
bne x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xdae3feed9829395f # initialize rs1
li x17, 0xdae3feed9829395f # initialize rs2
bne x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x50be6c34ca9c8e92 # initialize rs1
li x31, 0xb1bf0edd428bd2b9 # initialize rs2
bne x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xb1bf0edd428bd2b9 # initialize rs1
li x31, 0xb1bf0edd428bd2b9 # initialize rs2
bne x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xccf3e1a916a97a65 # initialize rs1
li x12, 0xa595c6ca6b20f4ae # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xa595c6ca6b20f4ae # initialize rs1
li x12, 0xa595c6ca6b20f4ae # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x31c76f7074228ea4 # initialize rs1
li x21, 0x41124738efbc1350 # initialize rs2
bne x30, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x41124738efbc1350 # initialize rs1
li x21, 0x41124738efbc1350 # initialize rs2
bne x30, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x09c7d6b9eef8cca4 # initialize rs1
li x11, 0x10a5b43e32ec60a6 # initialize rs2
bne x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x10a5b43e32ec60a6 # initialize rs1
li x11, 0x10a5b43e32ec60a6 # initialize rs2
bne x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x21, 0x6347002fdbba2483 # initialize rs1
li x0, 0xc2d0addac34a6804 # initialize rs2
bne x21, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xc2d0addac34a6804 # initialize rs1
li x0, 0xc2d0addac34a6804 # initialize rs2
bne x21, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x14, 0x8d74de2aa68a6999 # initialize rs1
li x1, 0x0879a9d97b495450 # initialize rs2
bne x14, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0879a9d97b495450 # initialize rs1
li x1, 0x0879a9d97b495450 # initialize rs2
bne x14, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x14, 0xed131a659d047e55 # initialize rs1
li x2, 0x5cf9ac24bcfe35b7 # initialize rs2
bne x14, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5cf9ac24bcfe35b7 # initialize rs1
li x2, 0x5cf9ac24bcfe35b7 # initialize rs2
bne x14, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x15, 0xec8a673a68b2626f # initialize rs1
li x3, 0x311ca6dca25e576e # initialize rs2
bne x15, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x311ca6dca25e576e # initialize rs1
li x3, 0x311ca6dca25e576e # initialize rs2
bne x15, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
li x23, 0x54944eaeb8a8d424 # initialize rs1
li x4, 0x48c9487735849e03 # initialize rs2
bne x23, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x48c9487735849e03 # initialize rs1
li x4, 0x48c9487735849e03 # initialize rs2
bne x23, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x19, 0x1c6b81a1255d2533 # initialize rs1
li x5, 0x0f1bf8c55bdc042a # initialize rs2
bne x19, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0f1bf8c55bdc042a # initialize rs1
li x5, 0x0f1bf8c55bdc042a # initialize rs2
bne x19, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0xaadde99c6f9b0b43 # initialize rs1
li x6, 0x2804680f7490cd69 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x2804680f7490cd69 # initialize rs1
li x6, 0x2804680f7490cd69 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x21, 0xc6328d8f670e8abf # initialize rs1
li x7, 0xcccba45ff9ff4f5e # initialize rs2
bne x21, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xcccba45ff9ff4f5e # initialize rs1
li x7, 0xcccba45ff9ff4f5e # initialize rs2
bne x21, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x3, 0xd974bb2adc1f7fde # initialize rs1
li x8, 0x539f79cbe3db4593 # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x539f79cbe3db4593 # initialize rs1
li x8, 0x539f79cbe3db4593 # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x24, 0x5ed9ba58aac44418 # initialize rs1
li x9, 0xecca40c299703ef0 # initialize rs2
bne x24, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xecca40c299703ef0 # initialize rs1
li x9, 0xecca40c299703ef0 # initialize rs2
bne x24, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x20, 0xcdcfcdb39b336323 # initialize rs1
li x10, 0x5b3f1b56dfee2004 # initialize rs2
bne x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5b3f1b56dfee2004 # initialize rs1
li x10, 0x5b3f1b56dfee2004 # initialize rs2
bne x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x10, 0xaf363160d1b70f0b # initialize rs1
li x11, 0xee1aa829c6281f78 # initialize rs2
bne x10, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xee1aa829c6281f78 # initialize rs1
li x11, 0xee1aa829c6281f78 # initialize rs2
bne x10, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x2, 0xf93e2b29e1b48ea0 # initialize rs1
li x12, 0x04bc8c33977c1cc4 # initialize rs2
bne x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x04bc8c33977c1cc4 # initialize rs1
li x12, 0x04bc8c33977c1cc4 # initialize rs2
bne x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x5, 0xca92e2fdb8e55aa6 # initialize rs1
li x13, 0xe669ab4e2ab4fd7e # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xe669ab4e2ab4fd7e # initialize rs1
li x13, 0xe669ab4e2ab4fd7e # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x8, 0x64bf2d63ab0f19d8 # initialize rs1
li x14, 0x267768e151f3188d # initialize rs2
bne x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x267768e151f3188d # initialize rs1
li x14, 0x267768e151f3188d # initialize rs2
bne x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x21, 0xb5307682ab8427ae # initialize rs1
li x15, 0x523584bcc4419f60 # initialize rs2
bne x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x523584bcc4419f60 # initialize rs1
li x15, 0x523584bcc4419f60 # initialize rs2
bne x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x10, 0x555ae8bfedaaff1c # initialize rs1
li x16, 0x988ce8805efc706c # initialize rs2
bne x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x988ce8805efc706c # initialize rs1
li x16, 0x988ce8805efc706c # initialize rs2
bne x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0xb3194469f56fae70 # initialize rs1
li x17, 0x781e186b173f3d64 # initialize rs2
bne x6, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x781e186b173f3d64 # initialize rs1
li x17, 0x781e186b173f3d64 # initialize rs2
bne x6, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x30, 0x1854a297f7bc4631 # initialize rs1
li x18, 0xd8b96021c0b3f6cc # initialize rs2
bne x30, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xd8b96021c0b3f6cc # initialize rs1
li x18, 0xd8b96021c0b3f6cc # initialize rs2
bne x30, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x10, 0xafc709c59871c725 # initialize rs1
li x19, 0x8307067a86a59f7b # initialize rs2
bne x10, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8307067a86a59f7b # initialize rs1
li x19, 0x8307067a86a59f7b # initialize rs2
bne x10, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x23, 0xd5ad3ff0c3695be7 # initialize rs1
li x20, 0x3c3e2f786da1961a # initialize rs2
bne x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x3c3e2f786da1961a # initialize rs1
li x20, 0x3c3e2f786da1961a # initialize rs2
bne x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x27, 0x8068d20274418ef2 # initialize rs1
li x21, 0x12ad3aa4b018ad3c # initialize rs2
bne x27, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x12ad3aa4b018ad3c # initialize rs1
li x21, 0x12ad3aa4b018ad3c # initialize rs2
bne x27, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x2, 0xea057c36cce39c92 # initialize rs1
li x22, 0x80035025369dfd02 # initialize rs2
bne x2, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x80035025369dfd02 # initialize rs1
li x22, 0x80035025369dfd02 # initialize rs2
bne x2, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x2, 0xef62d4c3e17f371d # initialize rs1
li x23, 0xdec5c3f248f0a767 # initialize rs2
bne x2, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xdec5c3f248f0a767 # initialize rs1
li x23, 0xdec5c3f248f0a767 # initialize rs2
bne x2, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x2, 0x28a0f74d080b5a7f # initialize rs1
li x24, 0x34d4874386b45b2c # initialize rs2
bne x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x34d4874386b45b2c # initialize rs1
li x24, 0x34d4874386b45b2c # initialize rs2
bne x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x8, 0x99da95fadf63f585 # initialize rs1
li x25, 0xabc68e8e3ca041e5 # initialize rs2
bne x8, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xabc68e8e3ca041e5 # initialize rs1
li x25, 0xabc68e8e3ca041e5 # initialize rs2
bne x8, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x25, 0x2648ceb2c8fd1731 # initialize rs1
li x26, 0xf715386c081ff637 # initialize rs2
bne x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xf715386c081ff637 # initialize rs1
li x26, 0xf715386c081ff637 # initialize rs2
bne x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x1, 0x2c31005bb61954fe # initialize rs1
li x27, 0x8c8f180b0514a6c1 # initialize rs2
bne x1, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8c8f180b0514a6c1 # initialize rs1
li x27, 0x8c8f180b0514a6c1 # initialize rs2
bne x1, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x27, 0xb5c0a2c0c42d21ce # initialize rs1
li x28, 0xde7dcfc30fb4fc0e # initialize rs2
bne x27, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xde7dcfc30fb4fc0e # initialize rs1
li x28, 0xde7dcfc30fb4fc0e # initialize rs2
bne x27, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x2, 0x4be8bbab2ce63f54 # initialize rs1
li x29, 0x1893cf0b375aff3b # initialize rs2
bne x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x1893cf0b375aff3b # initialize rs1
li x29, 0x1893cf0b375aff3b # initialize rs2
bne x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x31, 0xc876b16f26f6c007 # initialize rs1
li x30, 0xa575666e53c6cd9b # initialize rs2
bne x31, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xa575666e53c6cd9b # initialize rs1
li x30, 0xa575666e53c6cd9b # initialize rs2
bne x31, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x9, 0x36792199ca3c5706 # initialize rs1
li x31, 0x687f4a41923df934 # initialize rs2
bne x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x687f4a41923df934 # initialize rs1
li x31, 0x687f4a41923df934 # initialize rs2
bne x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x12, 0x0000000000000000 # initialize rs1
li x5, 0x06ee59896edc3d4d # initialize rs2
bne x12, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x06ee59896edc3d4d # initialize rs1
li x5, 0x06ee59896edc3d4d # initialize rs2
bne x12, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x30, 0x0000000000000001 # initialize rs1
li x6, 0x97a96ddbe6b22ed0 # initialize rs2
bne x30, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x97a96ddbe6b22ed0 # initialize rs1
li x6, 0x97a96ddbe6b22ed0 # initialize rs2
bne x30, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x7, 0x0000000000000002 # initialize rs1
li x3, 0x2e8ee5b1694e12d8 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x2e8ee5b1694e12d8 # initialize rs1
li x3, 0x2e8ee5b1694e12d8 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x9, 0x8000000000000000 # initialize rs1
li x12, 0xf525ad3f84a82064 # initialize rs2
bne x9, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xf525ad3f84a82064 # initialize rs1
li x12, 0xf525ad3f84a82064 # initialize rs2
bne x9, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x21, 0x8000000000000001 # initialize rs1
li x20, 0xc482b56904c0f11b # initialize rs2
bne x21, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xc482b56904c0f11b # initialize rs1
li x20, 0xc482b56904c0f11b # initialize rs2
bne x21, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x26, 0x7fffffffffffffff # initialize rs1
li x20, 0xe7006399d26dc9a1 # initialize rs2
bne x26, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe7006399d26dc9a1 # initialize rs1
li x20, 0xe7006399d26dc9a1 # initialize rs2
bne x26, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x25, 0x7ffffffffffffffe # initialize rs1
li x9, 0x2031c9c4d627f224 # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x2031c9c4d627f224 # initialize rs1
li x9, 0x2031c9c4d627f224 # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x8, 0xffffffffffffffff # initialize rs1
li x23, 0x8f4a99a3bcac4e0d # initialize rs2
bne x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8f4a99a3bcac4e0d # initialize rs1
li x23, 0x8f4a99a3bcac4e0d # initialize rs2
bne x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x28, 0xfffffffffffffffe # initialize rs1
li x31, 0x95cc4ccd996799d9 # initialize rs2
bne x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x95cc4ccd996799d9 # initialize rs1
li x31, 0x95cc4ccd996799d9 # initialize rs2
bne x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x0d856718b28fe007 # initialize rs2
bne x20, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0d856718b28fe007 # initialize rs1
li x11, 0x0d856718b28fe007 # initialize rs2
bne x20, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0xf28c11717be2bd14 # initialize rs2
bne x17, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xf28c11717be2bd14 # initialize rs1
li x15, 0xf28c11717be2bd14 # initialize rs2
bne x17, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x10, 0x5555555555555555 # initialize rs1
li x5, 0x0ee4d86a000a64b5 # initialize rs2
bne x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0ee4d86a000a64b5 # initialize rs1
li x5, 0x0ee4d86a000a64b5 # initialize rs2
bne x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x22, 0x00000000ffffffff # initialize rs1
li x10, 0xd8222d36af280289 # initialize rs2
bne x22, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xd8222d36af280289 # initialize rs1
li x10, 0xd8222d36af280289 # initialize rs2
bne x22, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x16, 0x00000000fffffffe # initialize rs1
li x27, 0xd62501c37798eabd # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xd62501c37798eabd # initialize rs1
li x27, 0xd62501c37798eabd # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x9, 0x0000000100000000 # initialize rs1
li x21, 0x9f7653bc22f53a36 # initialize rs2
bne x9, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x9f7653bc22f53a36 # initialize rs1
li x21, 0x9f7653bc22f53a36 # initialize rs2
bne x9, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x20, 0x0000000100000001 # initialize rs1
li x24, 0xef43f84fea88a691 # initialize rs2
bne x20, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xef43f84fea88a691 # initialize rs1
li x24, 0xef43f84fea88a691 # initialize rs2
bne x20, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x25, 0xc1681c39c6e12e1c # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x25, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x25, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x8, 0xfc9d2e3229dcf0eb # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x17, 0x180b88cc599010bc # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000002 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x31, 0xe5ff923e82a04619 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bne x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bne x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x2, 0x28127a583ac8b3b9 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bne x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bne x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x29, 0x3f12939987f5a22f # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bne x29, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bne x29, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x17, 0xde3dfc27a0f7e445 # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffffffffffe # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x23, 0x6856b25266e83d09 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x6, 0xa52a831d601d4d2b # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
bne x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
bne x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x5, 0x2170baffc5bec058 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bne x5, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bne x5, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x24, 0x838767c51c675688 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x15, 0x44be6abe58d4528e # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
bne x15, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x5555555555555555 # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
bne x15, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x24, 0xfa1f8715aeabebca # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bne x24, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bne x24, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x11, 0x4385b7871a903a7c # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bne x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bne x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x1, 0x7e9ce65e5783983a # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
bne x1, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000000 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
bne x1, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x3, 0xeff94b7566a86107 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bne x3, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bne x3, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x17, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x3, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x7, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x3, 0x0000000000000000 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000000 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x20, 0x0000000000000000 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x28, 0x0000000000000000 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bne x28, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7fffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bne x28, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x18, 0x0000000000000000 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bne x18, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffffffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bne x18, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x13, 0x0000000000000000 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x13, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x13, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x18, 0x0000000000000000 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000000000000 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000000000000 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x21, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x21, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x13, 0x0000000000000000 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
bne x13, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5555555555555555 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
bne x13, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x3, 0x0000000000000000 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bne x3, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bne x3, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x2, 0x0000000000000000 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bne x2, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000fffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bne x2, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x31, 0x0000000000000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bne x31, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bne x31, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x25, 0x0000000000000000 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bne x25, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bne x25, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x28, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x3, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
bne x3, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
bne x3, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x9, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x9, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000002 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x9, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x5, 0x0000000000000001 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
bne x5, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000000 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
bne x5, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x23, 0x0000000000000001 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bne x23, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bne x23, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x26, 0x0000000000000001 # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bne x26, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bne x26, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000000000001 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x5, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x5, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x12, 0x0000000000000001 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
bne x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xffffffffffffffff # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
bne x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x16, 0x0000000000000001 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bne x16, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
bne x16, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x20, 0x0000000000000001 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
bne x20, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
bne x20, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x0000000000000001 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x30, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x30, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x22, 0x0000000000000001 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bne x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bne x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x6, 0x0000000000000001 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
bne x6, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
bne x6, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x6, 0x0000000000000001 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000fffffffe # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x11, 0x0000000000000001 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x11, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000000 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x11, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x3, 0x0000000000000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bne x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bne x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x3, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bne x3, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bne x3, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x21, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bne x21, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bne x21, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x16, 0x0000000000000002 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
bne x16, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000002 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
bne x16, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x8, 0x0000000000000002 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bne x8, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bne x8, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x16, 0x0000000000000002 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
bne x16, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
bne x16, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x20, 0x0000000000000002 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bne x20, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bne x20, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x15, 0x0000000000000002 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x15, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x15, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bne x28, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bne x28, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x17, 0x0000000000000002 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffffffffffe # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x30, 0x0000000000000002 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
bne x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
bne x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x0000000000000002 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x7, 0x0000000000000002 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bne x7, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bne x7, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x25, 0x0000000000000002 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bne x25, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bne x25, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x28, 0x0000000000000002 # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bne x28, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000000fffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bne x28, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x1, 0x0000000000000002 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bne x1, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bne x1, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x1, 0x0000000000000002 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
bne x1, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000001 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
bne x1, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x10, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x10, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x2, 0x8000000000000000 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bne x2, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bne x2, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x5, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
bne x5, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
bne x5, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x29, 0x8000000000000000 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bne x29, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bne x29, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x25, 0x8000000000000000 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bne x25, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bne x25, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x9, 0x8000000000000000 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffffffffffe # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x2, 0x8000000000000000 # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x6, 0x8000000000000000 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bne x6, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bne x6, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x19, 0x8000000000000000 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
bne x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
bne x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x8000000000000000 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x28, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x28, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x1, 0x8000000000000000 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bne x1, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bne x1, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x8, 0x8000000000000000 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bne x8, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bne x8, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x17, 0x8000000000000000 # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x26, 0x8000000000000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bne x26, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bne x26, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x20, 0x8000000000000000 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
bne x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000001 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
bne x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x31, 0x8000000000000001 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x31, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x31, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x6, 0x8000000000000001 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
bne x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000001 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
bne x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x7, 0x8000000000000001 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bne x7, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000002 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bne x7, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x1, 0x8000000000000001 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x1, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x1, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x16, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
bne x16, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
bne x16, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x15, 0x8000000000000001 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bne x15, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7fffffffffffffff # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bne x15, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x13, 0x8000000000000001 # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bne x13, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffffffffffe # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bne x13, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x31, 0x8000000000000001 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bne x31, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bne x31, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x10, 0x8000000000000001 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
bne x10, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
bne x10, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x16, 0x8000000000000001 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bne x16, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bne x16, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x8000000000000001 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x2, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x2, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x31, 0x8000000000000001 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
bne x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5555555555555555 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
bne x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x26, 0x8000000000000001 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
bne x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000ffffffff # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
bne x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x17, 0x8000000000000001 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x7, 0x8000000000000001 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
bne x7, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
bne x7, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x28, 0x8000000000000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x16, 0x7fffffffffffffff # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bne x16, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bne x16, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x18, 0x7fffffffffffffff # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x28, 0x7fffffffffffffff # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000002 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x9, 0x7fffffffffffffff # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bne x9, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bne x9, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x21, 0x7fffffffffffffff # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bne x21, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bne x21, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bne x19, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bne x19, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x28, 0x7fffffffffffffff # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
bne x28, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
bne x28, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x17, 0x7fffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x17, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x17, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x10, 0x7fffffffffffffff # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bne x10, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bne x10, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x17, 0x7fffffffffffffff # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x7fffffffffffffff # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x8, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x8, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x25, 0x7fffffffffffffff # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bne x25, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bne x25, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bne x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bne x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x18, 0x7fffffffffffffff # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
bne x18, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000fffffffe # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
bne x18, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x14, 0x7fffffffffffffff # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
bne x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000100000000 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
bne x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x2, 0x7fffffffffffffff # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bne x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bne x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x13, 0x7ffffffffffffffe # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bne x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bne x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x23, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bne x23, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bne x23, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x18, 0x7ffffffffffffffe # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
bne x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x18, 0x7ffffffffffffffe # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bne x18, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bne x18, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x14, 0x7ffffffffffffffe # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
bne x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000001 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
bne x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x23, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bne x23, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bne x23, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x27, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bne x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
bne x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x6, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x6, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x12, 0x7ffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bne x12, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bne x12, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x5, 0x7ffffffffffffffe # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x7ffffffffffffffe # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x24, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x29, 0x7ffffffffffffffe # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bne x6, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bne x6, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x12, 0x7ffffffffffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bne x12, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bne x12, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x21, 0x7ffffffffffffffe # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
bne x21, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000000 # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
bne x21, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x7, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bne x7, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bne x7, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x14, 0xffffffffffffffff # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bne x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x1, 0xffffffffffffffff # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
bne x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
bne x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x5, 0xffffffffffffffff # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bne x5, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000002 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bne x5, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x5, 0xffffffffffffffff # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x5, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x5, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x19, 0xffffffffffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bne x19, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000001 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bne x19, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x3, 0xffffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bne x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bne x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x19, 0xffffffffffffffff # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
bne x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffffffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
bne x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x5, 0xffffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
bne x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x7, 0xffffffffffffffff # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bne x7, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xfffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bne x7, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x29, 0xffffffffffffffff # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0xffffffffffffffff # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x19, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x19, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x27, 0xffffffffffffffff # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
bne x27, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5555555555555555 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
bne x27, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x30, 0xffffffffffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
bne x30, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000ffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
bne x30, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x11, 0xffffffffffffffff # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bne x11, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000fffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bne x11, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x28, 0xffffffffffffffff # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000000 # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x29, 0xffffffffffffffff # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
bne x29, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000100000001 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
bne x29, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x19, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
bne x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000000 # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
bne x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x6, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
bne x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000001 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
bne x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x21, 0xfffffffffffffffe # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x21, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000002 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x21, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x7, 0xfffffffffffffffe # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bne x7, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bne x7, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x7, 0xfffffffffffffffe # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bne x7, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bne x7, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x29, 0xfffffffffffffffe # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffffffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x15, 0xfffffffffffffffe # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bne x15, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bne x15, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x1, 0xfffffffffffffffe # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
bne x1, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
bne x1, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0xfffffffffffffffe # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x5, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x5, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x16, 0xfffffffffffffffe # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
bne x16, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5555555555555555 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
bne x16, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x9, 0xfffffffffffffffe # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x14, 0xfffffffffffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
bne x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000fffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
bne x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x3, 0xfffffffffffffffe # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x3, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x3, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x23, 0xfffffffffffffffe # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
bne x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
bne x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bne x23, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bne x23, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x11, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x11, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
bne x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
bne x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
bne x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
bne x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bne x13, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bne x13, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bne x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7fffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bne x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bne x9, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bne x9, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x5, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x5, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x15, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x15, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bne x28, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bne x28, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x8, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x8, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bne x22, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5555555555555555 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bne x22, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
bne x14, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000ffffffff # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
bne x14, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
bne x5, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000fffffffe # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
bne x5, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x8, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x8, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bne x22, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bne x22, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x2, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x2, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bne x12, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bne x12, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bne x15, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
bne x15, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bne x12, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
bne x12, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bne x24, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffffffffffff # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bne x24, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffffffffffe # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bne x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bne x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffffffffffe # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
bne x3, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
bne x9, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
bne x9, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bne x14, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bne x14, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bne x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000ffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bne x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
bne x20, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000fffffffe # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
bne x20, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x2, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000000 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x2, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
bne x16, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000001 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
bne x16, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x6, 0x5555555555555555 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x18, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bne x18, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bne x18, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x18, 0x5555555555555555 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x26, 0x5555555555555555 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bne x26, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bne x26, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x13, 0x5555555555555555 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bne x13, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bne x13, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x8, 0x5555555555555555 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
bne x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffffffffffff # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
bne x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x31, 0x5555555555555555 # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bne x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bne x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x23, 0x5555555555555555 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
bne x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x25, 0x5555555555555555 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x17, 0x5555555555555555 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
bne x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
bne x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x5555555555555555 # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x2, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x2, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x29, 0x5555555555555555 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
bne x29, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5555555555555555 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
bne x29, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x7, 0x5555555555555555 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bne x7, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bne x7, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x7, 0x5555555555555555 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bne x7, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bne x7, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x11, 0x5555555555555555 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bne x11, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bne x11, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x11, 0x5555555555555555 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
bne x11, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
bne x11, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x27, 0x00000000ffffffff # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x27, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x27, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x8, 0x00000000ffffffff # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
bne x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
bne x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x10, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x10, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000002 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
bne x10, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x31, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bne x31, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bne x31, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x8, 0x00000000ffffffff # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
bne x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000001 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
bne x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x20, 0x00000000ffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
bne x20, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
bne x20, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x11, 0x00000000ffffffff # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x11, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7ffffffffffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x11, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x15, 0x00000000ffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bne x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
bne x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x12, 0x00000000ffffffff # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
bne x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xfffffffffffffffe # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
bne x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x24, 0x00000000ffffffff # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
bne x24, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
bne x24, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x00000000ffffffff # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x13, 0x00000000ffffffff # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x6, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bne x6, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x13, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
bne x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000fffffffe # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
bne x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x12, 0x00000000ffffffff # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
bne x12, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
bne x12, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x13, 0x00000000ffffffff # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bne x13, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000100000001 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bne x13, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x20, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x20, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bne x20, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x21, 0x00000000fffffffe # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bne x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x14, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
bne x14, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
bne x14, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x14, 0x00000000fffffffe # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x14, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bne x14, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x25, 0x00000000fffffffe # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bne x25, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bne x25, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x13, 0x00000000fffffffe # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bne x13, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bne x13, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x28, 0x00000000fffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bne x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x18, 0x00000000fffffffe # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bne x18, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffffffffffff # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bne x18, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x16, 0x00000000fffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
bne x16, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x19, 0x00000000fffffffe # initialize rs1
li x6, 0x5bbc887763ae86f2 # initialize rs2
bne x19, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x5bbc887763ae86f2 # initialize rs2
bne x19, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x00000000fffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x1, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x1, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x6, 0x00000000fffffffe # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bne x6, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5555555555555555 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bne x6, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x17, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x23, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bne x23, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bne x23, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x31, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bne x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x21, 0x00000000fffffffe # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bne x21, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bne x21, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x28, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bne x28, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bne x28, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x22, 0x0000000100000000 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
bne x22, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
bne x22, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x29, 0x0000000100000000 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bne x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bne x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x25, 0x0000000100000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x23, 0x0000000100000000 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
bne x23, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
bne x23, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000100000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
bne x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
bne x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x9, 0x0000000100000000 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
bne x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x11, 0x0000000100000000 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bne x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffffffffffff # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bne x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000100000000 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bne x19, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bne x19, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x25, 0x0000000100000000 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bne x25, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bne x25, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x0000000100000000 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x13, 0x0000000100000000 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bne x13, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5555555555555555 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
bne x13, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x22, 0x0000000100000000 # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
bne x22, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000ffffffff # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
bne x22, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x10, 0x0000000100000000 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
bne x10, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
bne x10, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x12, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bne x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
bne x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x11, 0x0000000100000000 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bne x11, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bne x11, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x31, 0x0000000100000001 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bne x31, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bne x31, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x25, 0x0000000100000001 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
bne x25, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
bne x25, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x9, 0x0000000100000001 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bne x9, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000002 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bne x9, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x9, 0x0000000100000001 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x14, 0x0000000100000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bne x14, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bne x14, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000100000001 # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
bne x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
bne x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000100000001 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x29, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffffffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
bne x29, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x27, 0x0000000100000001 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bne x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x17, 0x0000000100000001 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x14, 0x0000000100000001 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
bne x14, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
bne x14, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000100000001 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x21, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bne x21, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x28, 0x0000000100000001 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
bne x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5555555555555555 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
bne x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x22, 0x0000000100000001 # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bne x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bne x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x18, 0x0000000100000001 # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000fffffffe # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x1, 0x0000000100000001 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x1, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000000 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
bne x1, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x12, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bne x12, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bne x12, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x6aee837b2e365882 # initialize rs1
li x0, 0xbbf911561e23451d # initialize rs2
bne x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xbbf911561e23451d # initialize rs1
li x0, 0xbbf911561e23451d # initialize rs2
bne x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x5579b738686d5f1b # initialize rs1
li x1, 0xb6c8ba19ae396d68 # initialize rs2
bne x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xb6c8ba19ae396d68 # initialize rs1
li x1, 0xb6c8ba19ae396d68 # initialize rs2
bne x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xb26fa2b6b6cfd86f # initialize rs1
li x2, 0x8883562713647c6e # initialize rs2
bne x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8883562713647c6e # initialize rs1
li x2, 0x8883562713647c6e # initialize rs2
bne x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x6b52fe114e6616f2 # initialize rs1
li x3, 0x3063e9c6e6c75590 # initialize rs2
bne x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x3063e9c6e6c75590 # initialize rs1
li x3, 0x3063e9c6e6c75590 # initialize rs2
bne x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x7228cfc21f971832 # initialize rs1
li x4, 0x206a52ad3b1cfba0 # initialize rs2
bne x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x206a52ad3b1cfba0 # initialize rs1
li x4, 0x206a52ad3b1cfba0 # initialize rs2
bne x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x4161150a74884946 # initialize rs1
li x5, 0xbc7516a0e991de7f # initialize rs2
bne x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xbc7516a0e991de7f # initialize rs1
li x5, 0xbc7516a0e991de7f # initialize rs2
bne x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe9cf35fe95bd2e48 # initialize rs1
li x6, 0xbd1521e672733fd8 # initialize rs2
bne x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xbd1521e672733fd8 # initialize rs1
li x6, 0xbd1521e672733fd8 # initialize rs2
bne x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb66cd9e6c8b6c066 # initialize rs1
li x7, 0xbb8996aceb74df6b # initialize rs2
bne x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xbb8996aceb74df6b # initialize rs1
li x7, 0xbb8996aceb74df6b # initialize rs2
bne x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x9abb899136b4dad5 # initialize rs1
li x8, 0xb2e6ea843b0d4363 # initialize rs2
bne x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xb2e6ea843b0d4363 # initialize rs1
li x8, 0xb2e6ea843b0d4363 # initialize rs2
bne x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xbebf67e6fe3f9e16 # initialize rs1
li x9, 0x062ee5a19c185d16 # initialize rs2
bne x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x062ee5a19c185d16 # initialize rs1
li x9, 0x062ee5a19c185d16 # initialize rs2
bne x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x1d562145a2343a4e # initialize rs1
li x10, 0x8233bf1faf2662d2 # initialize rs2
bne x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8233bf1faf2662d2 # initialize rs1
li x10, 0x8233bf1faf2662d2 # initialize rs2
bne x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xed75377accd281f0 # initialize rs1
li x11, 0x2af5bcd39501304a # initialize rs2
bne x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x2af5bcd39501304a # initialize rs1
li x11, 0x2af5bcd39501304a # initialize rs2
bne x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x9a0400bf7bdd1046 # initialize rs1
li x12, 0xbeaeb161073b566e # initialize rs2
bne x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xbeaeb161073b566e # initialize rs1
li x12, 0xbeaeb161073b566e # initialize rs2
bne x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x4a8fa3450ffcbce8 # initialize rs1
li x13, 0xdc042d32e9e24f87 # initialize rs2
bne x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xdc042d32e9e24f87 # initialize rs1
li x13, 0xdc042d32e9e24f87 # initialize rs2
bne x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xa08948038dcf58fe # initialize rs1
li x14, 0x687c80b1f2c963ca # initialize rs2
bne x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x687c80b1f2c963ca # initialize rs1
li x14, 0x687c80b1f2c963ca # initialize rs2
bne x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xa5e153b82eb0057b # initialize rs1
li x15, 0x9c629177ed38ec2d # initialize rs2
bne x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x9c629177ed38ec2d # initialize rs1
li x15, 0x9c629177ed38ec2d # initialize rs2
bne x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xdeb890ca0d7eb748 # initialize rs1
li x16, 0x53a20f3f79fa3c7b # initialize rs2
bne x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x53a20f3f79fa3c7b # initialize rs1
li x16, 0x53a20f3f79fa3c7b # initialize rs2
bne x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x17a40ec8963e239a # initialize rs1
li x17, 0x558d2ddb3fe5371b # initialize rs2
bne x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x558d2ddb3fe5371b # initialize rs1
li x17, 0x558d2ddb3fe5371b # initialize rs2
bne x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x1c462fb84c76c9d7 # initialize rs1
li x18, 0x9d37943bc2d73ca9 # initialize rs2
bne x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x9d37943bc2d73ca9 # initialize rs1
li x18, 0x9d37943bc2d73ca9 # initialize rs2
bne x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x9ca02c49c3ad7373 # initialize rs1
li x19, 0x31e96a1e5e5e382a # initialize rs2
bne x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x31e96a1e5e5e382a # initialize rs1
li x19, 0x31e96a1e5e5e382a # initialize rs2
bne x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x3756380466c3a655 # initialize rs1
li x20, 0xb053f74410b350c1 # initialize rs2
bne x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xb053f74410b350c1 # initialize rs1
li x20, 0xb053f74410b350c1 # initialize rs2
bne x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x274625e1ae1a46ba # initialize rs1
li x21, 0x6ea61e1f4e03450a # initialize rs2
bne x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x6ea61e1f4e03450a # initialize rs1
li x21, 0x6ea61e1f4e03450a # initialize rs2
bne x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x83002f13a7099454 # initialize rs1
li x22, 0x9e7b230d19881d29 # initialize rs2
bne x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x9e7b230d19881d29 # initialize rs1
li x22, 0x9e7b230d19881d29 # initialize rs2
bne x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x1c90748509c4cbb6 # initialize rs1
li x23, 0xaa8bc94d109fd682 # initialize rs2
bne x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xaa8bc94d109fd682 # initialize rs1
li x23, 0xaa8bc94d109fd682 # initialize rs2
bne x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x8803418c412574ad # initialize rs1
li x24, 0xc86237c193d908fc # initialize rs2
bne x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xc86237c193d908fc # initialize rs1
li x24, 0xc86237c193d908fc # initialize rs2
bne x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xa8c986b7baafc409 # initialize rs1
li x25, 0x763ae6180e2db24b # initialize rs2
bne x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x763ae6180e2db24b # initialize rs1
li x25, 0x763ae6180e2db24b # initialize rs2
bne x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x897f7363e8cc6fef # initialize rs1
li x26, 0x931a6bfd86c3b045 # initialize rs2
bne x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x931a6bfd86c3b045 # initialize rs1
li x26, 0x931a6bfd86c3b045 # initialize rs2
bne x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xee743899c670e3f0 # initialize rs1
li x27, 0x92026096810618e0 # initialize rs2
bne x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x92026096810618e0 # initialize rs1
li x27, 0x92026096810618e0 # initialize rs2
bne x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x14be050c6707b937 # initialize rs1
li x28, 0x163acac06518f4bf # initialize rs2
bne x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x163acac06518f4bf # initialize rs1
li x28, 0x163acac06518f4bf # initialize rs2
bne x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x509369a99469f69d # initialize rs1
li x29, 0x58f0f0b24d7ba4d4 # initialize rs2
bne x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x58f0f0b24d7ba4d4 # initialize rs1
li x29, 0x58f0f0b24d7ba4d4 # initialize rs2
bne x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x32fd9fac732177e1 # initialize rs1
li x30, 0x7b2065c6e0492148 # initialize rs2
bne x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7b2065c6e0492148 # initialize rs1
li x30, 0x7b2065c6e0492148 # initialize rs2
bne x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x9539d134633c3320 # initialize rs1
li x31, 0xbeef66e0d6646662 # initialize rs2
bne x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xbeef66e0d6646662 # initialize rs1
li x31, 0xbeef66e0d6646662 # initialize rs2
bne x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bne x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x24, x23 # perform first operation
bne x31, x7, arbitraryLabel145
nop
arbitraryLabel145:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x8, x5, x31 # perform first operation
bne x20, x30, arbitraryLabel146
nop
arbitraryLabel146:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x15, x14 # perform first operation
bne x26, x27, arbitraryLabel147
nop
arbitraryLabel147:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x3, x15 # perform first operation
bne x27, x1, arbitraryLabel148
nop
arbitraryLabel148:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x2, x20 # perform first operation
bne x28, x13, arbitraryLabel149
nop
arbitraryLabel149:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x3, x25 # perform first operation
bne x26, x21, arbitraryLabel150
nop
arbitraryLabel150:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-andi.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x02d6873445f1efea # initialize rs1
andi x29, x0, -982 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x8aee347f8872969a # initialize rs1
andi x25, x1, 1335 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x30696323f9af1c10 # initialize rs1
andi x21, x2, -217 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xc4acead4fb293fe2 # initialize rs1
andi x19, x3, 397 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x64bb3b7fb18ab440 # initialize rs1
andi x3, x4, -262 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x703c22e471e3e46a # initialize rs1
andi x17, x5, 441 # perform operation
RVTEST_SIGUPD(x6, x0, x17, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x97f37bb53fa8cbd5 # initialize rs1
andi x30, x6, -532 # perform operation
RVTEST_SIGUPD(x7, x0, x30, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd8e263d7edfb231e # initialize rs1
andi x4, x7, -1089 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf5dcafe185306de1 # initialize rs1
andi x30, x8, 1481 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xbc9d3f5d1c040f26 # initialize rs1
andi x8, x9, -1251 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x5bac69fefe06faee # initialize rs1
andi x12, x10, 1522 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xbdd30c653c8db55d # initialize rs1
andi x18, x11, 955 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x2c42363a972030fc # initialize rs1
andi x22, x12, 1735 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x63ec739f3ba08665 # initialize rs1
andi x15, x13, -1486 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x24cc1eba9e66a6f3 # initialize rs1
andi x11, x14, 70 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x9bc0e0aa1919ea93 # initialize rs1
andi x7, x15, -191 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xba5bab7974cc008f # initialize rs1
andi x1, x16, 277 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x45aeca5712828197 # initialize rs1
andi x2, x17, 1478 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x630cd0920a8b7206 # initialize rs1
andi x23, x18, 58 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xbb3e31127b3aa00c # initialize rs1
andi x20, x19, 1559 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xab8014b8aaf46907 # initialize rs1
andi x25, x20, 1102 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x1a182b5f7f0caf25 # initialize rs1
andi x23, x21, -1708 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x0b56e952554ef3b9 # initialize rs1
andi x23, x22, 971 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x6345e79c06738b3b # initialize rs1
andi x6, x23, -263 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xeaae3acabe5ab461 # initialize rs1
andi x29, x24, -1336 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x27d21b863270498d # initialize rs1
andi x20, x25, -1963 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x21ca4a557e26f0e9 # initialize rs1
andi x2, x26, -761 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xd98b4ca8aa7f7bba # initialize rs1
andi x14, x27, 686 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xbdf8a5410f592bd6 # initialize rs1
andi x20, x28, -1515 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x26f37f30996c0b69 # initialize rs1
andi x16, x29, 1586 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x507d6416399a43c7 # initialize rs1
andi x23, x30, -258 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x8b27a4579666d7ae # initialize rs1
andi x24, x31, 950 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 248)

# Testcase cp_rd (Test destination rd = x0)
li x24, 0x358c204e405d43b1 # initialize rs1
andi x0, x24, -1278 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x21, 0x59dfb4e35f96f990 # initialize rs1
andi x1, x21, 264 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x22, 0x289273b6613a145f # initialize rs1
andi x2, x22, 1155 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x23, 0x7c2e1195aee1d96e # initialize rs1
andi x3, x23, 447 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
li x19, 0x329b9db7a161d5b7 # initialize rs1
andi x4, x19, -83 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0x45db1f6d961522a3 # initialize rs1
andi x5, x14, -1539 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0x0e35f329031555b6 # initialize rs1
andi x6, x27, 202 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0x3afb94d18b5b4cbd # initialize rs1
andi x7, x16, -1817 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x5, 0x9fb795fa626d4324 # initialize rs1
andi x8, x5, 1669 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x22, 0x6787e4e42cbcef97 # initialize rs1
andi x9, x22, -1508 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x27, 0x96728a2f82467ec2 # initialize rs1
andi x10, x27, 1603 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x23, 0x19ba9fb19e0842c1 # initialize rs1
andi x11, x23, 1773 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x31, 0xa137a9375a265bed # initialize rs1
andi x12, x31, -370 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x12, 0x2793a22d78640cdc # initialize rs1
andi x13, x12, 1473 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x2, 0xf8047d2f82c072f0 # initialize rs1
andi x14, x2, -1456 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0xba353a155cf42bec # initialize rs1
andi x15, x31, -1504 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x9, 0x7aee601e9df07c3a # initialize rs1
andi x16, x9, -1004 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x12, 0x5d34750d120c23b3 # initialize rs1
andi x17, x12, 783 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x20, 0xd3e525694c9b14f0 # initialize rs1
andi x18, x20, -1148 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x11, 0xed2f70cefb0bf852 # initialize rs1
andi x19, x11, 1311 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x5, 0x58b0e6c4c5f1a862 # initialize rs1
andi x20, x5, -1064 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x21, 0x8da1f808f1931bc7 # initialize rs1
andi x21, x21, -1465 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x26, 0x1510a4b300365b90 # initialize rs1
andi x22, x26, -1434 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x22, 0xe6845d4e4ed8925e # initialize rs1
andi x23, x22, -518 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x22, 0x8f018536e9cbf1c0 # initialize rs1
andi x24, x22, 1079 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x30, 0x50ce9d33fd3fd7f3 # initialize rs1
andi x25, x30, -1847 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x21, 0x4337838c2e9febc8 # initialize rs1
andi x26, x21, 282 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x8, 0x2b1e24758a5cb3a0 # initialize rs1
andi x27, x8, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x2, 0x77d1c8022b684092 # initialize rs1
andi x28, x2, 1890 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x15, 0xeeb48ac7ac1e464b # initialize rs1
andi x29, x15, -695 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x21, 0xc7471ca8b3fe85e2 # initialize rs1
andi x30, x21, 1521 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x5, 0xaefcef1cc1d4a959 # initialize rs1
andi x31, x5, -1195 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x2, 0x0000000000000000 # initialize rs1
andi x24, x2, 1650 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x14, 0x0000000000000001 # initialize rs1
andi x8, x14, 1001 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x23, 0x0000000000000002 # initialize rs1
andi x31, x23, 1223 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x16, 0x8000000000000000 # initialize rs1
andi x29, x16, 1044 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x22, 0x8000000000000001 # initialize rs1
andi x26, x22, -1925 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
andi x16, x2, -1368 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x2, 0x7ffffffffffffffe # initialize rs1
andi x26, x2, -1464 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x19, 0xffffffffffffffff # initialize rs1
andi x12, x19, 388 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x14, 0xfffffffffffffffe # initialize rs1
andi x29, x14, -400 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x29, 0x5bbc887763ae86f2 # initialize rs1
andi x5, x29, 1456 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x13, x9, 1111 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x26, 0x5555555555555555 # initialize rs1
andi x12, x26, 444 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x11, 0x00000000ffffffff # initialize rs1
andi x19, x11, -943 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x31, 0x00000000fffffffe # initialize rs1
andi x26, x31, 1601 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x15, 0x0000000100000000 # initialize rs1
andi x17, x15, -1859 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x10, 0x0000000100000001 # initialize rs1
andi x7, x10, 508 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 632)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
andi x18, x17, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
andi x6, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 648)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
andi x7, x25, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 656)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
andi x19, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
andi x19, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 672)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000000 # initialize rs1
andi x27, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 680)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000000 # initialize rs1
andi x16, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 688)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
andi x16, x17, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 696)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000000 # initialize rs1
andi x9, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 704)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
andi x9, x12, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
andi x2, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 720)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
andi x19, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 728)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000000 # initialize rs1
andi x21, x19, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 736)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000000 # initialize rs1
andi x17, x11, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 744)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
andi x19, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 752)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
andi x8, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 760)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
andi x27, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 768)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000000 # initialize rs1
andi x24, x1, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 776)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
andi x3, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 784)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000000 # initialize rs1
andi x20, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 792)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
andi x5, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 800)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
andi x9, x12, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 808)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
andi x23, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000001 # initialize rs1
andi x17, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 824)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
andi x8, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 832)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000001 # initialize rs1
andi x26, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 840)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000001 # initialize rs1
andi x8, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 848)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000001 # initialize rs1
andi x28, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 856)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
andi x13, x6, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
andi x31, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 872)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000001 # initialize rs1
andi x16, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 880)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
andi x8, x9, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 888)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
andi x27, x9, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 896)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000001 # initialize rs1
andi x27, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 904)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000001 # initialize rs1
andi x7, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 912)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000001 # initialize rs1
andi x20, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 920)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000001 # initialize rs1
andi x1, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 928)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
andi x21, x22, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 936)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
andi x10, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 944)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
andi x25, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 952)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000002 # initialize rs1
andi x17, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 960)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
andi x1, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 968)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000002 # initialize rs1
andi x12, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 976)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
andi x7, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 984)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000002 # initialize rs1
andi x11, x13, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 992)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
andi x30, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1000)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
andi x7, x23, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1008)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
andi x13, x24, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1016)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000002 # initialize rs1
andi x16, x30, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1024)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
andi x25, x26, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1032)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
andi x24, x15, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1040)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000002 # initialize rs1
andi x17, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1048)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000002 # initialize rs1
andi x27, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1056)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000002 # initialize rs1
andi x8, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1064)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000002 # initialize rs1
andi x12, x25, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1072)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000002 # initialize rs1
andi x22, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1080)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000002 # initialize rs1
andi x28, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1088)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000002 # initialize rs1
andi x12, x17, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1096)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
andi x28, x14, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1104)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
andi x20, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1112)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
andi x30, x24, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1120)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
andi x31, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1128)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000000 # initialize rs1
andi x22, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1136)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000000 # initialize rs1
andi x17, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1144)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
andi x25, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1152)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000000 # initialize rs1
andi x20, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1160)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
andi x28, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1168)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
andi x31, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1176)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
andi x15, x18, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1184)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
andi x6, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1192)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000000 # initialize rs1
andi x10, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1200)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
andi x16, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1208)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000000 # initialize rs1
andi x13, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1216)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000000 # initialize rs1
andi x15, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1224)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000000 # initialize rs1
andi x15, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1232)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000000 # initialize rs1
andi x30, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1240)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
andi x23, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1248)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
andi x9, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1256)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000000 # initialize rs1
andi x14, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1264)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
andi x15, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1272)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
andi x22, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1280)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
andi x11, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1288)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
andi x10, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1296)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000001 # initialize rs1
andi x16, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1304)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
andi x26, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1312)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
andi x18, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1320)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000001 # initialize rs1
andi x27, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1328)

# Testcase cr_rs1_imm_corners
li x11, 0x8000000000000001 # initialize rs1
andi x9, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1336)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000001 # initialize rs1
andi x11, x23, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1344)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000001 # initialize rs1
andi x31, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
andi x26, x30, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1360)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
andi x6, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1368)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
andi x10, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1376)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000001 # initialize rs1
andi x14, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1384)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
andi x3, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1392)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
andi x2, x12, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1400)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
andi x31, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1408)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000001 # initialize rs1
andi x22, x25, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1416)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
andi x16, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1424)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000001 # initialize rs1
andi x26, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1432)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
andi x12, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1440)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
andi x19, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1448)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
andi x10, x1, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1456)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
andi x23, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1464)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
andi x25, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1472)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
andi x14, x29, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1480)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
andi x6, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1488)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
andi x31, x14, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1496)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffffffffffff # initialize rs1
andi x3, x30, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1504)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
andi x17, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1512)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffffffffffff # initialize rs1
andi x24, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1520)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
andi x19, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1528)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
andi x28, x3, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1536)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
andi x14, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1544)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
andi x5, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1552)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
andi x2, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1560)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffffffffffff # initialize rs1
andi x18, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1568)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffffffffffff # initialize rs1
andi x26, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1576)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffffffffffff # initialize rs1
andi x26, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1584)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
andi x13, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1592)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
andi x15, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1600)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffffffffffe # initialize rs1
andi x12, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1608)

# Testcase cr_rs1_imm_corners
li x18, 0x7ffffffffffffffe # initialize rs1
andi x13, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1616)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffffffffffe # initialize rs1
andi x15, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1624)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
andi x14, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1632)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
andi x20, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1640)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
andi x26, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1648)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffffffffffe # initialize rs1
andi x22, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1656)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffffffffffe # initialize rs1
andi x19, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1664)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffffffffffe # initialize rs1
andi x11, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1672)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
andi x14, x26, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1680)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffffffffffe # initialize rs1
andi x12, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1688)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
andi x30, x28, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1696)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
andi x13, x2, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1704)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
andi x10, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1712)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
andi x1, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1720)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
andi x31, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1728)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
andi x30, x2, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1736)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
andi x3, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1744)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
andi x7, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1752)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffffffffffff # initialize rs1
andi x28, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1760)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffffffffffff # initialize rs1
andi x5, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1768)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
andi x31, x27, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffffffffffff # initialize rs1
andi x22, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1784)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
andi x17, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x21, 0xffffffffffffffff # initialize rs1
andi x19, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffffffffffff # initialize rs1
andi x22, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 8)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffffffffffff # initialize rs1
andi x30, x5, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 16)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
andi x18, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 24)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
andi x26, x24, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 32)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffffffffffff # initialize rs1
andi x20, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 40)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
andi x26, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 48)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
andi x28, x1, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 56)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffffffffffff # initialize rs1
andi x15, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 64)

# Testcase cr_rs1_imm_corners
li x15, 0xffffffffffffffff # initialize rs1
andi x28, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 72)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffffffffffff # initialize rs1
andi x16, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 80)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffffffffffff # initialize rs1
andi x27, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 88)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffffffffffff # initialize rs1
andi x24, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 96)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
andi x1, x6, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 104)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffffffffffff # initialize rs1
andi x28, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
andi x24, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffffffffffe # initialize rs1
andi x26, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 128)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
andi x23, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 136)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffffffffffe # initialize rs1
andi x3, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 144)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
andi x14, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 152)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffffffffffe # initialize rs1
andi x1, x6, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 160)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
andi x22, x23, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 168)

# Testcase cr_rs1_imm_corners
li x28, 0xfffffffffffffffe # initialize rs1
andi x18, x28, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 176)

# Testcase cr_rs1_imm_corners
li x17, 0xfffffffffffffffe # initialize rs1
andi x26, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 184)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
andi x30, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 192)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffffffffffe # initialize rs1
andi x6, x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 200)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffffffffffe # initialize rs1
andi x13, x20, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 208)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffffffffffe # initialize rs1
andi x11, x8, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 216)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
andi x24, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
andi x16, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 232)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
andi x11, x26, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 240)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
andi x6, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 248)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffffffffffe # initialize rs1
andi x25, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 256)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffffffffffe # initialize rs1
andi x11, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 264)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffffffffffe # initialize rs1
andi x31, x7, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 272)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
andi x7, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 280)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
andi x17, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 288)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc887763ae86f2 # initialize rs1
andi x31, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 296)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
andi x22, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 304)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc887763ae86f2 # initialize rs1
andi x19, x29, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 312)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc887763ae86f2 # initialize rs1
andi x28, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 320)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
andi x26, x1, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 328)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc887763ae86f2 # initialize rs1
andi x25, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 336)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
andi x19, x6, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 344)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
andi x19, x22, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 352)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc887763ae86f2 # initialize rs1
andi x24, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 360)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
andi x14, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc887763ae86f2 # initialize rs1
andi x28, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 376)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc887763ae86f2 # initialize rs1
andi x24, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 384)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
andi x13, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 392)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc887763ae86f2 # initialize rs1
andi x20, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc887763ae86f2 # initialize rs1
andi x15, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 408)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc887763ae86f2 # initialize rs1
andi x29, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 416)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc887763ae86f2 # initialize rs1
andi x27, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 424)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
andi x22, x6, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x12, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 440)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x24, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x15, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x10, x31, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 464)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x11, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 472)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x19, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 480)

# Testcase cr_rs1_imm_corners
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x19, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 488)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x18, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 496)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x10, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 504)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x22, x13, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 512)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x24, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 520)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x20, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 528)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x5, x19, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 536)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x26, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 544)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x17, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 552)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x16, x12, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 560)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x12, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 568)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x11, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 576)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x13, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 584)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
andi x13, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 592)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
andi x2, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 600)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
andi x7, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 608)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
andi x7, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 616)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
andi x8, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 624)

# Testcase cr_rs1_imm_corners
li x15, 0x5555555555555555 # initialize rs1
andi x7, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 632)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
andi x15, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 640)

# Testcase cr_rs1_imm_corners
li x13, 0x5555555555555555 # initialize rs1
andi x22, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 648)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
andi x11, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 656)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
andi x26, x6, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 664)

# Testcase cr_rs1_imm_corners
li x1, 0x5555555555555555 # initialize rs1
andi x10, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 672)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
andi x12, x24, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 680)

# Testcase cr_rs1_imm_corners
li x30, 0x5555555555555555 # initialize rs1
andi x15, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 688)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
andi x20, x28, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 696)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
andi x5, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 704)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
andi x26, x9, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 712)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
andi x8, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 720)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
andi x14, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 728)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
andi x6, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 736)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
andi x14, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 744)

# Testcase cr_rs1_imm_corners
li x20, 0x5555555555555555 # initialize rs1
andi x1, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 752)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000ffffffff # initialize rs1
andi x26, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 760)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
andi x3, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 768)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000ffffffff # initialize rs1
andi x6, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 776)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
andi x27, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 784)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000ffffffff # initialize rs1
andi x17, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 792)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
andi x8, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 800)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000ffffffff # initialize rs1
andi x3, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 808)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
andi x24, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 816)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000ffffffff # initialize rs1
andi x31, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 824)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
andi x23, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000ffffffff # initialize rs1
andi x30, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 840)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000ffffffff # initialize rs1
andi x30, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 848)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
andi x19, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 856)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
andi x19, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 864)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000ffffffff # initialize rs1
andi x17, x6, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 872)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000ffffffff # initialize rs1
andi x18, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 880)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000ffffffff # initialize rs1
andi x28, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 888)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000ffffffff # initialize rs1
andi x23, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 896)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000ffffffff # initialize rs1
andi x9, x30, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 904)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000ffffffff # initialize rs1
andi x23, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 912)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000fffffffe # initialize rs1
andi x13, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 920)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000fffffffe # initialize rs1
andi x22, x3, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 928)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
andi x17, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 936)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
andi x25, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 944)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
andi x7, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 952)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000fffffffe # initialize rs1
andi x17, x8, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 960)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
andi x15, x30, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 968)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000fffffffe # initialize rs1
andi x25, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 976)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
andi x26, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 984)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000fffffffe # initialize rs1
andi x23, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 992)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000fffffffe # initialize rs1
andi x24, x25, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1000)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
andi x15, x29, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1008)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000fffffffe # initialize rs1
andi x13, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1016)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
andi x8, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1024)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
andi x19, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1032)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
andi x9, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1040)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
andi x30, x14, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1048)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000fffffffe # initialize rs1
andi x1, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1056)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000fffffffe # initialize rs1
andi x1, x10, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1064)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
andi x12, x29, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1072)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000000 # initialize rs1
andi x26, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1080)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000000 # initialize rs1
andi x20, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1088)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
andi x17, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1096)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
andi x30, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1104)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
andi x9, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1112)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
andi x8, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1120)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000000 # initialize rs1
andi x28, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1128)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
andi x11, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1136)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000000 # initialize rs1
andi x6, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1144)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000000 # initialize rs1
andi x25, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1152)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000000 # initialize rs1
andi x1, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1160)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
andi x24, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1168)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000000 # initialize rs1
andi x9, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1176)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000000 # initialize rs1
andi x29, x9, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1184)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000000 # initialize rs1
andi x16, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1192)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000100000000 # initialize rs1
andi x13, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1200)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
andi x20, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1208)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
andi x10, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1216)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
andi x31, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1224)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000000 # initialize rs1
andi x13, x29, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1232)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
andi x29, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1240)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000001 # initialize rs1
andi x5, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1248)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000100000001 # initialize rs1
andi x26, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1256)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
andi x3, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1264)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000001 # initialize rs1
andi x13, x19, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1272)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
andi x17, x8, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1280)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000001 # initialize rs1
andi x18, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1288)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000001 # initialize rs1
andi x3, x5, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1296)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
andi x17, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1304)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000001 # initialize rs1
andi x23, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1312)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
andi x15, x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1320)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
andi x28, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1328)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000001 # initialize rs1
andi x26, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1336)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000001 # initialize rs1
andi x16, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1344)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
andi x1, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1352)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000001 # initialize rs1
andi x31, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1360)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000001 # initialize rs1
andi x18, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1368)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000100000001 # initialize rs1
andi x7, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1376)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000001 # initialize rs1
andi x18, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
andi x8, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xfb879aaa69b42aa7 # initialize rs1
andi x0, x0, -1685 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xb49638e0bd8ecf30 # initialize rs1
andi x1, x1, -1911 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x83a91ff865ae9587 # initialize rs1
andi x2, x2, 72 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x0f95fbba97854ad3 # initialize rs1
andi x3, x3, 954 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x43fd477e06009bd8 # initialize rs1
andi x4, x4, 1413 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x59a5f79ec89ba5d4 # initialize rs1
andi x5, x5, -1471 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x5040d32c9c2639e6 # initialize rs1
andi x6, x6, -296 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd2666456fa69ed8c # initialize rs1
andi x7, x7, 897 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xf9b2664add5bd750 # initialize rs1
andi x8, x8, -93 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x3eb95114fb5bcb73 # initialize rs1
andi x9, x9, 307 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xdf41c24e430e8a19 # initialize rs1
andi x10, x10, -1120 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xed40eff357740f09 # initialize rs1
andi x11, x11, 1690 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x010f56aff17b4e8f # initialize rs1
andi x12, x12, -389 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x441c799eabe3cede # initialize rs1
andi x13, x13, -287 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xdf1dfd32a4350f48 # initialize rs1
andi x14, x14, -1020 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x18fb1733475f8fbd # initialize rs1
andi x15, x15, 195 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x200c0c5496b538ce # initialize rs1
andi x16, x16, 501 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xa3240fb6eecbcb55 # initialize rs1
andi x17, x17, -361 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x8e9bef67862e8782 # initialize rs1
andi x18, x18, -1419 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x83670ee41ee40f63 # initialize rs1
andi x19, x19, -1601 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x115257fa983cb827 # initialize rs1
andi x20, x20, 1901 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x009b09116bbc1b3d # initialize rs1
andi x21, x21, 193 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x3501d0ef7e2ed287 # initialize rs1
andi x22, x22, -798 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x4543ec8bfa5fb1fa # initialize rs1
andi x23, x23, -1436 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xe8ae4302a69e6655 # initialize rs1
andi x24, x24, -220 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x9980e267c477bf73 # initialize rs1
andi x25, x25, -1816 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xe75bdf4100c9955c # initialize rs1
andi x26, x26, -1644 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xe2f975b2ff7df59a # initialize rs1
andi x27, x27, -201 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x3c02e001cfce00c0 # initialize rs1
andi x28, x28, -426 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x22a2f3a6edda1664 # initialize rs1
andi x29, x29, -1111 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x7ca5729d94ee6729 # initialize rs1
andi x30, x30, 1723 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xfba063987111d60d # initialize rs1
andi x31, x31, 1801 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x19, 0xe16cb71b39199bf4 # initialize rs1
andi x18, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1656)

# Testcase cp_imm_corners
li x23, 0xc358e63560e7bb85 # initialize rs1
andi x2, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1664)

# Testcase cp_imm_corners
li x27, 0xa556d038f9288676 # initialize rs1
andi x21, x27, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1672)

# Testcase cp_imm_corners
li x3, 0x1dae1ee2c98fd6f7 # initialize rs1
andi x10, x3, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1680)

# Testcase cp_imm_corners
li x30, 0x852311a9eab89978 # initialize rs1
andi x2, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1688)

# Testcase cp_imm_corners
li x23, 0xee1a5a80b4cb7e2d # initialize rs1
andi x24, x23, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1696)

# Testcase cp_imm_corners
li x24, 0xe75878a8b4c9b256 # initialize rs1
andi x3, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1704)

# Testcase cp_imm_corners
li x27, 0xbd6a49b80e8a12b4 # initialize rs1
andi x11, x27, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1712)

# Testcase cp_imm_corners
li x2, 0x5037422380376ef0 # initialize rs1
andi x17, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1720)

# Testcase cp_imm_corners
li x10, 0x9ce671e2a3df7c52 # initialize rs1
andi x3, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1728)

# Testcase cp_imm_corners
li x5, 0x709e6eae50f9ebb3 # initialize rs1
andi x20, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1736)

# Testcase cp_imm_corners
li x2, 0x9fba379620a92e0d # initialize rs1
andi x15, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1744)

# Testcase cp_imm_corners
li x10, 0x120373fa93b6ab9f # initialize rs1
andi x30, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1752)

# Testcase cp_imm_corners
li x30, 0xf852278cf69c61f7 # initialize rs1
andi x29, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cp_imm_corners
li x23, 0x3e9693c59a82e60e # initialize rs1
andi x30, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cp_imm_corners
li x28, 0x2b190ab0058c573b # initialize rs1
andi x3, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1776)

# Testcase cp_imm_corners
li x27, 0x420df867ddf177be # initialize rs1
andi x24, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1784)

# Testcase cp_imm_corners
li x12, 0x369495b03f21f217 # initialize rs1
andi x16, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x31, 0x8d1faf3884dbb4a6 # initialize rs1
andi x17, x31, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 0)

# Testcase cp_imm_corners
li x17, 0x5c88a6fb8c15b665 # initialize rs1
andi x6, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x17, x5 # perform first operation
andi x20, x22, 257 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x14, x20 # perform first operation
andi x25, x16, 1305 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x24, x14 # perform first operation
andi x21, x31, 56 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x3, x8, x6 # perform first operation
andi x15, x3, -1483 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x15, x9, x2 # perform first operation
andi x15, x1, -386 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x30, x1, x19 # perform first operation
andi x15, x30, 1479 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x6, x18, x10 # perform first operation
andi x6, x22, 99 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x5, x7, x6 # perform first operation
andi x5, x19, 965 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x25, x10 # perform first operation
andi x29, x22, -664 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x11, x16, x27 # perform first operation
andi x16, x30, 1929 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x25, x9 # perform first operation
andi x9, x16, -1142 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x17, x9 # perform first operation
andi x26, x2, 348 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-lb.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x18, 0x9041aa4b2168ce07 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1318 # sub immediate from rs1 to counter offset
sd x18, -1318 (x1) # store value to put something in memory
lb x7, -1318(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x17, 0x7fa8a2c4272e0154 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1795 # sub immediate from rs1 to counter offset
sd x17, 1795 (x2) # store value to put something in memory
lb x20, 1795(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x5, 0xb0d040376134c43e # initialize rs2
la x3, scratch # base address 
addi x3, x3, -587 # sub immediate from rs1 to counter offset
sd x5, 587 (x3) # store value to put something in memory
lb x8, 587(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xb4ed94763ca6d9c6 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 565 # sub immediate from rs1 to counter offset
sd x15, -565 (x4) # store value to put something in memory
lb x2, -565(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x2, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x24, 0x7393f53e76a888f8 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1600 # sub immediate from rs1 to counter offset
sd x24, 1600 (x5) # store value to put something in memory
lb x29, 1600(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x29, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0xf3fe471c571fb053 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1306 # sub immediate from rs1 to counter offset
sd x14, -1306 (x6) # store value to put something in memory
lb x15, -1306(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x15, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x23, 0x0246bfc251fea030 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 644 # sub immediate from rs1 to counter offset
sd x23, -644 (x7) # store value to put something in memory
lb x26, -644(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x23, 0x906482c2216ea0a7 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1411 # sub immediate from rs1 to counter offset
sd x23, -1411 (x8) # store value to put something in memory
lb x17, -1411(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x30, 0xdde04707561be1ba # initialize rs2
la x9, scratch # base address 
addi x9, x9, -279 # sub immediate from rs1 to counter offset
sd x30, 279 (x9) # store value to put something in memory
lb x24, 279(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x20, 0x739ad3052ad12aab # initialize rs2
la x10, scratch # base address 
addi x10, x10, -2015 # sub immediate from rs1 to counter offset
sd x20, 2015 (x10) # store value to put something in memory
lb x12, 2015(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x17, 0x63c10cabedf77cf3 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 536 # sub immediate from rs1 to counter offset
sd x17, -536 (x11) # store value to put something in memory
lb x2, -536(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x15, 0x8a4446dd5d4c6f3c # initialize rs2
la x12, scratch # base address 
addi x12, x12, 841 # sub immediate from rs1 to counter offset
sd x15, -841 (x12) # store value to put something in memory
lb x20, -841(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x1, 0x83df71bee2f3b5b0 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -533 # sub immediate from rs1 to counter offset
sd x1, 533 (x13) # store value to put something in memory
lb x11, 533(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x22, 0x43cb2275f9db7102 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -670 # sub immediate from rs1 to counter offset
sd x22, 670 (x14) # store value to put something in memory
lb x18, 670(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x25, 0xd0b51773646808f6 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 534 # sub immediate from rs1 to counter offset
sd x25, -534 (x15) # store value to put something in memory
lb x9, -534(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x5, 0x7ae60fd6d7f8de5f # initialize rs2
la x16, scratch # base address 
addi x16, x16, -806 # sub immediate from rs1 to counter offset
sd x5, 806 (x16) # store value to put something in memory
lb x8, 806(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x25, 0x1769b2b8a18681f4 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1923 # sub immediate from rs1 to counter offset
sd x25, -1923 (x17) # store value to put something in memory
lb x7, -1923(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x20, 0xbc8d0ccfebd2c1c0 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 584 # sub immediate from rs1 to counter offset
sd x20, -584 (x18) # store value to put something in memory
lb x2, -584(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x27, 0xd3ffa57107dad608 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1956 # sub immediate from rs1 to counter offset
sd x27, 1956 (x19) # store value to put something in memory
lb x12, 1956(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x2, 0x449fa0bf6f35adb8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 657 # sub immediate from rs1 to counter offset
sd x2, -657 (x20) # store value to put something in memory
lb x16, -657(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x30, 0xe16bc2c31abfd376 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 14 # sub immediate from rs1 to counter offset
sd x30, -14 (x21) # store value to put something in memory
lb x8, -14(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x9, 0xc27a3dadbe39f68b # initialize rs2
la x22, scratch # base address 
addi x22, x22, 848 # sub immediate from rs1 to counter offset
sd x9, -848 (x22) # store value to put something in memory
lb x11, -848(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x24, 0xac5eeca29806a538 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1246 # sub immediate from rs1 to counter offset
sd x24, 1246 (x23) # store value to put something in memory
lb x10, 1246(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x31, 0xf775f1f384be3814 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -5 # sub immediate from rs1 to counter offset
sd x31, 5 (x24) # store value to put something in memory
lb x22, 5(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x9, 0xf75b0143d5aeb561 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -936 # sub immediate from rs1 to counter offset
sd x9, 936 (x25) # store value to put something in memory
lb x1, 936(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x20, 0xb8e12c4415e8aead # initialize rs2
la x26, scratch # base address 
addi x26, x26, 471 # sub immediate from rs1 to counter offset
sd x20, -471 (x26) # store value to put something in memory
lb x15, -471(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x17, 0xe2f4dc660ed13b43 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -598 # sub immediate from rs1 to counter offset
sd x17, 598 (x27) # store value to put something in memory
lb x6, 598(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x19, 0x3074ffdf888cd83b # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1287 # sub immediate from rs1 to counter offset
sd x19, 1287 (x28) # store value to put something in memory
lb x3, 1287(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x5, 0x17976adcaa730abe # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1031 # sub immediate from rs1 to counter offset
sd x5, 1031 (x29) # store value to put something in memory
lb x21, 1031(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x2, 0xf6872eae9986295d # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1772 # sub immediate from rs1 to counter offset
sd x2, -1772 (x30) # store value to put something in memory
lb x21, -1772(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x12, 0x2101dea7009498cc # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1511 # sub immediate from rs1 to counter offset
sd x12, 1511 (x31) # store value to put something in memory
lb x13, 1511(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 240)

# Testcase cp_rd (Test destination rd = x0)
li x24, 0xdd063b1bd1819157 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 761 # sub immediate from rs1 to counter offset
sd x24, -761 (x17) # store value to put something in memory
lb x0, -761(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x5, 0xd24b78e51e365dcf # initialize rs2
la x8, scratch # base address 
addi x8, x8, 612 # sub immediate from rs1 to counter offset
sd x5, -612 (x8) # store value to put something in memory
lb x1, -612(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x24, 0x6e401b12988f4dc2 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1004 # sub immediate from rs1 to counter offset
sd x24, 1004 (x20) # store value to put something in memory
lb x2, 1004(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x3, 0x588bb728e3ff6b78 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1260 # sub immediate from rs1 to counter offset
sd x3, -1260 (x24) # store value to put something in memory
lb x3, -1260(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0xd46ddf20cbc63601 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1252 # sub immediate from rs1 to counter offset
sd x10, 1252 (x8) # store value to put something in memory
lb x4, 1252(x8) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0x87fde9ac2a4ca622 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 319 # sub immediate from rs1 to counter offset
sd x28, -319 (x21) # store value to put something in memory
lb x5, -319(x21) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0xfc9d5842f0d4cb5e # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1172 # sub immediate from rs1 to counter offset
sd x15, 1172 (x20) # store value to put something in memory
lb x6, 1172(x20) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0xc2a2eb446c5876b6 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1064 # sub immediate from rs1 to counter offset
sd x24, 1064 (x12) # store value to put something in memory
lb x7, 1064(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x20, 0x59da34d1d44167aa # initialize rs2
la x5, scratch # base address 
addi x5, x5, -654 # sub immediate from rs1 to counter offset
sd x20, 654 (x5) # store value to put something in memory
lb x8, 654(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x15, 0x3ae0a19b001697ba # initialize rs2
la x27, scratch # base address 
addi x27, x27, 604 # sub immediate from rs1 to counter offset
sd x15, -604 (x27) # store value to put something in memory
lb x9, -604(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x21, 0x4fd2260328ff1e12 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1205 # sub immediate from rs1 to counter offset
sd x21, 1205 (x28) # store value to put something in memory
lb x10, 1205(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x16, 0xbfc339e254fde194 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1173 # sub immediate from rs1 to counter offset
sd x16, -1173 (x20) # store value to put something in memory
lb x11, -1173(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x27, 0x12f3ddabfcf509b1 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 668 # sub immediate from rs1 to counter offset
sd x27, -668 (x8) # store value to put something in memory
lb x12, -668(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x26, 0x20a30ce9cb4f3313 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 248 # sub immediate from rs1 to counter offset
sd x26, -248 (x7) # store value to put something in memory
lb x13, -248(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x27, 0xbf22b1974be316e4 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -404 # sub immediate from rs1 to counter offset
sd x27, 404 (x10) # store value to put something in memory
lb x14, 404(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x21, 0x7d55856f959f87bb # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1149 # sub immediate from rs1 to counter offset
sd x21, 1149 (x1) # store value to put something in memory
lb x15, 1149(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x31, 0x3645b84180958f51 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1031 # sub immediate from rs1 to counter offset
sd x31, 1031 (x7) # store value to put something in memory
lb x16, 1031(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x28, 0x55e25c68f912dbc9 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1191 # sub immediate from rs1 to counter offset
sd x28, -1191 (x31) # store value to put something in memory
lb x17, -1191(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0x5fa7c463cb73a864 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1805 # sub immediate from rs1 to counter offset
sd x7, 1805 (x23) # store value to put something in memory
lb x18, 1805(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x2, 0x2a8c63b5aacee209 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1421 # sub immediate from rs1 to counter offset
sd x2, -1421 (x8) # store value to put something in memory
lb x19, -1421(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x6, 0xb09cdefb7762d816 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1125 # sub immediate from rs1 to counter offset
sd x6, 1125 (x24) # store value to put something in memory
lb x20, 1125(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x8, 0x102f1e3cfba922c5 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1094 # sub immediate from rs1 to counter offset
sd x8, -1094 (x13) # store value to put something in memory
lb x21, -1094(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x8, 0x2cf57ac77ceeaf2b # initialize rs2
la x15, scratch # base address 
addi x15, x15, 569 # sub immediate from rs1 to counter offset
sd x8, -569 (x15) # store value to put something in memory
lb x22, -569(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x21, 0x9da1c2d590b62274 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1733 # sub immediate from rs1 to counter offset
sd x21, 1733 (x9) # store value to put something in memory
lb x23, 1733(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x7, 0x565c66a273b57a1b # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1117 # sub immediate from rs1 to counter offset
sd x7, 1117 (x9) # store value to put something in memory
lb x24, 1117(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0x7e8beda295603773 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1419 # sub immediate from rs1 to counter offset
sd x7, -1419 (x19) # store value to put something in memory
lb x25, -1419(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x5, 0x78151601591e9b9b # initialize rs2
la x7, scratch # base address 
addi x7, x7, -414 # sub immediate from rs1 to counter offset
sd x5, 414 (x7) # store value to put something in memory
lb x26, 414(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x3, 0xcdd55473be902f23 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 210 # sub immediate from rs1 to counter offset
sd x3, -210 (x13) # store value to put something in memory
lb x27, -210(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x29, 0xde511ab8106c4ffd # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1670 # sub immediate from rs1 to counter offset
sd x29, -1670 (x26) # store value to put something in memory
lb x28, -1670(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x5, 0x39e94005395ac63d # initialize rs2
la x30, scratch # base address 
addi x30, x30, -8 # sub immediate from rs1 to counter offset
sd x5, 8 (x30) # store value to put something in memory
lb x29, 8(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x30, 0x75f745c923e6f58e # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1162 # sub immediate from rs1 to counter offset
sd x30, -1162 (x16) # store value to put something in memory
lb x30, -1162(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x31, 0x99c12aa8b2cdaf32 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 518 # sub immediate from rs1 to counter offset
sd x31, -518 (x20) # store value to put something in memory
lb x31, -518(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x8, 0xd182ebdcf748b279 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1332 # sub immediate from rs1 to counter offset
sd x8, 1332 (x1) # store value to put something in memory
lb x1, 1332(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x29, 0x20e99247e41e52df # initialize rs2
la x2, scratch # base address 
addi x2, x2, 52 # sub immediate from rs1 to counter offset
sd x29, -52 (x2) # store value to put something in memory
lb x2, -52(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x11, 0x101fdb0bdce936b8 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 240 # sub immediate from rs1 to counter offset
sd x11, -240 (x3) # store value to put something in memory
lb x3, -240(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x8, 0xbb253aca2c90baa0 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1455 # sub immediate from rs1 to counter offset
sd x8, 1455 (x4) # store value to put something in memory
lb x4, 1455(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x24, 0xd8457c0ec3f2abee # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1458 # sub immediate from rs1 to counter offset
sd x24, 1458 (x5) # store value to put something in memory
lb x5, 1458(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x3, 0xa37c3b3216507386 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -697 # sub immediate from rs1 to counter offset
sd x3, 697 (x6) # store value to put something in memory
lb x6, 697(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x13, 0xbb3db9aba47672b1 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 311 # sub immediate from rs1 to counter offset
sd x13, -311 (x7) # store value to put something in memory
lb x7, -311(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x12, 0x59802c262b047f85 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 219 # sub immediate from rs1 to counter offset
sd x12, -219 (x8) # store value to put something in memory
lb x8, -219(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x1, 0x65629ef48a22a572 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1058 # sub immediate from rs1 to counter offset
sd x1, -1058 (x9) # store value to put something in memory
lb x9, -1058(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x25, 0xadeab1f980d0d56d # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1703 # sub immediate from rs1 to counter offset
sd x25, 1703 (x10) # store value to put something in memory
lb x10, 1703(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x8, 0xdb98c02d2d77c653 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1012 # sub immediate from rs1 to counter offset
sd x8, 1012 (x11) # store value to put something in memory
lb x11, 1012(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x27, 0xbd31dcec4891f015 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -117 # sub immediate from rs1 to counter offset
sd x27, 117 (x12) # store value to put something in memory
lb x12, 117(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x21, 0x13377a3d63e070b6 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -463 # sub immediate from rs1 to counter offset
sd x21, 463 (x13) # store value to put something in memory
lb x13, 463(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x30, 0x47bc62070d461a2e # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1109 # sub immediate from rs1 to counter offset
sd x30, 1109 (x14) # store value to put something in memory
lb x14, 1109(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x8, 0x85d929dd1854cb65 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1017 # sub immediate from rs1 to counter offset
sd x8, 1017 (x15) # store value to put something in memory
lb x15, 1017(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x23, 0xf596a8bded8e93e4 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 372 # sub immediate from rs1 to counter offset
sd x23, -372 (x16) # store value to put something in memory
lb x16, -372(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x14, 0xd993b6c21154d70c # initialize rs2
la x17, scratch # base address 
addi x17, x17, -715 # sub immediate from rs1 to counter offset
sd x14, 715 (x17) # store value to put something in memory
lb x17, 715(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x30, 0x50aa8c5102d44b69 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1913 # sub immediate from rs1 to counter offset
sd x30, -1913 (x18) # store value to put something in memory
lb x18, -1913(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x18, 0xb39f676ec3df3586 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1168 # sub immediate from rs1 to counter offset
sd x18, 1168 (x19) # store value to put something in memory
lb x19, 1168(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x3, 0x8718651e869974b9 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1132 # sub immediate from rs1 to counter offset
sd x3, -1132 (x20) # store value to put something in memory
lb x20, -1132(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x6, 0xab1acf96e49675fa # initialize rs2
la x21, scratch # base address 
addi x21, x21, 886 # sub immediate from rs1 to counter offset
sd x6, -886 (x21) # store value to put something in memory
lb x21, -886(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x12, 0x823b1381a7ecf970 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -247 # sub immediate from rs1 to counter offset
sd x12, 247 (x22) # store value to put something in memory
lb x22, 247(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x2, 0x33df499f438ceb14 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 904 # sub immediate from rs1 to counter offset
sd x2, -904 (x23) # store value to put something in memory
lb x23, -904(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x31, 0x8c76016bfb731d70 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1082 # sub immediate from rs1 to counter offset
sd x31, 1082 (x24) # store value to put something in memory
lb x24, 1082(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x7, 0x6f1cba747297629c # initialize rs2
la x25, scratch # base address 
addi x25, x25, -244 # sub immediate from rs1 to counter offset
sd x7, 244 (x25) # store value to put something in memory
lb x25, 244(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x5, 0xa7682c0aa731d436 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -986 # sub immediate from rs1 to counter offset
sd x5, 986 (x26) # store value to put something in memory
lb x26, 986(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x9, 0x4f78b074200a7bb7 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 215 # sub immediate from rs1 to counter offset
sd x9, -215 (x27) # store value to put something in memory
lb x27, -215(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x20, 0x9afd1465c2dbddd0 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1176 # sub immediate from rs1 to counter offset
sd x20, 1176 (x28) # store value to put something in memory
lb x28, 1176(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x17, 0xf597b228ddf9a668 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -787 # sub immediate from rs1 to counter offset
sd x17, 787 (x29) # store value to put something in memory
lb x29, 787(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x23, 0xc2317c465539338a # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1683 # sub immediate from rs1 to counter offset
sd x23, -1683 (x30) # store value to put something in memory
lb x30, -1683(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x27, 0xf4d98316b3f452fc # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1899 # sub immediate from rs1 to counter offset
sd x27, -1899 (x31) # store value to put something in memory
lb x31, -1899(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x14, 0xd505d352d4c70077 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 0 # sub immediate from rs1 to counter offset
sd x14, 0 (x6) # store value to put something in memory
lb x16, 0(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 752)

# Testcase cp_imm_corners
li x26, 0xafc4e3ce3fc4351d # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1 # sub immediate from rs1 to counter offset
sd x26, 1 (x2) # store value to put something in memory
lb x7, 1(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 760)

# Testcase cp_imm_corners
li x8, 0x06cf17f915b900a6 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -2 # sub immediate from rs1 to counter offset
sd x8, 2 (x2) # store value to put something in memory
lb x22, 2(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 768)

# Testcase cp_imm_corners
li x26, 0xf9c0afaf7a2f0e16 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -3 # sub immediate from rs1 to counter offset
sd x26, 3 (x7) # store value to put something in memory
lb x22, 3(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 776)

# Testcase cp_imm_corners
li x9, 0xc409f4525b483397 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -4 # sub immediate from rs1 to counter offset
sd x9, 4 (x15) # store value to put something in memory
lb x1, 4(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 784)

# Testcase cp_imm_corners
li x17, 0x690eb28639b0395a # initialize rs2
la x31, scratch # base address 
addi x31, x31, -8 # sub immediate from rs1 to counter offset
sd x17, 8 (x31) # store value to put something in memory
lb x19, 8(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cp_imm_corners
li x31, 0xbf89dfd907bd382e # initialize rs2
la x25, scratch # base address 
addi x25, x25, -16 # sub immediate from rs1 to counter offset
sd x31, 16 (x25) # store value to put something in memory
lb x28, 16(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 800)

# Testcase cp_imm_corners
li x3, 0x01af076d9deee98d # initialize rs2
la x1, scratch # base address 
addi x1, x1, -32 # sub immediate from rs1 to counter offset
sd x3, 32 (x1) # store value to put something in memory
lb x21, 32(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cp_imm_corners
li x10, 0x9798db97c98dd692 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -64 # sub immediate from rs1 to counter offset
sd x10, 64 (x6) # store value to put something in memory
lb x23, 64(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cp_imm_corners
li x11, 0x308d16f8a9582c60 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -128 # sub immediate from rs1 to counter offset
sd x11, 128 (x24) # store value to put something in memory
lb x18, 128(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cp_imm_corners
li x21, 0xaad127fd7e688d84 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -256 # sub immediate from rs1 to counter offset
sd x21, 256 (x10) # store value to put something in memory
lb x30, 256(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 832)

# Testcase cp_imm_corners
li x31, 0x607e27e91a330fe6 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -512 # sub immediate from rs1 to counter offset
sd x31, 512 (x6) # store value to put something in memory
lb x27, 512(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 840)

# Testcase cp_imm_corners
li x2, 0xffde1a76ae14932c # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1023 # sub immediate from rs1 to counter offset
sd x2, 1023 (x29) # store value to put something in memory
lb x12, 1023(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 848)

# Testcase cp_imm_corners
li x31, 0xf06112da6b0fffa2 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1024 # sub immediate from rs1 to counter offset
sd x31, 1024 (x3) # store value to put something in memory
lb x2, 1024(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 856)

# Testcase cp_imm_corners
li x9, 0x77b5ed2738105563 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1795 # sub immediate from rs1 to counter offset
sd x9, 1795 (x23) # store value to put something in memory
lb x18, 1795(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 864)

# Testcase cp_imm_corners
li x20, 0x4f2ab9f06b16652e # initialize rs2
la x9, scratch # base address 
addi x9, x9, -2047 # sub immediate from rs1 to counter offset
sd x20, 2047 (x9) # store value to put something in memory
lb x28, 2047(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 872)

# Testcase cp_imm_corners
li x17, 0x3d563ca382350826 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 2047 # increment rs1 by 2047 
addi x24, x24, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x17, -2048 (x24) # store value to put something in memory
lb x9, -2048(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 880)

# Testcase cp_imm_corners
li x1, 0xf0b2437f2d16dd87 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 2047 # sub immediate from rs1 to counter offset
sd x1, -2047 (x6) # store value to put something in memory
lb x26, -2047(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 888)

# Testcase cp_imm_corners
li x29, 0x6af6ec1c55f09b2d # initialize rs2
la x23, scratch # base address 
addi x23, x23, 2 # sub immediate from rs1 to counter offset
sd x29, -2 (x23) # store value to put something in memory
lb x31, -2(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 896)

# Testcase cp_imm_corners
li x19, 0x02dade0e672d0f09 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1 # sub immediate from rs1 to counter offset
sd x19, -1 (x22) # store value to put something in memory
lb x5, -1(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x28, scratch
addi x28, x28, 1755
add x2, x11, x23 # perform first operation
lb x1, -1755(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x21, scratch
addi x21, x21, 1763
add x5, x13, x31 # perform first operation
lb x15, -1763(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x21, scratch
addi x21, x21, -517
add x28, x1, x12 # perform first operation
lb x16, 517(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x9, scratch
addi x9, x9, -1367
add x9, x9, x0 # perform first operation
lb x10, 1367(x9) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x28, scratch
addi x28, x28, -1779
add x28, x28, x0 # perform first operation
lb x20, 1779(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x17, scratch
addi x17, x17, 1992
add x17, x17, x0 # perform first operation
lb x19, -1992(x17) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x13, scratch
addi x13, x13, 1812
add x7, x30, x29 # perform first operation
lb x7, -1812(x13) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x5, scratch
addi x5, x5, 1474
add x9, x22, x6 # perform first operation
lb x9, -1474(x5) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x10, scratch
addi x10, x10, -65
add x24, x14, x15 # perform first operation
lb x24, 65(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x20, scratch
addi x20, x20, -1746
add x1, x26, x6 # perform first operation
lb x26, 1746(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x12, scratch
addi x12, x12, -1964
add x2, x16, x17 # perform first operation
lb x17, 1964(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x11, scratch
addi x11, x11, -535
add x1, x5, x17 # perform first operation
lb x8, 535(x11) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-bge.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x0aceb7f32579d099 # initialize rs1
li x14, 0x8ec9799940738c28 # initialize rs2
bge x0, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x8ec9799940738c28 # initialize rs1
li x14, 0x8ec9799940738c28 # initialize rs2
bge x0, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xef66a419fe6e1715 # initialize rs1
li x23, 0xcd6321bc35515904 # initialize rs2
bge x1, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xcd6321bc35515904 # initialize rs1
li x23, 0xcd6321bc35515904 # initialize rs2
bge x1, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xfdfa7377ebda55d2 # initialize rs1
li x24, 0x2ddc6dd71c84ff98 # initialize rs2
bge x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x2ddc6dd71c84ff98 # initialize rs1
li x24, 0x2ddc6dd71c84ff98 # initialize rs2
bge x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x5e3fb2f122afd4ce # initialize rs1
li x5, 0x6ca59bc7fdc4c80d # initialize rs2
bge x3, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x6ca59bc7fdc4c80d # initialize rs1
li x5, 0x6ca59bc7fdc4c80d # initialize rs2
bge x3, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x76f7b3a811caed95 # initialize rs1
li x10, 0xc7d11e8719f73002 # initialize rs2
bge x4, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xc7d11e8719f73002 # initialize rs1
li x10, 0xc7d11e8719f73002 # initialize rs2
bge x4, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x137d1b627d822c47 # initialize rs1
li x12, 0x8c746b9bb42785c1 # initialize rs2
bge x5, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8c746b9bb42785c1 # initialize rs1
li x12, 0x8c746b9bb42785c1 # initialize rs2
bge x5, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe0f4c72def4e508b # initialize rs1
li x21, 0x3b7a63c576c795d9 # initialize rs2
bge x6, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x3b7a63c576c795d9 # initialize rs1
li x21, 0x3b7a63c576c795d9 # initialize rs2
bge x6, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x6, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8ed7c3c4bf99cd51 # initialize rs1
li x5, 0xce0146b9e4f096fb # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xce0146b9e4f096fb # initialize rs1
li x5, 0xce0146b9e4f096fb # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x02e7c3246190d609 # initialize rs1
li x29, 0x58a8450c7368cfe5 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x58a8450c7368cfe5 # initialize rs1
li x29, 0x58a8450c7368cfe5 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x90a591bedc46d607 # initialize rs1
li x28, 0x50e9e39b5cb0472d # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x50e9e39b5cb0472d # initialize rs1
li x28, 0x50e9e39b5cb0472d # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x4ce8ccf93f6c4e9a # initialize rs1
li x31, 0x51f6ff85b4ae8a9e # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x51f6ff85b4ae8a9e # initialize rs1
li x31, 0x51f6ff85b4ae8a9e # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x1fb5253eddc2307a # initialize rs1
li x30, 0xb1f296e1aca3c870 # initialize rs2
bge x11, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xb1f296e1aca3c870 # initialize rs1
li x30, 0xb1f296e1aca3c870 # initialize rs2
bge x11, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x07dd052e6168418e # initialize rs1
li x9, 0x44b4ace547604527 # initialize rs2
bge x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x44b4ace547604527 # initialize rs1
li x9, 0x44b4ace547604527 # initialize rs2
bge x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x42a9ddc4d59a003b # initialize rs1
li x19, 0x7539b40583b8f6c5 # initialize rs2
bge x13, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7539b40583b8f6c5 # initialize rs1
li x19, 0x7539b40583b8f6c5 # initialize rs2
bge x13, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x02bffa96aec44db5 # initialize rs1
li x17, 0xa5a3a9a941c8e7b1 # initialize rs2
bge x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xa5a3a9a941c8e7b1 # initialize rs1
li x17, 0xa5a3a9a941c8e7b1 # initialize rs2
bge x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x50bf9d009b35d327 # initialize rs1
li x2, 0x0d3622c060ad4a0c # initialize rs2
bge x15, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0d3622c060ad4a0c # initialize rs1
li x2, 0x0d3622c060ad4a0c # initialize rs2
bge x15, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x7cda142ac7d889bf # initialize rs1
li x31, 0x3e025344e12f2dc3 # initialize rs2
bge x16, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x3e025344e12f2dc3 # initialize rs1
li x31, 0x3e025344e12f2dc3 # initialize rs2
bge x16, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xfeb04333109bf463 # initialize rs1
li x27, 0xb6e8546710d5410c # initialize rs2
bge x17, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xb6e8546710d5410c # initialize rs1
li x27, 0xb6e8546710d5410c # initialize rs2
bge x17, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x9aebec0d5d71ffdf # initialize rs1
li x9, 0xc8c2d7c97ae6fa1b # initialize rs2
bge x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xc8c2d7c97ae6fa1b # initialize rs1
li x9, 0xc8c2d7c97ae6fa1b # initialize rs2
bge x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x0f189aaa12f59ea2 # initialize rs1
li x31, 0xbc27a7477166056d # initialize rs2
bge x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xbc27a7477166056d # initialize rs1
li x31, 0xbc27a7477166056d # initialize rs2
bge x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xa127a5019134e8f4 # initialize rs1
li x22, 0x133a015f4333a5fd # initialize rs2
bge x20, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x133a015f4333a5fd # initialize rs1
li x22, 0x133a015f4333a5fd # initialize rs2
bge x20, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x1114089a64794740 # initialize rs1
li x31, 0xd655925629f9048d # initialize rs2
bge x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xd655925629f9048d # initialize rs1
li x31, 0xd655925629f9048d # initialize rs2
bge x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xeaa67e19d58f0f20 # initialize rs1
li x20, 0x185c8aca94d75cd0 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x185c8aca94d75cd0 # initialize rs1
li x20, 0x185c8aca94d75cd0 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xb3f6de0a733ff5c6 # initialize rs1
li x20, 0xca1884e7818ba04f # initialize rs2
bge x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xca1884e7818ba04f # initialize rs1
li x20, 0xca1884e7818ba04f # initialize rs2
bge x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x10b25a9754227a7c # initialize rs1
li x30, 0x887711751349959b # initialize rs2
bge x24, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x887711751349959b # initialize rs1
li x30, 0x887711751349959b # initialize rs2
bge x24, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x203d5695f02bdc8f # initialize rs1
li x2, 0xee94259cdcb40f83 # initialize rs2
bge x25, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xee94259cdcb40f83 # initialize rs1
li x2, 0xee94259cdcb40f83 # initialize rs2
bge x25, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xc04867c0bd86af4b # initialize rs1
li x14, 0xedc70f1d510615d4 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xedc70f1d510615d4 # initialize rs1
li x14, 0xedc70f1d510615d4 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x6f787de35b82a22b # initialize rs1
li x29, 0x0b54ff9e1118b45e # initialize rs2
bge x27, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0b54ff9e1118b45e # initialize rs1
li x29, 0x0b54ff9e1118b45e # initialize rs2
bge x27, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x09e14d4597516e8d # initialize rs1
li x31, 0x7d2f1e72ee82867b # initialize rs2
bge x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7d2f1e72ee82867b # initialize rs1
li x31, 0x7d2f1e72ee82867b # initialize rs2
bge x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xb20e35f16a87f0fc # initialize rs1
li x18, 0x27354d0f4b8c9a80 # initialize rs2
bge x29, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x27354d0f4b8c9a80 # initialize rs1
li x18, 0x27354d0f4b8c9a80 # initialize rs2
bge x29, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe71d55582bbf539e # initialize rs1
li x25, 0x2a010a08add367c8 # initialize rs2
bge x30, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x2a010a08add367c8 # initialize rs1
li x25, 0x2a010a08add367c8 # initialize rs2
bge x30, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x9c7ac4d9aec0cf87 # initialize rs1
li x2, 0x816a626c7d6ae5b7 # initialize rs2
bge x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x816a626c7d6ae5b7 # initialize rs1
li x2, 0x816a626c7d6ae5b7 # initialize rs2
bge x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x5, 0xfc9a3a7533445919 # initialize rs1
li x0, 0x45330571b7a7f893 # initialize rs2
bge x5, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x45330571b7a7f893 # initialize rs1
li x0, 0x45330571b7a7f893 # initialize rs2
bge x5, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x16, 0x503da0fae33e977c # initialize rs1
li x1, 0x5cbb208723ef8fc9 # initialize rs2
bge x16, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5cbb208723ef8fc9 # initialize rs1
li x1, 0x5cbb208723ef8fc9 # initialize rs2
bge x16, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x28, 0x3d58b900c0189bab # initialize rs1
li x2, 0x08b6397446169ca0 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x08b6397446169ca0 # initialize rs1
li x2, 0x08b6397446169ca0 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x21, 0xba4e947a6fa4befe # initialize rs1
li x3, 0x049044100ba18556 # initialize rs2
bge x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x049044100ba18556 # initialize rs1
li x3, 0x049044100ba18556 # initialize rs2
bge x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
li x12, 0xed011d895881dbe2 # initialize rs1
li x4, 0x8e291f771a6a4258 # initialize rs2
bge x12, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8e291f771a6a4258 # initialize rs1
li x4, 0x8e291f771a6a4258 # initialize rs2
bge x12, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
li x13, 0x8d27591284b07eb0 # initialize rs1
li x5, 0x48f8f54d6ef00d3c # initialize rs2
bge x13, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x48f8f54d6ef00d3c # initialize rs1
li x5, 0x48f8f54d6ef00d3c # initialize rs2
bge x13, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x21, 0x3413cb5709ee9fe7 # initialize rs1
li x6, 0x5c9de8377888b6df # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5c9de8377888b6df # initialize rs1
li x6, 0x5c9de8377888b6df # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x26, 0xa316ee772bfb94c4 # initialize rs1
li x7, 0xc41277890db78b3f # initialize rs2
bge x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xc41277890db78b3f # initialize rs1
li x7, 0xc41277890db78b3f # initialize rs2
bge x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x18, 0xb7f477b54405a40e # initialize rs1
li x8, 0x45b0678f970c6e81 # initialize rs2
bge x18, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x45b0678f970c6e81 # initialize rs1
li x8, 0x45b0678f970c6e81 # initialize rs2
bge x18, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x28, 0xcaa30326cfd3517f # initialize rs1
li x9, 0xc843f4c60d8abd13 # initialize rs2
bge x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xc843f4c60d8abd13 # initialize rs1
li x9, 0xc843f4c60d8abd13 # initialize rs2
bge x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x11, 0x2979cf34defd8234 # initialize rs1
li x10, 0xcada5c13a0c5b0a9 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xcada5c13a0c5b0a9 # initialize rs1
li x10, 0xcada5c13a0c5b0a9 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x28, 0xb1226df3b7be229c # initialize rs1
li x11, 0x70bdbc091f42cc63 # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x70bdbc091f42cc63 # initialize rs1
li x11, 0x70bdbc091f42cc63 # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x13, 0x6df404aa8988b3fd # initialize rs1
li x12, 0x43708dc241ba8de6 # initialize rs2
bge x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x43708dc241ba8de6 # initialize rs1
li x12, 0x43708dc241ba8de6 # initialize rs2
bge x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x1, 0xb84ace29e328f05e # initialize rs1
li x13, 0xcd46a346cb7ecd0d # initialize rs2
bge x1, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xcd46a346cb7ecd0d # initialize rs1
li x13, 0xcd46a346cb7ecd0d # initialize rs2
bge x1, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x19, 0x5816574a14572058 # initialize rs1
li x14, 0xd312f9f28f563113 # initialize rs2
bge x19, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xd312f9f28f563113 # initialize rs1
li x14, 0xd312f9f28f563113 # initialize rs2
bge x19, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x12, 0xd55d5938129462a3 # initialize rs1
li x15, 0x844507e0188d23d4 # initialize rs2
bge x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x844507e0188d23d4 # initialize rs1
li x15, 0x844507e0188d23d4 # initialize rs2
bge x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x10, 0x9406691fb1e5634a # initialize rs1
li x16, 0xde1983358b869cc6 # initialize rs2
bge x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xde1983358b869cc6 # initialize rs1
li x16, 0xde1983358b869cc6 # initialize rs2
bge x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x26, 0x62f10aebbd3547ec # initialize rs1
li x17, 0xe1fc434a99b80804 # initialize rs2
bge x26, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe1fc434a99b80804 # initialize rs1
li x17, 0xe1fc434a99b80804 # initialize rs2
bge x26, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x10, 0xeb24c5eb5adc0bf5 # initialize rs1
li x18, 0xf8abf7bfa3d14c65 # initialize rs2
bge x10, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xf8abf7bfa3d14c65 # initialize rs1
li x18, 0xf8abf7bfa3d14c65 # initialize rs2
bge x10, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x20, 0x131cb557dbd88682 # initialize rs1
li x19, 0x415b18aa2e61d3d3 # initialize rs2
bge x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x415b18aa2e61d3d3 # initialize rs1
li x19, 0x415b18aa2e61d3d3 # initialize rs2
bge x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x11, 0xc68848bad5fd7fff # initialize rs1
li x20, 0xa8f2d556619e3920 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xa8f2d556619e3920 # initialize rs1
li x20, 0xa8f2d556619e3920 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x11, 0x1a6ef8838e0bcd02 # initialize rs1
li x21, 0x196257a00ff10054 # initialize rs2
bge x11, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x196257a00ff10054 # initialize rs1
li x21, 0x196257a00ff10054 # initialize rs2
bge x11, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x9, 0x8f5f6b8985696d1c # initialize rs1
li x22, 0xa4daa5717fd03e82 # initialize rs2
bge x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xa4daa5717fd03e82 # initialize rs1
li x22, 0xa4daa5717fd03e82 # initialize rs2
bge x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x30, 0x0282eb58122d1754 # initialize rs1
li x23, 0x0e60c1a005c3c5aa # initialize rs2
bge x30, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0e60c1a005c3c5aa # initialize rs1
li x23, 0x0e60c1a005c3c5aa # initialize rs2
bge x30, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x14, 0xc75af99dc3169ae3 # initialize rs1
li x24, 0x3ebe0d8fa683bf77 # initialize rs2
bge x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x3ebe0d8fa683bf77 # initialize rs1
li x24, 0x3ebe0d8fa683bf77 # initialize rs2
bge x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x21, 0x9f77e62417590b1d # initialize rs1
li x25, 0x39a412dd25c5569d # initialize rs2
bge x21, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x39a412dd25c5569d # initialize rs1
li x25, 0x39a412dd25c5569d # initialize rs2
bge x21, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x21, 0x7d0801b78f9e0718 # initialize rs1
li x26, 0xf4369ad260a9e4f3 # initialize rs2
bge x21, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xf4369ad260a9e4f3 # initialize rs1
li x26, 0xf4369ad260a9e4f3 # initialize rs2
bge x21, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x13, 0xbc6b068027ab9ef1 # initialize rs1
li x27, 0x0f3ef7d1a8c96ff8 # initialize rs2
bge x13, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0f3ef7d1a8c96ff8 # initialize rs1
li x27, 0x0f3ef7d1a8c96ff8 # initialize rs2
bge x13, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x13, 0xe4a5e78b3fc96f5c # initialize rs1
li x28, 0x7c70888bc69f089f # initialize rs2
bge x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7c70888bc69f089f # initialize rs1
li x28, 0x7c70888bc69f089f # initialize rs2
bge x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x7, 0x233370976abcf6fa # initialize rs1
li x29, 0xad6e0733267282e0 # initialize rs2
bge x7, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xad6e0733267282e0 # initialize rs1
li x29, 0xad6e0733267282e0 # initialize rs2
bge x7, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x6, 0x3bc31d83345892d0 # initialize rs1
li x30, 0x6a5f5bd284f196d8 # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x6a5f5bd284f196d8 # initialize rs1
li x30, 0x6a5f5bd284f196d8 # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x15, 0x554184d26c76cfe2 # initialize rs1
li x31, 0x2f20dcb3682e66f7 # initialize rs2
bge x15, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x2f20dcb3682e66f7 # initialize rs1
li x31, 0x2f20dcb3682e66f7 # initialize rs2
bge x15, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x14, 0x0000000000000000 # initialize rs1
li x5, 0xbde8b4c443eb9136 # initialize rs2
bge x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xbde8b4c443eb9136 # initialize rs1
li x5, 0xbde8b4c443eb9136 # initialize rs2
bge x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x18, 0x0000000000000001 # initialize rs1
li x24, 0x195a119416dc73b7 # initialize rs2
bge x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x195a119416dc73b7 # initialize rs1
li x24, 0x195a119416dc73b7 # initialize rs2
bge x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x31, 0x0000000000000002 # initialize rs1
li x3, 0x9056cb1f6ab12f79 # initialize rs2
bge x31, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x9056cb1f6ab12f79 # initialize rs1
li x3, 0x9056cb1f6ab12f79 # initialize rs2
bge x31, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x31, 0x8000000000000000 # initialize rs1
li x2, 0x79627254ab43295f # initialize rs2
bge x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x79627254ab43295f # initialize rs1
li x2, 0x79627254ab43295f # initialize rs2
bge x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x21, 0x8000000000000001 # initialize rs1
li x24, 0x7b004ecb57ddbfab # initialize rs2
bge x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7b004ecb57ddbfab # initialize rs1
li x24, 0x7b004ecb57ddbfab # initialize rs2
bge x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x21, 0x7fffffffffffffff # initialize rs1
li x17, 0x9916e2785567d62c # initialize rs2
bge x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x9916e2785567d62c # initialize rs1
li x17, 0x9916e2785567d62c # initialize rs2
bge x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x12, 0x7ffffffffffffffe # initialize rs1
li x9, 0x6169ea33bf837d58 # initialize rs2
bge x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x6169ea33bf837d58 # initialize rs1
li x9, 0x6169ea33bf837d58 # initialize rs2
bge x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x8, 0xffffffffffffffff # initialize rs1
li x14, 0x09839ea66d28bc18 # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x09839ea66d28bc18 # initialize rs1
li x14, 0x09839ea66d28bc18 # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x5, 0xfffffffffffffffe # initialize rs1
li x18, 0x187689628c83f626 # initialize rs2
bge x5, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x187689628c83f626 # initialize rs1
li x18, 0x187689628c83f626 # initialize rs2
bge x5, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x86035dd7ddb23e1c # initialize rs2
bge x15, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x86035dd7ddb23e1c # initialize rs1
li x6, 0x86035dd7ddb23e1c # initialize rs2
bge x15, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0xbb12c2f769d29f21 # initialize rs2
bge x31, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xbb12c2f769d29f21 # initialize rs1
li x21, 0xbb12c2f769d29f21 # initialize rs2
bge x31, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x16, 0x5555555555555555 # initialize rs1
li x9, 0xa8405265dafdd82d # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xa8405265dafdd82d # initialize rs1
li x9, 0xa8405265dafdd82d # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x18, 0x00000000ffffffff # initialize rs1
li x31, 0x12477d56b7108767 # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x12477d56b7108767 # initialize rs1
li x31, 0x12477d56b7108767 # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x8, 0x00000000fffffffe # initialize rs1
li x11, 0xe0f7d18adde0eec6 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xe0f7d18adde0eec6 # initialize rs1
li x11, 0xe0f7d18adde0eec6 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x5, 0x0000000100000000 # initialize rs1
li x23, 0x36be1eed4e14f3c8 # initialize rs2
bge x5, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x36be1eed4e14f3c8 # initialize rs1
li x23, 0x36be1eed4e14f3c8 # initialize rs2
bge x5, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x16, 0x0000000100000001 # initialize rs1
li x20, 0xe294789b6f8682c3 # initialize rs2
bge x16, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xe294789b6f8682c3 # initialize rs1
li x20, 0xe294789b6f8682c3 # initialize rs2
bge x16, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x11, 0xd891484f35fb83cd # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x5, 0x18c779fb3375aa21 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
bge x5, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
bge x5, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x15, 0xb56dbe68493d4f8c # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
bge x15, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
bge x15, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x22, 0x2752971f51654816 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
bge x22, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
bge x22, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x25, 0xf22e5c8cb1119849 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x21, 0xfc384ad008cc1628 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bge x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bge x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x2, 0xb896ce41f49bf674 # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bge x2, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bge x2, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x5, 0x4a8b3f4c054ed9e3 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bge x5, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffffffffffff # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bge x5, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x23, 0xe4d3f27422a1ad66 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
bge x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
bge x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x8, 0x2ec2670b5c3009cf # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bge x8, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bge x8, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x9, 0xf2afe9a2f0c76841 # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x9, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x9, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x14, 0x08e9cf8aebac9e26 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
bge x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5555555555555555 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
bge x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x31, 0xd5035091ebb84828 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bge x31, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bge x31, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x8, 0xb2cfb7c35d1c997b # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bge x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bge x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x25, 0x9ae9d1d190fb5028 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000100000000 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x7, 0x6ebeb45fb09d1bd8 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bge x7, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bge x7, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x30, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bge x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bge x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x16, 0x0000000000000000 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bge x16, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bge x16, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x1, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
bge x1, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000002 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
bge x1, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x13, 0x0000000000000000 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
bge x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000000 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
bge x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x19, 0x0000000000000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
bge x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
bge x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x28, 0x0000000000000000 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
bge x28, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7fffffffffffffff # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
bge x28, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x8, 0x0000000000000000 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bge x8, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bge x8, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bge x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bge x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000000000000 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
bge x21, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffffffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
bge x21, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000000000000 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bge x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
bge x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x0000000000000000 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x5, 0x0000000000000000 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bge x5, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5555555555555555 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bge x5, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x15, 0x0000000000000000 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bge x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bge x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x7, 0x0000000000000000 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bge x7, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bge x7, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x22, 0x0000000000000000 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000000 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x10, 0x0000000000000000 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bge x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bge x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x10, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x21, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
bge x21, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
bge x21, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x30, 0x0000000000000001 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bge x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bge x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x31, 0x0000000000000001 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bge x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bge x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x25, 0x0000000000000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bge x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
bge x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bge x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
bge x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000000000001 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bge x25, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bge x25, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x10, 0x0000000000000001 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x22, 0x0000000000000001 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
bge x22, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffffffffffe # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
bge x22, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x7, 0x0000000000000001 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bge x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
bge x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x0000000000000001 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x17, 0x0000000000000001 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
bge x17, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
bge x17, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x9, 0x0000000000000001 # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x23, 0x0000000000000001 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000fffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x21, 0x0000000000000001 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
bge x21, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000000 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
bge x21, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x11, 0x0000000000000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
bge x11, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
bge x11, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x14, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bge x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bge x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x24, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bge x24, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bge x24, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x26, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
bge x26, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
bge x26, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x28, 0x0000000000000002 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x7, 0x0000000000000002 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bge x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bge x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x10, 0x0000000000000002 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bge x10, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bge x10, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x8, 0x0000000000000002 # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bge x8, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bge x8, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x16, 0x0000000000000002 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bge x16, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bge x16, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x31, 0x0000000000000002 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffffffffffe # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x16, 0x0000000000000002 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x0000000000000002 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x23, 0x0000000000000002 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bge x23, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5555555555555555 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bge x23, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x7, 0x0000000000000002 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
bge x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000ffffffff # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
bge x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x8, 0x0000000000000002 # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000fffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x20, 0x0000000000000002 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bge x20, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bge x20, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x17, 0x0000000000000002 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bge x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
bge x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x10, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bge x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
bge x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x26, 0x8000000000000000 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
bge x26, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
bge x26, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x26, 0x8000000000000000 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bge x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bge x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x12, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bge x12, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bge x12, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x25, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x19, 0x8000000000000000 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x19, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x19, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x28, 0x8000000000000000 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
bge x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
bge x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x25, 0x8000000000000000 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bge x25, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bge x25, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x1, 0x8000000000000000 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bge x1, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bge x1, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x7, 0x8000000000000000 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x7, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x7, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x8000000000000000 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x28, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x28, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x26, 0x8000000000000000 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bge x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bge x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x9, 0x8000000000000000 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bge x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bge x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x5, 0x8000000000000000 # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bge x5, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000fffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bge x5, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x15, 0x8000000000000000 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
bge x15, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000100000000 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
bge x15, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x5, 0x8000000000000000 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
bge x5, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000001 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
bge x5, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x31, 0x8000000000000001 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bge x31, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bge x31, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x12, 0x8000000000000001 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bge x12, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bge x12, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x18, 0x8000000000000001 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
bge x18, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
bge x18, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x18, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x8000000000000000 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x1, 0x8000000000000001 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
bge x1, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
bge x1, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x9, 0x8000000000000001 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffffffffffff # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x13, 0x8000000000000001 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffffffffffe # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x16, 0x8000000000000001 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bge x16, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
bge x16, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x28, 0x8000000000000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xfffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x28, 0x8000000000000001 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
bge x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
bge x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x8000000000000001 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x23, 0x8000000000000001 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5555555555555555 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x2, 0x8000000000000001 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
bge x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000ffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
bge x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x22, 0x8000000000000001 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
bge x22, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000fffffffe # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
bge x22, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x9, 0x8000000000000001 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
bge x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000100000000 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
bge x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x6, 0x8000000000000001 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
bge x6, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
bge x6, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x26, 0x7fffffffffffffff # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x29, 0x7fffffffffffffff # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bge x29, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bge x29, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x29, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
bge x29, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000002 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
bge x29, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x11, 0x7fffffffffffffff # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bge x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8000000000000000 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
bge x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x1, 0x7fffffffffffffff # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x1, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x1, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x23, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x23, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x23, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x26, 0x7fffffffffffffff # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffffffffffe # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x3, 0x7fffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bge x3, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bge x3, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x11, 0x7fffffffffffffff # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x20, 0x7fffffffffffffff # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0x7fffffffffffffff # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x20, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x20, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x26, 0x7fffffffffffffff # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
bge x26, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
bge x26, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x12, 0x7fffffffffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bge x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bge x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x19, 0x7fffffffffffffff # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
bge x19, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000fffffffe # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
bge x19, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x16, 0x7fffffffffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bge x16, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bge x16, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x23, 0x7fffffffffffffff # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
bge x23, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000001 # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
bge x23, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x20, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bge x20, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
bge x20, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x31, 0x7ffffffffffffffe # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x17, 0x7ffffffffffffffe # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bge x17, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000002 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bge x17, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x1, 0x7ffffffffffffffe # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bge x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bge x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x29, 0x7ffffffffffffffe # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bge x29, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
bge x29, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x17, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bge x17, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
bge x17, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x24, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bge x24, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
bge x24, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x18, 0x7ffffffffffffffe # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
bge x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x5, 0x7ffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bge x5, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bge x5, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x23, 0x7ffffffffffffffe # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bge x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
bge x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x7ffffffffffffffe # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x6, 0x7ffffffffffffffe # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bge x6, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bge x6, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x17, 0x7ffffffffffffffe # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bge x17, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bge x17, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x25, 0x7ffffffffffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x2, 0x7ffffffffffffffe # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
bge x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000000 # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
bge x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x26, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000001 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x13, 0xffffffffffffffff # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
bge x13, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000000 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
bge x13, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x12, 0xffffffffffffffff # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
bge x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000001 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
bge x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x2, 0xffffffffffffffff # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x26, 0xffffffffffffffff # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
bge x26, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000000 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
bge x26, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x25, 0xffffffffffffffff # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bge x25, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bge x25, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x26, 0xffffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bge x26, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
bge x26, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x27, 0xffffffffffffffff # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
bge x27, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
bge x27, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x31, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bge x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bge x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bge x24, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bge x24, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x5, 0xffffffffffffffff # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x5, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
bge x5, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0xffffffffffffffff # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x20, 0xffffffffffffffff # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bge x20, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bge x20, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x11, 0xffffffffffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x11, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000ffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x11, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x5, 0xffffffffffffffff # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bge x5, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bge x5, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x27, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bge x27, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
bge x27, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x8, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bge x8, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bge x8, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x24, 0xfffffffffffffffe # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
bge x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000000 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
bge x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x7, 0xfffffffffffffffe # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
bge x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
bge x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x3, 0xfffffffffffffffe # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bge x3, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bge x3, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x3, 0xfffffffffffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bge x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000000 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bge x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x22, 0xfffffffffffffffe # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
bge x22, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000001 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
bge x22, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bge x19, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bge x19, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0xfffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bge x17, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bge x17, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bge x19, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xffffffffffffffff # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bge x19, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x24, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bge x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bge x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x13, 0xfffffffffffffffe # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bge x13, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bge x13, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0xfffffffffffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x18, 0xfffffffffffffffe # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
bge x18, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5555555555555555 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
bge x18, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x22, 0xfffffffffffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000ffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x10, 0xfffffffffffffffe # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
bge x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
bge x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x24, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
bge x24, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
bge x24, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x3, 0xfffffffffffffffe # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bge x3, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bge x3, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bge x7, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bge x7, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
bge x3, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
bge x3, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bge x23, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bge x23, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
bge x25, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
bge x25, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000001 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bge x18, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffffffffffff # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
bge x18, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bge x5, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffffffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bge x5, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bge x25, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bge x25, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bge x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bge x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x30, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x30, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bge x2, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
bge x2, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bge x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
bge x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bge x14, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000fffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
bge x14, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x10, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x10, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x5, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000001 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x5, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
bge x31, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
bge x31, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bge x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bge x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
bge x17, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000002 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
bge x17, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8000000000000000 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
bge x27, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
bge x27, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
bge x12, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
bge x12, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x16, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7ffffffffffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x16, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
bge x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffffffffffff # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
bge x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bge x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bge x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bge x6, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bge x6, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x27, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x27, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bge x30, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
bge x30, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
bge x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
bge x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x21, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x21, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000100000001 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x3, 0x5555555555555555 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bge x3, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bge x3, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x5, 0x5555555555555555 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
bge x5, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
bge x5, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x2, 0x5555555555555555 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bge x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
bge x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x8, 0x5555555555555555 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
bge x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
bge x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x28, 0x5555555555555555 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000001 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x31, 0x5555555555555555 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bge x31, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7fffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bge x31, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x5, 0x5555555555555555 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bge x5, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7ffffffffffffffe # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bge x5, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x31, 0x5555555555555555 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bge x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x13, 0x5555555555555555 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x22, 0x5555555555555555 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
bge x22, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
bge x22, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x5555555555555555 # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x6, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bge x6, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bge x6, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x27, 0x5555555555555555 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
bge x27, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
bge x27, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x13, 0x5555555555555555 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bge x13, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000fffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
bge x13, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x9, 0x5555555555555555 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x9, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x9, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x28, 0x5555555555555555 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x20, 0x00000000ffffffff # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
bge x20, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
bge x20, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x23, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bge x23, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bge x23, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x22, 0x00000000ffffffff # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bge x22, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
bge x22, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x17, 0x00000000ffffffff # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bge x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
bge x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x26, 0x00000000ffffffff # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bge x26, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bge x26, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x2, 0x00000000ffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bge x2, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
bge x2, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x14, 0x00000000ffffffff # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x14, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffffffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x14, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x19, 0x00000000ffffffff # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
bge x19, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xffffffffffffffff # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
bge x19, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x23, 0x00000000ffffffff # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bge x23, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
bge x23, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x23, 0x00000000ffffffff # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bge x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bge x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000ffffffff # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x22, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x21, 0x00000000ffffffff # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5555555555555555 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x1, 0x00000000ffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000ffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
bge x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x19, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bge x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
bge x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x23, 0x00000000ffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bge x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bge x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x8, 0x00000000ffffffff # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
bge x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000100000001 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
bge x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x29, 0x00000000fffffffe # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
bge x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000000 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
bge x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x24, 0x00000000fffffffe # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bge x24, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
bge x24, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x2, 0x00000000fffffffe # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x8, 0x00000000fffffffe # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
bge x8, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
bge x8, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x24, 0x00000000fffffffe # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bge x24, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bge x24, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x10, 0x00000000fffffffe # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x10, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bge x10, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x30, 0x00000000fffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x30, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
bge x30, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x23, 0x00000000fffffffe # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bge x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffffffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
bge x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x3, 0x00000000fffffffe # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
bge x3, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffffffffffe # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
bge x3, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x1, 0x00000000fffffffe # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bge x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bge x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x00000000fffffffe # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x14, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x14, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x22, 0x00000000fffffffe # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bge x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
bge x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x2, 0x00000000fffffffe # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bge x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bge x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x7, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bge x7, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
bge x7, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x31, 0x00000000fffffffe # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x31, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bge x31, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x1, 0x00000000fffffffe # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bge x1, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
bge x1, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x2, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bge x2, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
bge x2, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x30, 0x0000000100000000 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bge x30, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000000000001 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bge x30, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x6, 0x0000000100000000 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x1, 0x0000000100000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bge x1, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bge x1, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x2, 0x0000000100000000 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bge x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
bge x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x20, 0x0000000100000000 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
bge x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
bge x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000100000000 # initialize rs1
li x30, 0x7ffffffffffffffe # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7ffffffffffffffe # initialize rs1
li x30, 0x7ffffffffffffffe # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000100000000 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bge x21, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bge x21, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x3, 0x0000000100000000 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
bge x3, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
bge x3, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000100000000 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x3, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x3, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x12, 0x0000000100000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
bge x12, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
bge x12, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x1, 0x0000000100000000 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bge x1, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bge x1, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x26, 0x0000000100000000 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
bge x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x23, 0x0000000100000000 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bge x23, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bge x23, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x17, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x17, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
bge x17, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x24, 0x0000000100000001 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
bge x24, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
bge x24, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x15, 0x0000000100000001 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
bge x15, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000001 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
bge x15, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x8, 0x0000000100000001 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
bge x8, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
bge x8, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x22, 0x0000000100000001 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bge x22, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
bge x22, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x16, 0x0000000100000001 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
bge x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000100000001 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
bge x8, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffffffffffff # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
bge x8, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x6, 0x0000000100000001 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
bge x6, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
bge x6, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x17, 0x0000000100000001 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
bge x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffffffffffff # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
bge x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x10, 0x0000000100000001 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bge x10, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bge x10, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000100000001 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
bge x29, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
bge x29, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x0000000100000001 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
bge x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x23, 0x0000000100000001 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
bge x23, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
bge x23, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x14, 0x0000000100000001 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bge x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000ffffffff # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bge x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x3, 0x0000000100000001 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bge x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000fffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bge x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x16, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bge x16, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
bge x16, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x30, 0x0000000100000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bge x30, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000100000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bge x30, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x2b9ba9656c4826d7 # initialize rs1
li x0, 0xa2915901e0210916 # initialize rs2
bge x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xa2915901e0210916 # initialize rs1
li x0, 0xa2915901e0210916 # initialize rs2
bge x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x565630c7ea121e4b # initialize rs1
li x1, 0x8f7139e6df46a6b2 # initialize rs2
bge x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8f7139e6df46a6b2 # initialize rs1
li x1, 0x8f7139e6df46a6b2 # initialize rs2
bge x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x9a1460064d27fa3c # initialize rs1
li x2, 0x0bc8984bf5ecdef9 # initialize rs2
bge x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0bc8984bf5ecdef9 # initialize rs1
li x2, 0x0bc8984bf5ecdef9 # initialize rs2
bge x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x35d586f958b734c6 # initialize rs1
li x3, 0x06f366385b62d4bf # initialize rs2
bge x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x06f366385b62d4bf # initialize rs1
li x3, 0x06f366385b62d4bf # initialize rs2
bge x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf2ca6690be346fd9 # initialize rs1
li x4, 0xb4e8e7e458857b94 # initialize rs2
bge x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xb4e8e7e458857b94 # initialize rs1
li x4, 0xb4e8e7e458857b94 # initialize rs2
bge x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x799d7c3af8f99923 # initialize rs1
li x5, 0x7e8ce8ce12bd954c # initialize rs2
bge x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7e8ce8ce12bd954c # initialize rs1
li x5, 0x7e8ce8ce12bd954c # initialize rs2
bge x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x695048b27e4bd87e # initialize rs1
li x6, 0xc116524da8dc97fd # initialize rs2
bge x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xc116524da8dc97fd # initialize rs1
li x6, 0xc116524da8dc97fd # initialize rs2
bge x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x2d9bd9bcbe034536 # initialize rs1
li x7, 0xc0b56adf4fd6383f # initialize rs2
bge x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xc0b56adf4fd6383f # initialize rs1
li x7, 0xc0b56adf4fd6383f # initialize rs2
bge x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x6270f69f56bb271b # initialize rs1
li x8, 0xd85159027f7eb499 # initialize rs2
bge x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xd85159027f7eb499 # initialize rs1
li x8, 0xd85159027f7eb499 # initialize rs2
bge x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xe0a87425040e3c05 # initialize rs1
li x9, 0x5a751af2deef0ea2 # initialize rs2
bge x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5a751af2deef0ea2 # initialize rs1
li x9, 0x5a751af2deef0ea2 # initialize rs2
bge x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x459c0c32b10ee69b # initialize rs1
li x10, 0xcf60c0d682194a12 # initialize rs2
bge x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xcf60c0d682194a12 # initialize rs1
li x10, 0xcf60c0d682194a12 # initialize rs2
bge x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xd148661d7922f22e # initialize rs1
li x11, 0x478c2bba8b85e276 # initialize rs2
bge x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x478c2bba8b85e276 # initialize rs1
li x11, 0x478c2bba8b85e276 # initialize rs2
bge x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x804049cb564d5aae # initialize rs1
li x12, 0x4d26e62afd887a56 # initialize rs2
bge x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x4d26e62afd887a56 # initialize rs1
li x12, 0x4d26e62afd887a56 # initialize rs2
bge x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xd542b41ca720c3a8 # initialize rs1
li x13, 0xb4ca3489546ff455 # initialize rs2
bge x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xb4ca3489546ff455 # initialize rs1
li x13, 0xb4ca3489546ff455 # initialize rs2
bge x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xeef79fa5b86f6e99 # initialize rs1
li x14, 0x6d691f9122d8d1b5 # initialize rs2
bge x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x6d691f9122d8d1b5 # initialize rs1
li x14, 0x6d691f9122d8d1b5 # initialize rs2
bge x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x261c2e99c102b492 # initialize rs1
li x15, 0x97ee79a29466783d # initialize rs2
bge x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x97ee79a29466783d # initialize rs1
li x15, 0x97ee79a29466783d # initialize rs2
bge x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xdc3a38d7bface9c7 # initialize rs1
li x16, 0x74632e663b5ccd5b # initialize rs2
bge x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x74632e663b5ccd5b # initialize rs1
li x16, 0x74632e663b5ccd5b # initialize rs2
bge x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x595d5bde6f7c0c22 # initialize rs1
li x17, 0x57b247f99a6ac160 # initialize rs2
bge x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x57b247f99a6ac160 # initialize rs1
li x17, 0x57b247f99a6ac160 # initialize rs2
bge x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x43203ec9365c9ed9 # initialize rs1
li x18, 0xc31670fefd82658b # initialize rs2
bge x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xc31670fefd82658b # initialize rs1
li x18, 0xc31670fefd82658b # initialize rs2
bge x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x9889864ffe7784bd # initialize rs1
li x19, 0x9a6029a29db47b5f # initialize rs2
bge x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x9a6029a29db47b5f # initialize rs1
li x19, 0x9a6029a29db47b5f # initialize rs2
bge x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x875dae506341fd0a # initialize rs1
li x20, 0xc7eb8971691af39a # initialize rs2
bge x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xc7eb8971691af39a # initialize rs1
li x20, 0xc7eb8971691af39a # initialize rs2
bge x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x91b70ea91a1467a5 # initialize rs1
li x21, 0x6126832b3d4d0ded # initialize rs2
bge x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x6126832b3d4d0ded # initialize rs1
li x21, 0x6126832b3d4d0ded # initialize rs2
bge x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xa8ece2f7c782302a # initialize rs1
li x22, 0x99fc4f2dd5714685 # initialize rs2
bge x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x99fc4f2dd5714685 # initialize rs1
li x22, 0x99fc4f2dd5714685 # initialize rs2
bge x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x03ef9916e50f57c8 # initialize rs1
li x23, 0xeaf0db04d8091780 # initialize rs2
bge x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xeaf0db04d8091780 # initialize rs1
li x23, 0xeaf0db04d8091780 # initialize rs2
bge x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xf09e59cd1b2603b2 # initialize rs1
li x24, 0xb5baaa1fa289c08d # initialize rs2
bge x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xb5baaa1fa289c08d # initialize rs1
li x24, 0xb5baaa1fa289c08d # initialize rs2
bge x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x23a50a49026afd20 # initialize rs1
li x25, 0x82dd1709079baa86 # initialize rs2
bge x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x82dd1709079baa86 # initialize rs1
li x25, 0x82dd1709079baa86 # initialize rs2
bge x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x3f73d77b8be3b569 # initialize rs1
li x26, 0x1fbd56ff8afd82ff # initialize rs2
bge x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x1fbd56ff8afd82ff # initialize rs1
li x26, 0x1fbd56ff8afd82ff # initialize rs2
bge x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xea8791efdeab203c # initialize rs1
li x27, 0x4d65331220244bf9 # initialize rs2
bge x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x4d65331220244bf9 # initialize rs1
li x27, 0x4d65331220244bf9 # initialize rs2
bge x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xd47f940e894a7acc # initialize rs1
li x28, 0x6595f24647dfa114 # initialize rs2
bge x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x6595f24647dfa114 # initialize rs1
li x28, 0x6595f24647dfa114 # initialize rs2
bge x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x468afd62cf50b4f8 # initialize rs1
li x29, 0xd790a0aa16618e56 # initialize rs2
bge x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xd790a0aa16618e56 # initialize rs1
li x29, 0xd790a0aa16618e56 # initialize rs2
bge x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xbbd72bb6e09c3a1a # initialize rs1
li x30, 0x904804bafa8229c3 # initialize rs2
bge x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x904804bafa8229c3 # initialize rs1
li x30, 0x904804bafa8229c3 # initialize rs2
bge x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x465d06481874a94f # initialize rs1
li x31, 0x05a4f4d930eeb559 # initialize rs2
bge x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x05a4f4d930eeb559 # initialize rs1
li x31, 0x05a4f4d930eeb559 # initialize rs2
bge x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bge x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x2, x30 # perform first operation
bge x14, x15, arbitraryLabel121
nop
arbitraryLabel121:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x3, x1 # perform first operation
bge x15, x25, arbitraryLabel122
nop
arbitraryLabel122:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x23, x28 # perform first operation
bge x22, x27, arbitraryLabel123
nop
arbitraryLabel123:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x12, x3 # perform first operation
bge x27, x30, arbitraryLabel124
nop
arbitraryLabel124:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x31, x5 # perform first operation
bge x7, x17, arbitraryLabel125
nop
arbitraryLabel125:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x17, x1 # perform first operation
bge x29, x15, arbitraryLabel126
nop
arbitraryLabel126:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lui.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
lui x0, 28085 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 0)

# Testcase cp_rd (Test destination rd = x1)
lui x1, 639940 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 8)

# Testcase cp_rd (Test destination rd = x2)
lui x2, 273843 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 16)

# Testcase cp_rd (Test destination rd = x3)
lui x3, 936397 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 24)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
lui x4, 16052 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 32)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
lui x5, 975998 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 40)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
lui x6, 930367 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 48)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
lui x7, 800837 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 56)

# Testcase cp_rd (Test destination rd = x8)
lui x8, 410350 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 64)

# Testcase cp_rd (Test destination rd = x9)
lui x9, 425990 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 72)

# Testcase cp_rd (Test destination rd = x10)
lui x10, 186141 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 80)

# Testcase cp_rd (Test destination rd = x11)
lui x11, 869500 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 88)

# Testcase cp_rd (Test destination rd = x12)
lui x12, 144422 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 96)

# Testcase cp_rd (Test destination rd = x13)
lui x13, 328908 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 104)

# Testcase cp_rd (Test destination rd = x14)
lui x14, 126643 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 112)

# Testcase cp_rd (Test destination rd = x15)
lui x15, 818088 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 120)

# Testcase cp_rd (Test destination rd = x16)
lui x16, 672885 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 128)

# Testcase cp_rd (Test destination rd = x17)
lui x17, 964616 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 136)

# Testcase cp_rd (Test destination rd = x18)
lui x18, 864060 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 144)

# Testcase cp_rd (Test destination rd = x19)
lui x19, 129630 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 152)

# Testcase cp_rd (Test destination rd = x20)
lui x20, 248616 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 160)

# Testcase cp_rd (Test destination rd = x21)
lui x21, 272920 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 168)

# Testcase cp_rd (Test destination rd = x22)
lui x22, 493269 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 176)

# Testcase cp_rd (Test destination rd = x23)
lui x23, 94719 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 184)

# Testcase cp_rd (Test destination rd = x24)
lui x24, 380288 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 192)

# Testcase cp_rd (Test destination rd = x25)
lui x25, 604284 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 200)

# Testcase cp_rd (Test destination rd = x26)
lui x26, 807632 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 208)

# Testcase cp_rd (Test destination rd = x27)
lui x27, 936531 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 216)

# Testcase cp_rd (Test destination rd = x28)
lui x28, 983466 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 224)

# Testcase cp_rd (Test destination rd = x29)
lui x29, 305787 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 232)

# Testcase cp_rd (Test destination rd = x30)
lui x30, 276924 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 240)

# Testcase cp_rd (Test destination rd = x31)
lui x31, 843630 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cp_imm_corners
lui x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 256)

# Testcase cp_imm_corners
lui x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 264)

# Testcase cp_imm_corners
lui x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_imm_corners
lui x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 280)

# Testcase cp_imm_corners
lui x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 288)

# Testcase cp_imm_corners
lui x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 296)

# Testcase cp_imm_corners
lui x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 304)

# Testcase cp_imm_corners
lui x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 312)

# Testcase cp_imm_corners
lui x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 320)

# Testcase cp_imm_corners
lui x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 328)

# Testcase cp_imm_corners
lui x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cp_imm_corners
lui x29, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 344)

# Testcase cp_imm_corners
lui x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 352)

# Testcase cp_imm_corners
lui x26, 2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_imm_corners
lui x6, 4096 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 368)

# Testcase cp_imm_corners
lui x9, 8192 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 376)

# Testcase cp_imm_corners
lui x22, 16384 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 384)

# Testcase cp_imm_corners
lui x31, 32768 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 392)

# Testcase cp_imm_corners
lui x18, 65536 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_imm_corners
lui x3, 131072 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 408)

# Testcase cp_imm_corners
lui x17, 262144 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 416)

# Testcase cp_imm_corners
lui x25, 524286 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 424)

# Testcase cp_imm_corners
lui x9, 524287 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 432)

# Testcase cp_imm_corners
lui x13, 524288 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 440)

# Testcase cp_imm_corners
lui x26, 524289 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cp_imm_corners
lui x1, 1048574 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 456)

# Testcase cp_imm_corners
lui x12, 1048575 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x24, x29 # perform first operation
lui x7, 952249 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x13, x6 # perform first operation
lui x5, 10636 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x28, x14 # perform first operation
lui x5, 1017882 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x2, x3, x18 # perform first operation
lui x2, 867944 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x10, x14 # perform first operation
lui x3, 550323 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x14, x27 # perform first operation
lui x12, 662738 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x2, x21 # perform first operation
lui x2, 77407 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x13, x20 # perform first operation
lui x20, 942612 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x9, x30, x24 # perform first operation
lui x20, 47566 # perform second (triggering) operation

#.EQU SIGSIZE,472


// ******************
// Tests from: WALLY-COV-srl.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xa23ae617ae7d9e59 # initialize rs1
li x22, 0x7ebf4c6b14deff81 # initialize rs2
srl x31, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xccaf45663f88c47e # initialize rs1
li x31, 0x0d2c518dc419a814 # initialize rs2
srl x5, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x4e7ee52fe6a64b0d # initialize rs1
li x23, 0x65ba87bff9ee53be # initialize rs2
srl x30, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xc551cee51384cc0d # initialize rs1
li x27, 0x67eb0c092920d19b # initialize rs2
srl x12, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x788f60f4b15d0961 # initialize rs1
li x10, 0xca2cc789bedcb142 # initialize rs2
srl x17, x4, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0adab8730afe1b0b # initialize rs1
li x6, 0xe6b8512dd8fd6514 # initialize rs2
srl x9, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0x7f750b926486703e # initialize rs1
li x14, 0x66267812efbccdd6 # initialize rs2
srl x20, x6, x14 # perform operation
RVTEST_SIGUPD(x7, x0, x20, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x467639833b164d7d # initialize rs1
li x17, 0xe2c19c66d19997d3 # initialize rs2
srl x3, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x14ca954a9200a7d3 # initialize rs1
li x1, 0xd83d3a32b805f168 # initialize rs2
srl x18, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xc7f40672950a31bf # initialize rs1
li x22, 0xfbb7c66df5c8fd53 # initialize rs2
srl x13, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x373f42e8551377fa # initialize rs1
li x31, 0x8472f693da445daa # initialize rs2
srl x1, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x1b25ac2e46ae062f # initialize rs1
li x24, 0x612f143109d2a452 # initialize rs2
srl x29, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x43506556d52929cd # initialize rs1
li x29, 0x8242e79a288605f7 # initialize rs2
srl x18, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xff45f48bd10a4a00 # initialize rs1
li x18, 0x18865f60c4b4c409 # initialize rs2
srl x8, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x25ccedadfe84836b # initialize rs1
li x21, 0x44ff2db6e8b2b209 # initialize rs2
srl x26, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xfb0ca38d7634b9a0 # initialize rs1
li x28, 0x96c8ab2faa4cecf4 # initialize rs2
srl x19, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x5621818f9f717906 # initialize rs1
li x13, 0xb0f7ddefebcf132d # initialize rs2
srl x2, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xcce652f5a7638d8a # initialize rs1
li x31, 0x712216ea1b16a7e7 # initialize rs2
srl x2, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x9853721753687893 # initialize rs1
li x24, 0x82dcafdeb4bcb218 # initialize rs2
srl x15, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x7d833dfdae5e8d63 # initialize rs1
li x28, 0x60febae1b261ffa9 # initialize rs2
srl x17, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x2bfb5be01f27af86 # initialize rs1
li x1, 0x339860311d743381 # initialize rs2
srl x17, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xc8a47f65647f41db # initialize rs1
li x17, 0x4603100ba5ff885e # initialize rs2
srl x22, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xff9c2e8d5f8683e3 # initialize rs1
li x26, 0x20039d2c720ed279 # initialize rs2
srl x14, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x46ee01a6e9f27c89 # initialize rs1
li x26, 0xd351c960ea33446f # initialize rs2
srl x29, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x5832ef9a1b2ad154 # initialize rs1
li x8, 0x3d61b1770507161e # initialize rs2
srl x10, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x9b8bb07771ad077c # initialize rs1
li x19, 0x03a102c5c54c291b # initialize rs2
srl x17, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x57aa3dee624e7d70 # initialize rs1
li x21, 0xfdab08399ed448e7 # initialize rs2
srl x28, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x629b24cdb8ddbc38 # initialize rs1
li x14, 0x8e4b23f5124e938b # initialize rs2
srl x29, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x2bcaa58b6f550140 # initialize rs1
li x13, 0x8aa392c82964f345 # initialize rs2
srl x26, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xf3025a65f432ff5e # initialize rs1
li x24, 0x47d3add179f533c4 # initialize rs2
srl x14, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x9663e53aafe98e19 # initialize rs1
li x9, 0xfe020a7d5a0d771b # initialize rs2
srl x25, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xd81afc39c6547527 # initialize rs1
li x12, 0xeebef92314e6760e # initialize rs2
srl x8, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x31, 0xaaf58e6e43837c3d # initialize rs1
li x0, 0xe602974af7d1c62a # initialize rs2
srl x13, x31, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x29, 0x4e1c47f2e555c8fb # initialize rs1
li x1, 0x78423a1b9ccea66d # initialize rs2
srl x26, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x15, 0x07c498887a5f4a99 # initialize rs1
li x2, 0x8c8b0c1a1af1bfeb # initialize rs2
srl x12, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x7, 0x3dc6b4dd950901ce # initialize rs1
li x3, 0x98b40c69aef7da4f # initialize rs2
srl x13, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0x83f57a63f8d42fb5 # initialize rs1
li x4, 0x53a16c51edc0eb8e # initialize rs2
srl x26, x18, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x30, 0xead1b9c143574b00 # initialize rs1
li x5, 0x9e7ac37e6c7290c4 # initialize rs2
srl x31, x30, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0x4db6cca9f5f74acc # initialize rs1
li x6, 0x7e4843b3697576ee # initialize rs2
srl x10, x13, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0x4df2af44ab61fe4e # initialize rs1
li x7, 0x9e1c6fc740359373 # initialize rs2
srl x30, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x11, 0x96bc5657b19a5287 # initialize rs1
li x8, 0x4122c88cf1679bf9 # initialize rs2
srl x2, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x6, 0x1da54cbfe76c92c1 # initialize rs1
li x9, 0xc07940d73a7a0e9f # initialize rs2
srl x18, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x27, 0x7070385eea5bbebe # initialize rs1
li x10, 0x3b7a8d9c244d15f6 # initialize rs2
srl x12, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x20, 0x0a7c5ae7728d9b43 # initialize rs1
li x11, 0x26dd54c2c1dcc3e9 # initialize rs2
srl x25, x20, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x20, 0x9170081fe3d20a52 # initialize rs1
li x12, 0xfdeeb8263aa6c85d # initialize rs2
srl x25, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x17, 0xcb1d08ec82a1ba0a # initialize rs1
li x13, 0xf359513f878cc5a4 # initialize rs2
srl x10, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x7, 0xe36bcbbf178b8f7b # initialize rs1
li x14, 0x27d0b56e65526419 # initialize rs2
srl x21, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x18, 0x20ce7333d9e48521 # initialize rs1
li x15, 0x768a805f9a1c5b5e # initialize rs2
srl x24, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x15, 0x948e3421e7b0ea7d # initialize rs1
li x16, 0xba7d981c2d9de25f # initialize rs2
srl x9, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x22, 0xa0e110386f3da420 # initialize rs1
li x17, 0x7e07fa381b8ff2af # initialize rs2
srl x12, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x30, 0x5167bfb61d16fbb9 # initialize rs1
li x18, 0x532e71e4b3e74713 # initialize rs2
srl x16, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x27, 0x8adc3458efa6f769 # initialize rs1
li x19, 0xc9523b979dcd6965 # initialize rs2
srl x10, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x21, 0x16b2f21990a6f50e # initialize rs1
li x20, 0x77b96800cf358bb0 # initialize rs2
srl x6, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x10, 0x366b17c2c7acffe9 # initialize rs1
li x21, 0x895c4cad07704412 # initialize rs2
srl x27, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x29, 0xc63cfbf1bab0cf36 # initialize rs1
li x22, 0x54befb222a7037a2 # initialize rs2
srl x9, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x22, 0x66956288d14e01fc # initialize rs1
li x23, 0x048b7cca5bbf3db2 # initialize rs2
srl x17, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x5, 0x2896a7541fb39961 # initialize rs1
li x24, 0xfd02656197856612 # initialize rs2
srl x23, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x5, 0xe27d280b6e74bff3 # initialize rs1
li x25, 0xed1d1b8505658406 # initialize rs2
srl x18, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x1, 0x154ecae76c6d08cc # initialize rs1
li x26, 0xa0dc3130179e36b6 # initialize rs2
srl x15, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x17, 0x8306109fbc886b21 # initialize rs1
li x27, 0xeb2e3c57c9e86dd9 # initialize rs2
srl x29, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x25, 0xc405de6ed8173bfd # initialize rs1
li x28, 0xab9ff6dc82d0a0bc # initialize rs2
srl x26, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x19, 0xe790915a050950d7 # initialize rs1
li x29, 0x852900e4415df740 # initialize rs2
srl x30, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x29, 0x1456aa33f1b90b2c # initialize rs1
li x30, 0xbb335cd6faaf6c0d # initialize rs2
srl x15, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x9, 0x74430f4eb8327633 # initialize rs1
li x31, 0x6ba33b998038d0d0 # initialize rs2
srl x6, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 504)

# Testcase cp_rd (Test destination rd = x0)
li x27, 0xe36457165842c0c7 # initialize rs1
li x15, 0x405b17fb6d300277 # initialize rs2
srl x0, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x9, 0x7c21fb84204869e5 # initialize rs1
li x8, 0xa1331179ec957fcf # initialize rs2
srl x1, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x12, 0xdc14a72063a40279 # initialize rs1
li x30, 0x8f0dde808d3a9c7e # initialize rs2
srl x2, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x12, 0x5a9ae86751c52017 # initialize rs1
li x16, 0xbcefc06eb157b331 # initialize rs2
srl x3, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0x3d00ba9e95c45100 # initialize rs1
li x26, 0x506c5cc7837fd08e # initialize rs2
srl x4, x25, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0xb8b54481df2cf05b # initialize rs1
li x28, 0x40a95ca96507423c # initialize rs2
srl x5, x23, x28 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x20, 0x0dcc3495d0de71e0 # initialize rs1
li x12, 0x0b22737da00c50fe # initialize rs2
srl x6, x20, x12 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x8, 0xb990135bd56a921c # initialize rs1
li x3, 0x9a34d1e663d658d9 # initialize rs2
srl x7, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0x1193812ccf9148d5 # initialize rs1
li x21, 0x8829a25db16bb5bd # initialize rs2
srl x8, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x29, 0xd52bce5ae7d5a802 # initialize rs1
li x15, 0xf22e20351b89b81d # initialize rs2
srl x9, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x17, 0x54477d39a569ab37 # initialize rs1
li x14, 0x6958c11db1c6eb32 # initialize rs2
srl x10, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x6, 0x9433c5e5b23a8dfa # initialize rs1
li x8, 0x889190953a3eee90 # initialize rs2
srl x11, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x11, 0xf20a2e57ebad612d # initialize rs1
li x20, 0x5ef0fa3fdbed020d # initialize rs2
srl x12, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x18, 0x08728ae71b40eb4f # initialize rs1
li x16, 0x653a00d78b4f24f0 # initialize rs2
srl x13, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x23, 0x3ccf678f140b23e3 # initialize rs1
li x13, 0x30f816f94300b70e # initialize rs2
srl x14, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x28, 0xe09e3bbdfc165044 # initialize rs1
li x30, 0xece7d4cc98ac0c84 # initialize rs2
srl x15, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x23, 0x301696a6ef23af30 # initialize rs1
li x13, 0xfa7a010b11a3d4cb # initialize rs2
srl x16, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x19, 0x77b736b37fe5e0e1 # initialize rs1
li x5, 0x3b6bf98be461d11b # initialize rs2
srl x17, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x15, 0x0dec30866cd08c60 # initialize rs1
li x10, 0x689d10cc5d0785dc # initialize rs2
srl x18, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x12, 0xa4d83bd3cdbd56d3 # initialize rs1
li x24, 0x4cb673bed94fdbc9 # initialize rs2
srl x19, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x15, 0xa390c40e58e0f3fe # initialize rs1
li x29, 0xe15435a3fda3a3c1 # initialize rs2
srl x20, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x25, 0x757f7fbafe3c1134 # initialize rs1
li x6, 0x6c274f152d30e3a2 # initialize rs2
srl x21, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x20, 0x986e3be29e48e2c0 # initialize rs1
li x28, 0xa8a354187528989a # initialize rs2
srl x22, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x31, 0x0d66e3349fabe6e4 # initialize rs1
li x29, 0x2ff8bc2c965d2a94 # initialize rs2
srl x23, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x24, 0xe9a57e5a78fc602b # initialize rs1
li x26, 0x9f46ded7ab305054 # initialize rs2
srl x24, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x5, 0x74256668bb24b7f6 # initialize rs1
li x7, 0x7ea17162cca6b983 # initialize rs2
srl x25, x5, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x10, 0xd7fc42e54afba23c # initialize rs1
li x28, 0x7d6e26768c91f80b # initialize rs2
srl x26, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x3, 0xee650ea21b798254 # initialize rs1
li x18, 0xad1c73b880cc0fce # initialize rs2
srl x27, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x5, 0xac49eb5394367b47 # initialize rs1
li x23, 0x43efc5c6c0c86b9a # initialize rs2
srl x28, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x23, 0xcc67b34eb597b52d # initialize rs1
li x9, 0x2eb97f8231962bb1 # initialize rs2
srl x29, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x26, 0x712432569a1b7145 # initialize rs1
li x20, 0xcbca4f0ebe9b26bf # initialize rs2
srl x30, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0x9096ad8227f9fb2f # initialize rs1
li x8, 0xa493d9d575da655f # initialize rs2
srl x31, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x18, 0x0000000000000000 # initialize rs1
li x19, 0xd72d1fbde29e3e24 # initialize rs2
srl x15, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x22, 0x0000000000000001 # initialize rs1
li x9, 0x9db0d7202d5d2932 # initialize rs2
srl x19, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x14, 0x0000000000000002 # initialize rs1
li x17, 0x226bf1b291f25a43 # initialize rs2
srl x5, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x8, 0x8000000000000000 # initialize rs1
li x14, 0xd470f4dde6954a82 # initialize rs2
srl x12, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x26, 0x8000000000000001 # initialize rs1
li x16, 0x9016e6cf456a84be # initialize rs2
srl x13, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x15, 0x7fffffffffffffff # initialize rs1
li x25, 0xa8662b0d981c8b1a # initialize rs2
srl x2, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x16, 0x7ffffffffffffffe # initialize rs1
li x12, 0x53b2786e68f016f1 # initialize rs2
srl x19, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x23, 0xffffffffffffffff # initialize rs1
li x1, 0x666cd3b5c35ede87 # initialize rs2
srl x19, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
li x11, 0x4cdd1dcc5163bad2 # initialize rs2
srl x15, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x04e9c65e90cbbe5f # initialize rs2
srl x8, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x339f858e2b7003aa # initialize rs2
srl x3, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x31, 0x5555555555555555 # initialize rs1
li x13, 0xe0ddf09e31836af4 # initialize rs2
srl x19, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x20, 0x00000000ffffffff # initialize rs1
li x9, 0x3e40727d941a0a5e # initialize rs2
srl x14, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x2, 0x00000000fffffffe # initialize rs1
li x13, 0x9e59eb969117513b # initialize rs2
srl x24, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x31, 0x0000000100000000 # initialize rs1
li x9, 0x24217d0b1850fd9d # initialize rs2
srl x20, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x7, 0x0000000100000001 # initialize rs1
li x2, 0x5d45cd47baf13f2d # initialize rs2
srl x27, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x21, 0x6ae343484487facf # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
srl x12, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x14, 0x2fab82ee32978a22 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
srl x25, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x2, 0xbf17f17d4c78a205 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
srl x21, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x26, 0xfa954ebf62110816 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
srl x12, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x1, 0x2fef48432a441de8 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
srl x24, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x11, 0x11130458f3e62a37 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
srl x24, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x17, 0x891beb6ce56da5f3 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
srl x15, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x23, 0xc4d02f771ef8d4ae # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
srl x24, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x30, 0x68581250aceaa4ac # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
srl x13, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x30, 0x759ef18fd4da892b # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
srl x28, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x10, 0x71e2930798ca3d74 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x15, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x14, 0xa0c59e5846cb2876 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
srl x31, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x28, 0xc82e8def60a856cd # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
srl x23, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x14, 0xedd6b21ad9e87948 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
srl x6, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x10, 0x510add7badb7a2ed # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
srl x17, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x16, 0x344ef75f666ef890 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
srl x21, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x16, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
srl x2, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x14, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
srl x22, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x16, 0x0000000000000000 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
srl x29, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x24, 0x0000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
srl x17, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x3, 0x0000000000000000 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
srl x15, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x17, 0x0000000000000000 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
srl x24, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x14, 0x0000000000000000 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
srl x15, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x6, 0x0000000000000000 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
srl x22, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x16, 0x0000000000000000 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
srl x25, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x21, 0x0000000000000000 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
srl x29, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x0000000000000000 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x19, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x28, 0x0000000000000000 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
srl x14, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x25, 0x0000000000000000 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
srl x3, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x7, 0x0000000000000000 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
srl x29, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x27, 0x0000000000000000 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
srl x5, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x3, 0x0000000000000000 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
srl x25, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x30, 0x0000000000000001 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
srl x7, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x30, 0x0000000000000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
srl x17, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x19, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
srl x14, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x10, 0x0000000000000001 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
srl x17, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x16, 0x0000000000000001 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
srl x2, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x17, 0x0000000000000001 # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
srl x9, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x23, 0x0000000000000001 # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
srl x13, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x11, 0x0000000000000001 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
srl x31, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x26, 0x0000000000000001 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
srl x25, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x1, 0x0000000000000001 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
srl x9, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x0000000000000001 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x8, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x21, 0x0000000000000001 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
srl x19, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x8, 0x0000000000000001 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
srl x2, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x27, 0x0000000000000001 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
srl x24, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x9, 0x0000000000000001 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
srl x16, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x21, 0x0000000000000001 # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
srl x17, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x23, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
srl x11, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x27, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
srl x6, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x2, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
srl x22, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x6, 0x0000000000000002 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
srl x24, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x29, 0x0000000000000002 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
srl x11, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
srl x10, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000000000002 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
srl x5, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x12, 0x0000000000000002 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
srl x7, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000000000002 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
srl x23, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x28, 0x0000000000000002 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
srl x24, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x0000000000000002 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x29, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x13, 0x0000000000000002 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
srl x24, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x29, 0x0000000000000002 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
srl x9, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x30, 0x0000000000000002 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
srl x12, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x30, 0x0000000000000002 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
srl x14, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x6, 0x0000000000000002 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
srl x21, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x11, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
srl x16, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x14, 0x8000000000000000 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
srl x10, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x29, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
srl x9, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x25, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
srl x31, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x30, 0x8000000000000000 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
srl x13, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x24, 0x8000000000000000 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
srl x30, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x29, 0x8000000000000000 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
srl x13, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x17, 0x8000000000000000 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
srl x28, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x12, 0x8000000000000000 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
srl x21, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x15, 0x8000000000000000 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
srl x3, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x8000000000000000 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x1, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x14, 0x8000000000000000 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
srl x27, x14, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x2, 0x8000000000000000 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
srl x7, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x3, 0x8000000000000000 # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
srl x6, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x28, 0x8000000000000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
srl x10, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x8, 0x8000000000000000 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
srl x10, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x9, 0x8000000000000001 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
srl x24, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x12, 0x8000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
srl x29, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x16, 0x8000000000000001 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
srl x10, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x3, 0x8000000000000001 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
srl x27, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x15, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
srl x9, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x10, 0x8000000000000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
srl x18, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x12, 0x8000000000000001 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
srl x28, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x18, 0x8000000000000001 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
srl x30, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x15, 0x8000000000000001 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
srl x29, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x19, 0x8000000000000001 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
srl x5, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0x8000000000000001 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x21, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x13, 0x8000000000000001 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
srl x25, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x26, 0x8000000000000001 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
srl x21, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x2, 0x8000000000000001 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
srl x10, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x22, 0x8000000000000001 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
srl x26, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x23, 0x8000000000000001 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
srl x3, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x31, 0x7fffffffffffffff # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
srl x3, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x17, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
srl x12, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x26, 0x7fffffffffffffff # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
srl x29, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x24, 0x7fffffffffffffff # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
srl x22, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x31, 0x7fffffffffffffff # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
srl x25, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x1, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
srl x29, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x16, 0x7fffffffffffffff # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
srl x18, x16, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x7, 0x7fffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
srl x26, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x25, 0x7fffffffffffffff # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
srl x3, x25, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x21, 0x7fffffffffffffff # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
srl x17, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x7fffffffffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x14, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x29, 0x7fffffffffffffff # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
srl x14, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
srl x24, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x27, 0x7fffffffffffffff # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
srl x14, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x1, 0x7fffffffffffffff # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
srl x22, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x2, 0x7fffffffffffffff # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
srl x14, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x24, 0x7ffffffffffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
srl x5, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x5, 0x7ffffffffffffffe # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
srl x31, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x17, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
srl x6, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x18, 0x7ffffffffffffffe # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
srl x23, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x8, 0x7ffffffffffffffe # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
srl x10, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x29, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
srl x23, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x18, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
srl x1, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
srl x12, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x5, 0x7ffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
srl x31, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x26, 0x7ffffffffffffffe # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
srl x29, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x7ffffffffffffffe # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x3, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x27, 0x7ffffffffffffffe # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
srl x11, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x21, 0x7ffffffffffffffe # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
srl x5, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x16, 0x7ffffffffffffffe # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
srl x11, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x19, 0x7ffffffffffffffe # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
srl x5, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x8, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
srl x27, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x10, 0xffffffffffffffff # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
srl x8, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x24, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
srl x5, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x28, 0xffffffffffffffff # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
srl x17, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x20, 0xffffffffffffffff # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
srl x11, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x1, 0xffffffffffffffff # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
srl x17, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x3, 0xffffffffffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
srl x8, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x25, 0xffffffffffffffff # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
srl x16, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x23, 0xffffffffffffffff # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
srl x27, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x27, 0xffffffffffffffff # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
srl x9, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x28, 0xffffffffffffffff # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
srl x7, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0xffffffffffffffff # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x1, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x14, 0xffffffffffffffff # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
srl x27, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x29, 0xffffffffffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
srl x20, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
srl x1, x24, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x18, 0xffffffffffffffff # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
srl x26, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x8, 0xffffffffffffffff # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
srl x27, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x6, 0xfffffffffffffffe # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
srl x1, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x3, 0xfffffffffffffffe # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
srl x28, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x27, 0xfffffffffffffffe # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
srl x10, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x12, 0xfffffffffffffffe # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
srl x28, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x5, 0xfffffffffffffffe # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
srl x16, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x22, 0xfffffffffffffffe # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
srl x12, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x21, 0xfffffffffffffffe # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
srl x27, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x27, 0xfffffffffffffffe # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
srl x22, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x21, 0xfffffffffffffffe # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
srl x11, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x22, 0xfffffffffffffffe # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
srl x12, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0xfffffffffffffffe # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x27, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x25, 0xfffffffffffffffe # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
srl x6, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x15, 0xfffffffffffffffe # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
srl x8, x15, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x28, 0xfffffffffffffffe # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
srl x10, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x18, 0xfffffffffffffffe # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
srl x20, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x17, 0xfffffffffffffffe # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
srl x21, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
srl x2, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
srl x29, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
srl x7, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
srl x30, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
srl x6, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
srl x19, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
srl x30, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
srl x13, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
srl x22, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
srl x1, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x31, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
srl x28, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
srl x8, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
srl x5, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
srl x9, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
srl x26, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
srl x31, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
srl x27, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
srl x21, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
srl x23, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
srl x17, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
srl x11, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
srl x28, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
srl x5, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
srl x6, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
srl x17, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x3, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
srl x26, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
srl x8, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
srl x23, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
srl x11, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
srl x30, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x21, 0x5555555555555555 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
srl x31, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x15, 0x5555555555555555 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
srl x28, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x22, 0x5555555555555555 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
srl x20, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x15, 0x5555555555555555 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
srl x20, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x6, 0x5555555555555555 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
srl x23, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x5, 0x5555555555555555 # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
srl x26, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x28, 0x5555555555555555 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
srl x19, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x21, 0x5555555555555555 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
srl x11, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x29, 0x5555555555555555 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
srl x7, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x19, 0x5555555555555555 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
srl x20, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x5555555555555555 # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x14, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x8, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
srl x11, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x8, 0x5555555555555555 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
srl x29, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x11, 0x5555555555555555 # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
srl x12, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x23, 0x5555555555555555 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
srl x18, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x14, 0x5555555555555555 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
srl x9, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x17, 0x00000000ffffffff # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
srl x13, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x17, 0x00000000ffffffff # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
srl x10, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x9, 0x00000000ffffffff # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
srl x8, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x28, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
srl x24, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x29, 0x00000000ffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
srl x13, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x17, 0x00000000ffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
srl x28, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x13, 0x00000000ffffffff # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
srl x21, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x31, 0x00000000ffffffff # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
srl x27, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x25, 0x00000000ffffffff # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
srl x30, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x12, 0x00000000ffffffff # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
srl x22, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x00000000ffffffff # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x15, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x11, 0x00000000ffffffff # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
srl x15, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x24, 0x00000000ffffffff # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
srl x23, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x27, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
srl x28, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x23, 0x00000000ffffffff # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
srl x30, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x28, 0x00000000ffffffff # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
srl x22, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x26, 0x00000000fffffffe # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
srl x28, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x12, 0x00000000fffffffe # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
srl x1, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x28, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
srl x30, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x28, 0x00000000fffffffe # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
srl x7, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x28, 0x00000000fffffffe # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
srl x14, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x23, 0x00000000fffffffe # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
srl x28, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x13, 0x00000000fffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
srl x15, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x2, 0x00000000fffffffe # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
srl x31, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x15, 0x00000000fffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
srl x18, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x12, 0x00000000fffffffe # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
srl x3, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x00000000fffffffe # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x20, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x12, 0x00000000fffffffe # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
srl x20, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x23, 0x00000000fffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
srl x16, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x9, 0x00000000fffffffe # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
srl x2, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x5, 0x00000000fffffffe # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
srl x7, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x15, 0x00000000fffffffe # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
srl x17, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x21, 0x0000000100000000 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
srl x12, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x6, 0x0000000100000000 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
srl x28, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x11, 0x0000000100000000 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
srl x22, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x3, 0x0000000100000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
srl x2, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x21, 0x0000000100000000 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
srl x29, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x24, 0x0000000100000000 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
srl x31, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x31, 0x0000000100000000 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
srl x12, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000000 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
srl x14, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x27, 0x0000000100000000 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
srl x31, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x8, 0x0000000100000000 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
srl x6, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x0000000100000000 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x14, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x11, 0x0000000100000000 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
srl x19, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x1, 0x0000000100000000 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
srl x23, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x9, 0x0000000100000000 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
srl x28, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x16, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
srl x25, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x3, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
srl x17, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x6, 0x0000000100000001 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
srl x21, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x24, 0x0000000100000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
srl x26, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x6, 0x0000000100000001 # initialize rs1
li x1, 0x0000000000000002 # initialize rs2
srl x17, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x3, 0x0000000100000001 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
srl x23, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x13, 0x0000000100000001 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
srl x25, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000100000001 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
srl x26, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x27, 0x0000000100000001 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
srl x30, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x30, 0x0000000100000001 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
srl x19, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
srl x31, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x28, 0x0000000100000001 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
srl x17, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x0000000100000001 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
srl x14, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x13, 0x0000000100000001 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
srl x5, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x6, 0x0000000100000001 # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
srl x22, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x6, 0x0000000100000001 # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
srl x11, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x1, 0x0000000100000001 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
srl x13, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x29, 0x0000000100000001 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
srl x9, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x072e7b334b0dfdc9 # initialize rs1
li x0, 0x3035e3ce185a1e0c # initialize rs2
srl x20, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xfc751a60ff870274 # initialize rs1
li x1, 0x7386db2f4281e7d8 # initialize rs2
srl x25, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x5721f63dc1389853 # initialize rs1
li x2, 0xdc6a0ba8fbf3902d # initialize rs2
srl x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x90c83a1bba61cd3e # initialize rs1
li x3, 0xb1c68a52cfb8f257 # initialize rs2
srl x11, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x787369112706b8c1 # initialize rs1
li x4, 0xf7e86e524fe7e600 # initialize rs2
srl x5, x4, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
li x5, 0xae1c39c80cc963cd # initialize rs1
li x5, 0xc5362e1d6d46ccb5 # initialize rs2
srl x4, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x26ddf39d0a3245ab # initialize rs1
li x6, 0x18a426e9cfddf64d # initialize rs2
srl x15, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x15, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf1280e5d8bc72f3e # initialize rs1
li x7, 0x460a7fc83bdf4b75 # initialize rs2
srl x12, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x1de9e1542b37b4f7 # initialize rs1
li x8, 0x17318cc1976bc965 # initialize rs2
srl x5, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xdd066f42c6a7aed3 # initialize rs1
li x9, 0xcb6e29878e3b12ef # initialize rs2
srl x18, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x7d93120f5f1dabaf # initialize rs1
li x10, 0xc37ea6ab3170f0de # initialize rs2
srl x15, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x89e8a70c654098ed # initialize rs1
li x11, 0x17aa986921eb220d # initialize rs2
srl x20, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x7ab03720c501c8be # initialize rs1
li x12, 0xb89e4cc905a58ea0 # initialize rs2
srl x26, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xf548f0cb097aa823 # initialize rs1
li x13, 0x4b0514d05b748d9f # initialize rs2
srl x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x6547c427868b1d21 # initialize rs1
li x14, 0xfad064e8aa447c40 # initialize rs2
srl x13, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x0c965b06b9ff1e62 # initialize rs1
li x15, 0x9c90ed3aa36e6437 # initialize rs2
srl x6, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xe28a4093bde38bb6 # initialize rs1
li x16, 0x92efad1df27c3f5b # initialize rs2
srl x9, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xa848dbd34a69c9d5 # initialize rs1
li x17, 0x53dc04cf7e12f5d7 # initialize rs2
srl x24, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x38d4c20a847d6be3 # initialize rs1
li x18, 0x1a0d89f1688b113f # initialize rs2
srl x7, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xa1d4b1568c2e4408 # initialize rs1
li x19, 0x9bfde1270dc6bd35 # initialize rs2
srl x1, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x3e00bf0e4e89a262 # initialize rs1
li x20, 0xbf6a2f37f1e55b96 # initialize rs2
srl x12, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x20793e85151c8a27 # initialize rs1
li x21, 0x4092c93b5b11175c # initialize rs2
srl x26, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x71316fa6bfde21b0 # initialize rs1
li x22, 0xf3eb436f534d3683 # initialize rs2
srl x26, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x3ecb73dc5bc32035 # initialize rs1
li x23, 0x5db052e0680dfc7b # initialize rs2
srl x14, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x05742853108810f0 # initialize rs1
li x24, 0x0a772c7eabd15100 # initialize rs2
srl x12, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x0cf4bcd4eff419f0 # initialize rs1
li x25, 0xf7011a5f198a7c33 # initialize rs2
srl x13, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x6cef4770a5114b6f # initialize rs1
li x26, 0x397f9cf68a3a2422 # initialize rs2
srl x3, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x1935bca27429a177 # initialize rs1
li x27, 0x41472b12a9832a30 # initialize rs2
srl x14, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xd7a9f3df61f99af9 # initialize rs1
li x28, 0x61261c7cefc59afe # initialize rs2
srl x18, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xc27ad4d22b66afcf # initialize rs1
li x29, 0x204f3d85cee9066e # initialize rs2
srl x13, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xc6431508d6667206 # initialize rs1
li x30, 0xe3fdc749d4da338d # initialize rs2
srl x3, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xba30f0ed781cc282 # initialize rs1
li x31, 0x925737ead1e101b6 # initialize rs2
srl x26, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xd1960df646f946aa # initialize rs1
li x16, 0x01a070961af39964 # initialize rs2
srl x0, x0, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x84e223e9de869ce9 # initialize rs1
li x8, 0xeb191d17a94d3be2 # initialize rs2
srl x1, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x933bc0d126e366d6 # initialize rs1
li x7, 0x3e3dc67ded330556 # initialize rs2
srl x2, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x250ea98136aac91f # initialize rs1
li x26, 0xb1310ba1b433c638 # initialize rs2
srl x3, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x53f9aaa3229759d1 # initialize rs1
li x20, 0xd818e9b8ad1004c2 # initialize rs2
srl x4, x4, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x08e540d3df7a7773 # initialize rs1
li x24, 0xde7c69441be738b2 # initialize rs2
srl x5, x5, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x98329a102d26473b # initialize rs1
li x9, 0x95bfa00265d9d9c7 # initialize rs2
srl x6, x6, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x25e86c89c5e84318 # initialize rs1
li x6, 0xb7641047057fe300 # initialize rs2
srl x7, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x8a51cd6c12ae10e9 # initialize rs1
li x17, 0x0f81a31fe722dbc0 # initialize rs2
srl x8, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc414a320c38d8d0d # initialize rs1
li x22, 0xe62abee2ec2921b0 # initialize rs2
srl x9, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x67ffbabc8c1d8bc7 # initialize rs1
li x23, 0x131801f09311c6d8 # initialize rs2
srl x10, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x689498e79fde7433 # initialize rs1
li x3, 0x74d875c98a098e23 # initialize rs2
srl x11, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x2be56e25fbd36010 # initialize rs1
li x5, 0x2a071c0f673b2267 # initialize rs2
srl x12, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x35cef524c9d8e28b # initialize rs1
li x10, 0x9e7b333769e50477 # initialize rs2
srl x13, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x422105adf3ec5139 # initialize rs1
li x29, 0x5aadb3bd3a941dc2 # initialize rs2
srl x14, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x652b0b89a76cbcd7 # initialize rs1
li x1, 0x018c4c62d24d1004 # initialize rs2
srl x15, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x5aa3d23e18825758 # initialize rs1
li x18, 0xea1658919dff0b35 # initialize rs2
srl x16, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x1f838e12ef15fd60 # initialize rs1
li x29, 0xd58bfd772716315c # initialize rs2
srl x17, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x323d4e74a7299446 # initialize rs1
li x27, 0xaeecf3254b61a4ec # initialize rs2
srl x18, x18, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1e9dc546b587f805 # initialize rs1
li x20, 0xb2689350fd2f7b74 # initialize rs2
srl x19, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x9fca7753eff6060a # initialize rs1
li x7, 0xcdfb2ea39aae8c2a # initialize rs2
srl x20, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x41b1878986bf789f # initialize rs1
li x28, 0x1a2bb319d664558d # initialize rs2
srl x21, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x5619e4bbaf8b138f # initialize rs1
li x22, 0x2bbc81158fa3b67c # initialize rs2
srl x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x1370808034d35fed # initialize rs1
li x5, 0x8c8f91f619a374e6 # initialize rs2
srl x23, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x6c57db43e36fff26 # initialize rs1
li x18, 0x644d36bd105f3aa6 # initialize rs2
srl x24, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x1bc34311273330d9 # initialize rs1
li x12, 0xc306f3de5911c1e7 # initialize rs2
srl x25, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xeebd3aa2d64f1fb2 # initialize rs1
li x9, 0x6c7ac0df04f9c2f9 # initialize rs2
srl x26, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xca0454c0dd3d6cf2 # initialize rs1
li x19, 0x46bce2e6b9c4f94a # initialize rs2
srl x27, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xb15e62d5c017d14c # initialize rs1
li x12, 0xc8e2acdd22cac95d # initialize rs2
srl x28, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xb141f47c89ceaac9 # initialize rs1
li x1, 0x7412262d1dd645ec # initialize rs2
srl x29, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x81515bb846895abb # initialize rs1
li x30, 0x6ac10b8036c9e342 # initialize rs2
srl x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xe80f18cb49322868 # initialize rs1
li x3, 0x50e17c72bcfebe28 # initialize rs2
srl x31, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x7, 0x6a366c7a4626bc72 # initialize rs1
li x0, 0x0c6c0075bfa82f47 # initialize rs2
srl x0, x7, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x10, 0x6679bb8b3056e78c # initialize rs1
li x1, 0x2e944f4503dc432a # initialize rs2
srl x1, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x26, 0xaffdc47efcda91b0 # initialize rs1
li x2, 0x53aa3587a84c2b31 # initialize rs2
srl x2, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x29, 0x24468bb459838ed1 # initialize rs1
li x3, 0x433176b6d5494e38 # initialize rs2
srl x3, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0x74be2e3f7a734be2 # initialize rs1
li x4, 0xf75fb7ee198e4b8f # initialize rs2
srl x4, x27, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x1, 0x40fe0083a011d836 # initialize rs1
li x5, 0x91709224f598e819 # initialize rs2
srl x5, x1, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0x4a375ff20adf1c37 # initialize rs1
li x6, 0x008f9c895121a795 # initialize rs2
srl x6, x23, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0x27a2226644b3fc03 # initialize rs1
li x7, 0x63f599727f813315 # initialize rs2
srl x7, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x24, 0x7bc9514dae072d91 # initialize rs1
li x8, 0x74e96cd5c3c56415 # initialize rs2
srl x8, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x28, 0x841e94128e976fad # initialize rs1
li x9, 0xbb02eec6a9ececf4 # initialize rs2
srl x9, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x21, 0xf71b0a2c3208cb33 # initialize rs1
li x10, 0xef27550662c99625 # initialize rs2
srl x10, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x26, 0x4f05ae20a5f707b1 # initialize rs1
li x11, 0x17e1e14453c7daad # initialize rs2
srl x11, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x3, 0xa8fadda5955bd0cd # initialize rs1
li x12, 0x3a0d308e9d9325a1 # initialize rs2
srl x12, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x15, 0x05d6403539a7eedf # initialize rs1
li x13, 0xe1aad83f7fc9645d # initialize rs2
srl x13, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x24, 0x52e9560d000d65b2 # initialize rs1
li x14, 0x1aaf90bb4d04721f # initialize rs2
srl x14, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x2, 0x050616f7ee5bdfd0 # initialize rs1
li x15, 0x30c585f7e1dcfb10 # initialize rs2
srl x15, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x20, 0x9d3216218ae159a6 # initialize rs1
li x16, 0x93ac293372fbf176 # initialize rs2
srl x16, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x8, 0x6161637f09d856c9 # initialize rs1
li x17, 0xf3da7821e94e24dc # initialize rs2
srl x17, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x31, 0x89edcc28ca29c991 # initialize rs1
li x18, 0xe8f81913ecdc9e81 # initialize rs2
srl x18, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x20, 0xd55ce49ff03a352e # initialize rs1
li x19, 0x2df2ea57934e936c # initialize rs2
srl x19, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x26, 0x473ecfcec88ed361 # initialize rs1
li x20, 0xfb303b07c9856c95 # initialize rs2
srl x20, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x13, 0xb704eed06c31dc60 # initialize rs1
li x21, 0xfb67d4559eac2e56 # initialize rs2
srl x21, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x3, 0x2fe5e448817f78c7 # initialize rs1
li x22, 0x30234ca4476e9a04 # initialize rs2
srl x22, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x28, 0x81f455005fdd9d73 # initialize rs1
li x23, 0x676a9655117680c6 # initialize rs2
srl x23, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x20, 0x8b72e64c9a8031f8 # initialize rs1
li x24, 0x813667b699e94966 # initialize rs2
srl x24, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x9, 0x25dec3c4eafcc451 # initialize rs1
li x25, 0x462019d2425debbe # initialize rs2
srl x25, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x25, 0x062ae4b9fb8f3802 # initialize rs1
li x26, 0x29f5fa238aeca36f # initialize rs2
srl x26, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x19, 0x9bf574f162577cba # initialize rs1
li x27, 0xfcf6dbb1ab784825 # initialize rs2
srl x27, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x30, 0x3a19de9a5e248573 # initialize rs1
li x28, 0x6762761ec7b6370e # initialize rs2
srl x28, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x7, 0x943dbdaf1934d6a6 # initialize rs1
li x29, 0x34974a93ded145b1 # initialize rs2
srl x29, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x8, 0x8a2b22e6ac91f4df # initialize rs1
li x30, 0x7ed55ad287b0a960 # initialize rs2
srl x30, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x8, 0x4e1b1dac304d4507 # initialize rs1
li x31, 0xdbea2a9287aa61b1 # initialize rs2
srl x31, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x3685b0c61db07640 # initialize rs1
li x0, 0x7d89d44371d804d9 # initialize rs2
srl x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xa9bee6503f1c75ea # initialize rs1
li x1, 0x88e4cba5a545df69 # initialize rs2
srl x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x0a25f846ea97c723 # initialize rs1
li x2, 0x0fd5ce4de14c25bd # initialize rs2
srl x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x568557e55b56e3a2 # initialize rs1
li x3, 0x8c79c8d20dc91e66 # initialize rs2
srl x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf401e159d818bac7 # initialize rs1
li x4, 0x6ba313015ac41183 # initialize rs2
srl x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x059a0b892f8476d3 # initialize rs1
li x5, 0x15a8f9e52c854dd0 # initialize rs2
srl x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4a27e74e047e97f6 # initialize rs1
li x6, 0x7bf853c78e2c57d8 # initialize rs2
srl x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1df7cacf8ab6e8aa # initialize rs1
li x7, 0xa1520678023c77dd # initialize rs2
srl x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xe80d0acdd8525f7d # initialize rs1
li x8, 0xbd5be0dcb8fcae80 # initialize rs2
srl x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xa1e9536ec8e644ab # initialize rs1
li x9, 0xb2154553833f4293 # initialize rs2
srl x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x81241e29b1ea7397 # initialize rs1
li x10, 0xddc95394a41eeead # initialize rs2
srl x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xc8a9aefacc0079d7 # initialize rs1
li x11, 0xd2af4e902c10d3b1 # initialize rs2
srl x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x4a9a372d4d85f530 # initialize rs1
li x12, 0xea1dfbc0e0909ceb # initialize rs2
srl x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xc9d0b88ad5b3ed37 # initialize rs1
li x13, 0xafe5ff30792636f8 # initialize rs2
srl x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xf24333c44f185ba5 # initialize rs1
li x14, 0xb80f29460b5d67fd # initialize rs2
srl x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x0f2725d695874476 # initialize rs1
li x15, 0x092827583475299c # initialize rs2
srl x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x7fa8ebc55c929e20 # initialize rs1
li x16, 0x768b11f8cfb24ce8 # initialize rs2
srl x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xcff2f54bb21defc2 # initialize rs1
li x17, 0x986ff5026edc5cb9 # initialize rs2
srl x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xc1c3e062f0d80a0e # initialize rs1
li x18, 0xda35814194be894c # initialize rs2
srl x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xf26d110bd901d70a # initialize rs1
li x19, 0x7c01ceb5f4a691f8 # initialize rs2
srl x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xa019bd6acac0639d # initialize rs1
li x20, 0xdd2328de25dbf5dd # initialize rs2
srl x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x2b315a7a435b3b1b # initialize rs1
li x21, 0x968e2051bead4891 # initialize rs2
srl x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xdedbfa8d907bbabc # initialize rs1
li x22, 0x34c33fa42a9d3656 # initialize rs2
srl x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xfce1fb3ea338a359 # initialize rs1
li x23, 0xa90ffa861784e752 # initialize rs2
srl x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x9af69d3b5ff4eb2a # initialize rs1
li x24, 0xc8bfc2082b1dfa0d # initialize rs2
srl x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x84a6fff3f34511f7 # initialize rs1
li x25, 0x23c7855d382b85ce # initialize rs2
srl x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x08f64bd602792720 # initialize rs1
li x26, 0x3430dd85d3e98ab9 # initialize rs2
srl x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xc71013267a3713a2 # initialize rs1
li x27, 0x1f8550305032c738 # initialize rs2
srl x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x69b35e34ec546be0 # initialize rs1
li x28, 0x51ed7482cdf22c4c # initialize rs2
srl x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xae520f18af9035e1 # initialize rs1
li x29, 0xd08fa2b61488beb5 # initialize rs2
srl x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x5205163bf96883db # initialize rs1
li x30, 0x1400cd77fee304cb # initialize rs2
srl x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xab3bc5e712ab2907 # initialize rs1
li x31, 0xe599652654a8b361 # initialize rs2
srl x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x30, x28 # perform first operation
srl x21, x13, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x15, x27, x16 # perform first operation
srl x22, x18, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x1, x5 # perform first operation
srl x11, x17, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x28, x2, x21 # perform first operation
srl x16, x28, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x29, x10 # perform first operation
srl x29, x25, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x23, x5 # perform first operation
srl x23, x26, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x5, x10, x30 # perform first operation
srl x5, x19, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x9, x16 # perform first operation
srl x11, x13, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x19, x18 # perform first operation
srl x11, x25, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x3, x10, x31 # perform first operation
srl x10, x24, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x31, x25 # perform first operation
srl x25, x28, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x22, x27 # perform first operation
srl x19, x29, x11 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-sll.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x8a182d0ab42fb881 # initialize rs1
li x2, 0xfe58b1b9f917d017 # initialize rs2
sll x30, x0, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xa77f1358f1414e90 # initialize rs1
li x5, 0x30450995dd094f58 # initialize rs2
sll x18, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xec8d71bf681dade4 # initialize rs1
li x3, 0x31b9f9fd09056b9e # initialize rs2
sll x27, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x8954ee89970fcd9d # initialize rs1
li x7, 0xfa281441ff735f33 # initialize rs2
sll x22, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x3f4d3ddc323d671a # initialize rs1
li x17, 0xbb934b17d7b93313 # initialize rs2
sll x26, x4, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9200a96ff20ac7d9 # initialize rs1
li x17, 0x9173f694c8f39554 # initialize rs2
sll x2, x5, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x2, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x22f8eb037cdd2ebb # initialize rs1
li x18, 0xed5474d8da8b44f0 # initialize rs2
sll x26, x6, x18 # perform operation
RVTEST_SIGUPD(x7, x0, x26, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x097ae852c8d9ac3d # initialize rs1
li x25, 0xc65a480a15f0df88 # initialize rs2
sll x5, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xacd61262566f75fd # initialize rs1
li x10, 0x5e565777197af671 # initialize rs2
sll x17, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xa19ba42e98252eb2 # initialize rs1
li x16, 0xdd5e023a5c1b32a0 # initialize rs2
sll x23, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xb6bb220d440d33e1 # initialize rs1
li x25, 0x7ab57ac95135f3eb # initialize rs2
sll x14, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xa6d2ca8238e4cdeb # initialize rs1
li x13, 0x775bd80f50652221 # initialize rs2
sll x3, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x76f5272aadd38b65 # initialize rs1
li x26, 0x86ebe42a4f62dc00 # initialize rs2
sll x16, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x9909a5624e9a4914 # initialize rs1
li x29, 0xe60284a71dc73c07 # initialize rs2
sll x15, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xaf3e9bc227724a34 # initialize rs1
li x10, 0xfbaa1e8888bd6c37 # initialize rs2
sll x6, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xba6e35df4850450e # initialize rs1
li x21, 0x00385db6419e2c2c # initialize rs2
sll x13, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x277ea5671de0fde2 # initialize rs1
li x17, 0x04f665e5abf891aa # initialize rs2
sll x12, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x5ba4c945351fe5ac # initialize rs1
li x10, 0x52c24530057e74cb # initialize rs2
sll x11, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x4513f50974900a0e # initialize rs1
li x8, 0xf341fbfa2fe56538 # initialize rs2
sll x31, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xf91ec9c2fce987e0 # initialize rs1
li x10, 0x371a39f3e366d38e # initialize rs2
sll x28, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x936dec6e7a16ccff # initialize rs1
li x27, 0xd7b1af3668fbc1d9 # initialize rs2
sll x9, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x55f7806005e6d28f # initialize rs1
li x20, 0x32c753adf8bf3184 # initialize rs2
sll x23, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xb2cd407aaa6913f3 # initialize rs1
li x15, 0x982bc7a8dc745a48 # initialize rs2
sll x27, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x17dcda2be1e843f0 # initialize rs1
li x9, 0x846b8a4a0b068f82 # initialize rs2
sll x27, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xed21f4c295d0723e # initialize rs1
li x16, 0x82e2728a90e9b16a # initialize rs2
sll x30, x24, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x0aa83e5ae2511d20 # initialize rs1
li x2, 0x01e8e0d83045002d # initialize rs2
sll x31, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xb03d7343dab4dbe5 # initialize rs1
li x6, 0xae4fab1db84e3026 # initialize rs2
sll x11, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xd57d75929c40a548 # initialize rs1
li x12, 0xe27ebc5358bbeef4 # initialize rs2
sll x8, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xfaa93e6bee06959f # initialize rs1
li x15, 0x5dd32989a5e1fdce # initialize rs2
sll x8, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xc72b0d89f2bd236c # initialize rs1
li x9, 0xd7fa444230d61153 # initialize rs2
sll x30, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x58323120654f4d33 # initialize rs1
li x19, 0x81449fc3f5ed078e # initialize rs2
sll x10, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x787f8ec74e2da851 # initialize rs1
li x9, 0x5a8d7a881889de6f # initialize rs2
sll x14, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x24, 0xdb129136871f9fa7 # initialize rs1
li x0, 0x609180e9de60853d # initialize rs2
sll x5, x24, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x21, 0xa2a17084134611a7 # initialize rs1
li x1, 0x0df135bfd300f9e5 # initialize rs2
sll x14, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x7, 0x507867f9afc04f6d # initialize rs1
li x2, 0x0ed15ab4ce7228bd # initialize rs2
sll x10, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x19, 0x25ab38b429fc0cc1 # initialize rs1
li x3, 0xb521b4144e8cd511 # initialize rs2
sll x23, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x20, 0xcbaa3929c65e96b3 # initialize rs1
li x4, 0xb43c448791f018ef # initialize rs2
sll x22, x20, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x2, 0x10d589aa0a990c20 # initialize rs1
li x5, 0xe2c7dd08f4517710 # initialize rs2
sll x11, x2, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x11, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0x669fbc3c437de432 # initialize rs1
li x6, 0xa7307f76abfdcf50 # initialize rs2
sll x17, x14, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x17, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x2, 0xc5ba0fe366172a76 # initialize rs1
li x7, 0xf206dbcb04d9763b # initialize rs2
sll x24, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x29, 0x9eda63ac344a96ea # initialize rs1
li x8, 0x9c6567de968da93c # initialize rs2
sll x27, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x22, 0xd022e41862c00bca # initialize rs1
li x9, 0x60aed8bcc7e74556 # initialize rs2
sll x1, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x27, 0xf426ca8fb0983e7b # initialize rs1
li x10, 0x29a93259d8de3c35 # initialize rs2
sll x21, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x30, 0x380e7a2dbe038f49 # initialize rs1
li x11, 0x8645fc86f9cec105 # initialize rs2
sll x25, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x23, 0xa7b22a0a78d5bd1c # initialize rs1
li x12, 0x0bd96b21ebd78e63 # initialize rs2
sll x17, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x26, 0xc5d6f66f64d441d9 # initialize rs1
li x13, 0xf694f44955e78200 # initialize rs2
sll x11, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x31, 0xccab1b718ce4ea9d # initialize rs1
li x14, 0x478c89b04e8659af # initialize rs2
sll x24, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x10, 0xc47ac409a1381c1f # initialize rs1
li x15, 0x8f5fc963cfefd402 # initialize rs2
sll x8, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x14, 0xd248004459736e77 # initialize rs1
li x16, 0xea4c3a2efd0aec7f # initialize rs2
sll x11, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x8, 0x3382229ad55e9baf # initialize rs1
li x17, 0xbe242bdb4a9aa814 # initialize rs2
sll x9, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x10, 0x476671da093c2d25 # initialize rs1
li x18, 0x21bb953d412daa6d # initialize rs2
sll x11, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x14, 0x0ab15b700fe86bf3 # initialize rs1
li x19, 0x42c81f7ccc66cac2 # initialize rs2
sll x25, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x25, 0xb1472caa674c41f3 # initialize rs1
li x20, 0x5262ae1796dae529 # initialize rs2
sll x17, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x29, 0xb6c123692d8385ab # initialize rs1
li x21, 0x77f75c0a67e16952 # initialize rs2
sll x17, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x30, 0xa57cc5fffea2e2bc # initialize rs1
li x22, 0xd7535f286de189ca # initialize rs2
sll x18, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x11, 0x62bc6ec2f16eb8a3 # initialize rs1
li x23, 0xcfed91e879c52fa6 # initialize rs2
sll x29, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x30, 0x275c09a46a417495 # initialize rs1
li x24, 0x37d4330ae0971ee2 # initialize rs2
sll x12, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x5, 0x3f6b397d3e9ed684 # initialize rs1
li x25, 0x6da2854b845daf25 # initialize rs2
sll x14, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x20, 0x7343d4e5e008245a # initialize rs1
li x26, 0x03c6ebfe9f711a4c # initialize rs2
sll x5, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x2, 0xcd0f1055ff250697 # initialize rs1
li x27, 0xcbe7f619409c5e36 # initialize rs2
sll x17, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x15, 0x2e3e5054a0058c89 # initialize rs1
li x28, 0x320b577d65ed653a # initialize rs2
sll x31, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x22, 0xcb0e489aeacf0ef8 # initialize rs1
li x29, 0xaf5bcebec32a572a # initialize rs2
sll x26, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x18, 0xf895c3e84d15742d # initialize rs1
li x30, 0x166928b81768c19c # initialize rs2
sll x27, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x9, 0x09b1deede47894f0 # initialize rs1
li x31, 0x64e4c2578b4f80d3 # initialize rs2
sll x30, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 504)

# Testcase cp_rd (Test destination rd = x0)
li x22, 0x7ea247989e1eddd1 # initialize rs1
li x29, 0xc5795de54e208cef # initialize rs2
sll x0, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x6, 0x6e93d6cdefa72a7d # initialize rs1
li x13, 0x3e91f563298af095 # initialize rs2
sll x1, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x3, 0xe3fabce5eebc8597 # initialize rs1
li x17, 0xabbd63918728ad5a # initialize rs2
sll x2, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x13, 0x69b4435344ec154f # initialize rs1
li x23, 0xfc635469b76bdf2f # initialize rs2
sll x3, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x29, 0x59e00db856dad312 # initialize rs1
li x18, 0xec5fda060f9e7a34 # initialize rs2
sll x4, x29, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x2, 0x3f829d4d8e33ad97 # initialize rs1
li x29, 0xd51b05505598c1ec # initialize rs2
sll x5, x2, x29 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x19, 0x14098e18087a297c # initialize rs1
li x2, 0xfec3411db767c476 # initialize rs2
sll x6, x19, x2 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0xaeb1a64171dd4182 # initialize rs1
li x16, 0xd438aba2072898b3 # initialize rs2
sll x7, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x28, 0x2b471aeb449a27c1 # initialize rs1
li x21, 0xa9d2fcaa6cea76c0 # initialize rs2
sll x8, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x9, 0xb4f853e32a06e170 # initialize rs1
li x14, 0x3dc3dd89d31d6672 # initialize rs2
sll x9, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x14, 0x0dfd7d9157f5a7da # initialize rs1
li x28, 0x6dd07a798dd89a0a # initialize rs2
sll x10, x14, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x29, 0xcf086e306228f65a # initialize rs1
li x17, 0x5de5f8b772586c60 # initialize rs2
sll x11, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x29, 0x13367973d95289b3 # initialize rs1
li x24, 0xf02071cee950f66d # initialize rs2
sll x12, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x26, 0xa92b562846408738 # initialize rs1
li x12, 0x0d1d89b31a3940aa # initialize rs2
sll x13, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x13, 0xbb31aa226661e861 # initialize rs1
li x21, 0x1ecda109e9112f00 # initialize rs2
sll x14, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0x1435bc9f6ddb3608 # initialize rs1
li x8, 0xc5891c98e30817ac # initialize rs2
sll x15, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x19, 0x496a1af1fb8a8501 # initialize rs1
li x1, 0x47a0c8e2283eed51 # initialize rs2
sll x16, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x25, 0x31ce29f8c01db013 # initialize rs1
li x10, 0x1dfd2ccd57ec0491 # initialize rs2
sll x17, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x15, 0xe70d8ce6364e0d2d # initialize rs1
li x20, 0xf28e76c69eb0dc0b # initialize rs2
sll x18, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0x94c43529c34f3801 # initialize rs1
li x17, 0xd2f14001a6eb9f82 # initialize rs2
sll x19, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x2, 0x29edb3010dd2445f # initialize rs1
li x12, 0x3a03ae8ea15f469e # initialize rs2
sll x20, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x12, 0x583a4d0a4f98de9d # initialize rs1
li x13, 0xd3be1a67bdef4f8d # initialize rs2
sll x21, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x23, 0xd0c76b3d5436bb2f # initialize rs1
li x30, 0xaf55e15cf088af8d # initialize rs2
sll x22, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x7, 0x019fc36f7449f0d5 # initialize rs1
li x14, 0x00c1341b2b1f05b6 # initialize rs2
sll x23, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x11, 0x4af6a2f5226b37d6 # initialize rs1
li x10, 0x7d4037eda19567a3 # initialize rs2
sll x24, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x3, 0xcbce1b0a8fb0e4d2 # initialize rs1
li x10, 0x50f619e1d2bc8e25 # initialize rs2
sll x25, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x30, 0x4d4db47952df6770 # initialize rs1
li x12, 0x74536c462832893a # initialize rs2
sll x26, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x14, 0x002f046b98a010c0 # initialize rs1
li x10, 0x6b66634bb112d172 # initialize rs2
sll x27, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x22, 0x83c8fe55f0a2dfc1 # initialize rs1
li x31, 0x1ce24c2cdff34974 # initialize rs2
sll x28, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x10, 0xe2bfd76d8f1ef2b4 # initialize rs1
li x21, 0x34382aecb4f0f168 # initialize rs2
sll x29, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x19, 0x2ba836ee1cd7b176 # initialize rs1
li x2, 0x5f8ad7f3b3e34045 # initialize rs2
sll x30, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0x09d448220a7f8f47 # initialize rs1
li x15, 0x3c4e012129b50535 # initialize rs2
sll x31, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x0000000000000000 # initialize rs1
li x28, 0x9a0e5610a28d554b # initialize rs2
sll x13, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x19, 0x0000000000000001 # initialize rs1
li x21, 0x8919afe9592256a3 # initialize rs2
sll x18, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x31, 0x0000000000000002 # initialize rs1
li x3, 0xae2a6343fffa9fab # initialize rs2
sll x9, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x25, 0x8000000000000000 # initialize rs1
li x7, 0x9703818255833088 # initialize rs2
sll x22, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x18, 0x8000000000000001 # initialize rs1
li x13, 0x93ea8b9bbc4dd435 # initialize rs2
sll x31, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x31, 0x7fffffffffffffff # initialize rs1
li x26, 0xb8f32603f979cadd # initialize rs2
sll x10, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x3, 0x7ffffffffffffffe # initialize rs1
li x14, 0xdc0c720f6581aa39 # initialize rs2
sll x30, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x15, 0xffffffffffffffff # initialize rs1
li x2, 0x649dd55b13606f4e # initialize rs2
sll x23, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x10, 0xfffffffffffffffe # initialize rs1
li x6, 0x0af81b5efb1b5053 # initialize rs2
sll x14, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5e2bbe6a02d0586d # initialize rs2
sll x3, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x76b966ac50f35596 # initialize rs2
sll x22, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x16, 0x5555555555555555 # initialize rs1
li x12, 0x6543c1866274c0b3 # initialize rs2
sll x3, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x1, 0x00000000ffffffff # initialize rs1
li x12, 0x31d89f12c45c2a01 # initialize rs2
sll x17, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x31, 0x00000000fffffffe # initialize rs1
li x9, 0xa0fa046d1c4510a7 # initialize rs2
sll x13, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x2, 0x0000000100000000 # initialize rs1
li x31, 0x63251a13828b4551 # initialize rs2
sll x7, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x23, 0x0000000100000001 # initialize rs1
li x3, 0xff8704f4edbbff86 # initialize rs2
sll x27, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x18, 0x5627e0ef642ae707 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
sll x7, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x22, 0x0370d5ed4b9a8f48 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
sll x21, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x2, 0x48de64147f9336c0 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sll x6, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x10, 0x5445f1ee25f9b795 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sll x13, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x3, 0x1e39da5a5ba599b5 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sll x24, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x28, 0x0568a6b029fede29 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sll x27, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x20, 0x57dd99018cc94f68 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sll x2, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x2, 0x4ca6f419d706975a # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sll x28, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x29, 0x2e29ab4f988d5599 # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
sll x22, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x15, 0x71ea86a3ac38594e # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sll x18, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x26, 0x3224dd6c0bd15744 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x21, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x2, 0x98d755b79b375df4 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
sll x9, x2, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x3, 0x0f4c16cc73891b3c # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sll x5, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x29, 0xe28c5d976a6fd138 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sll x20, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x29, 0x5a3be3d761da4907 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
sll x23, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x27, 0x2f30204fa576ffa7 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
sll x14, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x24, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
sll x12, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x30, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sll x24, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x11, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sll x2, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x25, 0x0000000000000000 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
sll x10, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x8, 0x0000000000000000 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
sll x18, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x17, 0x0000000000000000 # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
sll x27, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000000000000 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
sll x13, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x8, 0x0000000000000000 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
sll x7, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000000 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
sll x22, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x16, 0x0000000000000000 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
sll x26, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000000000000 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x30, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x2, 0x0000000000000000 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
sll x30, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x28, 0x0000000000000000 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sll x3, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x11, 0x0000000000000000 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sll x22, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x7, 0x0000000000000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sll x15, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x18, 0x0000000000000000 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
sll x11, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x2, 0x0000000000000001 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
sll x16, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x17, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sll x1, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x10, 0x0000000000000001 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
sll x26, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x5, 0x0000000000000001 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
sll x14, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x27, 0x0000000000000001 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
sll x14, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x11, 0x0000000000000001 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
sll x8, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x26, 0x0000000000000001 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
sll x9, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x27, 0x0000000000000001 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
sll x17, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x29, 0x0000000000000001 # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
sll x1, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x25, 0x0000000000000001 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sll x8, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x0000000000000001 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x22, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x16, 0x0000000000000001 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
sll x17, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x31, 0x0000000000000001 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
sll x10, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x3, 0x0000000000000001 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sll x31, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x13, 0x0000000000000001 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
sll x6, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x21, 0x0000000000000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
sll x12, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x21, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
sll x30, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x18, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sll x13, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x16, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
sll x13, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x6, 0x0000000000000002 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
sll x18, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x25, 0x0000000000000002 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sll x11, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x27, 0x0000000000000002 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
sll x1, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x12, 0x0000000000000002 # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
sll x19, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x8, 0x0000000000000002 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
sll x27, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x28, 0x0000000000000002 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
sll x17, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x25, 0x0000000000000002 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
sll x11, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x0000000000000002 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x9, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x21, 0x0000000000000002 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sll x12, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x6, 0x0000000000000002 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
sll x7, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x14, 0x0000000000000002 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
sll x25, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x13, 0x0000000000000002 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
sll x12, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x2, 0x0000000000000002 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
sll x17, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x26, 0x8000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sll x17, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x29, 0x8000000000000000 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sll x16, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x8, 0x8000000000000000 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
sll x13, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x15, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sll x3, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x6, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
sll x3, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x15, 0x8000000000000000 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
sll x24, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x9, 0x8000000000000000 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
sll x5, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x20, 0x8000000000000000 # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
sll x13, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x3, 0x8000000000000000 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
sll x7, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x24, 0x8000000000000000 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
sll x22, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x8000000000000000 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x29, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x20, 0x8000000000000000 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
sll x29, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x9, 0x8000000000000000 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
sll x3, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x12, 0x8000000000000000 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
sll x5, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x6, 0x8000000000000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sll x25, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x28, 0x8000000000000000 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sll x18, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x1, 0x8000000000000001 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
sll x13, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x11, 0x8000000000000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
sll x17, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x20, 0x8000000000000001 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
sll x22, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x2, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sll x24, x2, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x9, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
sll x7, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x26, 0x8000000000000001 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
sll x15, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x19, 0x8000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
sll x11, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x28, 0x8000000000000001 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
sll x7, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x22, 0x8000000000000001 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
sll x3, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x31, 0x8000000000000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
sll x19, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x8000000000000001 # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x6, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x12, 0x8000000000000001 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
sll x27, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x23, 0x8000000000000001 # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
sll x8, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x26, 0x8000000000000001 # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sll x24, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x13, 0x8000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
sll x27, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x13, 0x8000000000000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sll x28, x13, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x10, 0x7fffffffffffffff # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
sll x5, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x2, 0x7fffffffffffffff # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
sll x24, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x12, 0x7fffffffffffffff # initialize rs1
li x11, 0x0000000000000002 # initialize rs2
sll x17, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x19, 0x7fffffffffffffff # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sll x28, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x30, 0x7fffffffffffffff # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
sll x24, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x24, 0x7fffffffffffffff # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
sll x21, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x14, 0x7fffffffffffffff # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sll x8, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x5, 0x7fffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sll x3, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x29, 0x7fffffffffffffff # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
sll x1, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x24, 0x7fffffffffffffff # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
sll x16, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x7fffffffffffffff # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x24, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x17, 0x7fffffffffffffff # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
sll x26, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x21, 0x7fffffffffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
sll x1, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x30, 0x7fffffffffffffff # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sll x25, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x3, 0x7fffffffffffffff # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
sll x12, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x10, 0x7fffffffffffffff # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sll x1, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x29, 0x7ffffffffffffffe # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
sll x16, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x30, 0x7ffffffffffffffe # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sll x10, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x30, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
sll x10, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x13, 0x7ffffffffffffffe # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
sll x9, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x20, 0x7ffffffffffffffe # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
sll x13, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x31, 0x7ffffffffffffffe # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
sll x2, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sll x30, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x23, 0x7ffffffffffffffe # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
sll x16, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x9, 0x7ffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sll x25, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x6, 0x7ffffffffffffffe # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
sll x27, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x7ffffffffffffffe # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x12, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x27, 0x7ffffffffffffffe # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
sll x6, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x21, 0x7ffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sll x12, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x26, 0x7ffffffffffffffe # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sll x29, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x24, 0x7ffffffffffffffe # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sll x25, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x11, 0x7ffffffffffffffe # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
sll x18, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x21, 0xffffffffffffffff # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
sll x29, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x2, 0xffffffffffffffff # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
sll x10, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x2, 0xffffffffffffffff # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
sll x12, x2, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x31, 0xffffffffffffffff # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
sll x16, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x24, 0xffffffffffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sll x29, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x1, 0xffffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sll x12, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x2, 0xffffffffffffffff # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sll x23, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x30, 0xffffffffffffffff # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
sll x25, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sll x19, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x29, 0xffffffffffffffff # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sll x7, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0xffffffffffffffff # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x10, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x21, 0xffffffffffffffff # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
sll x31, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x20, 0xffffffffffffffff # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
sll x23, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x26, 0xffffffffffffffff # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sll x24, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x2, 0xffffffffffffffff # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sll x25, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x1, 0xffffffffffffffff # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
sll x25, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x11, 0xfffffffffffffffe # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
sll x19, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x10, 0xfffffffffffffffe # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
sll x1, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x7, 0xfffffffffffffffe # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
sll x28, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x21, 0xfffffffffffffffe # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
sll x27, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x9, 0xfffffffffffffffe # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
sll x16, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x10, 0xfffffffffffffffe # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
sll x31, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x5, 0xfffffffffffffffe # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
sll x30, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x22, 0xfffffffffffffffe # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
sll x19, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x12, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
sll x19, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x25, 0xfffffffffffffffe # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
sll x30, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0xfffffffffffffffe # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x2, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x28, 0xfffffffffffffffe # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
sll x17, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x11, 0xfffffffffffffffe # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
sll x31, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
sll x25, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x20, 0xfffffffffffffffe # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sll x19, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x27, 0xfffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sll x15, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
sll x17, x28, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
sll x18, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
sll x1, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
sll x21, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sll x16, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
sll x15, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
sll x13, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sll x5, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
sll x9, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
sll x9, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x10, x22, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sll x1, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
sll x16, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
sll x20, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sll x8, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
sll x2, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
sll x26, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
sll x5, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
sll x14, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sll x29, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sll x7, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
sll x31, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sll x17, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
sll x6, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sll x24, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
sll x15, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x26, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sll x1, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
sll x25, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
sll x9, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
sll x26, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
sll x29, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x11, 0x5555555555555555 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sll x14, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x23, 0x5555555555555555 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
sll x10, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x3, 0x5555555555555555 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
sll x24, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x31, 0x5555555555555555 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
sll x27, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x1, 0x5555555555555555 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sll x17, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x6, 0x5555555555555555 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
sll x7, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x16, 0x5555555555555555 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
sll x5, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x12, 0x5555555555555555 # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
sll x16, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x22, 0x5555555555555555 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
sll x17, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x29, 0x5555555555555555 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sll x24, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x5555555555555555 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x10, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x19, 0x5555555555555555 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
sll x28, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x10, 0x5555555555555555 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sll x14, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sll x2, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x23, 0x5555555555555555 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
sll x9, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x28, 0x5555555555555555 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
sll x12, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x11, 0x00000000ffffffff # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
sll x15, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x29, 0x00000000ffffffff # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
sll x6, x29, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x12, 0x00000000ffffffff # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sll x15, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x3, 0x00000000ffffffff # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sll x18, x3, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x15, 0x00000000ffffffff # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
sll x29, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
sll x8, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x22, 0x00000000ffffffff # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
sll x30, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x6, 0x00000000ffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
sll x15, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x17, 0x00000000ffffffff # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
sll x11, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x3, 0x00000000ffffffff # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
sll x24, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x00000000ffffffff # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x1, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x30, 0x00000000ffffffff # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
sll x6, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
sll x19, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x6, 0x00000000ffffffff # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
sll x12, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x28, 0x00000000ffffffff # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sll x19, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x12, 0x00000000ffffffff # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
sll x9, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x29, 0x00000000fffffffe # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
sll x25, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x1, 0x00000000fffffffe # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sll x6, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x29, 0x00000000fffffffe # initialize rs1
li x1, 0x0000000000000002 # initialize rs2
sll x2, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x5, 0x00000000fffffffe # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
sll x7, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x22, 0x00000000fffffffe # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sll x1, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x19, 0x00000000fffffffe # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
sll x23, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x7, 0x00000000fffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
sll x15, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x13, 0x00000000fffffffe # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
sll x24, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x18, 0x00000000fffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
sll x15, x18, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x30, 0x00000000fffffffe # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sll x9, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x00000000fffffffe # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x15, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x22, 0x00000000fffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sll x31, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x5, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
sll x18, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x28, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sll x6, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x27, 0x00000000fffffffe # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
sll x10, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x7, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
sll x30, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x26, 0x0000000100000000 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sll x14, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x22, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sll x9, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x8, 0x0000000100000000 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
sll x31, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x22, 0x0000000100000000 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
sll x16, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x10, 0x0000000100000000 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
sll x16, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x23, 0x0000000100000000 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sll x20, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x10, 0x0000000100000000 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sll x18, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x30, 0x0000000100000000 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
sll x9, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x10, 0x0000000100000000 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
sll x2, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x14, 0x0000000100000000 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sll x26, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x0000000100000000 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x2, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x7, 0x0000000100000000 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sll x28, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x5, 0x0000000100000000 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
sll x24, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x11, 0x0000000100000000 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
sll x22, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x15, 0x0000000100000000 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
sll x28, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x2, 0x0000000100000000 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
sll x28, x2, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x11, 0x0000000100000001 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
sll x22, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x8, 0x0000000100000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sll x17, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x26, 0x0000000100000001 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
sll x16, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x24, 0x0000000100000001 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
sll x18, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x7, 0x0000000100000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sll x29, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x19, 0x0000000100000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sll x13, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x9, 0x0000000100000001 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
sll x10, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x10, 0x0000000100000001 # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
sll x3, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x31, 0x0000000100000001 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
sll x29, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000100000001 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
sll x13, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x0000000100000001 # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
sll x22, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x25, 0x0000000100000001 # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
sll x23, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x17, 0x0000000100000001 # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
sll x3, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x22, 0x0000000100000001 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sll x19, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x25, 0x0000000100000001 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
sll x7, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x23, 0x0000000100000001 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
sll x8, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xa0030e7f38593f0b # initialize rs1
li x0, 0xee51c1c04edfcd44 # initialize rs2
sll x14, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x6988b987ea139575 # initialize rs1
li x1, 0x01b5e6350622cd45 # initialize rs2
sll x14, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x7d01537e76e3bec5 # initialize rs1
li x2, 0xcc03dde939381994 # initialize rs2
sll x7, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xedcf0df4ab379204 # initialize rs1
li x3, 0x5f126dfb8637c917 # initialize rs2
sll x31, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xa5b20b5e85621e16 # initialize rs1
li x4, 0x140f08e7449a9734 # initialize rs2
sll x14, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xeb31db072e44a089 # initialize rs1
li x5, 0x297abdf0940c9f91 # initialize rs2
sll x12, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x12, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe2c70b356a094a30 # initialize rs1
li x6, 0x60bedd7d8c9a2a0b # initialize rs2
sll x12, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbe7f5fc7785c639d # initialize rs1
li x7, 0x369c7a2a35979250 # initialize rs2
sll x1, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xbac5d50eb065b39a # initialize rs1
li x8, 0xd4ffb0d015d00611 # initialize rs2
sll x16, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xf0fb51c74390eb44 # initialize rs1
li x9, 0x9a7e1d6882a9266f # initialize rs2
sll x3, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x83c0a8572c26eed2 # initialize rs1
li x10, 0xa0a7cec569849124 # initialize rs2
sll x14, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x64ed00497212454c # initialize rs1
li x11, 0x1df71a40841bb8e6 # initialize rs2
sll x27, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x034950444bdaed6e # initialize rs1
li x12, 0x0723c53f6fd32b7c # initialize rs2
sll x29, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x217a3cee5677c028 # initialize rs1
li x13, 0xa0b87213a03549bc # initialize rs2
sll x7, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x53cc265c9277d8e8 # initialize rs1
li x14, 0x2b3bef5a8d4d1bbe # initialize rs2
sll x7, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xba6f4b767ea88ce7 # initialize rs1
li x15, 0x1822e6234c0d1402 # initialize rs2
sll x3, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xbb4a120d12e692fd # initialize rs1
li x16, 0xedc90a74a2a5dfc5 # initialize rs2
sll x27, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xd44b8f7c50b4ebba # initialize rs1
li x17, 0x197a53fd2c3ce20f # initialize rs2
sll x26, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x95a3c3f851e3ad24 # initialize rs1
li x18, 0x9dc689e29dde140e # initialize rs2
sll x13, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x346abd08bcb79722 # initialize rs1
li x19, 0xd212b2f7369830cb # initialize rs2
sll x26, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x4deada811c1c6435 # initialize rs1
li x20, 0x79a4618ab2596a4d # initialize rs2
sll x10, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x583a984d3a9a711d # initialize rs1
li x21, 0x3db0714534c57138 # initialize rs2
sll x16, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xcfaabc243e349cd8 # initialize rs1
li x22, 0xa2874e8d093ad062 # initialize rs2
sll x14, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x53f87ce73498b355 # initialize rs1
li x23, 0x0df3b93959477f3b # initialize rs2
sll x26, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xe3bdcfe1cea0abf8 # initialize rs1
li x24, 0x8307f7f83a7f9fd6 # initialize rs2
sll x14, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xc5050c74998da740 # initialize rs1
li x25, 0x2af1ac90a0ea3c2c # initialize rs2
sll x30, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x01eaae348bfe863a # initialize rs1
li x26, 0x603de586ed4d386e # initialize rs2
sll x12, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xdd185d86af2f4a60 # initialize rs1
li x27, 0x81a55422f34d7495 # initialize rs2
sll x22, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xa3161d779674ad93 # initialize rs1
li x28, 0xfb843e477e7af74d # initialize rs2
sll x7, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xaceedbf7b2a6da11 # initialize rs1
li x29, 0xeae6d118d69ff7f5 # initialize rs2
sll x1, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x09df811038685705 # initialize rs1
li x30, 0x38cc36b5d93fee42 # initialize rs2
sll x19, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x5b4a892f30b15245 # initialize rs1
li x31, 0x0b3b5cfa237de4d7 # initialize rs2
sll x3, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x00c4140ec9896b18 # initialize rs1
li x10, 0xd1a0f5a5726b2cac # initialize rs2
sll x0, x0, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x547675eb5c6a5726 # initialize rs1
li x30, 0x87442923ff7b47a8 # initialize rs2
sll x1, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x5e22425e8da3ed36 # initialize rs1
li x15, 0x45b345a5536b6ecc # initialize rs2
sll x2, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x4c40a454cab34f3b # initialize rs1
li x26, 0x37a960a9ed8792a1 # initialize rs2
sll x3, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x789699d8faf92663 # initialize rs1
li x23, 0xcdc5b4c506fe786d # initialize rs2
sll x4, x4, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x239e30b268c57652 # initialize rs1
li x3, 0x6302249ac1c2e8b0 # initialize rs2
sll x5, x5, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x35d1a7f57200bb0f # initialize rs1
li x10, 0xb0d063418341f628 # initialize rs2
sll x6, x6, x10 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbba4d0a1c59fcfa9 # initialize rs1
li x23, 0x33f9896c4229a925 # initialize rs2
sll x7, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x3eb6d4d3c1785be5 # initialize rs1
li x20, 0x54fd5c2a92aeb9ff # initialize rs2
sll x8, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc4dead167c202e3f # initialize rs1
li x17, 0x49ee8ab908f6d1f9 # initialize rs2
sll x9, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x26f5e6e5d4a7b2a8 # initialize rs1
li x19, 0x2e1dbbf13e562329 # initialize rs2
sll x10, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x225a245240a04d8d # initialize rs1
li x28, 0x50fdb5410b660710 # initialize rs2
sll x11, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xfb9b9fcbf44823e5 # initialize rs1
li x20, 0xed51f3986d34b61b # initialize rs2
sll x12, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb6245a58ef106a47 # initialize rs1
li x17, 0x65643495373744e3 # initialize rs2
sll x13, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x000c08b4a9b8eaac # initialize rs1
li x25, 0x9bbbbe539689e5ac # initialize rs2
sll x14, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x08afea7738a9acf5 # initialize rs1
li x27, 0x750e980662a96afe # initialize rs2
sll x15, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xb8836faf34f33a28 # initialize rs1
li x21, 0x8ccdae5f2ca44bf3 # initialize rs2
sll x16, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xeddc70e4a7100827 # initialize rs1
li x26, 0xc03f6c3d7d0ddd6f # initialize rs2
sll x17, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x4028dd76f358985d # initialize rs1
li x28, 0x894255c550d8b822 # initialize rs2
sll x18, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa63342d9203b1452 # initialize rs1
li x30, 0xdc17af52bc0e31fa # initialize rs2
sll x19, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x1c86ecf35d4da553 # initialize rs1
li x8, 0x0a837ac8dff1e5f6 # initialize rs2
sll x20, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x2362b6f367cf4605 # initialize rs1
li x7, 0x0e87bba5fe19335d # initialize rs2
sll x21, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xf9eb7b57a29f67c7 # initialize rs1
li x13, 0x4d0a27e48e737e29 # initialize rs2
sll x22, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x7fa9f186d1dc736a # initialize rs1
li x2, 0x703b6e58e37457b5 # initialize rs2
sll x23, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x2994204f6e02a562 # initialize rs1
li x19, 0xe870049b6637a574 # initialize rs2
sll x24, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xb481720619f511ce # initialize rs1
li x18, 0xb6181646413d3d7d # initialize rs2
sll x25, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x9b7266383bbac6aa # initialize rs1
li x31, 0x083ce7a3b12c2e3b # initialize rs2
sll x26, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x62f9349da77ac746 # initialize rs1
li x17, 0x260b48b7cf8fd05b # initialize rs2
sll x27, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x7cc8931fe8748951 # initialize rs1
li x16, 0xa28c665d733dd46c # initialize rs2
sll x28, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x1bbd43b8f826dec9 # initialize rs1
li x31, 0x7b80102b075b5fe5 # initialize rs2
sll x29, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x13e5a9d10b03a023 # initialize rs1
li x5, 0x7da6d70e0ce066c4 # initialize rs2
sll x30, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x0897b71e980f24eb # initialize rs1
li x23, 0xeb550999d56b2bbd # initialize rs2
sll x31, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x3, 0x17c0d3ffdf7089df # initialize rs1
li x0, 0x73df1280628dfe8b # initialize rs2
sll x0, x3, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x28, 0xb2f3199078ff420c # initialize rs1
li x1, 0xead5ed814a92341d # initialize rs2
sll x1, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x29, 0x13c315d9d271123d # initialize rs1
li x2, 0x5cbfacaae13a98ba # initialize rs2
sll x2, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x24, 0x933dd9fb1cc62331 # initialize rs1
li x3, 0x438cf1cb5e243050 # initialize rs2
sll x3, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0xb95e7f919586085e # initialize rs1
li x4, 0x87a5122821f5dfcd # initialize rs2
sll x4, x9, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0x865a279614901419 # initialize rs1
li x5, 0x42cd6f7798a7dd71 # initialize rs2
sll x5, x22, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0xf5e0461c3f9613a4 # initialize rs1
li x6, 0xe8225e3808b08438 # initialize rs2
sll x6, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0x06e3aa4cf820ecb5 # initialize rs1
li x7, 0x14b504ec8df5dd82 # initialize rs2
sll x7, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x30, 0xe09ce22c16adb995 # initialize rs1
li x8, 0xa2fc670cf56c0aa3 # initialize rs2
sll x8, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x3, 0x01e55cb94f63feee # initialize rs1
li x9, 0x38203c1d9a76ba65 # initialize rs2
sll x9, x3, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x7, 0xfca3fd4345f6cc10 # initialize rs1
li x10, 0x016aa7dd0fcc2d8a # initialize rs2
sll x10, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x18, 0xdde0c7a8de738f41 # initialize rs1
li x11, 0x182602fd98339ac4 # initialize rs2
sll x11, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x8, 0x7d67e41cc6e0f357 # initialize rs1
li x12, 0xd67da18531dc063c # initialize rs2
sll x12, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x10, 0x63fafb9c2da96ae6 # initialize rs1
li x13, 0x1afaf58108104778 # initialize rs2
sll x13, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x18, 0x1b976cddc623d6f9 # initialize rs1
li x14, 0xf26874ce94dfed9d # initialize rs2
sll x14, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x8, 0x278bd8c5147e4ad8 # initialize rs1
li x15, 0x99cf5774ec1091c8 # initialize rs2
sll x15, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x16, 0x1645afd6095d479f # initialize rs1
li x16, 0x1858277ba3f090e4 # initialize rs2
sll x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x5, 0x84e5efd5d0ddab1f # initialize rs1
li x17, 0x6e8bb161c1478048 # initialize rs2
sll x17, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x21, 0x08453b868b4de1b9 # initialize rs1
li x18, 0x0f25ac51dc94799c # initialize rs2
sll x18, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x29, 0x8e6dcf127371e766 # initialize rs1
li x19, 0xeff74f861319a144 # initialize rs2
sll x19, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x3, 0x06139add61284117 # initialize rs1
li x20, 0x7423898622fa280a # initialize rs2
sll x20, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x5, 0x327819b4e84aa256 # initialize rs1
li x21, 0xca1a04cc0921fe60 # initialize rs2
sll x21, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x15, 0xd0dd4e38c70e077e # initialize rs1
li x22, 0x57a4000a6471104e # initialize rs2
sll x22, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x3, 0xa56368aa38602799 # initialize rs1
li x23, 0x661c5dc8c719700e # initialize rs2
sll x23, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x1, 0x78d1293385c5359f # initialize rs1
li x24, 0x16d62b5ff6ace5e0 # initialize rs2
sll x24, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x11, 0xb311e839f565ebd7 # initialize rs1
li x25, 0xc69178d0f6910617 # initialize rs2
sll x25, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x28, 0xdc2d59c04bc7b92c # initialize rs1
li x26, 0x514d7822ff14147b # initialize rs2
sll x26, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x25, 0x824df86f9c1f76fb # initialize rs1
li x27, 0x6ab9c803f9255c06 # initialize rs2
sll x27, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x7, 0xcbae424f68e82b56 # initialize rs1
li x28, 0xd33e2837e9e01060 # initialize rs2
sll x28, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x23, 0x97c91e02d6457b5a # initialize rs1
li x29, 0x2f575b27ed345c04 # initialize rs2
sll x29, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x11, 0x298f081d7ae1335b # initialize rs1
li x30, 0x1f1fd58d66539894 # initialize rs2
sll x30, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x6, 0x1ec0cf5d94f3be42 # initialize rs1
li x31, 0x06f9d76640aeb98a # initialize rs2
sll x31, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xdcdbd2f07435d4ca # initialize rs1
li x0, 0xdfc4c559f2ab5684 # initialize rs2
sll x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x99b3998a3aedf1ea # initialize rs1
li x1, 0xc5c00fff3b345eb3 # initialize rs2
sll x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x020b21ee69fb4660 # initialize rs1
li x2, 0x73de80f954f147c8 # initialize rs2
sll x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xc9d33053217fc7f5 # initialize rs1
li x3, 0xbaad9194aeb725e8 # initialize rs2
sll x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9288d97994b7631f # initialize rs1
li x4, 0x36f0c3c74c08d352 # initialize rs2
sll x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x4982fcce058515e6 # initialize rs1
li x5, 0x51de436321d82f88 # initialize rs2
sll x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xcb6ff3dd3612610f # initialize rs1
li x6, 0xff7c73b6a68051f9 # initialize rs2
sll x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x89f291bcb1f6d1cc # initialize rs1
li x7, 0x4b54c9fabac7c653 # initialize rs2
sll x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xc5351e1e4727cb71 # initialize rs1
li x8, 0xba55878f48b9486d # initialize rs2
sll x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x5d452e0fcec7237a # initialize rs1
li x9, 0x87b5257e60a8d28d # initialize rs2
sll x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xc81eaad0d6d7f47f # initialize rs1
li x10, 0xd82b74de109e50cf # initialize rs2
sll x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x20f6f3fd2c69619d # initialize rs1
li x11, 0x6cd030e14edf0e6f # initialize rs2
sll x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x47ff2d0c5a4149c1 # initialize rs1
li x12, 0x42e19703292da1c1 # initialize rs2
sll x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x4e6b28d0122c3a72 # initialize rs1
li x13, 0x84765186517047d4 # initialize rs2
sll x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x371cc5ea3af60467 # initialize rs1
li x14, 0xc3ba7d21b2f476b8 # initialize rs2
sll x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xf634a01864bed5f1 # initialize rs1
li x15, 0xc8095bcb4ae49b56 # initialize rs2
sll x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x0ea5e69547a4043c # initialize rs1
li x16, 0xca11c6b1f0c9001a # initialize rs2
sll x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x9362b071495051c9 # initialize rs1
li x17, 0xb107b164c8e1f08b # initialize rs2
sll x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x6e08ada4e69d3679 # initialize rs1
li x18, 0x5e667c110b6328ce # initialize rs2
sll x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xfdb07a21f4350950 # initialize rs1
li x19, 0x96f2c6c86776e125 # initialize rs2
sll x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xc58be5d3c21b3452 # initialize rs1
li x20, 0xdf3c7a2e47f1cb7d # initialize rs2
sll x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xedc76bea042b894f # initialize rs1
li x21, 0x448ac8a5ef093b0b # initialize rs2
sll x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x3c2eb8afbb9e81de # initialize rs1
li x22, 0xe1e051a1a941e1fc # initialize rs2
sll x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x8ac07ae41ecb30d5 # initialize rs1
li x23, 0xc07ada6b50fba115 # initialize rs2
sll x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x10846c280fba6d28 # initialize rs1
li x24, 0x7f9c68415d2d76e8 # initialize rs2
sll x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x67e92ad9d300e223 # initialize rs1
li x25, 0x30b54ec1c61d2969 # initialize rs2
sll x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xec6d86760d76208d # initialize rs1
li x26, 0xa2ffb46ee732c316 # initialize rs2
sll x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x3c75008c705f2cd4 # initialize rs1
li x27, 0xd7499fbb115e8146 # initialize rs2
sll x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x5677825d7caf7c5f # initialize rs1
li x28, 0x4acb783daa039f69 # initialize rs2
sll x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x17682ddcb7a471f1 # initialize rs1
li x29, 0xfd9595bb9f80cfa1 # initialize rs2
sll x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xcf27c63364530622 # initialize rs1
li x30, 0xd82c645c531734c0 # initialize rs2
sll x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xac8d593eb8f917f2 # initialize rs1
li x31, 0xacacaf79edd545d3 # initialize rs2
sll x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x7, x8, x15 # perform first operation
sll x29, x19, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x27, x13 # perform first operation
sll x12, x23, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x27, x12 # perform first operation
sll x21, x5, x11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x22, x15, x23 # perform first operation
sll x15, x22, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x14, x30 # perform first operation
sll x14, x22, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x26, x23 # perform first operation
sll x31, x3, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x29, x6 # perform first operation
sll x20, x31, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x15, x7, x1 # perform first operation
sll x15, x29, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x18, x3, x22 # perform first operation
sll x18, x11, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x24, x7 # perform first operation
sll x24, x16, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x15, x30 # perform first operation
sll x30, x7, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x29, x17, x30 # perform first operation
sll x15, x2, x5 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-sltiu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x4eec3a624a1d6ea7 # initialize rs1
sltiu x12, x0, -1352 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5f3e5a463a88e04d # initialize rs1
sltiu x25, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xa8e6e3141c73288e # initialize rs1
sltiu x15, x2, 952 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x2c20fb211be35f09 # initialize rs1
sltiu x15, x3, -1320 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0b8f9dfb6b87f155 # initialize rs1
sltiu x26, x4, 991 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1c41d0b1d0451747 # initialize rs1
sltiu x13, x5, 171 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf4be044bf0653649 # initialize rs1
sltiu x2, x6, -1878 # perform operation
RVTEST_SIGUPD(x7, x0, x2, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb1cf39372fcaa487 # initialize rs1
sltiu x18, x7, -352 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x5dab310407d23495 # initialize rs1
sltiu x12, x8, 602 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xa87c947ee015170d # initialize rs1
sltiu x2, x9, -355 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xc0064fcebcd0c45b # initialize rs1
sltiu x18, x10, -1944 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x545f365519ef1b51 # initialize rs1
sltiu x27, x11, -1908 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x9a01279f47757090 # initialize rs1
sltiu x14, x12, 1704 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x3d398811c6924bb0 # initialize rs1
sltiu x2, x13, 1699 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x73087828cb5c6da2 # initialize rs1
sltiu x26, x14, 1948 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x268a6f8775b72f3b # initialize rs1
sltiu x2, x15, 1431 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xcbae5a44acb5f146 # initialize rs1
sltiu x15, x16, 1702 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x63d98bdfd3f04395 # initialize rs1
sltiu x3, x17, 1969 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x775e28f9cd06ea9c # initialize rs1
sltiu x23, x18, -673 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x9b3eea32f2eb1e53 # initialize rs1
sltiu x23, x19, 756 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xa063f7b36ef67174 # initialize rs1
sltiu x9, x20, -1178 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x41e8c0c8ce1e3012 # initialize rs1
sltiu x20, x21, 1758 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x247a837efc4d7493 # initialize rs1
sltiu x29, x22, 1902 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x493050a04f84a6cc # initialize rs1
sltiu x14, x23, 241 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xca7abd33137fb093 # initialize rs1
sltiu x5, x24, -1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x09d14caf42af31e5 # initialize rs1
sltiu x27, x25, -1281 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xd27c58958b6bb85d # initialize rs1
sltiu x6, x26, -414 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe3bb1ae8bd940c76 # initialize rs1
sltiu x18, x27, 478 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xdda456b6fad3ee04 # initialize rs1
sltiu x3, x28, -235 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x67502ead5c43ef2f # initialize rs1
sltiu x21, x29, -578 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x25f65db204b37dca # initialize rs1
sltiu x16, x30, 679 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x8261f08c091f5951 # initialize rs1
sltiu x8, x31, 2001 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 248)

# Testcase cp_rd (Test destination rd = x0)
li x2, 0x8fbb5d5218815443 # initialize rs1
sltiu x0, x2, -287 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x12, 0x8906d9f5a9813a89 # initialize rs1
sltiu x1, x12, 280 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x9, 0xf7e60c92781d03d2 # initialize rs1
sltiu x2, x9, -867 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x27, 0xec8ac1507c93e6f7 # initialize rs1
sltiu x3, x27, -466 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x17, 0x655d7ec18e2c2b65 # initialize rs1
sltiu x4, x17, 945 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0x324e5425d9b8470f # initialize rs1
sltiu x5, x11, 1450 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0x46afbcb8a9b35f02 # initialize rs1
sltiu x6, x27, -832 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x25, 0x00febce662913ba9 # initialize rs1
sltiu x7, x25, 652 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x8, 0x7917b19d91db169a # initialize rs1
sltiu x8, x8, -1683 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x23, 0xc714340d35acb4c6 # initialize rs1
sltiu x9, x23, -1671 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x18, 0x1e54187ea7932a4e # initialize rs1
sltiu x10, x18, -1320 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x17, 0xd327242864e562ba # initialize rs1
sltiu x11, x17, -1483 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x21, 0x1a63e27b175dca8b # initialize rs1
sltiu x12, x21, 710 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x27, 0xcfdb312630fcef02 # initialize rs1
sltiu x13, x27, -1842 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x6, 0x12d797abb5e57094 # initialize rs1
sltiu x14, x6, -694 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x8, 0xdcfc62b922c4c516 # initialize rs1
sltiu x15, x8, 1368 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x31, 0x5640dfa93d457d27 # initialize rs1
sltiu x16, x31, 1355 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x21, 0xf9686ed1940ec279 # initialize rs1
sltiu x17, x21, 1425 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x24, 0x3ded119a84859b0f # initialize rs1
sltiu x18, x24, 1959 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x30, 0x66165ded7df5b894 # initialize rs1
sltiu x19, x30, -1533 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x24, 0xdcd24faf5198cab6 # initialize rs1
sltiu x20, x24, -1595 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x26, 0x34ca0e1b8f2b962c # initialize rs1
sltiu x21, x26, -570 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x31, 0xf9a610ae87a8fb29 # initialize rs1
sltiu x22, x31, -222 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x16, 0x87e3da0762b72f5a # initialize rs1
sltiu x23, x16, 1513 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x24, 0xf962543576b6181a # initialize rs1
sltiu x24, x24, -1553 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x11, 0x6ccf0aaa549fed3e # initialize rs1
sltiu x25, x11, 1096 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x3, 0x7f79825fdc36abb8 # initialize rs1
sltiu x26, x3, -2004 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x27, 0x740a9ab04214a60d # initialize rs1
sltiu x27, x27, -1441 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x30, 0x42096bf8b884d614 # initialize rs1
sltiu x28, x30, -1442 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x19, 0xa3d570cdcc0a9c0e # initialize rs1
sltiu x29, x19, 1799 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x15, 0xa2adf9d5e0e702be # initialize rs1
sltiu x30, x15, 1073 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x20, 0xb196245aaa628559 # initialize rs1
sltiu x31, x20, 510 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x0000000000000000 # initialize rs1
sltiu x20, x30, 1032 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x2, 0x0000000000000001 # initialize rs1
sltiu x15, x2, 1091 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x16, 0x0000000000000002 # initialize rs1
sltiu x7, x16, -905 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x21, 0x8000000000000000 # initialize rs1
sltiu x23, x21, -315 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
sltiu x21, x28, -946 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x31, 0x7fffffffffffffff # initialize rs1
sltiu x10, x31, 1094 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x6, 0x7ffffffffffffffe # initialize rs1
sltiu x17, x6, -1938 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x16, 0xffffffffffffffff # initialize rs1
sltiu x2, x16, 1353 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
sltiu x7, x29, 1675 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x2, 0x5bbc887763ae86f2 # initialize rs1
sltiu x29, x2, -1560 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x3, x20, -944 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x28, 0x5555555555555555 # initialize rs1
sltiu x13, x28, 558 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x15, 0x00000000ffffffff # initialize rs1
sltiu x25, x15, -1694 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x17, 0x00000000fffffffe # initialize rs1
sltiu x21, x17, -1339 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x7, 0x0000000100000000 # initialize rs1
sltiu x29, x7, 1991 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x23, 0x0000000100000001 # initialize rs1
sltiu x14, x23, -439 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 632)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
sltiu x10, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 640)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
sltiu x10, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 648)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000000 # initialize rs1
sltiu x10, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 656)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000000 # initialize rs1
sltiu x13, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 664)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
sltiu x17, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 672)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
sltiu x30, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 680)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
sltiu x20, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 688)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
sltiu x9, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 696)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000000 # initialize rs1
sltiu x3, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 704)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000000 # initialize rs1
sltiu x14, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 712)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
sltiu x6, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 720)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000000 # initialize rs1
sltiu x18, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 728)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
sltiu x19, x14, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 736)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
sltiu x9, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 744)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000000 # initialize rs1
sltiu x30, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
sltiu x28, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 760)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000000 # initialize rs1
sltiu x30, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 768)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
sltiu x16, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 776)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
sltiu x23, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 784)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
sltiu x31, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 792)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000001 # initialize rs1
sltiu x22, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000001 # initialize rs1
sltiu x24, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 808)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
sltiu x19, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 816)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
sltiu x8, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 824)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000001 # initialize rs1
sltiu x19, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 832)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000001 # initialize rs1
sltiu x11, x15, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 840)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
sltiu x22, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 848)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
sltiu x26, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 856)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
sltiu x31, x6, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 864)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000001 # initialize rs1
sltiu x16, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 872)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000001 # initialize rs1
sltiu x19, x8, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 880)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
sltiu x22, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 888)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000001 # initialize rs1
sltiu x31, x17, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 896)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
sltiu x10, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 904)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000001 # initialize rs1
sltiu x28, x2, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 912)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
sltiu x11, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 920)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
sltiu x10, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 928)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
sltiu x24, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 936)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000001 # initialize rs1
sltiu x1, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 944)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000001 # initialize rs1
sltiu x8, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
sltiu x5, x24, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 960)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
sltiu x9, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 968)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
sltiu x8, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 976)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000002 # initialize rs1
sltiu x11, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 984)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
sltiu x29, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 992)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
sltiu x7, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1000)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000002 # initialize rs1
sltiu x11, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1008)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
sltiu x12, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1016)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
sltiu x21, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1024)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
sltiu x29, x22, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1032)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000002 # initialize rs1
sltiu x13, x18, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1040)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
sltiu x26, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1048)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000002 # initialize rs1
sltiu x6, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1056)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000002 # initialize rs1
sltiu x19, x28, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1064)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
sltiu x23, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1072)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000002 # initialize rs1
sltiu x31, x2, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1080)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
sltiu x6, x15, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1088)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
sltiu x7, x23, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1096)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000002 # initialize rs1
sltiu x30, x10, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1104)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000002 # initialize rs1
sltiu x1, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1112)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
sltiu x26, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1120)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000000 # initialize rs1
sltiu x15, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1128)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000000 # initialize rs1
sltiu x27, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1136)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
sltiu x24, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1144)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
sltiu x15, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1152)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
sltiu x2, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1160)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000000 # initialize rs1
sltiu x17, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1168)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000000 # initialize rs1
sltiu x17, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1176)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
sltiu x25, x18, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1184)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
sltiu x19, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1192)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000000 # initialize rs1
sltiu x5, x25, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1200)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000000 # initialize rs1
sltiu x29, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1208)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000000 # initialize rs1
sltiu x2, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1216)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000000 # initialize rs1
sltiu x10, x9, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
sltiu x10, x1, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1232)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000000 # initialize rs1
sltiu x30, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1240)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
sltiu x1, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1248)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000000 # initialize rs1
sltiu x18, x20, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000000 # initialize rs1
sltiu x7, x26, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1264)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
sltiu x12, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1272)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
sltiu x2, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1280)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
sltiu x15, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1288)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000001 # initialize rs1
sltiu x8, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000001 # initialize rs1
sltiu x1, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1304)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
sltiu x9, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1312)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
sltiu x5, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1320)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
sltiu x25, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1328)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
sltiu x25, x12, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1336)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000001 # initialize rs1
sltiu x16, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1344)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
sltiu x31, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
sltiu x30, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1360)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000001 # initialize rs1
sltiu x1, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1368)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
sltiu x6, x7, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1376)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
sltiu x24, x26, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1384)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
sltiu x16, x12, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1392)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
sltiu x20, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1400)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
sltiu x9, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1408)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
sltiu x15, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1416)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
sltiu x16, x26, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1424)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000001 # initialize rs1
sltiu x5, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1432)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
sltiu x15, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1440)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffffffffffff # initialize rs1
sltiu x24, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1448)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffffffffffff # initialize rs1
sltiu x28, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1456)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffffffffffff # initialize rs1
sltiu x9, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1464)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffffffffffff # initialize rs1
sltiu x25, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1472)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
sltiu x31, x29, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1480)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
sltiu x19, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1488)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffffffffffff # initialize rs1
sltiu x20, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1496)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
sltiu x7, x20, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1504)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
sltiu x23, x29, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1512)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffffffffffff # initialize rs1
sltiu x13, x15, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1520)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
sltiu x29, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1528)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffffffffffff # initialize rs1
sltiu x6, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1536)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
sltiu x16, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1544)

# Testcase cr_rs1_imm_corners
li x11, 0x7fffffffffffffff # initialize rs1
sltiu x6, x11, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1552)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
sltiu x22, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1560)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffffffffffff # initialize rs1
sltiu x11, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1568)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffffffffffff # initialize rs1
sltiu x29, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1576)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffffffffffff # initialize rs1
sltiu x30, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1584)

# Testcase cr_rs1_imm_corners
li x11, 0x7fffffffffffffff # initialize rs1
sltiu x13, x11, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1592)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
sltiu x5, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1600)

# Testcase cr_rs1_imm_corners
li x1, 0x7ffffffffffffffe # initialize rs1
sltiu x7, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1608)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
sltiu x31, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1616)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffffffffffe # initialize rs1
sltiu x24, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1624)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffffffffffe # initialize rs1
sltiu x26, x25, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1632)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
sltiu x21, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1640)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
sltiu x24, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1648)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
sltiu x18, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1656)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
sltiu x28, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1664)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
sltiu x12, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1672)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
sltiu x7, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1680)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
sltiu x19, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1688)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
sltiu x18, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1696)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
sltiu x10, x11, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1704)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffffffffffe # initialize rs1
sltiu x11, x5, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1712)

# Testcase cr_rs1_imm_corners
li x21, 0x7ffffffffffffffe # initialize rs1
sltiu x2, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1720)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
sltiu x16, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1728)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
sltiu x1, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1736)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
sltiu x30, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1744)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffffffffffe # initialize rs1
sltiu x10, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1752)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
sltiu x8, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1760)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffffffffffff # initialize rs1
sltiu x11, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1768)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffffffffffff # initialize rs1
sltiu x3, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1776)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffffffffffff # initialize rs1
sltiu x18, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1784)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffffffffffff # initialize rs1
sltiu x27, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
sltiu x18, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 0)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffffffffffff # initialize rs1
sltiu x31, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 8)

# Testcase cr_rs1_imm_corners
li x15, 0xffffffffffffffff # initialize rs1
sltiu x17, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 16)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
sltiu x22, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 24)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
sltiu x31, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 32)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
sltiu x8, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 40)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
sltiu x18, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 48)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
sltiu x20, x9, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 56)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffffffffffff # initialize rs1
sltiu x27, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 64)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
sltiu x23, x1, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 72)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
sltiu x11, x27, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
sltiu x13, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffffffffffff # initialize rs1
sltiu x3, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
sltiu x6, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 104)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffffffffffff # initialize rs1
sltiu x6, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 112)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffffffffffe # initialize rs1
sltiu x16, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 120)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffffffffffe # initialize rs1
sltiu x16, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 128)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
sltiu x31, x3, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 136)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffffffffffe # initialize rs1
sltiu x28, x8, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 144)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
sltiu x31, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 152)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
sltiu x25, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 160)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
sltiu x30, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 168)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
sltiu x10, x27, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 176)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffffffffffe # initialize rs1
sltiu x9, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cr_rs1_imm_corners
li x9, 0xfffffffffffffffe # initialize rs1
sltiu x24, x9, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 192)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
sltiu x20, x2, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 200)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffffffffffe # initialize rs1
sltiu x31, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 208)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
sltiu x3, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 216)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffffffffffe # initialize rs1
sltiu x2, x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 224)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffffffffffe # initialize rs1
sltiu x28, x21, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 232)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
sltiu x16, x26, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 240)

# Testcase cr_rs1_imm_corners
li x29, 0xfffffffffffffffe # initialize rs1
sltiu x10, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 248)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
sltiu x27, x23, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 256)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
sltiu x14, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 264)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
sltiu x7, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 272)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc887763ae86f2 # initialize rs1
sltiu x6, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 280)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
sltiu x2, x24, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 288)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc887763ae86f2 # initialize rs1
sltiu x5, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 296)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc887763ae86f2 # initialize rs1
sltiu x23, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 304)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc887763ae86f2 # initialize rs1
sltiu x16, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 312)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
sltiu x25, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 320)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
sltiu x5, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 328)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc887763ae86f2 # initialize rs1
sltiu x29, x14, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 336)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc887763ae86f2 # initialize rs1
sltiu x17, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 344)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
sltiu x2, x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 352)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc887763ae86f2 # initialize rs1
sltiu x11, x26, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 360)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc887763ae86f2 # initialize rs1
sltiu x22, x25, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 368)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
sltiu x29, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 376)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
sltiu x7, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 384)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc887763ae86f2 # initialize rs1
sltiu x24, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 392)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
sltiu x10, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 400)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc887763ae86f2 # initialize rs1
sltiu x7, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 408)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
sltiu x25, x20, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 416)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
sltiu x11, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 424)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
sltiu x1, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 432)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x31, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 440)

# Testcase cr_rs1_imm_corners
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x10, x3, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 448)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x10, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 456)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x13, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 464)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x24, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 472)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x30, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x25, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 488)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x14, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 496)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x17, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 504)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x8, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 512)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x23, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 520)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x11, x20, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 528)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x29, x9, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 536)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x10, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 544)

# Testcase cr_rs1_imm_corners
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x27, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 552)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x17, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 560)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x17, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 568)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x21, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 576)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x17, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 584)

# Testcase cr_rs1_imm_corners
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
sltiu x23, x5, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 592)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
sltiu x26, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 600)

# Testcase cr_rs1_imm_corners
li x29, 0x5555555555555555 # initialize rs1
sltiu x9, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 608)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
sltiu x10, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 616)

# Testcase cr_rs1_imm_corners
li x13, 0x5555555555555555 # initialize rs1
sltiu x3, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 624)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
sltiu x21, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 632)

# Testcase cr_rs1_imm_corners
li x7, 0x5555555555555555 # initialize rs1
sltiu x15, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 640)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
sltiu x28, x9, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 648)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
sltiu x16, x27, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 656)

# Testcase cr_rs1_imm_corners
li x25, 0x5555555555555555 # initialize rs1
sltiu x3, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
sltiu x13, x22, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 672)

# Testcase cr_rs1_imm_corners
li x12, 0x5555555555555555 # initialize rs1
sltiu x5, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 680)

# Testcase cr_rs1_imm_corners
li x15, 0x5555555555555555 # initialize rs1
sltiu x5, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 688)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
sltiu x18, x6, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 696)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
sltiu x14, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 704)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
sltiu x18, x6, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 712)

# Testcase cr_rs1_imm_corners
li x30, 0x5555555555555555 # initialize rs1
sltiu x27, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 720)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
sltiu x17, x8, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 728)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
sltiu x9, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 736)

# Testcase cr_rs1_imm_corners
li x17, 0x5555555555555555 # initialize rs1
sltiu x18, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
sltiu x22, x27, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 752)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000ffffffff # initialize rs1
sltiu x8, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 760)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000ffffffff # initialize rs1
sltiu x12, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 768)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000ffffffff # initialize rs1
sltiu x24, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 776)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000ffffffff # initialize rs1
sltiu x13, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 784)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000ffffffff # initialize rs1
sltiu x25, x16, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 792)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000ffffffff # initialize rs1
sltiu x9, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 800)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
sltiu x30, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 808)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000ffffffff # initialize rs1
sltiu x26, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 816)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
sltiu x28, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 824)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000ffffffff # initialize rs1
sltiu x7, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 832)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000ffffffff # initialize rs1
sltiu x10, x2, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 840)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000ffffffff # initialize rs1
sltiu x5, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 848)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
sltiu x5, x17, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 856)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
sltiu x17, x7, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000ffffffff # initialize rs1
sltiu x11, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 872)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000ffffffff # initialize rs1
sltiu x31, x2, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 880)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000ffffffff # initialize rs1
sltiu x14, x9, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 888)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000ffffffff # initialize rs1
sltiu x5, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 896)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000ffffffff # initialize rs1
sltiu x9, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 904)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
sltiu x3, x31, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 912)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000fffffffe # initialize rs1
sltiu x23, x1, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 920)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000fffffffe # initialize rs1
sltiu x5, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 928)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
sltiu x28, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 936)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
sltiu x28, x20, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 944)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000fffffffe # initialize rs1
sltiu x30, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 952)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
sltiu x6, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 960)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000fffffffe # initialize rs1
sltiu x28, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 968)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000fffffffe # initialize rs1
sltiu x18, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 976)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
sltiu x6, x22, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 984)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000fffffffe # initialize rs1
sltiu x2, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 992)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
sltiu x9, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1000)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
sltiu x13, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1008)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
sltiu x30, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1016)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
sltiu x20, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1024)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
sltiu x13, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1032)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000fffffffe # initialize rs1
sltiu x15, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1040)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000fffffffe # initialize rs1
sltiu x16, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1048)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000fffffffe # initialize rs1
sltiu x24, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1056)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
sltiu x27, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1064)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000fffffffe # initialize rs1
sltiu x3, x5, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1072)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
sltiu x28, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1080)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000000 # initialize rs1
sltiu x23, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1088)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
sltiu x2, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1096)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000000 # initialize rs1
sltiu x22, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1104)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
sltiu x28, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1112)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000100000000 # initialize rs1
sltiu x14, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1120)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
sltiu x31, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1128)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
sltiu x23, x24, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1136)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000100000000 # initialize rs1
sltiu x29, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1144)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
sltiu x10, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1152)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000000 # initialize rs1
sltiu x10, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1160)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
sltiu x19, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1168)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000000 # initialize rs1
sltiu x22, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1176)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
sltiu x15, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1184)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
sltiu x6, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1192)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000000 # initialize rs1
sltiu x23, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1200)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
sltiu x26, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1208)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
sltiu x7, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1216)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
sltiu x1, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1224)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000000 # initialize rs1
sltiu x2, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1232)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
sltiu x25, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1240)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000001 # initialize rs1
sltiu x18, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1248)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
sltiu x3, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1256)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000001 # initialize rs1
sltiu x5, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1264)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
sltiu x18, x16, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1272)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000001 # initialize rs1
sltiu x30, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1280)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000001 # initialize rs1
sltiu x3, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1288)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
sltiu x9, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1296)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
sltiu x9, x18, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1304)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
sltiu x25, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1312)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
sltiu x31, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1320)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
sltiu x14, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1328)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000001 # initialize rs1
sltiu x2, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1336)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
sltiu x21, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1344)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
sltiu x2, x12, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1352)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
sltiu x14, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1360)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000001 # initialize rs1
sltiu x26, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000001 # initialize rs1
sltiu x24, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1376)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
sltiu x13, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1384)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000001 # initialize rs1
sltiu x9, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x180f3a8ad91b6375 # initialize rs1
sltiu x0, x0, -563 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x584c2b8bbcafa77a # initialize rs1
sltiu x1, x1, -1071 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xb80623cfb5cffe9a # initialize rs1
sltiu x2, x2, 163 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x34c224eb38b4d223 # initialize rs1
sltiu x3, x3, 1984 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xdb868fe2afe4359d # initialize rs1
sltiu x4, x4, 727 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x80b3469ea1a68d28 # initialize rs1
sltiu x5, x5, -949 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb5f57b87e4274b78 # initialize rs1
sltiu x6, x6, 243 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x63fc6c51d213ac8f # initialize rs1
sltiu x7, x7, 735 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x39db60517162ad7f # initialize rs1
sltiu x8, x8, -1343 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x968e0b114a31849f # initialize rs1
sltiu x9, x9, -664 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xdee4deb23c1ebed9 # initialize rs1
sltiu x10, x10, 1755 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x2e76bb13426e7e3b # initialize rs1
sltiu x11, x11, 1750 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xf5cd3303452c00a2 # initialize rs1
sltiu x12, x12, 1041 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x54103445ae7ec1e3 # initialize rs1
sltiu x13, x13, -1619 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xe480ed150f0c16f8 # initialize rs1
sltiu x14, x14, -168 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xee8db19f8249b619 # initialize rs1
sltiu x15, x15, 1022 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xfc3779330fdfb600 # initialize rs1
sltiu x16, x16, -849 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x31700cd3aa953622 # initialize rs1
sltiu x17, x17, -696 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x162d7bf09d80d215 # initialize rs1
sltiu x18, x18, -1035 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xe5c463e8e31160e7 # initialize rs1
sltiu x19, x19, -1346 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xaf16e022b2d3cdc7 # initialize rs1
sltiu x20, x20, -1310 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x7dcd181511250690 # initialize rs1
sltiu x21, x21, -541 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x243c0f304a3a14ae # initialize rs1
sltiu x22, x22, -1552 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x3d27ac4e1472ae21 # initialize rs1
sltiu x23, x23, -847 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x237690ad3c1c2d72 # initialize rs1
sltiu x24, x24, 1556 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x75772214ed65f3d6 # initialize rs1
sltiu x25, x25, 511 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xe1b5cefeb49d8ab0 # initialize rs1
sltiu x26, x26, -500 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xee49a2ce6b949665 # initialize rs1
sltiu x27, x27, -1806 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x0a522009ebb6ddef # initialize rs1
sltiu x28, x28, -603 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xda69a0b1eaabc1da # initialize rs1
sltiu x29, x29, -1895 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xc126734e9ec66dba # initialize rs1
sltiu x30, x30, -1192 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xde98fb9afea5335b # initialize rs1
sltiu x31, x31, -604 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x21, 0x4cea46e6a717f481 # initialize rs1
sltiu x22, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1656)

# Testcase cp_imm_corners
li x21, 0xedd40ab58fb86687 # initialize rs1
sltiu x3, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1664)

# Testcase cp_imm_corners
li x10, 0x0180aa29142234f7 # initialize rs1
sltiu x17, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1672)

# Testcase cp_imm_corners
li x19, 0x5d52e013b86d1384 # initialize rs1
sltiu x2, x19, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1680)

# Testcase cp_imm_corners
li x24, 0x6ef9ae872f43f2b4 # initialize rs1
sltiu x2, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1688)

# Testcase cp_imm_corners
li x12, 0x16aa2d0c58daedae # initialize rs1
sltiu x11, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1696)

# Testcase cp_imm_corners
li x20, 0x6d52dded7b730c24 # initialize rs1
sltiu x12, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1704)

# Testcase cp_imm_corners
li x8, 0xc7220c19baf7664f # initialize rs1
sltiu x11, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1712)

# Testcase cp_imm_corners
li x30, 0x23094618c63483ba # initialize rs1
sltiu x22, x30, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1720)

# Testcase cp_imm_corners
li x5, 0x5c2ce66981551f8c # initialize rs1
sltiu x12, x5, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1728)

# Testcase cp_imm_corners
li x13, 0x134308af43e7c0c6 # initialize rs1
sltiu x15, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1736)

# Testcase cp_imm_corners
li x30, 0xf561e2fd100f5144 # initialize rs1
sltiu x31, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1744)

# Testcase cp_imm_corners
li x27, 0x2d4826a60a139f43 # initialize rs1
sltiu x18, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1752)

# Testcase cp_imm_corners
li x18, 0x62f4e3adaf1c5a1c # initialize rs1
sltiu x29, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cp_imm_corners
li x2, 0xed2ed26e25890c6c # initialize rs1
sltiu x19, x2, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1768)

# Testcase cp_imm_corners
li x6, 0xe254f900b2df20b9 # initialize rs1
sltiu x21, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1776)

# Testcase cp_imm_corners
li x12, 0xb2daca67ab3aef13 # initialize rs1
sltiu x31, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1784)

# Testcase cp_imm_corners
li x6, 0xe7df4e802ad33cb9 # initialize rs1
sltiu x25, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x16, 0xa50029fa0d7ced51 # initialize rs1
sltiu x21, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 0)

# Testcase cp_imm_corners
li x31, 0xebe76474cfbb0c1c # initialize rs1
sltiu x5, x31, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x30, x5 # perform first operation
sltiu x31, x3, -1735 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x19, x1 # perform first operation
sltiu x30, x18, -1606 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x5, x3 # perform first operation
sltiu x9, x10, 2042 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x6, x2, x8 # perform first operation
sltiu x25, x21, 1188 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x16, x28 # perform first operation
sltiu x28, x16, 1203 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x28, x18 # perform first operation
sltiu x22, x31, -1821 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x27, x21 # perform first operation
sltiu x7, x15, -1946 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x25, x11, x22 # perform first operation
sltiu x25, x17, 405 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x26, x23 # perform first operation
sltiu x20, x7, -1924 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x26, x18, x14 # perform first operation
sltiu x18, x6, -1635 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x3, x12 # perform first operation
sltiu x12, x17, -858 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x27, x30 # perform first operation
sltiu x24, x1, -314 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-subw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xab1e0b5131da964c # initialize rs1
li x24, 0xf09c310a13626cb2 # initialize rs2
subw x12, x0, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x9ef459541f20c3a2 # initialize rs1
li x31, 0xc47db4b33c97c7fe # initialize rs2
subw x11, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xe47da0cd4bbb8d2d # initialize rs1
li x22, 0x25cd12b7eef5ce43 # initialize rs2
subw x16, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x48812637a9941a5b # initialize rs1
li x25, 0x1194d34b6d42eb9f # initialize rs2
subw x13, x3, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x380f7edb37bd76a4 # initialize rs1
li x1, 0x94bf843711371222 # initialize rs2
subw x21, x4, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xf33b09ea79ff3b9d # initialize rs1
li x11, 0xa8e6eefcfbd5ec62 # initialize rs2
subw x13, x5, x11 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb6485956bb8f8212 # initialize rs1
li x17, 0x369c318149dc7c8a # initialize rs2
subw x27, x6, x17 # perform operation
RVTEST_SIGUPD(x7, x0, x27, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa328ea2b215349fe # initialize rs1
li x19, 0x2bc540569a328d0c # initialize rs2
subw x23, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x960d81c99a17b277 # initialize rs1
li x6, 0x95d6060ee5eef844 # initialize rs2
subw x23, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xa2418e873e60bc90 # initialize rs1
li x2, 0x2655d51fc9fc00d4 # initialize rs2
subw x18, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x3c621bfb648cadd7 # initialize rs1
li x18, 0x9296f9951de63a64 # initialize rs2
subw x11, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xa060ad15229e3eb8 # initialize rs1
li x18, 0x8f87f491b8e53fcb # initialize rs2
subw x14, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x85e7f5c4eb18dd5f # initialize rs1
li x7, 0xf6c86db9a7e94170 # initialize rs2
subw x27, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x3804efc1f431f37c # initialize rs1
li x7, 0xbe087acfe8c74158 # initialize rs2
subw x6, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x7d06a1ce8251901f # initialize rs1
li x20, 0xce2814961467dc67 # initialize rs2
subw x8, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x539d332120e07e8b # initialize rs1
li x29, 0x82dac52e7299e85d # initialize rs2
subw x23, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xc4ee922992e23962 # initialize rs1
li x7, 0x35bd0d1a566291a8 # initialize rs2
subw x9, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x1406edd15b322520 # initialize rs1
li x2, 0x05dd62a34d07f5a2 # initialize rs2
subw x29, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x6af864f077bdb1c2 # initialize rs1
li x28, 0xe463f5264e13b576 # initialize rs2
subw x10, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x4a5916e9642d09e0 # initialize rs1
li x29, 0xe947d7c97a97419a # initialize rs2
subw x15, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x13a6adf9ee3559ed # initialize rs1
li x10, 0x65dc3b86cb300da0 # initialize rs2
subw x3, x20, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xaca3c75e02be9a13 # initialize rs1
li x1, 0x71c77792eb899267 # initialize rs2
subw x29, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x3d35f4a968731797 # initialize rs1
li x9, 0xc5d63f50ee6c5af2 # initialize rs2
subw x25, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xcab2de33b61b748a # initialize rs1
li x7, 0x9c715e5bbda64c26 # initialize rs2
subw x13, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xa6a0f804c8ca98ad # initialize rs1
li x30, 0xb314d22f061105d5 # initialize rs2
subw x20, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xad74ae5c908c6927 # initialize rs1
li x8, 0x4a5cda62e0f9f65f # initialize rs2
subw x3, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xd763cf8cc784c679 # initialize rs1
li x1, 0xfcaf4860086554e1 # initialize rs2
subw x10, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x7a50cc4ae63c510e # initialize rs1
li x7, 0x292cb437f1f0cb0c # initialize rs2
subw x6, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x11351d2ce311f8da # initialize rs1
li x2, 0x75b3a670254c9dd2 # initialize rs2
subw x5, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xfdca18ad4d6ac81f # initialize rs1
li x2, 0x5bf60acc9eb917cd # initialize rs2
subw x10, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xab170a6bd14d9e24 # initialize rs1
li x18, 0x71dda1227f53c4c8 # initialize rs2
subw x19, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xb65f89a652cac087 # initialize rs1
li x27, 0xd6c1aaffdc0317b7 # initialize rs2
subw x23, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x30, 0x6a8d9d2c50e2b041 # initialize rs1
li x0, 0x98838740c9a8192d # initialize rs2
subw x16, x30, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x30, 0xe5dde2ba28fbded3 # initialize rs1
li x1, 0x630ddb0df33fc182 # initialize rs2
subw x6, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x20, 0xe7af5ebddeaa8e1b # initialize rs1
li x2, 0x5b6f473d89bfbabf # initialize rs2
subw x6, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x11, 0x1cd18d1066cbc28e # initialize rs1
li x3, 0xeff5506fd60796ce # initialize rs2
subw x6, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0x75164402ebf555ed # initialize rs1
li x4, 0x918ace7bb088cee4 # initialize rs2
subw x12, x27, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x18, 0xf62bfa66436533bf # initialize rs1
li x5, 0xa6842f06cd7069ec # initialize rs2
subw x26, x18, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x26, 0x74a4bea5df1ce0a6 # initialize rs1
li x6, 0x600ef1d6e1933747 # initialize rs2
subw x31, x26, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x31, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0xd235420260edcd7a # initialize rs1
li x7, 0xa294774614a6b5ef # initialize rs2
subw x12, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x26, 0x12c9c23c2e63ba63 # initialize rs1
li x8, 0x2460f123a8f3a54a # initialize rs2
subw x31, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x24, 0x717283298f294fb1 # initialize rs1
li x9, 0x21ef59cb4c0ccead # initialize rs2
subw x16, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x31, 0x9175b048912ca909 # initialize rs1
li x10, 0x65a98bff1948945e # initialize rs2
subw x7, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x19, 0x5ad77cfce9a70108 # initialize rs1
li x11, 0xf3dfb810b7b1351d # initialize rs2
subw x18, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x6, 0x1138b56021904303 # initialize rs1
li x12, 0xde2041d3b0c36729 # initialize rs2
subw x23, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x23, 0xef73cbaedbcfeba3 # initialize rs1
li x13, 0xe38b198135385113 # initialize rs2
subw x22, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x3, 0x69a7c0423ea3c9f3 # initialize rs1
li x14, 0x390ba5dd336faf4a # initialize rs2
subw x24, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x23, 0xd85d97a279a85e6c # initialize rs1
li x15, 0xb6868a04efccc37f # initialize rs2
subw x28, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x6, 0x5efdce91974b1a01 # initialize rs1
li x16, 0xb1d82c0e5eab4a0c # initialize rs2
subw x14, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x28, 0x98c2f26fd9e71c33 # initialize rs1
li x17, 0x6ead7b8da7cebc0c # initialize rs2
subw x24, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x31, 0xe424a17617524fac # initialize rs1
li x18, 0x8ddc3b7ee553f4b9 # initialize rs2
subw x9, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x11, 0x7f7e8d873d4e1b37 # initialize rs1
li x19, 0x81c3c3f9fec4dd9a # initialize rs2
subw x10, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x22, 0xb0475586f0f09e6d # initialize rs1
li x20, 0x680d9b8177cc247d # initialize rs2
subw x24, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x22, 0x161f4b4aef59c78c # initialize rs1
li x21, 0x2a00ffe06d7b69ca # initialize rs2
subw x27, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x24, 0xcd3e682daa9dee72 # initialize rs1
li x22, 0x16da040a6e461cd0 # initialize rs2
subw x5, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x14, 0x19d91e4a404d22ca # initialize rs1
li x23, 0xf3a64a6382f3b79c # initialize rs2
subw x3, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x25, 0xc689acea5067164b # initialize rs1
li x24, 0x608d83da5e64d860 # initialize rs2
subw x31, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x8, 0xfe3632d1df5b642e # initialize rs1
li x25, 0x3145dc29d2aef9bc # initialize rs2
subw x15, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x22, 0x6a070213285d8ecf # initialize rs1
li x26, 0x76313ad17e7859c2 # initialize rs2
subw x24, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x20, 0x886b8a185a6057c0 # initialize rs1
li x27, 0x53d7327e541ce4b3 # initialize rs2
subw x18, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x26, 0x67db101cfb3f6ca1 # initialize rs1
li x28, 0x44d9d3f4e26c7e1c # initialize rs2
subw x11, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x28, 0xd7ac5065db286b04 # initialize rs1
li x29, 0x6334e6692e0de57c # initialize rs2
subw x11, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x26, 0x1cf2524a5fa8aa57 # initialize rs1
li x30, 0x63242714a544cf80 # initialize rs2
subw x27, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x26, 0xa8f6e376fec3c2c3 # initialize rs1
li x31, 0x345c48d6752648ff # initialize rs2
subw x9, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 504)

# Testcase cp_rd (Test destination rd = x0)
li x24, 0x2cf22cf9c527e90e # initialize rs1
li x20, 0x20fcbde656bdedaa # initialize rs2
subw x0, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x8, 0x915956f93f002200 # initialize rs1
li x27, 0xec1f2a92bedcfcc3 # initialize rs2
subw x1, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x12, 0xe75c1fc266417fd3 # initialize rs1
li x6, 0xbb14e56f55f23035 # initialize rs2
subw x2, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x8, 0xd78dbf38e2584ad5 # initialize rs1
li x27, 0x572974bfcfcb05d6 # initialize rs2
subw x3, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0x4b183533b05b2a56 # initialize rs1
li x22, 0xbe8369beb4b54ac0 # initialize rs2
subw x4, x10, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0xb42c0b073283bc99 # initialize rs1
li x25, 0x82ef2c1e3478a104 # initialize rs2
subw x5, x3, x25 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x4495a2f59c5a921a # initialize rs1
li x22, 0x29217013a429c5e1 # initialize rs2
subw x6, x24, x22 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x20, 0xaaa5a974e8bf38d7 # initialize rs1
li x31, 0xceb658a5ee75032f # initialize rs2
subw x7, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x12, 0x79301397ea0bf185 # initialize rs1
li x10, 0xaf462c137de051ef # initialize rs2
subw x8, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x24, 0xe3d9ad46a660bab1 # initialize rs1
li x29, 0x61c166801a48e854 # initialize rs2
subw x9, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x27, 0x82387b5ac7d2b5d0 # initialize rs1
li x25, 0xd0050d655ac38091 # initialize rs2
subw x10, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x30, 0x577dc8b45b948d6e # initialize rs1
li x5, 0xf7855a26cddaac30 # initialize rs2
subw x11, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x28, 0xeadfbc6a935a72c3 # initialize rs1
li x3, 0xce31614cd3a42601 # initialize rs2
subw x12, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x22, 0x65485ec55db7da11 # initialize rs1
li x15, 0x5a7de2efa95a1ea3 # initialize rs2
subw x13, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x28, 0xf655ffecd8237e1d # initialize rs1
li x2, 0xfa744f07f5869543 # initialize rs2
subw x14, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x8, 0xdb332dc774c63eb8 # initialize rs1
li x29, 0x498e51c7f514cfb9 # initialize rs2
subw x15, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x22, 0xbd02d98f30b7f1b4 # initialize rs1
li x31, 0x4e9c768942b40d0d # initialize rs2
subw x16, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x24, 0x65babb34e00d8ae1 # initialize rs1
li x3, 0x04816659499d9da4 # initialize rs2
subw x17, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x9, 0x6fa67752edc110ae # initialize rs1
li x2, 0xab336d73c5a3a08f # initialize rs2
subw x18, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x11, 0x9618c5c7695e1b80 # initialize rs1
li x24, 0x0ccd19241889dfa4 # initialize rs2
subw x19, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x8, 0xae788f8e61db961c # initialize rs1
li x1, 0xcf9677a72f2ad115 # initialize rs2
subw x20, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x15, 0x18e5f77d4a1ea492 # initialize rs1
li x28, 0x5b265bee6634a6b3 # initialize rs2
subw x21, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x16, 0xe1e193c553e8bb7b # initialize rs1
li x30, 0xeeda193f9c56a0e2 # initialize rs2
subw x22, x16, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x17, 0x13ed7e7276b5b4bc # initialize rs1
li x21, 0x395117f760643f96 # initialize rs2
subw x23, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0xa31868f52f5ab543 # initialize rs1
li x7, 0x8f08a9ea3fdb892b # initialize rs2
subw x24, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x27, 0x33a112c6b14e2bd9 # initialize rs1
li x28, 0x48bf2404a4ddbd74 # initialize rs2
subw x25, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x29, 0xc106363f7e4b1ec9 # initialize rs1
li x23, 0xb7b68f55cca8e0ac # initialize rs2
subw x26, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x14, 0x6fd0621a4485bd88 # initialize rs1
li x1, 0x6b8da568c2349fc0 # initialize rs2
subw x27, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x30, 0x2aee4ca69fac26f3 # initialize rs1
li x3, 0x7e91b5cc6ad73ac6 # initialize rs2
subw x28, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0x4a6919d18cf88c76 # initialize rs1
li x13, 0x648602d37962c056 # initialize rs2
subw x29, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x30, 0x56ba87a83a246284 # initialize rs1
li x29, 0xe8a064eeaf5183df # initialize rs2
subw x30, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x18, 0x3f9bf2c5c81c7f7d # initialize rs1
li x26, 0x02ed82c573c204f8 # initialize rs2
subw x31, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x1, 0x0000000000000000 # initialize rs1
li x30, 0x6bec3c2ef74990e2 # initialize rs2
subw x14, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x31, 0x0000000000000001 # initialize rs1
li x11, 0x24eb64a8ee705023 # initialize rs2
subw x28, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x11, 0x0000000000000002 # initialize rs1
li x14, 0x04bf5a3b86d9aa8f # initialize rs2
subw x13, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x26, 0x8000000000000000 # initialize rs1
li x19, 0x33b59b1e912418fa # initialize rs2
subw x1, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x1, 0x8000000000000001 # initialize rs1
li x14, 0x711bf29013279308 # initialize rs2
subw x7, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x3, 0x7fffffffffffffff # initialize rs1
li x15, 0x22dc29e60e6e8071 # initialize rs2
subw x10, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x30, 0x7ffffffffffffffe # initialize rs1
li x16, 0xd1192f78c162dc89 # initialize rs2
subw x5, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x12, 0xffffffffffffffff # initialize rs1
li x14, 0xaee0634813770b2c # initialize rs2
subw x18, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x15, 0xfffffffffffffffe # initialize rs1
li x26, 0x3560c04c28a952d4 # initialize rs2
subw x29, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x58c644871ccf416c # initialize rs2
subw x11, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x7c6453b70567b8e7 # initialize rs2
subw x26, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x1, 0x5555555555555555 # initialize rs1
li x13, 0xfcefe08bc1806f3a # initialize rs2
subw x5, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x14, 0x00000000ffffffff # initialize rs1
li x18, 0x154126856a63f21c # initialize rs2
subw x13, x14, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x20, 0x00000000fffffffe # initialize rs1
li x21, 0xeb409cde5a96357c # initialize rs2
subw x19, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x24, 0x0000000100000000 # initialize rs1
li x28, 0xb4deee533bc431c6 # initialize rs2
subw x27, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x10, 0x0000000100000001 # initialize rs1
li x17, 0xdeb5a4fbb267abfb # initialize rs2
subw x20, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x20, 0xcbe4cd1a2be492eb # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
subw x28, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0x6bee8063199941de # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
subw x2, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x25, 0xeeed1d5658057132 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
subw x26, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x16, 0xb3e6d5409565ee3c # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
subw x19, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x5, 0xb01e78ccb99134ae # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
subw x31, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x15, 0x7d6049af86d269e7 # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
subw x24, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x2, 0x2348cff075b7963c # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
subw x18, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x16, 0xc7c9f725bd2ea877 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
subw x31, x16, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x9, 0x6ce4c668c2dd66f9 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
subw x19, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x27, 0x805d2f0faa3d04d4 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
subw x8, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x19, 0x003af7585a2c3e5a # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x26, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x21, 0x71543767f59ffb17 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
subw x27, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x30, 0xb39da863ed3a1389 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
subw x24, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x14, 0x75d2d284bcaf47a2 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
subw x29, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x25, 0xd0e3baf379bf5276 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
subw x2, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x29, 0x01842d058f28ec18 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
subw x26, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x30, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
subw x13, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x7, 0x0000000000000000 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
subw x18, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x10, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
subw x7, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x12, 0x0000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
subw x6, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x21, 0x0000000000000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
subw x3, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x9, 0x0000000000000000 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
subw x7, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x31, 0x0000000000000000 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
subw x8, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x7, 0x0000000000000000 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
subw x15, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x20, 0x0000000000000000 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
subw x13, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x8, 0x0000000000000000 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
subw x2, x8, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x0000000000000000 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x13, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x18, 0x0000000000000000 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
subw x8, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x20, 0x0000000000000000 # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
subw x24, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x22, 0x0000000000000000 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
subw x16, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x23, 0x0000000000000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
subw x2, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x6, 0x0000000000000000 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
subw x21, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x21, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
subw x3, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x1, 0x0000000000000001 # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
subw x16, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x28, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
subw x15, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x31, 0x0000000000000001 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
subw x8, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x7, 0x0000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
subw x10, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
subw x12, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x24, 0x0000000000000001 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
subw x16, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x25, 0x0000000000000001 # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
subw x5, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000000000001 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
subw x27, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x21, 0x0000000000000001 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
subw x15, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x0000000000000001 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x27, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x26, 0x0000000000000001 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
subw x18, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x5, 0x0000000000000001 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
subw x30, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x14, 0x0000000000000001 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
subw x26, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x7, 0x0000000000000001 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
subw x23, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x22, 0x0000000000000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
subw x12, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x30, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
subw x19, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x8, 0x0000000000000002 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
subw x10, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x28, 0x0000000000000002 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
subw x22, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x23, 0x0000000000000002 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
subw x7, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x5, 0x0000000000000002 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
subw x12, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000000000002 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
subw x18, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x7, 0x0000000000000002 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
subw x20, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x17, 0x0000000000000002 # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
subw x24, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x31, 0x0000000000000002 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
subw x22, x31, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x15, 0x0000000000000002 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
subw x5, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x0000000000000002 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x30, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x29, 0x0000000000000002 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
subw x22, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x14, 0x0000000000000002 # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
subw x7, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x21, 0x0000000000000002 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
subw x7, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x6, 0x0000000000000002 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
subw x26, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x9, 0x0000000000000002 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
subw x27, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x9, 0x8000000000000000 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
subw x12, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x15, 0x8000000000000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
subw x2, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x19, 0x8000000000000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
subw x2, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x25, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
subw x17, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x26, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
subw x13, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x16, 0x8000000000000000 # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
subw x10, x16, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x23, 0x8000000000000000 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
subw x24, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x15, 0x8000000000000000 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
subw x5, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x3, 0x8000000000000000 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
subw x12, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x5, 0x8000000000000000 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
subw x10, x5, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x8000000000000000 # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x18, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x18, 0x8000000000000000 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
subw x11, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x2, 0x8000000000000000 # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
subw x11, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x3, 0x8000000000000000 # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
subw x29, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x8, 0x8000000000000000 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
subw x6, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x15, 0x8000000000000000 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
subw x12, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x27, 0x8000000000000001 # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
subw x31, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x30, 0x8000000000000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
subw x18, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x7, 0x8000000000000001 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
subw x27, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x20, 0x8000000000000001 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
subw x16, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x25, 0x8000000000000001 # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
subw x21, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x18, 0x8000000000000001 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
subw x20, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x10, 0x8000000000000001 # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
subw x31, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x8, 0x8000000000000001 # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
subw x27, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x12, 0x8000000000000001 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
subw x17, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x31, 0x8000000000000001 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
subw x26, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x8000000000000001 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x2, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x11, 0x8000000000000001 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
subw x2, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x13, 0x8000000000000001 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
subw x20, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x19, 0x8000000000000001 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
subw x28, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x13, 0x8000000000000001 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
subw x1, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x10, 0x8000000000000001 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
subw x17, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x29, 0x7fffffffffffffff # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
subw x16, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x13, 0x7fffffffffffffff # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
subw x10, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x25, 0x7fffffffffffffff # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
subw x17, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x19, 0x7fffffffffffffff # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
subw x23, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x8, 0x7fffffffffffffff # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
subw x28, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x18, 0x7fffffffffffffff # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
subw x2, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x29, 0x7fffffffffffffff # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
subw x30, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
subw x10, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x31, 0x7fffffffffffffff # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
subw x19, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x2, 0x7fffffffffffffff # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
subw x17, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x7fffffffffffffff # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x8, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x19, 0x7fffffffffffffff # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
subw x26, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x15, 0x7fffffffffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
subw x9, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x22, 0x7fffffffffffffff # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
subw x23, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x9, 0x7fffffffffffffff # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
subw x16, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x12, 0x7fffffffffffffff # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
subw x25, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x13, 0x7ffffffffffffffe # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
subw x27, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x15, 0x7ffffffffffffffe # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
subw x25, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x2, 0x7ffffffffffffffe # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
subw x29, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x23, 0x7ffffffffffffffe # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
subw x24, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x2, 0x7ffffffffffffffe # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
subw x15, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x3, 0x7ffffffffffffffe # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
subw x30, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x24, 0x7ffffffffffffffe # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
subw x5, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x1, 0x7ffffffffffffffe # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
subw x25, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x26, 0x7ffffffffffffffe # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
subw x27, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x31, 0x7ffffffffffffffe # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
subw x1, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x7ffffffffffffffe # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x19, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x31, 0x7ffffffffffffffe # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
subw x19, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x15, 0x7ffffffffffffffe # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
subw x31, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x23, 0x7ffffffffffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
subw x27, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x28, 0x7ffffffffffffffe # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
subw x26, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x14, 0x7ffffffffffffffe # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
subw x23, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x30, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
subw x7, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x15, 0xffffffffffffffff # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
subw x24, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x29, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
subw x5, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x30, 0xffffffffffffffff # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
subw x15, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x1, 0xffffffffffffffff # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
subw x8, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x9, 0xffffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
subw x5, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x28, 0xffffffffffffffff # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
subw x25, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x16, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
subw x19, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
subw x11, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x25, 0xffffffffffffffff # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
subw x12, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x12, 0xffffffffffffffff # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x19, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x15, 0xffffffffffffffff # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
subw x17, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x8, 0xffffffffffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
subw x3, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x28, 0xffffffffffffffff # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
subw x13, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x23, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
subw x20, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x16, 0xffffffffffffffff # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
subw x25, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x25, 0xfffffffffffffffe # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
subw x15, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x7, 0xfffffffffffffffe # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
subw x18, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x26, 0xfffffffffffffffe # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
subw x3, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x13, 0xfffffffffffffffe # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
subw x12, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x31, 0xfffffffffffffffe # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
subw x2, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x2, 0xfffffffffffffffe # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
subw x26, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x2, 0xfffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
subw x28, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x23, 0xfffffffffffffffe # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
subw x17, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x31, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
subw x13, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x28, 0xfffffffffffffffe # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
subw x9, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0xfffffffffffffffe # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x29, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x30, 0xfffffffffffffffe # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
subw x28, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x23, 0xfffffffffffffffe # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
subw x7, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
subw x7, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x28, 0xfffffffffffffffe # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
subw x15, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x21, 0xfffffffffffffffe # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
subw x29, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
subw x29, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
subw x9, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
subw x18, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
subw x17, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
subw x3, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
subw x10, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
subw x9, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
subw x6, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
subw x11, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
subw x13, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x5, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
subw x15, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
subw x3, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
subw x27, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
subw x19, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
subw x16, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
subw x25, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
subw x30, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
subw x9, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
subw x15, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
subw x19, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
subw x29, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
subw x14, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
subw x16, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
subw x1, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
subw x22, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x20, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
subw x2, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
subw x14, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
subw x2, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
subw x26, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
subw x15, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x28, 0x5555555555555555 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
subw x21, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x31, 0x5555555555555555 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
subw x5, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x9, 0x5555555555555555 # initialize rs1
li x11, 0x0000000000000002 # initialize rs2
subw x16, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x23, 0x5555555555555555 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
subw x8, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x31, 0x5555555555555555 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
subw x11, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x22, 0x5555555555555555 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
subw x11, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x3, 0x5555555555555555 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
subw x28, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x10, 0x5555555555555555 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
subw x26, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x13, 0x5555555555555555 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
subw x23, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x23, 0x5555555555555555 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
subw x17, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x5555555555555555 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x24, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x2, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
subw x27, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x20, 0x5555555555555555 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
subw x2, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x30, 0x5555555555555555 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
subw x28, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x22, 0x5555555555555555 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
subw x18, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x27, 0x5555555555555555 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
subw x18, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x7, 0x00000000ffffffff # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
subw x30, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x18, 0x00000000ffffffff # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
subw x24, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x13, 0x00000000ffffffff # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
subw x7, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x6, 0x00000000ffffffff # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
subw x31, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x13, 0x00000000ffffffff # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
subw x3, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
subw x23, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x1, 0x00000000ffffffff # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
subw x31, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x29, 0x00000000ffffffff # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
subw x3, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x15, 0x00000000ffffffff # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
subw x12, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x28, 0x00000000ffffffff # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
subw x14, x28, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x00000000ffffffff # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x24, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x7, 0x00000000ffffffff # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
subw x20, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x28, 0x00000000ffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
subw x11, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x9, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
subw x18, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x1, 0x00000000ffffffff # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
subw x15, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x7, 0x00000000ffffffff # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
subw x21, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x30, 0x00000000fffffffe # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
subw x26, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x16, 0x00000000fffffffe # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
subw x26, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x22, 0x00000000fffffffe # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
subw x30, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x6, 0x00000000fffffffe # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
subw x23, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x5, 0x00000000fffffffe # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
subw x26, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x18, 0x00000000fffffffe # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
subw x8, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x23, 0x00000000fffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
subw x3, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x2, 0x00000000fffffffe # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
subw x16, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x9, 0x00000000fffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
subw x15, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x30, 0x00000000fffffffe # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
subw x20, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x00000000fffffffe # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x13, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x29, 0x00000000fffffffe # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
subw x23, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x19, 0x00000000fffffffe # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
subw x24, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x1, 0x00000000fffffffe # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
subw x8, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x8, 0x00000000fffffffe # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
subw x11, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x18, 0x00000000fffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
subw x20, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x21, 0x0000000100000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
subw x24, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x26, 0x0000000100000000 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
subw x10, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x30, 0x0000000100000000 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
subw x19, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x23, 0x0000000100000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
subw x25, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x18, 0x0000000100000000 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
subw x24, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x17, 0x0000000100000000 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
subw x6, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x11, 0x0000000100000000 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
subw x21, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x6, 0x0000000100000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
subw x18, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000000 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
subw x17, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x17, 0x0000000100000000 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
subw x21, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000100000000 # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x10, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x27, 0x0000000100000000 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
subw x20, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x8, 0x0000000100000000 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
subw x17, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x28, 0x0000000100000000 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
subw x8, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x14, 0x0000000100000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
subw x25, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x21, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
subw x13, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x14, 0x0000000100000001 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
subw x23, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x22, 0x0000000100000001 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
subw x9, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x22, 0x0000000100000001 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
subw x27, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x20, 0x0000000100000001 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
subw x3, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x23, 0x0000000100000001 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
subw x24, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x19, 0x0000000100000001 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
subw x20, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000001 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
subw x17, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x1, 0x0000000100000001 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
subw x27, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x30, 0x0000000100000001 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
subw x8, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x25, 0x0000000100000001 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
subw x1, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000100000001 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
subw x16, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x15, 0x0000000100000001 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
subw x12, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x24, 0x0000000100000001 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
subw x27, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x20, 0x0000000100000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
subw x25, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x20, 0x0000000100000001 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
subw x22, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x1, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
subw x3, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xe7bc9e7dabe9bf62 # initialize rs1
li x0, 0xaf74a929014683cb # initialize rs2
subw x29, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x1cbe0f0083bfcc1b # initialize rs1
li x1, 0x98089d034e29ab23 # initialize rs2
subw x24, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xc2673e47e5643866 # initialize rs1
li x2, 0xd9ef43dc736c1041 # initialize rs2
subw x28, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x8c69dba789102f92 # initialize rs1
li x3, 0xabb31260a965dfcc # initialize rs2
subw x20, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x8da32b08e776e797 # initialize rs1
li x4, 0xa67f1795350dc06a # initialize rs2
subw x17, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x367adbd037bda5b0 # initialize rs1
li x5, 0xa2151c9509fdb6de # initialize rs2
subw x26, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc458641fa8a2be41 # initialize rs1
li x6, 0x092c45e23a8b1010 # initialize rs2
subw x28, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x28, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x862b521cd0bf7c50 # initialize rs1
li x7, 0x35ace9afe53d8a14 # initialize rs2
subw x25, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x7dd21efdc3f07fa6 # initialize rs1
li x8, 0xf9b8c098dc8b0e60 # initialize rs2
subw x28, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x41f1081b3387f6ec # initialize rs1
li x9, 0x1a03354d62b26cee # initialize rs2
subw x27, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x4e5dca757cf397bb # initialize rs1
li x10, 0x014cca91efd02caf # initialize rs2
subw x15, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x9446de86bf8e9e70 # initialize rs1
li x11, 0x2aad505424935c44 # initialize rs2
subw x15, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x585fb9d3814f9573 # initialize rs1
li x12, 0x4108b7c1d33c3fdc # initialize rs2
subw x27, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x193609a404e1d192 # initialize rs1
li x13, 0x434ebf411c304762 # initialize rs2
subw x6, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xc290da9d7f223368 # initialize rs1
li x14, 0xf077682ba0861279 # initialize rs2
subw x20, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x02a49b9085eac12c # initialize rs1
li x15, 0x646f5a8be835e957 # initialize rs2
subw x12, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xe9d1e740980b5b10 # initialize rs1
li x16, 0x03d1668f0df77f3d # initialize rs2
subw x13, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x3d16cc1e29ebc263 # initialize rs1
li x17, 0xeb38853c52215def # initialize rs2
subw x20, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xff8b22cce586a290 # initialize rs1
li x18, 0x68a2dae71e166b58 # initialize rs2
subw x6, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x06bf4de4936c87a4 # initialize rs1
li x19, 0xc9d30463e6cc14a1 # initialize rs2
subw x24, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x569a29b8ead5b425 # initialize rs1
li x20, 0xf565bd9eb9eb31c6 # initialize rs2
subw x31, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x1ff4e6f0abb6292e # initialize rs1
li x21, 0x440aa5f858191b2f # initialize rs2
subw x18, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x5b5422666b3fccb0 # initialize rs1
li x22, 0x72b61d594f343904 # initialize rs2
subw x27, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xfd475d26b605d87c # initialize rs1
li x23, 0x4f65043b8b5b2ebe # initialize rs2
subw x26, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xe70034db78604e6a # initialize rs1
li x24, 0xaeb6dd5b3d53b0fc # initialize rs2
subw x3, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x1b911b882547df1d # initialize rs1
li x25, 0x0dabdcd990bc0b86 # initialize rs2
subw x13, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xc5a0eee97fba4e5b # initialize rs1
li x26, 0xa6edec2e29c5ebfc # initialize rs2
subw x7, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xc32d39b7edd65a23 # initialize rs1
li x27, 0x55e061a5b414715a # initialize rs2
subw x17, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x50eea6fb3270b0d8 # initialize rs1
li x28, 0xfda16dec3c7fa3e3 # initialize rs2
subw x8, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x6760eef83bd60e1b # initialize rs1
li x29, 0xb1b9c4061fc29e59 # initialize rs2
subw x8, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x8cfb9dd322420a11 # initialize rs1
li x30, 0xc7a8d19ab1ee274b # initialize rs2
subw x26, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x4a2098dbf76a6350 # initialize rs1
li x31, 0x7c728768a0c90520 # initialize rs2
subw x14, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x6bf5e5415b644c34 # initialize rs1
li x13, 0x2e73173adf3c698d # initialize rs2
subw x0, x0, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x30d88baf634187d7 # initialize rs1
li x19, 0x83141eac3a35595f # initialize rs2
subw x1, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xd2065eb21f62439c # initialize rs1
li x24, 0xb23f2938b3731b1f # initialize rs2
subw x2, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x878a548a55083ede # initialize rs1
li x14, 0x2e97df89bd1623ae # initialize rs2
subw x3, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x3a0661044a3329c3 # initialize rs1
li x15, 0xefc705737f11304d # initialize rs2
subw x4, x4, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x671d1e9ea20a96a9 # initialize rs1
li x16, 0x4434b587d0bc8195 # initialize rs2
subw x5, x5, x16 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x58efa142b9c6b27d # initialize rs1
li x26, 0xfd37037eceadb056 # initialize rs2
subw x6, x6, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x901e5d9bab3fe25d # initialize rs1
li x12, 0xa253c5a397e9262b # initialize rs2
subw x7, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xd7b508d4af051b98 # initialize rs1
li x2, 0x5a5b29dd2265b7f8 # initialize rs2
subw x8, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xbdacefa80e620361 # initialize rs1
li x13, 0x64dfcb8d3b69ec3a # initialize rs2
subw x9, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xf52c733be6a2e9b0 # initialize rs1
li x14, 0x8c8bb7e82128e6b6 # initialize rs2
subw x10, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xcbbedcbccfaf0570 # initialize rs1
li x9, 0x2383cff1fda7f7e6 # initialize rs2
subw x11, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x5f97312058dc4259 # initialize rs1
li x5, 0x1b26dcd2f54a782c # initialize rs2
subw x12, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x9edc48ba7f224d3f # initialize rs1
li x22, 0xe8f4a0d0fbb38f20 # initialize rs2
subw x13, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x7bffb4a4d73ef5b9 # initialize rs1
li x7, 0x7bdf92e12c0f6c24 # initialize rs2
subw x14, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xfa45997ff8e97644 # initialize rs1
li x20, 0x349621acdaf43e08 # initialize rs2
subw x15, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x0be9bd362e56131c # initialize rs1
li x21, 0x6b626e2ddaaff158 # initialize rs2
subw x16, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xcd9ffe86979ab8ea # initialize rs1
li x14, 0x7b963314eb15f5bd # initialize rs2
subw x17, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xb57882c8f4d3904f # initialize rs1
li x10, 0x67832f00396a2bf8 # initialize rs2
subw x18, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa985ae9631cda1bc # initialize rs1
li x18, 0xee3cc1f2a5d1e453 # initialize rs2
subw x19, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x126df756faaeb279 # initialize rs1
li x29, 0x927b1279edcf9373 # initialize rs2
subw x20, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x6ce6c278e1f044e5 # initialize rs1
li x23, 0xee4bfd482b6e9c5f # initialize rs2
subw x21, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xe064b6bad69af1ab # initialize rs1
li x1, 0xbae2b787546c8eaa # initialize rs2
subw x22, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x010eecf66094e338 # initialize rs1
li x15, 0x144ffd7f33f7f696 # initialize rs2
subw x23, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xed1602bc3dc54622 # initialize rs1
li x29, 0x87138b53effce8b2 # initialize rs2
subw x24, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x4e1551b893d022d1 # initialize rs1
li x6, 0x6cb83d26681ac01c # initialize rs2
subw x25, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x4d5c9fcbb6e2b4ea # initialize rs1
li x2, 0x589e8aaaf9be53bc # initialize rs2
subw x26, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xd4861ea49939c7a7 # initialize rs1
li x23, 0x48567279050ae5d2 # initialize rs2
subw x27, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xb4a9917a0ea8f626 # initialize rs1
li x3, 0xeed73cf9967446e6 # initialize rs2
subw x28, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xf2c4a86204ac6836 # initialize rs1
li x13, 0xb0207149be826a17 # initialize rs2
subw x29, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x5ace53727b28c776 # initialize rs1
li x13, 0x0e61ba7f847fdad9 # initialize rs2
subw x30, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x9b932a8e34fd19fc # initialize rs1
li x18, 0x708ae8fd166a322e # initialize rs2
subw x31, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x26, 0xe293cbaf661ec815 # initialize rs1
li x0, 0xc904eeb1168933ac # initialize rs2
subw x0, x26, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x27, 0x63b2a6ecdc9e6679 # initialize rs1
li x1, 0xd4e036488d9865be # initialize rs2
subw x1, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x5, 0xbe8327aa2d4e03a2 # initialize rs1
li x2, 0xe59354fbadec470b # initialize rs2
subw x2, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x9, 0xe39bad3264aa1763 # initialize rs1
li x3, 0x8c18155b64e17f9a # initialize rs2
subw x3, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x7, 0x077cdd83ddc14d8a # initialize rs1
li x4, 0x90755aedd19cd4e7 # initialize rs2
subw x4, x7, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x16, 0xb2a5021e71e44167 # initialize rs1
li x5, 0x1215789d23cf467e # initialize rs2
subw x5, x16, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0x2c5509af50046fbc # initialize rs1
li x6, 0x5a5575f1cdd85d90 # initialize rs2
subw x6, x17, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0xb2a9eb53eaed1d11 # initialize rs1
li x7, 0xcc7debcb5c087d42 # initialize rs2
subw x7, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x25, 0x37d320c4b77f0ff1 # initialize rs1
li x8, 0x1d668e44edf60181 # initialize rs2
subw x8, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x15, 0x8ede430f0dc1ed4f # initialize rs1
li x9, 0x51045217b4501a23 # initialize rs2
subw x9, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x24, 0xff20c404798641a0 # initialize rs1
li x10, 0xeb0e596dcf7a17ee # initialize rs2
subw x10, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x9, 0x2c021b1fd1392ce6 # initialize rs1
li x11, 0x64d2d1aecea32091 # initialize rs2
subw x11, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x5, 0x09ac59bbb42b8884 # initialize rs1
li x12, 0x67a63183bd8d1787 # initialize rs2
subw x12, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x14, 0x7354ca25435c1e35 # initialize rs1
li x13, 0x3b8ee6889c923b3d # initialize rs2
subw x13, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x5, 0x517abcc725f07924 # initialize rs1
li x14, 0x7881ed6ac643fa94 # initialize rs2
subw x14, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x11, 0x4c3ef9597cee5668 # initialize rs1
li x15, 0x158e92cc196b5c65 # initialize rs2
subw x15, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x13, 0x7242e4cc5f273c3c # initialize rs1
li x16, 0x16dd686f2a3087a9 # initialize rs2
subw x16, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x14, 0xa26f881c3b0ccae2 # initialize rs1
li x17, 0xe979e7fe540d09ff # initialize rs2
subw x17, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x19, 0x3fa938791ab6ea62 # initialize rs1
li x18, 0x08ed2867cf97325b # initialize rs2
subw x18, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x23, 0xb8843e1f0bb02d3a # initialize rs1
li x19, 0x7f21df0eab2a7733 # initialize rs2
subw x19, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x31, 0xc5f86a323719b54c # initialize rs1
li x20, 0x9360962e6f795015 # initialize rs2
subw x20, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x21, 0x274b1bcca6ffe410 # initialize rs1
li x21, 0x6871341443f56381 # initialize rs2
subw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x22, 0x1b3b73fc9a8879cb # initialize rs1
li x22, 0x5b608d9c6151608d # initialize rs2
subw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x18, 0xe5e4e3120655474a # initialize rs1
li x23, 0xb1a1734178133e1c # initialize rs2
subw x23, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x16, 0xe40ec047bf7003d0 # initialize rs1
li x24, 0xbd2b0b8ec332d612 # initialize rs2
subw x24, x16, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x28, 0xc5f0617fbd271995 # initialize rs1
li x25, 0x0326c67642d88941 # initialize rs2
subw x25, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x3, 0x7c55b88ccf303f89 # initialize rs1
li x26, 0xf3135df5076e012c # initialize rs2
subw x26, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x16, 0x0be0ab1881c7377b # initialize rs1
li x27, 0x62c82d4165cda734 # initialize rs2
subw x27, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x13, 0x9309a8aab4c403ae # initialize rs1
li x28, 0x4efd67a6dc73f600 # initialize rs2
subw x28, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x7, 0x3e8e3b3ddd6dcc61 # initialize rs1
li x29, 0xaba4cf187085f73f # initialize rs2
subw x29, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x10, 0x7c2265cb542d91f4 # initialize rs1
li x30, 0x11442f7202358eea # initialize rs2
subw x30, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x12, 0x166419ad8e9d1db6 # initialize rs1
li x31, 0x509c8bcd5c08004c # initialize rs2
subw x31, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xcc3629bf54ba8883 # initialize rs1
li x0, 0x6a7e2d19f2f79e02 # initialize rs2
subw x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xdf23e4fc541b0ab7 # initialize rs1
li x1, 0x75a404b69432d5b5 # initialize rs2
subw x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x02fde38b2b20d268 # initialize rs1
li x2, 0x15c2d3a17c761cae # initialize rs2
subw x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x9a3d3b0836efeeb1 # initialize rs1
li x3, 0x0821bc2cf244ba05 # initialize rs2
subw x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xa944d1467d35e1b0 # initialize rs1
li x4, 0x18895fc2843b1bcd # initialize rs2
subw x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0308aa61e26cca87 # initialize rs1
li x5, 0xf1657714c972c456 # initialize rs2
subw x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xea471e4547542b28 # initialize rs1
li x6, 0xb42b4bf81c5753bb # initialize rs2
subw x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x5754cf9fe612b88f # initialize rs1
li x7, 0xe31781e935755db4 # initialize rs2
subw x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x2c1d5c2a7b8b03ab # initialize rs1
li x8, 0xf3fe3e79d8fb5650 # initialize rs2
subw x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x088f818223e59773 # initialize rs1
li x9, 0xd6ef8da5e97bb763 # initialize rs2
subw x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x1de60c825826d14a # initialize rs1
li x10, 0xd036800c8d7ebce6 # initialize rs2
subw x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xd48dbcc9e4514edd # initialize rs1
li x11, 0xd64d41dffbdf7c57 # initialize rs2
subw x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x4ad7ab1f66febbbe # initialize rs1
li x12, 0xd40dd17733920b07 # initialize rs2
subw x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x093d8ee0abe7c7f0 # initialize rs1
li x13, 0xb2a2c8ce77843534 # initialize rs2
subw x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xd985a4f2195072f9 # initialize rs1
li x14, 0xf027700208cf2018 # initialize rs2
subw x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xf9de31cb4874a172 # initialize rs1
li x15, 0x17349466665b10ed # initialize rs2
subw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xdf3073f9da325cb1 # initialize rs1
li x16, 0xdc6be81b0719dade # initialize rs2
subw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x3891211a5373b9d2 # initialize rs1
li x17, 0xcc0f357e398d1bc5 # initialize rs2
subw x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x15ea823bb468b92a # initialize rs1
li x18, 0x35db3fa66e5ed835 # initialize rs2
subw x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x977209a588577225 # initialize rs1
li x19, 0x54a348edfe694127 # initialize rs2
subw x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x48e0d207c1549340 # initialize rs1
li x20, 0xdf1f42a7e957c2d9 # initialize rs2
subw x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x043ea2db2df55333 # initialize rs1
li x21, 0xb0d6ff9d34a4f5dd # initialize rs2
subw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xd9e8a29f86c4e6f0 # initialize rs1
li x22, 0x8bb2b1dbf5d39361 # initialize rs2
subw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x4c4704f87d5eec4a # initialize rs1
li x23, 0x8902d2197a9aa06e # initialize rs2
subw x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x74e566e80f1f2f09 # initialize rs1
li x24, 0x13faa6bd557b634e # initialize rs2
subw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xf52e0ae1d2632ba9 # initialize rs1
li x25, 0x552865c26acd5ef3 # initialize rs2
subw x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x5522b774def750bd # initialize rs1
li x26, 0x0719cfebb730751e # initialize rs2
subw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x94a7f3004e887308 # initialize rs1
li x27, 0xa9b7ecea73f03b68 # initialize rs2
subw x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x22a71146dccef598 # initialize rs1
li x28, 0xe1d99b5d575895d4 # initialize rs2
subw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x3bd958e838526d30 # initialize rs1
li x29, 0x77ab188db2d737c1 # initialize rs2
subw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x7b9e589216c28a59 # initialize rs1
li x30, 0x3277874484d6b01b # initialize rs2
subw x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x0f27ad836d2c87f3 # initialize rs1
li x31, 0xe3e8c9e58bf4aaa0 # initialize rs2
subw x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x25, x17, x7 # perform first operation
subw x9, x20, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x12, x3 # perform first operation
subw x16, x23, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x8, x2 # perform first operation
subw x6, x10, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x20, x23, x15 # perform first operation
subw x15, x20, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x11, x10 # perform first operation
subw x10, x31, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x20, x2, x7 # perform first operation
subw x20, x8, x2 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x3, x9 # perform first operation
subw x20, x24, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x25, x7, x6 # perform first operation
subw x25, x29, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x27, x19, x10 # perform first operation
subw x27, x12, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x9, x13, x24 # perform first operation
subw x13, x7, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x26, x25 # perform first operation
subw x25, x18, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x20, x23 # perform first operation
subw x16, x6, x24 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-sra.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2f163f70768d6c0c # initialize rs1
li x24, 0x1fffcbc3ae7b31a3 # initialize rs2
sra x19, x0, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xb10caad6fc1c6d75 # initialize rs1
li x2, 0xa822ddd2bf109236 # initialize rs2
sra x17, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xf8aadfad1403d2b9 # initialize rs1
li x15, 0xe408147a13b282b2 # initialize rs2
sra x30, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xf89e7f502fd3260d # initialize rs1
li x5, 0x731b43f52c158eca # initialize rs2
sra x6, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0e7ad77d7d19496a # initialize rs1
li x30, 0x19cac62130e6035d # initialize rs2
sra x28, x4, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x13aba15ffea8de99 # initialize rs1
li x22, 0x19b2b4304fa19ba8 # initialize rs2
sra x16, x5, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x16, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xadb52d0009cd47cd # initialize rs1
li x5, 0x86cf6c8eaf57f251 # initialize rs2
sra x10, x6, x5 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xcae05caff02514d9 # initialize rs1
li x15, 0x3173590dbfb5b1f9 # initialize rs2
sra x17, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x6fe1f95fbfd9f5ea # initialize rs1
li x14, 0x3bb64525a0cf021f # initialize rs2
sra x21, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xd85c1704688aba87 # initialize rs1
li x10, 0xb7dc71d475122555 # initialize rs2
sra x27, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x6628ad324d458a35 # initialize rs1
li x25, 0x9091889773fb30d8 # initialize rs2
sra x13, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x28c29862b1a7e6b5 # initialize rs1
li x12, 0x438677662eed3088 # initialize rs2
sra x2, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xfb540b16c433f31b # initialize rs1
li x10, 0x224a1462850e4645 # initialize rs2
sra x23, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x9335c9d9a0ce6bfe # initialize rs1
li x17, 0x86bb6209121cad3d # initialize rs2
sra x18, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xfcf5000bc2755fcb # initialize rs1
li x15, 0x5e08c0a680ced342 # initialize rs2
sra x17, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x6a122843010398ea # initialize rs1
li x18, 0xfa4cbb225e198d1f # initialize rs2
sra x19, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x444ba03537649340 # initialize rs1
li x19, 0x8667af38d291dd2c # initialize rs2
sra x5, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xe0e02d8337f60eba # initialize rs1
li x21, 0x2c4c733c435ae66b # initialize rs2
sra x11, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x1e9b9e21bf20b062 # initialize rs1
li x25, 0xd6ba7a564c42c24d # initialize rs2
sra x13, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x1e96cafaa9ab98f6 # initialize rs1
li x3, 0xf8eb9e5c05ec59ca # initialize rs2
sra x17, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xaa73defa02ecc042 # initialize rs1
li x3, 0x6845d88226946cdd # initialize rs2
sra x24, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xd060985cbcda4be1 # initialize rs1
li x8, 0xc1542d4e2a66c862 # initialize rs2
sra x20, x21, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xc8b70ad99897b996 # initialize rs1
li x24, 0x55b3240c6091cef0 # initialize rs2
sra x7, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x2982448fc60caa31 # initialize rs1
li x9, 0x4363446d5b75dfee # initialize rs2
sra x13, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x8f8667bf9e5a94f3 # initialize rs1
li x15, 0x37538525b8788cf9 # initialize rs2
sra x5, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x5803d4e409253405 # initialize rs1
li x19, 0x9803bfa246cdc04e # initialize rs2
sra x22, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9e35f79705e8a0a6 # initialize rs1
li x3, 0xd510dbef603455a5 # initialize rs2
sra x17, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x45d1cec747a1a044 # initialize rs1
li x18, 0x82d416d7929e7fad # initialize rs2
sra x12, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xad0236f449965e34 # initialize rs1
li x9, 0xb2aeb9cf6ef5f9e5 # initialize rs2
sra x5, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xc836c6fa3c52d2e1 # initialize rs1
li x19, 0xd5584c117fbb000a # initialize rs2
sra x6, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x90a7968f4a175dfa # initialize rs1
li x12, 0x5ef9d00c8f8ad8af # initialize rs2
sra x24, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xc2872cdf87f8473b # initialize rs1
li x25, 0x128446d0203ba0f6 # initialize rs2
sra x20, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x20, 0x81f9b791222aff59 # initialize rs1
li x0, 0x4825bccd8358ddeb # initialize rs2
sra x22, x20, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x26, 0x205a1d528ef08720 # initialize rs1
li x1, 0x4200aa04ec00fd16 # initialize rs2
sra x6, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x27, 0x9acfccc2dc1f699e # initialize rs1
li x2, 0x54553a33a46211ed # initialize rs2
sra x1, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x16, 0x4ef6b3abad0fd795 # initialize rs1
li x3, 0x05487e35e316b5cd # initialize rs2
sra x5, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0x9033fd50ad919376 # initialize rs1
li x4, 0xe58a4142e5b6b3e8 # initialize rs2
sra x25, x12, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0xa5e0b6c980f7cfa6 # initialize rs1
li x5, 0x13433c6c9c53b32a # initialize rs2
sra x1, x3, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0xce0dbd40c4e080b2 # initialize rs1
li x6, 0xb5aa83a377740398 # initialize rs2
sra x17, x23, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x17, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0xad911aefb0654ad9 # initialize rs1
li x7, 0xe234b015b4040a56 # initialize rs2
sra x6, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x16, 0xb3c2ca03beeb994e # initialize rs1
li x8, 0xcf7492e16527616e # initialize rs2
sra x21, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x20, 0x3d3c0637a87e1a09 # initialize rs1
li x9, 0x4f2c14cb923b51f9 # initialize rs2
sra x14, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x3, 0x1e07bf064bf7c2e1 # initialize rs1
li x10, 0x712dcbc58c5f8d60 # initialize rs2
sra x11, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x30, 0x68e7eb5d4f2de119 # initialize rs1
li x11, 0x803565ef256f5114 # initialize rs2
sra x8, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x27, 0xe0dae1c5fc7dd98b # initialize rs1
li x12, 0x185a35608fdfe89e # initialize rs2
sra x30, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x28, 0x4404a6ed1f4c2b8e # initialize rs1
li x13, 0xf79cdb8f69854bbd # initialize rs2
sra x25, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x3, 0xe61384a53fe97aaa # initialize rs1
li x14, 0x4a505b2adab27a61 # initialize rs2
sra x27, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x9, 0xb42326d52a2d8023 # initialize rs1
li x15, 0xfa8dcfcf9c7dee8e # initialize rs2
sra x14, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x25, 0x02c9cf6ee2314a82 # initialize rs1
li x16, 0x41cf5cb32ff88194 # initialize rs2
sra x27, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x18, 0x12a5f27b2c904053 # initialize rs1
li x17, 0x72203f856ef44166 # initialize rs2
sra x14, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x8, 0xd074f1e84146bcad # initialize rs1
li x18, 0x9e08b000c2382bb6 # initialize rs2
sra x14, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x3, 0xbc92d2adb50ce354 # initialize rs1
li x19, 0x067a87baea28ed76 # initialize rs2
sra x12, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x3, 0x2a9947c04314330f # initialize rs1
li x20, 0xef87a3bc7aabe887 # initialize rs2
sra x6, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x5, 0xb33acf3036ac1eaf # initialize rs1
li x21, 0xe8007fc8cb15e12b # initialize rs2
sra x22, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x11, 0x9ca3e3ba523290ac # initialize rs1
li x22, 0xdf3581977d208586 # initialize rs2
sra x16, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x11, 0x4327299d05d6b9b8 # initialize rs1
li x23, 0x450669a73acce0b4 # initialize rs2
sra x31, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x29, 0x024cab26c92e71a5 # initialize rs1
li x24, 0x41b75666e820494e # initialize rs2
sra x18, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x6, 0xe83ce811212c50b6 # initialize rs1
li x25, 0x0865285b18c722e9 # initialize rs2
sra x13, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x15, 0x48967e70fbcd9999 # initialize rs1
li x26, 0x80b9da13f71d8974 # initialize rs2
sra x18, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x8, 0xad2919645e27a749 # initialize rs1
li x27, 0xc84a062020ca7ea6 # initialize rs2
sra x23, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x6, 0x088367cbc5caa435 # initialize rs1
li x28, 0xd433a09d54df8ac1 # initialize rs2
sra x1, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x19, 0x1c894bc87105a8e0 # initialize rs1
li x29, 0xd23482a4571d1f5c # initialize rs2
sra x12, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x10, 0xf061efd852e6c2b8 # initialize rs1
li x30, 0x00efbef0c50388c7 # initialize rs2
sra x12, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x10, 0xf7553732de194180 # initialize rs1
li x31, 0x7ad9f8c833c4c269 # initialize rs2
sra x29, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 504)

# Testcase cp_rd (Test destination rd = x0)
li x7, 0x66fd5b39fd44bcfb # initialize rs1
li x11, 0x7a7d59950fde4ec4 # initialize rs2
sra x0, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x26, 0xb73a31a0dbebad05 # initialize rs1
li x8, 0xad6aba95fb329bba # initialize rs2
sra x1, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x21, 0x72fffd35fa7f81d9 # initialize rs1
li x29, 0x9d2afe969d6ec417 # initialize rs2
sra x2, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x17, 0xd5440ad034cce8df # initialize rs1
li x28, 0x7fc7407ec6ef7aaa # initialize rs2
sra x3, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x16, 0x8a2d61ab5e62cffb # initialize rs1
li x24, 0x1ccc2fd2549acb6a # initialize rs2
sra x4, x16, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x20, 0xcde20ffff16e02e0 # initialize rs1
li x28, 0x1dd8ac83ca43c3f2 # initialize rs2
sra x5, x20, x28 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x1a7fe5347401aae1 # initialize rs1
li x3, 0xf6d0372e7f156953 # initialize rs2
sra x6, x24, x3 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0x86a3ef94f3b174ce # initialize rs1
li x22, 0x19b31c24224f169b # initialize rs2
sra x7, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0x80f9bdf44518ef73 # initialize rs1
li x7, 0x6b618bc599e797a7 # initialize rs2
sra x8, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0x9356e0c34e2715a6 # initialize rs1
li x16, 0x28741812dd2ba71a # initialize rs2
sra x9, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x25, 0xe049bb0190f0f0b2 # initialize rs1
li x1, 0x04d82964b4340831 # initialize rs2
sra x10, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x9, 0x68ad6f02e117cc8c # initialize rs1
li x24, 0x655da933db69cbb8 # initialize rs2
sra x11, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x25, 0x81d836976f1ba0aa # initialize rs1
li x8, 0x034f9f726aaa1dc9 # initialize rs2
sra x12, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x27, 0x8361172816eb0fb0 # initialize rs1
li x16, 0x7e23117ace37ac63 # initialize rs2
sra x13, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x14, 0x8fff19e428fd4f97 # initialize rs1
li x24, 0x1c6e917d8355fb0b # initialize rs2
sra x14, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x21, 0x56831226b890d536 # initialize rs1
li x26, 0x6552601bf79317b5 # initialize rs2
sra x15, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x16, 0x0319463947e141c7 # initialize rs1
li x21, 0x5e8a7f3a293ab476 # initialize rs2
sra x16, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x30, 0xe733eab5291bb85e # initialize rs1
li x1, 0x710e428ab218d1bc # initialize rs2
sra x17, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x25, 0x76187f42d95b3e7f # initialize rs1
li x9, 0x998fb4a8970ea4d2 # initialize rs2
sra x18, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x1, 0xf8ca45862c8e7898 # initialize rs1
li x23, 0x436a91fdba0460b6 # initialize rs2
sra x19, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x3, 0x6408063efc0b22bd # initialize rs1
li x5, 0xa6c78a157f475a14 # initialize rs2
sra x20, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x9, 0x8191cf38ad486662 # initialize rs1
li x30, 0x28658da04736ce63 # initialize rs2
sra x21, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x25, 0x64935bfba40d81d9 # initialize rs1
li x2, 0xc5ef7cefa3b1a9bc # initialize rs2
sra x22, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x28, 0x54d68d5ce27a6a55 # initialize rs1
li x25, 0x794161baef0de370 # initialize rs2
sra x23, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x3, 0x333d812b87f4917a # initialize rs1
li x29, 0x2eeb138155870c84 # initialize rs2
sra x24, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x5, 0x4e1e5bf5341eeb08 # initialize rs1
li x18, 0x482be76d416be44a # initialize rs2
sra x25, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x10, 0x497cf0296bcd9560 # initialize rs1
li x11, 0x761ad64f0a82ce97 # initialize rs2
sra x26, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x19, 0x206cbcb9a6e45505 # initialize rs1
li x17, 0xb589f4c0ef5ae2f6 # initialize rs2
sra x27, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x3, 0xc320ee94994c11e7 # initialize rs1
li x31, 0x4bff7d5e927e0f4a # initialize rs2
sra x28, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x29, 0x13a6d24bf18fcb54 # initialize rs1
li x26, 0xd05958bb09c06666 # initialize rs2
sra x29, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x17, 0x471d808e8f628459 # initialize rs1
li x11, 0x5b585d5a1c124d1d # initialize rs2
sra x30, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x9, 0xec22eea911852fb3 # initialize rs1
li x2, 0xd12de115bc1f00c1 # initialize rs2
sra x31, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x0000000000000000 # initialize rs1
li x10, 0xa077a76e77bbfd89 # initialize rs2
sra x12, x20, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x27, 0x0000000000000001 # initialize rs1
li x24, 0xaf1cb266f94c4b88 # initialize rs2
sra x14, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x12, 0x0000000000000002 # initialize rs1
li x13, 0xc4d2d938766ab34f # initialize rs2
sra x6, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x7, 0x8000000000000000 # initialize rs1
li x12, 0x2a39e716633ea241 # initialize rs2
sra x23, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x13, 0x8000000000000001 # initialize rs1
li x20, 0x3f59c1c8ef442771 # initialize rs2
sra x6, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x26, 0x7fffffffffffffff # initialize rs1
li x24, 0x7d929660dca4c257 # initialize rs2
sra x27, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x12, 0x7ffffffffffffffe # initialize rs1
li x15, 0x08506061f62e334e # initialize rs2
sra x2, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x14, 0xffffffffffffffff # initialize rs1
li x9, 0x5ea037d67dde0831 # initialize rs2
sra x29, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x24, 0xfffffffffffffffe # initialize rs1
li x11, 0x861d663e13449cab # initialize rs2
sra x6, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0xbcda1baf64ce3257 # initialize rs2
sra x19, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xcce1145161b29e50 # initialize rs2
sra x7, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x3, 0x5555555555555555 # initialize rs1
li x14, 0xd1bc31c1893362c2 # initialize rs2
sra x26, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x23, 0x00000000ffffffff # initialize rs1
li x21, 0x9f92e046e33292cf # initialize rs2
sra x8, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x5, 0x00000000fffffffe # initialize rs1
li x16, 0xbc871618e94ee623 # initialize rs2
sra x8, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x20, 0x0000000100000000 # initialize rs1
li x22, 0x021eecc16ede7d6f # initialize rs2
sra x19, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x10, 0x0000000100000001 # initialize rs1
li x1, 0xbb5072264d7266cf # initialize rs2
sra x30, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x25, 0x0f4a3ca87dd4f376 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
sra x11, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x10, 0x865f107104f70f87 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sra x2, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x25, 0xf055b67f46983835 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
sra x9, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x7, 0xa619fda5687932f6 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
sra x21, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x13, 0x49f8bb2ab8f6a0ea # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sra x1, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x11, 0xa15f2a32f6a63b4d # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
sra x5, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x1, 0x63e6a1b63ef3d695 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
sra x20, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x3, 0xb99e2acad6a577ec # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
sra x9, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x28, 0x461856b418d1edeb # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sra x5, x28, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x15, 0x1650d256b8e85e12 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
sra x10, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x21, 0xaee4b1ff9d78f427 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x15, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x9, 0xdb90ecaa124cd1b5 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
sra x7, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x26, 0x6fa0083689d8fc3b # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
sra x30, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x6, 0x3f0ed442b30d8e55 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sra x14, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x25, 0xf8cc83f2a72de930 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
sra x3, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x18, 0x989199a5162cd4e7 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sra x12, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x8, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
sra x18, x8, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x3, 0x0000000000000000 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
sra x12, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x8, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sra x29, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x19, 0x0000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
sra x22, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x21, 0x0000000000000000 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sra x11, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x6, 0x0000000000000000 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sra x10, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x1, 0x0000000000000000 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
sra x14, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x5, 0x0000000000000000 # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
sra x18, x5, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000000000000 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sra x11, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x13, 0x0000000000000000 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
sra x26, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x0000000000000000 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x8, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x6, 0x0000000000000000 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
sra x16, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
sra x14, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x20, 0x0000000000000000 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sra x26, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x7, 0x0000000000000000 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
sra x22, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x21, 0x0000000000000000 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
sra x14, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x23, 0x0000000000000001 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
sra x14, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x29, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
sra x5, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x1, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000002 # initialize rs2
sra x26, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x22, 0x0000000000000001 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
sra x31, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x12, 0x0000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
sra x17, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x23, 0x0000000000000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sra x30, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000001 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sra x28, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x5, 0x0000000000000001 # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
sra x17, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x26, 0x0000000000000001 # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
sra x10, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x3, 0x0000000000000001 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
sra x24, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x0000000000000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x29, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x29, 0x0000000000000001 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
sra x7, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
sra x30, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x13, 0x0000000000000001 # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
sra x25, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x10, 0x0000000000000001 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
sra x25, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x14, 0x0000000000000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
sra x5, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x16, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sra x29, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x10, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sra x29, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x22, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
sra x17, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x10, 0x0000000000000002 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
sra x9, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x31, 0x0000000000000002 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
sra x22, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000000000002 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
sra x13, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000000000002 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
sra x17, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x20, 0x0000000000000002 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
sra x13, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000000000002 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
sra x11, x14, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x15, 0x0000000000000002 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
sra x6, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x0000000000000002 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x14, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x7, 0x0000000000000002 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
sra x17, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
sra x25, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x18, 0x0000000000000002 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sra x21, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x29, 0x0000000000000002 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sra x26, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x16, 0x0000000000000002 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sra x2, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x24, 0x8000000000000000 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
sra x9, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x31, 0x8000000000000000 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
sra x21, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x19, 0x8000000000000000 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
sra x8, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x21, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
sra x24, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x28, 0x8000000000000000 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
sra x29, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x17, 0x8000000000000000 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
sra x30, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x9, 0x8000000000000000 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
sra x26, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x3, 0x8000000000000000 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
sra x29, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x18, 0x8000000000000000 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
sra x17, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x22, 0x8000000000000000 # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
sra x28, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x8000000000000000 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x31, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x7, 0x8000000000000000 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
sra x18, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x2, 0x8000000000000000 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
sra x24, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x31, 0x8000000000000000 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
sra x3, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x17, 0x8000000000000000 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
sra x30, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x8, 0x8000000000000000 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
sra x11, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x1, 0x8000000000000001 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
sra x26, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x8, 0x8000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
sra x21, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x21, 0x8000000000000001 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sra x22, x21, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x18, 0x8000000000000001 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
sra x1, x18, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sra x14, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x1, 0x8000000000000001 # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
sra x24, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x18, 0x8000000000000001 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
sra x10, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x23, 0x8000000000000001 # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
sra x11, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x3, 0x8000000000000001 # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sra x21, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x25, 0x8000000000000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
sra x20, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0x8000000000000001 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x16, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x29, 0x8000000000000001 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
sra x5, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x24, 0x8000000000000001 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
sra x25, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x14, 0x8000000000000001 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
sra x26, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x23, 0x8000000000000001 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sra x2, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x3, 0x8000000000000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sra x10, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x16, 0x7fffffffffffffff # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
sra x14, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x8, 0x7fffffffffffffff # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sra x25, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x16, 0x7fffffffffffffff # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sra x2, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x1, 0x7fffffffffffffff # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
sra x31, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x14, 0x7fffffffffffffff # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
sra x16, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x11, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sra x22, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0x7fffffffffffffff # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sra x23, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x22, 0x7fffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
sra x7, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x14, 0x7fffffffffffffff # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
sra x18, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x30, 0x7fffffffffffffff # initialize rs1
li x8, 0x5bbc887763ae86f2 # initialize rs2
sra x28, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x7fffffffffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x7, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x5, 0x7fffffffffffffff # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
sra x7, x5, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x17, 0x7fffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sra x11, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x5, 0x7fffffffffffffff # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sra x28, x5, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x29, 0x7fffffffffffffff # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sra x2, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x24, 0x7fffffffffffffff # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
sra x16, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x13, 0x7ffffffffffffffe # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
sra x12, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x31, 0x7ffffffffffffffe # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
sra x8, x31, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x20, 0x7ffffffffffffffe # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
sra x9, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x27, 0x7ffffffffffffffe # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
sra x10, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x27, 0x7ffffffffffffffe # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
sra x8, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
sra x8, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x26, 0x7ffffffffffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
sra x15, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x16, 0x7ffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sra x12, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x23, 0x7ffffffffffffffe # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
sra x13, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x19, 0x7ffffffffffffffe # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
sra x18, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0x7ffffffffffffffe # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x27, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x12, 0x7ffffffffffffffe # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
sra x19, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x10, 0x7ffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sra x5, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
sra x22, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x24, 0x7ffffffffffffffe # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
sra x3, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x15, 0x7ffffffffffffffe # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
sra x7, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x9, 0xffffffffffffffff # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sra x5, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x20, 0xffffffffffffffff # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sra x12, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x22, 0xffffffffffffffff # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
sra x1, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x8, 0xffffffffffffffff # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
sra x30, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x6, 0xffffffffffffffff # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
sra x18, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
sra x26, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x31, 0xffffffffffffffff # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
sra x12, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x5, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sra x22, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x10, 0xffffffffffffffff # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sra x18, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x2, 0xffffffffffffffff # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
sra x24, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0xffffffffffffffff # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x19, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x17, 0xffffffffffffffff # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
sra x10, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x19, 0xffffffffffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
sra x26, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x20, 0xffffffffffffffff # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
sra x14, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x3, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sra x10, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x16, 0xffffffffffffffff # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
sra x27, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x5, 0xfffffffffffffffe # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
sra x3, x5, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x15, 0xfffffffffffffffe # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
sra x6, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x5, 0xfffffffffffffffe # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
sra x12, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x2, 0xfffffffffffffffe # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
sra x22, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x14, 0xfffffffffffffffe # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sra x21, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x13, 0xfffffffffffffffe # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
sra x17, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x26, 0xfffffffffffffffe # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
sra x25, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
sra x23, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
sra x25, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x13, 0xfffffffffffffffe # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
sra x9, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0xfffffffffffffffe # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x16, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x25, 0xfffffffffffffffe # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
sra x23, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x30, 0xfffffffffffffffe # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
sra x11, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x15, 0xfffffffffffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sra x24, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x23, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
sra x12, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x21, 0xfffffffffffffffe # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
sra x10, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sra x10, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
sra x8, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
sra x22, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
sra x26, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
sra x28, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
sra x19, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
sra x30, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
sra x7, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sra x25, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
sra x23, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x5, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sra x2, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
sra x1, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sra x20, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sra x26, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
sra x8, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sra x18, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
sra x9, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
sra x29, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
sra x15, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sra x10, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
sra x7, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
sra x8, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
sra x31, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sra x26, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
sra x26, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x10, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
sra x17, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
sra x30, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
sra x21, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sra x5, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
sra x29, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x2, 0x5555555555555555 # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
sra x8, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x8, 0x5555555555555555 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
sra x23, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x19, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sra x3, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x26, 0x5555555555555555 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
sra x9, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x5, 0x5555555555555555 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
sra x9, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x14, 0x5555555555555555 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
sra x8, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x15, 0x5555555555555555 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sra x25, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x14, 0x5555555555555555 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sra x24, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x26, 0x5555555555555555 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
sra x23, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x28, 0x5555555555555555 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
sra x23, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x5555555555555555 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x13, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x26, 0x5555555555555555 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
sra x9, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x6, 0x5555555555555555 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
sra x19, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x24, 0x5555555555555555 # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
sra x18, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x24, 0x5555555555555555 # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
sra x26, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x31, 0x5555555555555555 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
sra x22, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x7, 0x00000000ffffffff # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
sra x8, x7, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x8, 0x00000000ffffffff # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sra x13, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x13, 0x00000000ffffffff # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
sra x8, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x20, 0x00000000ffffffff # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
sra x3, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x23, 0x00000000ffffffff # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sra x7, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x25, 0x00000000ffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
sra x30, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x5, 0x00000000ffffffff # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sra x9, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
sra x17, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x5, 0x00000000ffffffff # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
sra x1, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x6, 0x00000000ffffffff # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
sra x3, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000ffffffff # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x6, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x7, 0x00000000ffffffff # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
sra x26, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x18, 0x00000000ffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sra x17, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x8, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
sra x21, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x24, 0x00000000ffffffff # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sra x8, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x30, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
sra x27, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x12, 0x00000000fffffffe # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
sra x17, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x13, 0x00000000fffffffe # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
sra x24, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x2, 0x00000000fffffffe # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
sra x19, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x27, 0x00000000fffffffe # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
sra x25, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x15, 0x00000000fffffffe # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sra x11, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x17, 0x00000000fffffffe # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
sra x16, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x16, 0x00000000fffffffe # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sra x15, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x2, 0x00000000fffffffe # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sra x30, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x15, 0x00000000fffffffe # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
sra x27, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x25, 0x00000000fffffffe # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
sra x28, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0x00000000fffffffe # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x9, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x31, 0x00000000fffffffe # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
sra x18, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x12, 0x00000000fffffffe # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sra x23, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x7, 0x00000000fffffffe # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
sra x16, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x14, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
sra x15, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x30, 0x00000000fffffffe # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
sra x25, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x1, 0x0000000100000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
sra x31, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x9, 0x0000000100000000 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sra x23, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x7, 0x0000000100000000 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
sra x10, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x20, 0x0000000100000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sra x7, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x10, 0x0000000100000000 # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
sra x29, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x23, 0x0000000100000000 # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
sra x5, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
sra x22, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x18, 0x0000000100000000 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sra x30, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sra x22, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x28, 0x0000000100000000 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
sra x27, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x0000000100000000 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x25, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x9, 0x0000000100000000 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
sra x10, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x12, 0x0000000100000000 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
sra x6, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x30, 0x0000000100000000 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sra x10, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x14, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
sra x13, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x11, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
sra x3, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x5, 0x0000000100000001 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
sra x6, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x15, 0x0000000100000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sra x20, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x5, 0x0000000100000001 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
sra x25, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x5, 0x0000000100000001 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
sra x2, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x16, 0x0000000100000001 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sra x19, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x29, 0x0000000100000001 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sra x13, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000100000001 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
sra x18, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x27, 0x0000000100000001 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
sra x21, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000100000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sra x2, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x31, 0x0000000100000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
sra x25, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0000000100000001 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
sra x14, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x5, 0x0000000100000001 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
sra x26, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x7, 0x0000000100000001 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sra x27, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x10, 0x0000000100000001 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
sra x7, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x28, 0x0000000100000001 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sra x25, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x9, 0x0000000100000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
sra x31, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x5665a07402fb1fb3 # initialize rs1
li x0, 0xc5b90bcb368ed92a # initialize rs2
sra x10, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x87ffc41ccfd42b28 # initialize rs1
li x1, 0x56c005ed798631dd # initialize rs2
sra x24, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xed076b403626c84c # initialize rs1
li x2, 0x1f02102b2c683445 # initialize rs2
sra x6, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x2fa352699dd7e4ee # initialize rs1
li x3, 0x94a6c78d82834eb8 # initialize rs2
sra x27, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xd2b68668e93ded38 # initialize rs1
li x4, 0x6360acfb40d663cc # initialize rs2
sra x3, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd52274a1642349dc # initialize rs1
li x5, 0xa3754e0dbc07967c # initialize rs2
sra x24, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x24, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x36783ca3478fdcd9 # initialize rs1
li x6, 0xf131c18148d327db # initialize rs2
sra x21, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x21, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x535d92384dc3d60e # initialize rs1
li x7, 0xc0a20ccc83465d4d # initialize rs2
sra x29, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x749373112cf956f3 # initialize rs1
li x8, 0xdbf094ca71aa0312 # initialize rs2
sra x17, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x1d31dade571663cf # initialize rs1
li x9, 0x6d44429d595b5902 # initialize rs2
sra x25, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xc9b80a8441f41baa # initialize rs1
li x10, 0xe67cd8d29bd94d00 # initialize rs2
sra x25, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xb31ddf1421f266e0 # initialize rs1
li x11, 0xdf6bbb57fcc190ff # initialize rs2
sra x28, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x41900d9052091d76 # initialize rs1
li x12, 0x70261349ed86dfb8 # initialize rs2
sra x23, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xb558e3e6a810a124 # initialize rs1
li x13, 0x6da361ffa66244bc # initialize rs2
sra x11, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xca29a29c0c16d6c5 # initialize rs1
li x14, 0x032154aafcc2fe39 # initialize rs2
sra x2, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xe2bf8dec02b38ae4 # initialize rs1
li x15, 0x4a926cf22072e27d # initialize rs2
sra x5, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x12f48cb2320e628f # initialize rs1
li x16, 0x47bb80b4e086564e # initialize rs2
sra x22, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x194974e0ee86c127 # initialize rs1
li x17, 0x46f337af914821f4 # initialize rs2
sra x23, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xe0c208b25f850c68 # initialize rs1
li x18, 0x94b110a4b7bbd839 # initialize rs2
sra x28, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xb84361bc0c30de0c # initialize rs1
li x19, 0x651a49ab8a81ff74 # initialize rs2
sra x7, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xafdaa701a2a2677b # initialize rs1
li x20, 0xf7390d8cb1058424 # initialize rs2
sra x16, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x962763861e3a3657 # initialize rs1
li x21, 0xa89cd05b85755015 # initialize rs2
sra x24, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xbbd9d4ed72780c8b # initialize rs1
li x22, 0x0eef44255a3a643e # initialize rs2
sra x7, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x8f0592eb17bbe36b # initialize rs1
li x23, 0x3399b32090e78fca # initialize rs2
sra x17, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x7370aecd8c452038 # initialize rs1
li x24, 0xa191b7207c156e07 # initialize rs2
sra x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xc3adc37743c88f4d # initialize rs1
li x25, 0xc8c298e5d5d05acc # initialize rs2
sra x5, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xc169be6715867036 # initialize rs1
li x26, 0xe95a6d65eafbb706 # initialize rs2
sra x29, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x538b18314b0e9749 # initialize rs1
li x27, 0xae7a6cca9dffb9a2 # initialize rs2
sra x15, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x2f5f2bbd855647cd # initialize rs1
li x28, 0x99ac506ab07508ab # initialize rs2
sra x30, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x2f0e6c9c891ad55d # initialize rs1
li x29, 0x1a2a5633c2ed8938 # initialize rs2
sra x27, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x055e383ca3f4e8e8 # initialize rs1
li x30, 0x808b8d76fc83479b # initialize rs2
sra x28, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x95d00bd525173dc8 # initialize rs1
li x31, 0x68f764b085c690b9 # initialize rs2
sra x1, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x38928194fdfc1f29 # initialize rs1
li x17, 0x494066a7bb5f7149 # initialize rs2
sra x0, x0, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xc8dc307a30afd1d1 # initialize rs1
li x21, 0x4dcc33fdc89619e2 # initialize rs2
sra x1, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x0e1713d682dff656 # initialize rs1
li x1, 0xfb32b961be6585de # initialize rs2
sra x2, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xa4cfc549838ac56e # initialize rs1
li x27, 0x828faf56ac117219 # initialize rs2
sra x3, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xde42c8315a3b351a # initialize rs1
li x23, 0xb2a9aae6b2dd3271 # initialize rs2
sra x4, x4, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa2cfdad1074a3c9c # initialize rs1
li x14, 0xf5ed659a6c21aa63 # initialize rs2
sra x5, x5, x14 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4af67504707c4a14 # initialize rs1
li x12, 0x132c772d07372e0e # initialize rs2
sra x6, x6, x12 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbee6ca2d1e7ac3b9 # initialize rs1
li x14, 0x696a4788372a7749 # initialize rs2
sra x7, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xe43eb37d799f22b9 # initialize rs1
li x18, 0xa120ac81d83d6d95 # initialize rs2
sra x8, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xd1c580f13242ead5 # initialize rs1
li x17, 0xda36bc360104470b # initialize rs2
sra x9, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x82e588c633d32c17 # initialize rs1
li x17, 0x8a0e5e8eba54fc84 # initialize rs2
sra x10, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x2098447fb8cd1a6d # initialize rs1
li x27, 0x5ab5b3e233bb45ef # initialize rs2
sra x11, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x71c8285d4f3d3a66 # initialize rs1
li x26, 0x91e25a4206ca5810 # initialize rs2
sra x12, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x86efa62be3a58b49 # initialize rs1
li x24, 0x0600b3115bcf24a1 # initialize rs2
sra x13, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x9b2a121f4e610100 # initialize rs1
li x26, 0x9200edfa1bd3c051 # initialize rs2
sra x14, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xf7b29b2763702e07 # initialize rs1
li x11, 0x8a8d54282923ef47 # initialize rs2
sra x15, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xd299f18d965307e2 # initialize rs1
li x14, 0x14ff70fd26fea931 # initialize rs2
sra x16, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xe805ca8e3ab9fefb # initialize rs1
li x28, 0x6ac27e8917062dda # initialize rs2
sra x17, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x3cfde13a9760104e # initialize rs1
li x10, 0x8b68c63dde735397 # initialize rs2
sra x18, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1ac29ccd8396a931 # initialize rs1
li x19, 0x271b24b6663e5a39 # initialize rs2
sra x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xb674f9a17262beed # initialize rs1
li x25, 0x4e1e29dd55685735 # initialize rs2
sra x20, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x59f78c135d5ec570 # initialize rs1
li x27, 0xa687e42ceb498e3f # initialize rs2
sra x21, x21, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x6906e7093159b287 # initialize rs1
li x25, 0x4e6c3ec06251aa54 # initialize rs2
sra x22, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x572607a2aae4e093 # initialize rs1
li x3, 0xe095890ff7776a67 # initialize rs2
sra x23, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xa54d9e9b1d257233 # initialize rs1
li x30, 0xa9369d96a0517ed4 # initialize rs2
sra x24, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x59a7c2916112b493 # initialize rs1
li x17, 0xe74fe633c1b7801c # initialize rs2
sra x25, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xcea930a85468cb23 # initialize rs1
li x2, 0xc48b603dbd50131b # initialize rs2
sra x26, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xf3eae491d0444b7a # initialize rs1
li x13, 0xc815dd7c208afa45 # initialize rs2
sra x27, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x750eeec5ac5c6034 # initialize rs1
li x9, 0xbe703b31a6b82b08 # initialize rs2
sra x28, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xc794c967e9ac0076 # initialize rs1
li x10, 0xc961bc759bbc28a1 # initialize rs2
sra x29, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xcb6d31e94c7ad45c # initialize rs1
li x8, 0x01dc22059b4d9808 # initialize rs2
sra x30, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x1690833116a6e27c # initialize rs1
li x27, 0x6b840364981ee5ae # initialize rs2
sra x31, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x19, 0xc55f4db5c34591df # initialize rs1
li x0, 0xdc07d03d4e1c6423 # initialize rs2
sra x0, x19, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x20, 0xaeedf31d6e558306 # initialize rs1
li x1, 0xac5a6399897ffcce # initialize rs2
sra x1, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x24, 0x19feaeda3e749f9d # initialize rs1
li x2, 0x356387dd527476c0 # initialize rs2
sra x2, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x22, 0x8c15f84fa71b0f9a # initialize rs1
li x3, 0x5693383379f66b50 # initialize rs2
sra x3, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x29, 0x7149c879253aa80b # initialize rs1
li x4, 0x20b4c6bd05ef5aa6 # initialize rs2
sra x4, x29, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0xcbfa8c8ef7f0c038 # initialize rs1
li x5, 0x6520800a41b0b233 # initialize rs2
sra x5, x4, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x21, 0x9702127bb470e4a8 # initialize rs1
li x6, 0x71eddf6148123d11 # initialize rs2
sra x6, x21, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0xc92efb3e00f5ba75 # initialize rs1
li x7, 0xea1860be0be5ed05 # initialize rs2
sra x7, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x25, 0xdfbfecf57ffe2723 # initialize rs1
li x8, 0xff9e5770ed32dac9 # initialize rs2
sra x8, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x5, 0x9296b880b46c9804 # initialize rs1
li x9, 0xd6a86ce94458ab2f # initialize rs2
sra x9, x5, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x17, 0x29a91b9be34225dc # initialize rs1
li x10, 0xbc2ea974c3b5765b # initialize rs2
sra x10, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x25, 0xb3147c485934ae1f # initialize rs1
li x11, 0xe1a8f99efaefa2d9 # initialize rs2
sra x11, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x30, 0x0967bbfe8c0c570f # initialize rs1
li x12, 0xf403335d85da5150 # initialize rs2
sra x12, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0x9981a37645e0dab3 # initialize rs1
li x13, 0xad65145c9afb0bb3 # initialize rs2
sra x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x5, 0x3e8b6086d2c27b71 # initialize rs1
li x14, 0x5976a2126617fc32 # initialize rs2
sra x14, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x22, 0x5c44d48247a77fa7 # initialize rs1
li x15, 0xe346a3637d12e468 # initialize rs2
sra x15, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x17, 0x1db0cc59874d4b07 # initialize rs1
li x16, 0xcd5d3d75806d6097 # initialize rs2
sra x16, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x12, 0x86b87f8b7f03ec01 # initialize rs1
li x17, 0xf7ace6b519e00534 # initialize rs2
sra x17, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x28, 0xa92adba54b4ca9fe # initialize rs1
li x18, 0x4cff2d2157910289 # initialize rs2
sra x18, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x9, 0xa7c709638eae24bd # initialize rs1
li x19, 0xcfb140a4188f0429 # initialize rs2
sra x19, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x15, 0x604000db31e46670 # initialize rs1
li x20, 0xa1391f80b3ba9c41 # initialize rs2
sra x20, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x13, 0x09185ce8687dc9a5 # initialize rs1
li x21, 0x37ef7da56327751f # initialize rs2
sra x21, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x12, 0x1eb08ddfeb21e81d # initialize rs1
li x22, 0xfea62959e1ae6f20 # initialize rs2
sra x22, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x19, 0x3397f4aff0b4250e # initialize rs1
li x23, 0xb222bb32f6b4d614 # initialize rs2
sra x23, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x2, 0x095014bc593d2669 # initialize rs1
li x24, 0x3946213dd439b8a3 # initialize rs2
sra x24, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x2, 0xd96d3fb35d7e1db1 # initialize rs1
li x25, 0xce29f03e39d278e5 # initialize rs2
sra x25, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x25, 0x689b6992861bcb3a # initialize rs1
li x26, 0x22584c8e23172681 # initialize rs2
sra x26, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x12, 0xf103ec2d2898ffa4 # initialize rs1
li x27, 0x6fa882ccd1cd3b40 # initialize rs2
sra x27, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x22, 0xaa8be384bed4ad14 # initialize rs1
li x28, 0xebbb6c7ece39ab80 # initialize rs2
sra x28, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x8, 0x777e548258a5c79c # initialize rs1
li x29, 0x1fff83bae378d5d1 # initialize rs2
sra x29, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x30, 0x6bc977267d238697 # initialize rs1
li x30, 0x134c4c94eda6cc1b # initialize rs2
sra x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x24, 0x05a67941d9a6ccb7 # initialize rs1
li x31, 0x7ab6a9bef4e42635 # initialize rs2
sra x31, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xd1d5fa6342f4c46c # initialize rs1
li x0, 0x6d844f243c277165 # initialize rs2
sra x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x55a56a908b0d7e5d # initialize rs1
li x1, 0x0ebe0f8a1ce71a87 # initialize rs2
sra x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x351477c08b630da7 # initialize rs1
li x2, 0x252fec988c4dfe7c # initialize rs2
sra x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x8aa5a0eea815dfee # initialize rs1
li x3, 0xec3196458041a6cf # initialize rs2
sra x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x97cee75fd0da417d # initialize rs1
li x4, 0x1a9ccc677a900156 # initialize rs2
sra x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x428ebec27b3a6dcf # initialize rs1
li x5, 0x8feed678b48051be # initialize rs2
sra x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x25d9828df20fb495 # initialize rs1
li x6, 0x435a0753dd769f42 # initialize rs2
sra x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x6faf111bdb04387e # initialize rs1
li x7, 0x6433cdfe84b1c6f8 # initialize rs2
sra x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xbbcfde749d39be68 # initialize rs1
li x8, 0xe1760741d6c6950a # initialize rs2
sra x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xa0ad32857db60a5f # initialize rs1
li x9, 0xba6f80cc6b3454fd # initialize rs2
sra x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x3a344f74ee7107cb # initialize rs1
li x10, 0xd8a09f3d20ca5405 # initialize rs2
sra x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x94a462bd8eb5bf08 # initialize rs1
li x11, 0x442830aa8275adbd # initialize rs2
sra x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x8872339d041c3eff # initialize rs1
li x12, 0x05fcb71e005ab7c9 # initialize rs2
sra x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x8ad100ddcfe5517d # initialize rs1
li x13, 0x9f82e53adc21b789 # initialize rs2
sra x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x8a0599bd306038c3 # initialize rs1
li x14, 0xc2a681e0b74f0345 # initialize rs2
sra x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xa17b62ff7858f281 # initialize rs1
li x15, 0x6a6c431bcdd7b767 # initialize rs2
sra x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x60a912d68cfc7e3f # initialize rs1
li x16, 0xdcca596690cd46f9 # initialize rs2
sra x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x03c7d8e98a443eff # initialize rs1
li x17, 0x0275d0372bd0adfa # initialize rs2
sra x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x667d70f02a4e0686 # initialize rs1
li x18, 0x065eb421471b944f # initialize rs2
sra x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xe31015cf8036c325 # initialize rs1
li x19, 0xc79fe54fe644cadc # initialize rs2
sra x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x6fcd1c1dd841b2fc # initialize rs1
li x20, 0xcdebab7252b68d24 # initialize rs2
sra x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x6452cecef669fbb1 # initialize rs1
li x21, 0xaab7f4dd8bb4d668 # initialize rs2
sra x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x77b3eaa79d1e47d2 # initialize rs1
li x22, 0xb10470e5ee8a0eb7 # initialize rs2
sra x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x41beab24bce0aa3e # initialize rs1
li x23, 0x92b1d6cd31009ffc # initialize rs2
sra x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x8bcfc82b7b652ffd # initialize rs1
li x24, 0x031bde1f8dcd6ec1 # initialize rs2
sra x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x27e47e425e83fca4 # initialize rs1
li x25, 0x16a41b11d0e0f103 # initialize rs2
sra x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xb33e4dcca4574ff4 # initialize rs1
li x26, 0xd181ba7f6584490b # initialize rs2
sra x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x1ee7929d97b6948d # initialize rs1
li x27, 0xea1830e51e97d3f7 # initialize rs2
sra x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x9f258559e5a7da75 # initialize rs1
li x28, 0x388fbae330c9bc7c # initialize rs2
sra x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x5a439fd6fc1b7293 # initialize rs1
li x29, 0x4530e6cf573557dc # initialize rs2
sra x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x3919fbea5dc23b0c # initialize rs1
li x30, 0x0ad19c76ffc31d58 # initialize rs2
sra x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x5ad7f18e9d5f18e6 # initialize rs1
li x31, 0x3eaa891c3507296c # initialize rs2
sra x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x21, x11 # perform first operation
sra x16, x3, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x22, x23 # perform first operation
sra x1, x3, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x19, x31 # perform first operation
sra x30, x25, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x23, x30, x11 # perform first operation
sra x11, x23, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x7, x2 # perform first operation
sra x7, x31, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x20, x23 # perform first operation
sra x6, x28, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x13, x27, x12 # perform first operation
sra x13, x17, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x14, x1 # perform first operation
sra x19, x23, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x26, x31 # perform first operation
sra x8, x28, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x8, x28, x2 # perform first operation
sra x28, x1, x20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x12, x3 # perform first operation
sra x3, x28, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x2, x14 # perform first operation
sra x17, x16, x8 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-addw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2a0fec6f25ccf0e0 # initialize rs1
li x30, 0x4f206d57810617ef # initialize rs2
addw x15, x0, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x7118cc2830ab47b8 # initialize rs1
li x17, 0x9a6479ca3abc33ca # initialize rs2
addw x22, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xeeec2a733f6b8e04 # initialize rs1
li x29, 0x7a487b454e1ef0c5 # initialize rs2
addw x6, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x5fa970e5e6b2e35d # initialize rs1
li x21, 0xd86b8e5774e9ac91 # initialize rs2
addw x22, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x67446641ace299dd # initialize rs1
li x17, 0xcddb3dc50e72bcb8 # initialize rs2
addw x28, x4, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x7e12cf04dd168410 # initialize rs1
li x21, 0x745198e86bd6075a # initialize rs2
addw x28, x5, x21 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x5e5e527a2ad2d9df # initialize rs1
li x21, 0x175dcf57b443aed1 # initialize rs2
addw x12, x6, x21 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x0567e62696e5e5ba # initialize rs1
li x21, 0x320bb08ae985d254 # initialize rs2
addw x30, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x3d3818bc11a6a34f # initialize rs1
li x22, 0x5cf590543af509bb # initialize rs2
addw x21, x8, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xe17adfd5a496fd56 # initialize rs1
li x6, 0x08495550fca3082f # initialize rs2
addw x5, x9, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x3c9213f62959fe23 # initialize rs1
li x27, 0x6b8b1de789c361c6 # initialize rs2
addw x15, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x74853eb0f5021e60 # initialize rs1
li x5, 0x72dba9903fc363f1 # initialize rs2
addw x14, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xfc095ae63cfd68cc # initialize rs1
li x10, 0xfdfcdebd3b4c2a38 # initialize rs2
addw x18, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x8e331fdf871f0220 # initialize rs1
li x29, 0x230ac5650821f17b # initialize rs2
addw x19, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xf38b0465ce0a7632 # initialize rs1
li x22, 0xd8af9d8a23b34134 # initialize rs2
addw x21, x14, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x1ca85ef5f3d15841 # initialize rs1
li x9, 0x066acf72372d7ad1 # initialize rs2
addw x16, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x547d5aded5b56b03 # initialize rs1
li x12, 0x1da2cc882f964fd3 # initialize rs2
addw x2, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xd57323e9c9a75143 # initialize rs1
li x29, 0xfee73242dd6dd923 # initialize rs2
addw x23, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xa60f65a20b79e1a4 # initialize rs1
li x24, 0xda23b3fbc6051bc0 # initialize rs2
addw x9, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe3fcb98b1bef129f # initialize rs1
li x6, 0x4027a100cf0dd6e8 # initialize rs2
addw x30, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xb3fef9f55de69056 # initialize rs1
li x5, 0x836fc344b6e75f4f # initialize rs2
addw x10, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xb0a484b550becace # initialize rs1
li x6, 0xeea7987b1bbbb1ce # initialize rs2
addw x11, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x984803c39c24403f # initialize rs1
li x27, 0x13296f6930c8847d # initialize rs2
addw x3, x22, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xf4b3468cbace51b2 # initialize rs1
li x31, 0x03b49d1668fd1fe1 # initialize rs2
addw x11, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x04bcad99fd1ac5da # initialize rs1
li x15, 0x2c8c178c3140e9f9 # initialize rs2
addw x16, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x4ece52ab55ad78e7 # initialize rs1
li x2, 0x878c506a66e4c1c1 # initialize rs2
addw x30, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x02d6f19956512021 # initialize rs1
li x1, 0xf000094abcc28c8c # initialize rs2
addw x2, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x790beb20d1b14258 # initialize rs1
li x10, 0xf32dce8f2d3b97e7 # initialize rs2
addw x23, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x5ba358f473eae71a # initialize rs1
li x9, 0xcf2ec119189d7e66 # initialize rs2
addw x17, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x5d42e91bb2ea4775 # initialize rs1
li x17, 0xf308ce974ecfb86a # initialize rs2
addw x21, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x675415681dbe66f2 # initialize rs1
li x13, 0x50671fad349de14b # initialize rs2
addw x2, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xf459c91705dfb904 # initialize rs1
li x29, 0x79763f0ea04d58e0 # initialize rs2
addw x5, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x21, 0x7c07ecb8a4380277 # initialize rs1
li x0, 0xd028721fb6684ddd # initialize rs2
addw x11, x21, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x28, 0x82e57b7c8977bd2a # initialize rs1
li x1, 0x1239a0559915e0cc # initialize rs2
addw x6, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x19, 0xe180448656af233f # initialize rs1
li x2, 0xf4ff5adbe172a124 # initialize rs2
addw x7, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x29, 0x691cb64f97adf75b # initialize rs1
li x3, 0x051366f0740d787c # initialize rs2
addw x16, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0x63206e05f1ea329d # initialize rs1
li x4, 0xf31582f1bfa92324 # initialize rs2
addw x30, x10, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0xfff09137685df9ce # initialize rs1
li x5, 0x7de6c439ed2e305e # initialize rs2
addw x1, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0xd86ff82194e85e33 # initialize rs1
li x6, 0xcebd8c0a2db77d4b # initialize rs2
addw x24, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x24, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x8, 0xa0f6f3de1d57cc39 # initialize rs1
li x7, 0x043ed6aa0134295b # initialize rs2
addw x3, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x16, 0x357f59aa9073ccb3 # initialize rs1
li x8, 0x95715006a90d996c # initialize rs2
addw x3, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x7, 0x7bc450d1daf6ad8f # initialize rs1
li x9, 0xeb8da46a87e0f85d # initialize rs2
addw x15, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x13, 0xfbd5b884911c945b # initialize rs1
li x10, 0xec2a01b1f4488b66 # initialize rs2
addw x25, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x26, 0x8dfa8e66682a6c8f # initialize rs1
li x11, 0x0b4dfc9dcfc14bed # initialize rs2
addw x3, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x11, 0xa815727d14932012 # initialize rs1
li x12, 0x4aaa3a71bd026101 # initialize rs2
addw x28, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x14, 0x5f95ead306f5cc13 # initialize rs1
li x13, 0x81b1f2457deabde2 # initialize rs2
addw x28, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x8, 0x0882c6561889f418 # initialize rs1
li x14, 0xb24afcbb6c6905a3 # initialize rs2
addw x13, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x19, 0x4d1ca6ccbd890ddb # initialize rs1
li x15, 0x4e957fee6fb8bf10 # initialize rs2
addw x7, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x26, 0xe6aa1715b5418ab1 # initialize rs1
li x16, 0x3222a63333881fb1 # initialize rs2
addw x25, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x11, 0x5629a183065bb72f # initialize rs1
li x17, 0xa21e9a035e006852 # initialize rs2
addw x27, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x13, 0xa8c9b98522ce92ff # initialize rs1
li x18, 0xe6fdd0b24c7eab50 # initialize rs2
addw x24, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x27, 0xd4de1b2ce8f558aa # initialize rs1
li x19, 0xf6dfe41f84afeeeb # initialize rs2
addw x26, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x11, 0xeadb33ace82a26eb # initialize rs1
li x20, 0xac9c8b61a514eb14 # initialize rs2
addw x1, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x11, 0xbe969214867750ca # initialize rs1
li x21, 0xdf10953b3332217d # initialize rs2
addw x31, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x11, 0xfc94313271732b7b # initialize rs1
li x22, 0xeb66085c2bf0b125 # initialize rs2
addw x23, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x22, 0xbfbcb79de0b8160b # initialize rs1
li x23, 0x26e5955e5637049d # initialize rs2
addw x2, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x10, 0xfe06ca8e12c89c53 # initialize rs1
li x24, 0xe50687c24a916ff9 # initialize rs2
addw x25, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x30, 0x525c6a3e31fd2e28 # initialize rs1
li x25, 0xedfb534990710870 # initialize rs2
addw x23, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x25, 0xb0347a94e6f04087 # initialize rs1
li x26, 0x233a66011d41c8c8 # initialize rs2
addw x8, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x30, 0xecc991213c916a8c # initialize rs1
li x27, 0x91e5892fd8b044aa # initialize rs2
addw x24, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x19, 0xfa0998ff5328314c # initialize rs1
li x28, 0xccb82994bea47f0b # initialize rs2
addw x18, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x23, 0xb3b9c50ace247945 # initialize rs1
li x29, 0x897a9a51499b80aa # initialize rs2
addw x11, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x19, 0x4672ba3887283816 # initialize rs1
li x30, 0xb848cf70b67693a5 # initialize rs2
addw x24, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x16, 0xeaf80cb7a2ac93c2 # initialize rs1
li x31, 0x1dc1d26ba6221bd5 # initialize rs2
addw x21, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 504)

# Testcase cp_rd (Test destination rd = x0)
li x9, 0x20e2a901df6f4e14 # initialize rs1
li x18, 0x30a64728fec43d84 # initialize rs2
addw x0, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x7, 0xe564bfd2b4b4dd4b # initialize rs1
li x17, 0xf9a3b6d410919e94 # initialize rs2
addw x1, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x27, 0x89e13a7bad1b34de # initialize rs1
li x12, 0xfec8a5f0d8947102 # initialize rs2
addw x2, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x8, 0x04f879e097a60019 # initialize rs1
li x18, 0xe819017c5dd21bb5 # initialize rs2
addw x3, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0xc7f90a8815ca55dd # initialize rs1
li x15, 0x1bdea2fc53b80ded # initialize rs2
addw x4, x27, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x29, 0x0f35718a6c247379 # initialize rs1
li x17, 0x82a6cd1039d05ae5 # initialize rs2
addw x5, x29, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0x3416f7d11bf57242 # initialize rs1
li x2, 0x2f0c1fcc4ab73f03 # initialize rs2
addw x6, x31, x2 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x5, 0x5bfc0b2dbcce3216 # initialize rs1
li x2, 0x5ca82cf2806a5cd9 # initialize rs2
addw x7, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0x716d0f301659a01d # initialize rs1
li x31, 0xac399d7e7314c67a # initialize rs2
addw x8, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x156b16dbfd987d48 # initialize rs1
li x29, 0x65cf5a8645f75466 # initialize rs2
addw x9, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x27, 0x884436015d1086a6 # initialize rs1
li x30, 0x30b2475fe4e6c449 # initialize rs2
addw x10, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x8, 0xf45bfffd096cda26 # initialize rs1
li x23, 0x9fc84fc0bbc2b0f5 # initialize rs2
addw x11, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x7, 0x590fb2bd04d6d64a # initialize rs1
li x31, 0x35531688cb0294c1 # initialize rs2
addw x12, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x19, 0x0c84059dab1f2c41 # initialize rs1
li x3, 0xc53c34f7c7e6074a # initialize rs2
addw x13, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x21, 0x5222684141946267 # initialize rs1
li x18, 0xb7095c1a22794329 # initialize rs2
addw x14, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x9, 0x40073b32ea5f418a # initialize rs1
li x24, 0x82947f8931585256 # initialize rs2
addw x15, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x15, 0x1216d6712d8203b4 # initialize rs1
li x1, 0x5740893ed631c4fd # initialize rs2
addw x16, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x14, 0xff082c99865f3166 # initialize rs1
li x29, 0x1a7aa872cf062f1c # initialize rs2
addw x17, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x20, 0x80823435a10ed15f # initialize rs1
li x21, 0x19048eff8ea3ada3 # initialize rs2
addw x18, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x17, 0x82454d887cbc0660 # initialize rs1
li x15, 0x4ef6035ed62ba8da # initialize rs2
addw x19, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x17, 0x9e21dd1564c6ff1a # initialize rs1
li x16, 0x4485123cfb8b3924 # initialize rs2
addw x20, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x28, 0xae1f6b4c7ae9582f # initialize rs1
li x9, 0x9ca2097832cae847 # initialize rs2
addw x21, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x18, 0x671d7bb757c28d1b # initialize rs1
li x15, 0xae5ce1b596ecb302 # initialize rs2
addw x22, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x11, 0xba5d7efcd48c86e1 # initialize rs1
li x5, 0xf8085b88b8671ca5 # initialize rs2
addw x23, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x15, 0x7f570a39549bcdbc # initialize rs1
li x24, 0xf3ad65b03f0f5b6a # initialize rs2
addw x24, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x9, 0x899c0215fc9f04b9 # initialize rs1
li x5, 0xd863e8163933627f # initialize rs2
addw x25, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x14, 0x0fdde6efda5bac38 # initialize rs1
li x8, 0xb82ed5e9e145aa1b # initialize rs2
addw x26, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x12, 0x78367f389d9e55b7 # initialize rs1
li x22, 0x48c5127d180e1a0d # initialize rs2
addw x27, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x1, 0x00891e3eba19dccb # initialize rs1
li x25, 0x2c5bf8fc624ae4ee # initialize rs2
addw x28, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x15, 0x505ec0312dd413e1 # initialize rs1
li x3, 0x0341ba3867daab3b # initialize rs2
addw x29, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x28, 0xb62a95bb9da49528 # initialize rs1
li x5, 0xe9436d2e731398e9 # initialize rs2
addw x30, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x5, 0xbcfab207ea100c36 # initialize rs1
li x7, 0x726add0f435983d1 # initialize rs2
addw x31, x5, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x15, 0x0000000000000000 # initialize rs1
li x13, 0x65cb5c1074f1a5bf # initialize rs2
addw x23, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x1, 0x0000000000000001 # initialize rs1
li x24, 0xf70e8c034914ad21 # initialize rs2
addw x14, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x17, 0x0000000000000002 # initialize rs1
li x28, 0x8d26d288dccd4de0 # initialize rs2
addw x21, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x29, 0x8000000000000000 # initialize rs1
li x8, 0xafc23e0463394d31 # initialize rs2
addw x22, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x15, 0x8000000000000001 # initialize rs1
li x29, 0x5fb582158b95cfb4 # initialize rs2
addw x12, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x31, 0x7fffffffffffffff # initialize rs1
li x1, 0xdb29dfe9fb34ecbb # initialize rs2
addw x26, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x18, 0xbb81b2a493d4cd51 # initialize rs2
addw x8, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x6, 0xffffffffffffffff # initialize rs1
li x7, 0xc49119901c9ba8bd # initialize rs2
addw x11, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x3, 0xfffffffffffffffe # initialize rs1
li x16, 0x79123737b5ff357d # initialize rs2
addw x30, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0xe7e770256b35b5f3 # initialize rs2
addw x5, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x9046ab8dea5ba66c # initialize rs2
addw x9, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x1, 0x5555555555555555 # initialize rs1
li x20, 0x3b9b7348d77de7a2 # initialize rs2
addw x25, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x29, 0x00000000ffffffff # initialize rs1
li x1, 0x60b4d760cdfa72ba # initialize rs2
addw x23, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x22, 0x00000000fffffffe # initialize rs1
li x13, 0xeab1b8a49b51f97e # initialize rs2
addw x17, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x14, 0x0000000100000000 # initialize rs1
li x1, 0xf469ece69ddf90b9 # initialize rs2
addw x10, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x15, 0x0000000100000001 # initialize rs1
li x30, 0x88d6a338c3da53a2 # initialize rs2
addw x28, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x11, 0x9956b4dac700fa4f # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
addw x2, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x20, 0x67614d84342e1f2b # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
addw x1, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x7, 0xf7f0253b15827211 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
addw x5, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x19, 0x5b0166abaf07611b # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
addw x3, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x10, 0xe2031963f6f94851 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
addw x12, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x10, 0xbfbecb3e556a7a4d # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
addw x25, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x8, 0xef2bb16b3de615a3 # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
addw x2, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x20, 0x440f8d5e632ddba2 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
addw x6, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x31, 0x9693bd1670b3065a # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
addw x17, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x13, 0xc82c21357e46c4a2 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
addw x30, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x21, 0x0366680d442fbd52 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x27, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x27, 0xdfcc1d503e9c2f6b # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
addw x16, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x25, 0xf159cedfea4e02c3 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
addw x20, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x22, 0x20af2495625d7446 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
addw x9, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x23, 0xcef4fd457dd36b1a # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
addw x20, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x19, 0x07dae80aef41f198 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
addw x18, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x1, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
addw x23, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x6, 0x0000000000000000 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
addw x15, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x12, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
addw x25, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x28, 0x0000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
addw x8, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x3, 0x0000000000000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
addw x8, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000000000000 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
addw x15, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x18, 0x0000000000000000 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
addw x27, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x22, 0x0000000000000000 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
addw x19, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x30, 0x0000000000000000 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
addw x17, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x10, 0x0000000000000000 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
addw x14, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x0000000000000000 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x11, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x3, 0x0000000000000000 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
addw x23, x3, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x9, 0x0000000000000000 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
addw x25, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x20, 0x0000000000000000 # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
addw x25, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x31, 0x0000000000000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
addw x2, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x25, 0x0000000000000000 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
addw x16, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x16, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
addw x2, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x28, 0x0000000000000001 # initialize rs1
li x31, 0x0000000000000001 # initialize rs2
addw x6, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x1, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
addw x26, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x7, 0x0000000000000001 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
addw x15, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x23, 0x0000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
addw x3, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x5, 0x0000000000000001 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
addw x19, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x9, 0x0000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
addw x21, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x7, 0x0000000000000001 # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
addw x3, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000000000001 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
addw x7, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000000000001 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
addw x26, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x0000000000000001 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x7, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x6, 0x0000000000000001 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
addw x9, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x8, 0x0000000000000001 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
addw x26, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x9, 0x0000000000000001 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
addw x21, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x8, 0x0000000000000001 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
addw x31, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x21, 0x0000000000000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
addw x10, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x10, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
addw x12, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x13, 0x0000000000000002 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
addw x28, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x2, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
addw x24, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x8, 0x0000000000000002 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
addw x24, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x27, 0x0000000000000002 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
addw x3, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x22, 0x0000000000000002 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
addw x29, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x12, 0x0000000000000002 # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
addw x5, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x7, 0x0000000000000002 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
addw x31, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x11, 0x0000000000000002 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
addw x10, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x30, 0x0000000000000002 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
addw x15, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x0000000000000002 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x15, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x12, 0x0000000000000002 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
addw x2, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
addw x8, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x22, 0x0000000000000002 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
addw x29, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x16, 0x0000000000000002 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
addw x24, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x14, 0x0000000000000002 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
addw x29, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x10, 0x8000000000000000 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
addw x5, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x17, 0x8000000000000000 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
addw x8, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x20, 0x8000000000000000 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
addw x23, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x14, 0x8000000000000000 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
addw x27, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x2, 0x8000000000000000 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
addw x14, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x24, 0x8000000000000000 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
addw x8, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x15, 0x8000000000000000 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
addw x14, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x31, 0x8000000000000000 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
addw x5, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x30, 0x8000000000000000 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
addw x22, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x22, 0x8000000000000000 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
addw x30, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x8000000000000000 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x13, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x8, 0x8000000000000000 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
addw x20, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x18, 0x8000000000000000 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
addw x12, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x30, 0x8000000000000000 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
addw x14, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x18, 0x8000000000000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
addw x26, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x2, 0x8000000000000000 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
addw x17, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x9, 0x8000000000000001 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
addw x20, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x13, 0x8000000000000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
addw x28, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x19, 0x8000000000000001 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
addw x17, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x10, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
addw x25, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x25, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
addw x29, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x6, 0x8000000000000001 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
addw x7, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x20, 0x8000000000000001 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
addw x25, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x9, 0x8000000000000001 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
addw x15, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x29, 0x8000000000000001 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
addw x24, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x11, 0x8000000000000001 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
addw x13, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x8000000000000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x30, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x14, 0x8000000000000001 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
addw x6, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
addw x15, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x31, 0x8000000000000001 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
addw x14, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x24, 0x8000000000000001 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
addw x23, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x29, 0x8000000000000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
addw x20, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x30, 0x7fffffffffffffff # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
addw x5, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x3, 0x7fffffffffffffff # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
addw x28, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x24, 0x7fffffffffffffff # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
addw x22, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x10, 0x7fffffffffffffff # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
addw x24, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x28, 0x7fffffffffffffff # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
addw x9, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
addw x18, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x3, 0x7fffffffffffffff # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
addw x8, x3, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x20, 0x7fffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
addw x14, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x28, 0x7fffffffffffffff # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
addw x19, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x13, 0x7fffffffffffffff # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
addw x20, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x7fffffffffffffff # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x14, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x25, 0x7fffffffffffffff # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
addw x10, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
addw x5, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x24, 0x7fffffffffffffff # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
addw x2, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x21, 0x7fffffffffffffff # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
addw x6, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x2, 0x7fffffffffffffff # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
addw x31, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x11, 0x7ffffffffffffffe # initialize rs1
li x23, 0x0000000000000000 # initialize rs2
addw x5, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x31, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
addw x20, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x9, 0x7ffffffffffffffe # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
addw x23, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x21, 0x7ffffffffffffffe # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
addw x6, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x14, 0x7ffffffffffffffe # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
addw x10, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x15, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
addw x22, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x29, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
addw x6, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x11, 0x7ffffffffffffffe # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
addw x23, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x14, 0x7ffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
addw x19, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x16, 0x7ffffffffffffffe # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
addw x10, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x7ffffffffffffffe # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x16, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x25, 0x7ffffffffffffffe # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
addw x29, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x8, 0x7ffffffffffffffe # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
addw x18, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x2, 0x7ffffffffffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
addw x17, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x23, 0x7ffffffffffffffe # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
addw x31, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x12, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
addw x6, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x23, 0xffffffffffffffff # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
addw x24, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x16, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
addw x13, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x28, 0xffffffffffffffff # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
addw x7, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x26, 0xffffffffffffffff # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
addw x13, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x27, 0xffffffffffffffff # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
addw x20, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
addw x15, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x19, 0xffffffffffffffff # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
addw x14, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x18, 0xffffffffffffffff # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
addw x26, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x14, 0xffffffffffffffff # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
addw x9, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x6, 0xffffffffffffffff # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
addw x2, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0xffffffffffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x17, x29, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x8, 0xffffffffffffffff # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
addw x23, x8, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x8, 0xffffffffffffffff # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
addw x28, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x28, 0xffffffffffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
addw x19, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x24, 0xffffffffffffffff # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
addw x3, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x15, 0xffffffffffffffff # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
addw x23, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x18, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
addw x19, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x2, 0xfffffffffffffffe # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
addw x30, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x13, 0xfffffffffffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
addw x5, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x17, 0xfffffffffffffffe # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
addw x6, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x21, 0xfffffffffffffffe # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
addw x1, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x6, 0xfffffffffffffffe # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
addw x3, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x2, 0xfffffffffffffffe # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
addw x9, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x3, 0xfffffffffffffffe # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
addw x21, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x20, 0xfffffffffffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
addw x23, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x10, 0xfffffffffffffffe # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
addw x5, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0xfffffffffffffffe # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x11, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x25, 0xfffffffffffffffe # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
addw x28, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x15, 0xfffffffffffffffe # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
addw x1, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x27, 0xfffffffffffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
addw x31, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x27, 0xfffffffffffffffe # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
addw x15, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x12, 0xfffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
addw x23, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
addw x11, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x0000000000000001 # initialize rs2
addw x10, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
addw x11, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
addw x12, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
addw x6, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
addw x16, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
addw x30, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
addw x27, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
addw x14, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
addw x24, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x25, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
addw x23, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
addw x10, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
addw x24, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
addw x30, x20, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
addw x13, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
addw x22, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
addw x31, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
addw x20, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
addw x6, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
addw x6, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
addw x16, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
addw x1, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
addw x12, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
addw x18, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
addw x9, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x14, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
addw x27, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
addw x7, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
addw x21, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
addw x14, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
addw x15, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x21, 0x5555555555555555 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
addw x16, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x31, 0x5555555555555555 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
addw x1, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x20, 0x5555555555555555 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
addw x2, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x21, 0x5555555555555555 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
addw x17, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x1, 0x5555555555555555 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
addw x12, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x14, 0x5555555555555555 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
addw x22, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x11, 0x5555555555555555 # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
addw x14, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x27, 0x5555555555555555 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
addw x5, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x15, 0x5555555555555555 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
addw x16, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x11, 0x5555555555555555 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
addw x14, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x5555555555555555 # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x30, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x31, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
addw x1, x31, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x18, 0x5555555555555555 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
addw x31, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x14, 0x5555555555555555 # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
addw x29, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x20, 0x5555555555555555 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
addw x10, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x2, 0x5555555555555555 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
addw x7, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x9, 0x00000000ffffffff # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
addw x30, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x29, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
addw x1, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x26, 0x00000000ffffffff # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
addw x21, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x21, 0x00000000ffffffff # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
addw x8, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x5, 0x00000000ffffffff # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
addw x29, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x12, 0x00000000ffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
addw x22, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x9, 0x00000000ffffffff # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
addw x22, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x27, 0x00000000ffffffff # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
addw x17, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x5, 0x00000000ffffffff # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
addw x27, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x25, 0x00000000ffffffff # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
addw x6, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x00000000ffffffff # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x10, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x27, 0x00000000ffffffff # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
addw x24, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
addw x30, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x9, 0x00000000ffffffff # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
addw x21, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x1, 0x00000000ffffffff # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
addw x20, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x21, 0x00000000ffffffff # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
addw x13, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x5, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
addw x21, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x20, 0x00000000fffffffe # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
addw x6, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x29, 0x00000000fffffffe # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
addw x8, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x22, 0x00000000fffffffe # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
addw x26, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x18, 0x00000000fffffffe # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
addw x6, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x25, 0x00000000fffffffe # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
addw x6, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0x00000000fffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
addw x18, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x8, 0x00000000fffffffe # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
addw x28, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x15, 0x00000000fffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
addw x18, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x9, 0x00000000fffffffe # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
addw x16, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0x00000000fffffffe # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x28, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x23, 0x00000000fffffffe # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
addw x27, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x8, 0x00000000fffffffe # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
addw x19, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x18, 0x00000000fffffffe # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
addw x9, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x30, 0x00000000fffffffe # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
addw x21, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x8, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
addw x5, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x19, 0x0000000100000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
addw x24, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x20, 0x0000000100000000 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
addw x26, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x24, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
addw x22, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x6, 0x0000000100000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
addw x5, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x2, 0x0000000100000000 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
addw x8, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000100000000 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
addw x20, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x16, 0x0000000100000000 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
addw x9, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x13, 0x0000000100000000 # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
addw x5, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
addw x9, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x12, 0x0000000100000000 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
addw x29, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x0000000100000000 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x5, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x14, 0x0000000100000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
addw x6, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
addw x30, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x18, 0x0000000100000000 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
addw x22, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x14, 0x0000000100000000 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
addw x17, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x13, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
addw x16, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x14, 0x0000000100000001 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
addw x28, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x31, 0x0000000100000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
addw x10, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x30, 0x0000000100000001 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
addw x22, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x25, 0x0000000100000001 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
addw x2, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x16, 0x0000000100000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
addw x20, x16, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x11, 0x0000000100000001 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
addw x16, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x13, 0x0000000100000001 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
addw x12, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x29, 0x0000000100000001 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
addw x30, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x1, 0x0000000100000001 # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
addw x24, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x18, 0x0000000100000001 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
addw x7, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000100000001 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
addw x25, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x2, 0x0000000100000001 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
addw x25, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x7, 0x0000000100000001 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
addw x14, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x9, 0x0000000100000001 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
addw x25, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x25, 0x0000000100000001 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
addw x15, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x10, 0x0000000100000001 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
addw x8, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xfe2a7be232c2d4b4 # initialize rs1
li x0, 0x771f6a88f6b5a052 # initialize rs2
addw x12, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xf4c1532e28de4689 # initialize rs1
li x1, 0xf7d7c020f1321660 # initialize rs2
addw x29, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x5db060d805446f24 # initialize rs1
li x2, 0x58670f72fac610a8 # initialize rs2
addw x3, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xbdb6f1181e152008 # initialize rs1
li x3, 0x1514367215bcc58e # initialize rs2
addw x21, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf1413c2ff4d01347 # initialize rs1
li x4, 0x7503df790715f6d2 # initialize rs2
addw x2, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x785687216d8b572c # initialize rs1
li x5, 0x280947f2b39aae45 # initialize rs2
addw x7, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x7, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x1904f56098b77f37 # initialize rs1
li x6, 0x716477665e2fadde # initialize rs2
addw x30, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x30, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9c53f93664eb4101 # initialize rs1
li x7, 0xcc0f453a92f6dc0b # initialize rs2
addw x26, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x6813140cc9effa31 # initialize rs1
li x8, 0x910714ff00c4b37c # initialize rs2
addw x16, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x49bf6617b4b1df2f # initialize rs1
li x9, 0xe3ea0d028ce4f4b1 # initialize rs2
addw x22, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xb9ace93779f87625 # initialize rs1
li x10, 0x7ede6a3f85d37a5d # initialize rs2
addw x21, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xc4151b7a6ed8692e # initialize rs1
li x11, 0x3ff16ec77f243fa9 # initialize rs2
addw x5, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x1576fa86b4e8035c # initialize rs1
li x12, 0x7e5a9777e1ada583 # initialize rs2
addw x20, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xdb6e85b6565bde56 # initialize rs1
li x13, 0x90c187d40972b1e1 # initialize rs2
addw x15, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x598b02ea79ac0946 # initialize rs1
li x14, 0x6623cffe9f9bc84e # initialize rs2
addw x21, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x06e3a9ed2f692efe # initialize rs1
li x15, 0x3d6f83c69d09fe5a # initialize rs2
addw x2, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xaaa994a9b990fe64 # initialize rs1
li x16, 0xd09bd679a24f3e92 # initialize rs2
addw x31, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xf623db0388564c73 # initialize rs1
li x17, 0xb13ef18c751020e3 # initialize rs2
addw x24, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xf382639917b8ec38 # initialize rs1
li x18, 0xa52586ac3f4a287b # initialize rs2
addw x26, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x1d5033ce1b53ad9e # initialize rs1
li x19, 0xc7f3c9fedc782564 # initialize rs2
addw x7, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x15379fbe23c7daa9 # initialize rs1
li x20, 0x81f083566cbdfc99 # initialize rs2
addw x13, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x2761031f9c7d5648 # initialize rs1
li x21, 0xa0731ecf05f95a51 # initialize rs2
addw x3, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xd2d669e07652741c # initialize rs1
li x22, 0x55911a06675f0dd4 # initialize rs2
addw x28, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x143eb09b21eb72bb # initialize rs1
li x23, 0x7ec5e8ff073113ae # initialize rs2
addw x8, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x573462a6ecd43211 # initialize rs1
li x24, 0xcc50d77b46aa1b3f # initialize rs2
addw x10, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x8b80a40b2d2083d9 # initialize rs1
li x25, 0x3e0aad34a28108e4 # initialize rs2
addw x2, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x48823c0f4dcd52d5 # initialize rs1
li x26, 0x01a130e49bd25c88 # initialize rs2
addw x6, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x6719a306cf7f9145 # initialize rs1
li x27, 0xcf0a9d086edab44d # initialize rs2
addw x5, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x6d488333da68f21f # initialize rs1
li x28, 0x66667e1d39987cec # initialize rs2
addw x25, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x029edf8178711ffb # initialize rs1
li x29, 0x0f530b5a9c488439 # initialize rs2
addw x17, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xc412a05758f1719b # initialize rs1
li x30, 0xf553283cd4903b49 # initialize rs2
addw x20, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xaaa6a453f6ab4188 # initialize rs1
li x31, 0x2eb944ff31a5369b # initialize rs2
addw x5, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xcae2b8d152b0c047 # initialize rs1
li x5, 0xd2dc128b4a8f2b15 # initialize rs2
addw x0, x0, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xde09f12a5b066238 # initialize rs1
li x26, 0x1e36df4e7eaeb248 # initialize rs2
addw x1, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x7d6dfd8cc93fc6b1 # initialize rs1
li x16, 0x642a200fe0f7121e # initialize rs2
addw x2, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x598c0012b392d811 # initialize rs1
li x30, 0x5a46b3efb40cb443 # initialize rs2
addw x3, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf2c01e273747866f # initialize rs1
li x29, 0x195de3e38020ddc8 # initialize rs2
addw x4, x4, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2d14881b7c6e267f # initialize rs1
li x6, 0x0501a029f5e8ab20 # initialize rs2
addw x5, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
li x6, 0x98acd2ba0a12ee7b # initialize rs1
li x9, 0xead81597756b0534 # initialize rs2
addw x6, x6, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xdec7a636dbe077e4 # initialize rs1
li x29, 0xbf2c76fde6fd87d4 # initialize rs2
addw x7, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x30e2ac4d7bd7b5ec # initialize rs1
li x24, 0x435c7471f3125e2d # initialize rs2
addw x8, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xb4a50c02a61de8f7 # initialize rs1
li x21, 0x0cf1898652e75c39 # initialize rs2
addw x9, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x97cbd827a4bf013c # initialize rs1
li x1, 0xf5b6907d73f447c2 # initialize rs2
addw x10, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xbdd71bbc55b5afa8 # initialize rs1
li x29, 0x1262201f49e4efeb # initialize rs2
addw x11, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x8e2ee45c44e05d93 # initialize rs1
li x22, 0xd94dd0a14edb39b7 # initialize rs2
addw x12, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xcb5158630a304268 # initialize rs1
li x29, 0xc87fbc5eaaa1b820 # initialize rs2
addw x13, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x59d28b86cf6111b0 # initialize rs1
li x6, 0x368e4f42b070d4a4 # initialize rs2
addw x14, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xfedd2750383cbd48 # initialize rs1
li x31, 0x8190fd7d7cf0d38b # initialize rs2
addw x15, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x276ec5718682cb9d # initialize rs1
li x7, 0x5f36863e5c6289ed # initialize rs2
addw x16, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x08c9e663972300b7 # initialize rs1
li x5, 0x43df5972cf9e4721 # initialize rs2
addw x17, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xe30195415a97d3b4 # initialize rs1
li x29, 0x865d8cfd8373612a # initialize rs2
addw x18, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xf9a4fdd0e2875bc8 # initialize rs1
li x2, 0x75c337afb42c4ebc # initialize rs2
addw x19, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x8a55d200ca2e64c1 # initialize rs1
li x6, 0x6baacb014a68d056 # initialize rs2
addw x20, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x3f4934259adc13f3 # initialize rs1
li x22, 0xaf4eea7e78c8a748 # initialize rs2
addw x21, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xb82dc091d75c0bdf # initialize rs1
li x8, 0xccc4ea2fd051643f # initialize rs2
addw x22, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x8a435d46c3ea958d # initialize rs1
li x7, 0xca602d0aaa5a2ed3 # initialize rs2
addw x23, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x2f7e9856b73044bc # initialize rs1
li x31, 0x7221b48c1b6d3a17 # initialize rs2
addw x24, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x99aeca8d440213e5 # initialize rs1
li x5, 0x2dc7989192f38e27 # initialize rs2
addw x25, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xfe9c391a946bb0d4 # initialize rs1
li x11, 0x56ba482249741df0 # initialize rs2
addw x26, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xb0db97c597746eef # initialize rs1
li x10, 0x9530577dd6e416cc # initialize rs2
addw x27, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x653643e3e93bfbd6 # initialize rs1
li x3, 0x13f0d4598ff017eb # initialize rs2
addw x28, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xdcce73f085cc93d6 # initialize rs1
li x10, 0x292c85c527bee864 # initialize rs2
addw x29, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x8ed3de7637c337ec # initialize rs1
li x31, 0xc100f315156bc3da # initialize rs2
addw x30, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x72573b75fc32ebec # initialize rs1
li x7, 0x6b9b3f3d1699aaad # initialize rs2
addw x31, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x5, 0xb5914d23dabc392c # initialize rs1
li x0, 0xc57db9e7d0e241e0 # initialize rs2
addw x0, x5, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x22, 0xad24749736b00943 # initialize rs1
li x1, 0xebbb7a0e2ef87ed1 # initialize rs2
addw x1, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x5, 0x41192373f6b6ff5d # initialize rs1
li x2, 0x08f4b0a485916a68 # initialize rs2
addw x2, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x17, 0x0e16df3574f1daa5 # initialize rs1
li x3, 0xed35f0b2f8ed97d7 # initialize rs2
addw x3, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x30, 0xd2cd69a7f3cfddc8 # initialize rs1
li x4, 0x227ab046fea72ac9 # initialize rs2
addw x4, x30, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0xb3833cb8f857b22c # initialize rs1
li x5, 0xff79ddddb76ac5b1 # initialize rs2
addw x5, x11, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0x28f412d2c899437e # initialize rs1
li x6, 0x3549105568af1e64 # initialize rs2
addw x6, x23, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x8, 0x6df9f6307b2b708a # initialize rs1
li x7, 0xa5d6dd4c6942c869 # initialize rs2
addw x7, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x16, 0x99d83fe86577aced # initialize rs1
li x8, 0xb032c207477cb30d # initialize rs2
addw x8, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x25, 0x7a3aa8e65d0bfcaf # initialize rs1
li x9, 0xe541a0adf6105077 # initialize rs2
addw x9, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x31, 0xb6b407b8b63f74e9 # initialize rs1
li x10, 0xe4fb2441e226f03d # initialize rs2
addw x10, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x14, 0xfde004f49db8d361 # initialize rs1
li x11, 0x957330d87438646c # initialize rs2
addw x11, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x31, 0x09f4ebf44c39f3bd # initialize rs1
li x12, 0x354fc7240bc55bb1 # initialize rs2
addw x12, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x18, 0x01e24ce07afa53db # initialize rs1
li x13, 0xb434339686b31513 # initialize rs2
addw x13, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x12, 0xa27cee3923ffe291 # initialize rs1
li x14, 0x064bbe18177e3f75 # initialize rs2
addw x14, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x24, 0xb4b789c11ba2b1f5 # initialize rs1
li x15, 0xe5fc8df2d7cc41f6 # initialize rs2
addw x15, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x15, 0x8643fb211d3e2534 # initialize rs1
li x16, 0x170018a706d044a4 # initialize rs2
addw x16, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x6, 0x4ee9617e7c32cc02 # initialize rs1
li x17, 0x20293940c80a16f0 # initialize rs2
addw x17, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x3, 0x164c9c3f5a450ba4 # initialize rs1
li x18, 0xf20fc5a1ac7428f0 # initialize rs2
addw x18, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x16, 0x8fab9a6d870dad10 # initialize rs1
li x19, 0xb651b877d4e4bd05 # initialize rs2
addw x19, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x5, 0x2c2eafebd580a770 # initialize rs1
li x20, 0x517537644d8b4e47 # initialize rs2
addw x20, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x26, 0xfb663190379705bc # initialize rs1
li x21, 0x5368d106796edb91 # initialize rs2
addw x21, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x16, 0x15110edbf6b511af # initialize rs1
li x22, 0x5bc934074bf7fc7d # initialize rs2
addw x22, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x29, 0x44f07531c9b4cc68 # initialize rs1
li x23, 0xc2be2d0c079f5e2d # initialize rs2
addw x23, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x6, 0x1e28f5c40d4663ee # initialize rs1
li x24, 0xfa10749ddaef999d # initialize rs2
addw x24, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x20, 0xfeaa11863084e8d7 # initialize rs1
li x25, 0xf9ecc1b7b4e6448e # initialize rs2
addw x25, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x26, 0x6b3e3b489d7003c8 # initialize rs1
li x26, 0x8ea88f953fe35abc # initialize rs2
addw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x16, 0xc5c806061e609156 # initialize rs1
li x27, 0x09a6920adb1d3548 # initialize rs2
addw x27, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x13, 0x853f7b4b28ff51de # initialize rs1
li x28, 0xec6d693658f78d91 # initialize rs2
addw x28, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x29, 0x0fcfb9fcd55bb0dd # initialize rs1
li x29, 0x1b72204bcee6e264 # initialize rs2
addw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x19, 0x05d0e88fe40c669d # initialize rs1
li x30, 0x931fe40e026822e4 # initialize rs2
addw x30, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x20, 0xe763ec9a16279d90 # initialize rs1
li x31, 0xa65b5d9d7e3a2977 # initialize rs2
addw x31, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xc1037c943e22b7a5 # initialize rs1
li x0, 0xdfbb48bac38a24b3 # initialize rs2
addw x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xb94f9e297a4d78d3 # initialize rs1
li x1, 0xbe2769d46f3eaf5f # initialize rs2
addw x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x63d2a8a2d08a7fbc # initialize rs1
li x2, 0xe750e0905c2c2fc5 # initialize rs2
addw x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x96d282768fd72890 # initialize rs1
li x3, 0xe14594099eb297fa # initialize rs2
addw x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x7b0d91556c9ff470 # initialize rs1
li x4, 0xcf3e01f3b65b53ed # initialize rs2
addw x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xc839b822872dbad7 # initialize rs1
li x5, 0x0bf117ea76aff242 # initialize rs2
addw x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc24452f2f76a7f4a # initialize rs1
li x6, 0x73de7d63ab4b5636 # initialize rs2
addw x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xfa422310bb164442 # initialize rs1
li x7, 0xa1d456a1d777a7dd # initialize rs2
addw x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x1dfa4deda2b6df78 # initialize rs1
li x8, 0xa92d4012b31055f8 # initialize rs2
addw x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x9bc82633e6d37e79 # initialize rs1
li x9, 0x3cf26057e71ea58a # initialize rs2
addw x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xf78c7c4997212edf # initialize rs1
li x10, 0x7e2c2d6876967fbc # initialize rs2
addw x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xa79c58d07e662a63 # initialize rs1
li x11, 0x2fe470dfee020df1 # initialize rs2
addw x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x62987a20f03e2616 # initialize rs1
li x12, 0x0df4eb1fab854d96 # initialize rs2
addw x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x944a2801aca9e9ad # initialize rs1
li x13, 0x03982f6fdff25f25 # initialize rs2
addw x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x2975400adc13652e # initialize rs1
li x14, 0x097bc06bd0e11abb # initialize rs2
addw x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x9d48c0a08c531852 # initialize rs1
li x15, 0xfe34ac9b5aa2bb27 # initialize rs2
addw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x0860ef76197d6042 # initialize rs1
li x16, 0xc85aa31db87ff314 # initialize rs2
addw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x67e52a64795b96a5 # initialize rs1
li x17, 0x7432e1e4955adb49 # initialize rs2
addw x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xaab9f18a9301e3de # initialize rs1
li x18, 0x88d5eaa1681320d4 # initialize rs2
addw x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x923a9993c2b73052 # initialize rs1
li x19, 0x70b0dd741e890be8 # initialize rs2
addw x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xff13283f94330524 # initialize rs1
li x20, 0xe6e020981c4185aa # initialize rs2
addw x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xb2ec179fb15afe41 # initialize rs1
li x21, 0xeb3885f5eb79e502 # initialize rs2
addw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xc2abecabe47ce9ad # initialize rs1
li x22, 0xbb8a2a3a1c4b1055 # initialize rs2
addw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x937052cb293a1247 # initialize rs1
li x23, 0x1d09aa8b7e2fa6e1 # initialize rs2
addw x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xfb1929bd3674a709 # initialize rs1
li x24, 0x18376d32740359c3 # initialize rs2
addw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x7df216e6aa8644b8 # initialize rs1
li x25, 0xb81cc7078124ec51 # initialize rs2
addw x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x7e307545258ae8f4 # initialize rs1
li x26, 0x23bfac8ab7744fd2 # initialize rs2
addw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x4a06711ff8e0adb3 # initialize rs1
li x27, 0x19ee0285d59243ad # initialize rs2
addw x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xe858fa6b660e4247 # initialize rs1
li x28, 0xfedd0ddf4f4853ee # initialize rs2
addw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xb404f6492d451192 # initialize rs1
li x29, 0x0184b4cad557729d # initialize rs2
addw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x44adfaf38a59aba8 # initialize rs1
li x30, 0x8aaf92171c979029 # initialize rs2
addw x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x0c169a35ebafdd58 # initialize rs1
li x31, 0x47f0c238232ffcab # initialize rs2
addw x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x10, x8 # perform first operation
addw x30, x7, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x28, x15 # perform first operation
addw x10, x24, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x21, x16, x12 # perform first operation
addw x30, x31, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x10, x15, x5 # perform first operation
addw x3, x10, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x16, x9 # perform first operation
addw x9, x22, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x24, x27, x7 # perform first operation
addw x7, x19, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x5, x28 # perform first operation
addw x8, x1, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x26, x14 # perform first operation
addw x20, x22, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x1, x9 # perform first operation
addw x11, x5, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x19, x6, x21 # perform first operation
addw x6, x24, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x25, x22, x20 # perform first operation
addw x20, x14, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x28, x30 # perform first operation
addw x2, x31, x6 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-srlw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2a315f3a6b21c83b # initialize rs1
li x5, 0x6f6b9fa3ef4b3622 # initialize rs2
srlw x1, x0, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x92e3cfb4b4c713c7 # initialize rs1
li x18, 0xf15e85891269cf73 # initialize rs2
srlw x3, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x13a6939832b485be # initialize rs1
li x28, 0x9357ddab700344e5 # initialize rs2
srlw x8, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x714ad6e54f37815c # initialize rs1
li x23, 0xd8ca00c5a3d7e514 # initialize rs2
srlw x8, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe839946fa0fa250b # initialize rs1
li x1, 0x03e8823c2393bcb6 # initialize rs2
srlw x28, x4, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x82592fc681294d4e # initialize rs1
li x12, 0x275c4492d80d2fa0 # initialize rs2
srlw x1, x5, x12 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xaf53e62207e4b4b4 # initialize rs1
li x31, 0x0b1ba1544d319201 # initialize rs2
srlw x12, x6, x31 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x717a91f94c2795a0 # initialize rs1
li x27, 0x90cc52e0b2fbbe06 # initialize rs2
srlw x4, x7, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x7431c900b33235c4 # initialize rs1
li x24, 0xfe2f995bcb98915a # initialize rs2
srlw x3, x8, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x80cfae31e7025ec4 # initialize rs1
li x15, 0xb09ed15404c75b3c # initialize rs2
srlw x4, x9, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xd7e8835a4f65310c # initialize rs1
li x26, 0x3cb9b34cc0b30254 # initialize rs2
srlw x13, x10, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xff0f46c6bd5fed26 # initialize rs1
li x14, 0xb060fc6e7575fe14 # initialize rs2
srlw x1, x11, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xff0e33fc8c0f0334 # initialize rs1
li x13, 0xb4a7af88a5551ccc # initialize rs2
srlw x9, x12, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xfe959d8f884ea832 # initialize rs1
li x25, 0x834c98d00b727743 # initialize rs2
srlw x17, x13, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x4616822cfc6c5e02 # initialize rs1
li x16, 0xbf5cb8e1ae14e83d # initialize rs2
srlw x23, x14, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xf61beaeaa8d8293b # initialize rs1
li x21, 0xa2d7346f65ff05e6 # initialize rs2
srlw x30, x15, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x6114c4d9cedc0a7c # initialize rs1
li x26, 0x675a027f4b7fb179 # initialize rs2
srlw x9, x16, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x1704d9f79627f553 # initialize rs1
li x20, 0x084f82ea701e4637 # initialize rs2
srlw x24, x17, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x59ad9507c351d09c # initialize rs1
li x25, 0x3df76a3d28cf1de4 # initialize rs2
srlw x29, x18, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe03938b6088f7cc9 # initialize rs1
li x10, 0x6f4ff8eebb9c8be8 # initialize rs2
srlw x20, x19, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x839e9a3f7aac5f1d # initialize rs1
li x24, 0x7be0f680922abeaa # initialize rs2
srlw x17, x20, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xe8bb1d3888043e2c # initialize rs1
li x1, 0xe21f5fe233d2b5bc # initialize rs2
srlw x25, x21, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x102511255f4b2fd6 # initialize rs1
li x6, 0x1098263b1666b0d8 # initialize rs2
srlw x4, x22, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xca230f7f71158491 # initialize rs1
li x30, 0x94721d90252daa71 # initialize rs2
srlw x21, x23, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xfc152b4011aeaeae # initialize rs1
li x22, 0x24f6d9f5da46b6a0 # initialize rs2
srlw x1, x24, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x3098efc47d93cd23 # initialize rs1
li x29, 0xbded20d955b0b94f # initialize rs2
srlw x10, x25, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x080cde0d2f924ca1 # initialize rs1
li x30, 0x810d1bf6cce0d4df # initialize rs2
srlw x7, x26, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe636d99d31b5472a # initialize rs1
li x9, 0x1ebd2aeb7d5a2820 # initialize rs2
srlw x1, x27, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x30780291b3dc2d89 # initialize rs1
li x29, 0xb3258ab37880be7a # initialize rs2
srlw x3, x28, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x9ee6cac6af6353d0 # initialize rs1
li x15, 0x44b290b30e0e5c77 # initialize rs2
srlw x14, x29, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x552c35adbb1268ef # initialize rs1
li x16, 0xfd5ad50b3778e936 # initialize rs2
srlw x25, x30, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xf8a2cea37b4b46b8 # initialize rs1
li x1, 0x849fb949a0a043f3 # initialize rs2
srlw x9, x31, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x24, 0xf52f1c64640368e0 # initialize rs1
li x0, 0x08e306c630094c81 # initialize rs2
srlw x10, x24, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x28, 0x42ee75d16b8e017d # initialize rs1
li x1, 0x4632d2bdf85a877a # initialize rs2
srlw x11, x28, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x20, 0xd4f42e7604cdaf22 # initialize rs1
li x2, 0xb88d22225b263e11 # initialize rs2
srlw x22, x20, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x17, 0x268ac05ce0565e3f # initialize rs1
li x3, 0x550225cb646b91ea # initialize rs2
srlw x30, x17, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
li x13, 0xe3730f630be953b7 # initialize rs1
li x4, 0x6db45f97a132388b # initialize rs2
srlw x8, x13, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0xf966cc4a7f5540a9 # initialize rs1
li x5, 0x080fbdf2397fd979 # initialize rs2
srlw x25, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x25, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0xe01bcd90960afa93 # initialize rs1
li x6, 0x5575575e3a959f20 # initialize rs2
srlw x26, x31, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x26, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x1, 0x7096127f05b4cf12 # initialize rs1
li x7, 0x67beacfdfe7b2af7 # initialize rs2
srlw x5, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x27, 0xdba6f722c3032295 # initialize rs1
li x8, 0x3bf6e400e9175382 # initialize rs2
srlw x5, x27, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x31, 0x056024ec017332ce # initialize rs1
li x9, 0x6e116ed46f3a51f4 # initialize rs2
srlw x15, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x31, 0xf6d153b8d3307e3b # initialize rs1
li x10, 0xc0e8653f60774cf9 # initialize rs2
srlw x19, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x21, 0xd76c79e8aec5fc8c # initialize rs1
li x11, 0x9cac22a5f257ee07 # initialize rs2
srlw x31, x21, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x5, 0x42ad85c2e5d7b0b0 # initialize rs1
li x12, 0xaf5fafd65c5f1ecd # initialize rs2
srlw x29, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x1, 0xe2a3218d9985219d # initialize rs1
li x13, 0xe717de35388535b4 # initialize rs2
srlw x26, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x3, 0x40a3f7f1d43f79a6 # initialize rs1
li x14, 0x8471f48af4ef18ab # initialize rs2
srlw x2, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x22, 0x64442b7c1c5d3df4 # initialize rs1
li x15, 0x800a9433d4191524 # initialize rs2
srlw x29, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x20, 0x7b8d66dd89f453f3 # initialize rs1
li x16, 0xc5ea4d780e36f788 # initialize rs2
srlw x10, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x25, 0xf8799851e665fb51 # initialize rs1
li x17, 0x2ba6a6d2716bd92c # initialize rs2
srlw x10, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x8, 0x74274c6f5027dd1f # initialize rs1
li x18, 0x80457ce41788c1ef # initialize rs2
srlw x25, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x6, 0xd3bf6eba180b6494 # initialize rs1
li x19, 0xbc080026146a94ad # initialize rs2
srlw x10, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x15, 0x83152a6a98016ae9 # initialize rs1
li x20, 0x128e2941f3a99a73 # initialize rs2
srlw x2, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x10, 0xf3fb82d2445af9a5 # initialize rs1
li x21, 0x72ef027b2b9140d2 # initialize rs2
srlw x7, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x21, 0x4196ad17566a671f # initialize rs1
li x22, 0x4c63e5aeb3de97c4 # initialize rs2
srlw x24, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x29, 0x599853ddba4e1f34 # initialize rs1
li x23, 0x2bc422e6a72f11e2 # initialize rs2
srlw x9, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x10, 0x207d7b5014b42477 # initialize rs1
li x24, 0xa4443f994fcd39ed # initialize rs2
srlw x11, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x17, 0x493dbd6bb4162ac6 # initialize rs1
li x25, 0x647fcc877c62e3e5 # initialize rs2
srlw x20, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x15, 0x648bdb7f2ed8accb # initialize rs1
li x26, 0x9ffc3cfbe94a8f89 # initialize rs2
srlw x25, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x22, 0x90dc73fb475c9841 # initialize rs1
li x27, 0xea7effce858aa2f4 # initialize rs2
srlw x18, x22, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x13, 0xa4b5e726bf984edc # initialize rs1
li x28, 0xbace33e1891af08a # initialize rs2
srlw x29, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x14, 0x9731349cabfcdb3a # initialize rs1
li x29, 0xfb5c49dcf961d21e # initialize rs2
srlw x17, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x24, 0x8b1228ffca0c7ca0 # initialize rs1
li x30, 0x5dc6e0ae60b27f3d # initialize rs2
srlw x1, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x27, 0x6ecf1e63626e69b3 # initialize rs1
li x31, 0x42bfba12dc12676b # initialize rs2
srlw x25, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 504)

# Testcase cp_rd (Test destination rd = x0)
li x14, 0x84d2fb720d2797a9 # initialize rs1
li x16, 0xf71938dc8c9f7888 # initialize rs2
srlw x0, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x26, 0x8abd3f704cd686b4 # initialize rs1
li x1, 0x23edd5efae75e930 # initialize rs2
srlw x1, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x26, 0xdd541116c2a4ff88 # initialize rs1
li x1, 0x3f0567177b9f635a # initialize rs2
srlw x2, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x23, 0xf34ab0dce0c63661 # initialize rs1
li x2, 0x1a290cefe6c1990a # initialize rs2
srlw x3, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0xab26a04287a3bbfb # initialize rs1
li x2, 0x608a308a79220493 # initialize rs2
srlw x4, x10, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0xcd00f8530e96cf0a # initialize rs1
li x23, 0x1bf4eda1d468c68b # initialize rs2
srlw x5, x3, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0x654f3b1df3a2287b # initialize rs1
li x27, 0xc401ec4c1e6c3618 # initialize rs2
srlw x6, x23, x27 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x18, 0xc47dd659f9705d5b # initialize rs1
li x30, 0x45137d91d42e887c # initialize rs2
srlw x7, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x7, 0xbde70951b254f4f3 # initialize rs1
li x24, 0x6a0989735e8f04f2 # initialize rs2
srlw x8, x7, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x7, 0x7902a77f5be75c59 # initialize rs1
li x29, 0xeb756fd467821cf4 # initialize rs2
srlw x9, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x17, 0x07e97e6ba831188e # initialize rs1
li x27, 0xa8db631a3781a118 # initialize rs2
srlw x10, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x8, 0x3d0a50426bf8dffd # initialize rs1
li x6, 0x0a7d946340009663 # initialize rs2
srlw x11, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x21, 0x78f136fa6c802eec # initialize rs1
li x19, 0x8cb1863ea5cb9688 # initialize rs2
srlw x12, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x13, 0x53ddc66995a13595 # initialize rs1
li x7, 0x6490088f2615d22f # initialize rs2
srlw x13, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x19, 0x1c65c03aaf731788 # initialize rs1
li x11, 0x770959cf5eecbc75 # initialize rs2
srlw x14, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x16, 0x386cbfeaa19a485b # initialize rs1
li x26, 0x0fb0f6f143c444cb # initialize rs2
srlw x15, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x3, 0x10120d5b1cce26e8 # initialize rs1
li x21, 0x67cdd6705ae64317 # initialize rs2
srlw x16, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x13, 0x86ec72320d0aec75 # initialize rs1
li x7, 0x8beb7ad77c558039 # initialize rs2
srlw x17, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x16, 0x9d063eaf59da0ce8 # initialize rs1
li x20, 0x3b9017eba991248d # initialize rs2
srlw x18, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x16, 0xb1f35ab9421f79f9 # initialize rs1
li x14, 0x7587788801b16f30 # initialize rs2
srlw x19, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x5, 0x19d285112c16212b # initialize rs1
li x3, 0x4e12d8f17edcb89f # initialize rs2
srlw x20, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x24, 0xf0187fb1827447c8 # initialize rs1
li x10, 0x4399b75471d6347f # initialize rs2
srlw x21, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x9, 0xcdefb957a6d5590d # initialize rs1
li x16, 0xddec061265c72c62 # initialize rs2
srlw x22, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x1, 0x86825cdad3324605 # initialize rs1
li x17, 0x85ad41521199af94 # initialize rs2
srlw x23, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x9, 0x84893c8e6388a739 # initialize rs1
li x11, 0xe9360f53ffe18c75 # initialize rs2
srlw x24, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x28, 0x37b61690e637847b # initialize rs1
li x18, 0x6c340f9c3bb6f941 # initialize rs2
srlw x25, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x31, 0x8dfa51c2e81b3c39 # initialize rs1
li x14, 0xc786806276868d6c # initialize rs2
srlw x26, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x10, 0xfd4ff817d57603fe # initialize rs1
li x23, 0x2ecdfbaa58b10032 # initialize rs2
srlw x27, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x8, 0x14c02f0229842f6f # initialize rs1
li x16, 0x16758370a3ef25c2 # initialize rs2
srlw x28, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x23, 0x3b0451a13ccfbe7a # initialize rs1
li x9, 0xbc4098abf7ad0b97 # initialize rs2
srlw x29, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x20, 0x4deaaf9ec32e92c5 # initialize rs1
li x24, 0x3ae798c04113f0c3 # initialize rs2
srlw x30, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x2, 0xb5eb5635dc02c949 # initialize rs1
li x3, 0x44baf3304f54ec26 # initialize rs2
srlw x31, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x26, 0x0000000000000000 # initialize rs1
li x15, 0xc4cf7f8dbf551ddf # initialize rs2
srlw x27, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x13, 0x0000000000000001 # initialize rs1
li x3, 0x598989074a546b82 # initialize rs2
srlw x18, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x2, 0x0000000000000002 # initialize rs1
li x8, 0xb680e3e7c54f8636 # initialize rs2
srlw x23, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x20, 0x8000000000000000 # initialize rs1
li x26, 0xa294389b07d15955 # initialize rs2
srlw x27, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x19, 0x8000000000000001 # initialize rs1
li x29, 0xca5757a53c933330 # initialize rs2
srlw x16, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x5, 0x7fffffffffffffff # initialize rs1
li x23, 0x6eb60f9c0e188b6a # initialize rs2
srlw x20, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x10, 0x7ffffffffffffffe # initialize rs1
li x24, 0x60ea61d787a67733 # initialize rs2
srlw x17, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x31, 0xffffffffffffffff # initialize rs1
li x18, 0x04419e30c5eb28d1 # initialize rs2
srlw x30, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x14, 0xfffffffffffffffe # initialize rs1
li x6, 0xaa034f47c14e8cab # initialize rs2
srlw x24, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x55c1acaeac67fab2 # initialize rs2
srlw x25, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0xbc8fc32028f9c076 # initialize rs2
srlw x12, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x2, 0x5555555555555555 # initialize rs1
li x30, 0x8ed92f180dceb219 # initialize rs2
srlw x29, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x14, 0x00000000ffffffff # initialize rs1
li x11, 0x2a1c832b326bb643 # initialize rs2
srlw x25, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x19, 0x00000000fffffffe # initialize rs1
li x29, 0xf89c396bb703edec # initialize rs2
srlw x26, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x17, 0x0000000100000000 # initialize rs1
li x3, 0xdbad58a7b355e7db # initialize rs2
srlw x8, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x14, 0x0000000100000001 # initialize rs1
li x9, 0xa1b45feebf956df2 # initialize rs2
srlw x22, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x7, 0x607475853b05d767 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
srlw x14, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x8, 0xca307028e7ab78be # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
srlw x12, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x25, 0x56c45d867da62f71 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
srlw x17, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x11, 0x93e130ea33b1eaec # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
srlw x10, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x15, 0x821c81c5e571d494 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
srlw x5, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x16, 0x6da66cf7c21f8058 # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
srlw x27, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x2, 0xa82ad1683ae74e3b # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
srlw x14, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x25, 0x40853abe8e6f708d # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
srlw x15, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x14, 0x5c8859fed4128fb2 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
srlw x7, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x20, 0xbd7db3b962ce2c69 # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
srlw x18, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x20, 0x2ce7ef0f7bdb42df # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x25, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x10, 0x908d2dd4f9a5cb31 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
srlw x12, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x24, 0x28384889bffd35fd # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
srlw x17, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x20, 0xc55532b99736ad98 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
srlw x21, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x6, 0xa1b6460c6cefa148 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
srlw x10, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x9, 0x26dcd96f74cf241f # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
srlw x28, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x17, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
srlw x23, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x6, 0x0000000000000000 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
srlw x12, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x6, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
srlw x16, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x29, 0x0000000000000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
srlw x7, x29, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x5, 0x0000000000000000 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
srlw x24, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x25, 0x0000000000000000 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
srlw x7, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000000 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
srlw x14, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x12, 0x0000000000000000 # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
srlw x29, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x20, 0x0000000000000000 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
srlw x5, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x12, 0x0000000000000000 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
srlw x15, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000000000000 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x1, x27, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x20, 0x0000000000000000 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
srlw x11, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x15, 0x0000000000000000 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
srlw x1, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x1, 0x0000000000000000 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
srlw x7, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x22, 0x0000000000000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
srlw x30, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x16, 0x0000000000000000 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
srlw x24, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x30, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
srlw x20, x30, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x7, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
srlw x21, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x24, 0x0000000000000001 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
srlw x14, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x1, 0x0000000000000001 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
srlw x28, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x27, 0x0000000000000001 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
srlw x25, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
srlw x6, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x30, 0x0000000000000001 # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
srlw x13, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
srlw x7, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x5, 0x0000000000000001 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
srlw x30, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x20, 0x0000000000000001 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
srlw x13, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000000000001 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x30, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x7, 0x0000000000000001 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
srlw x11, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x7, 0x0000000000000001 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
srlw x5, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x28, 0x0000000000000001 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
srlw x25, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x23, 0x0000000000000001 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
srlw x14, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x24, 0x0000000000000001 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
srlw x25, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x19, 0x0000000000000002 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
srlw x15, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x9, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
srlw x30, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x31, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
srlw x29, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x6, 0x0000000000000002 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
srlw x11, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x5, 0x0000000000000002 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
srlw x10, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000000000002 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
srlw x14, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x13, 0x0000000000000002 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
srlw x8, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x12, 0x0000000000000002 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
srlw x29, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x18, 0x0000000000000002 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
srlw x13, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x23, 0x0000000000000002 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
srlw x17, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x0000000000000002 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x11, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x30, 0x0000000000000002 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
srlw x3, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x22, 0x0000000000000002 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
srlw x26, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x15, 0x0000000000000002 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
srlw x9, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x27, 0x0000000000000002 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
srlw x19, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x1, 0x0000000000000002 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
srlw x27, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x2, 0x8000000000000000 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
srlw x11, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x5, 0x8000000000000000 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
srlw x3, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x23, 0x8000000000000000 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
srlw x31, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x19, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
srlw x15, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x30, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
srlw x13, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x13, 0x8000000000000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
srlw x12, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x19, 0x8000000000000000 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
srlw x9, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x10, 0x8000000000000000 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
srlw x6, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x24, 0x8000000000000000 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
srlw x7, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x15, 0x8000000000000000 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
srlw x5, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x8000000000000000 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x24, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x25, 0x8000000000000000 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
srlw x9, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x25, 0x8000000000000000 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
srlw x31, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x29, 0x8000000000000000 # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
srlw x8, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x19, 0x8000000000000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
srlw x14, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x18, 0x8000000000000000 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
srlw x15, x18, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x1, 0x8000000000000001 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
srlw x8, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x3, 0x8000000000000001 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
srlw x14, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x5, 0x8000000000000001 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
srlw x19, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x19, 0x8000000000000001 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
srlw x21, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x14, 0x8000000000000001 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
srlw x15, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
srlw x11, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x18, 0x8000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
srlw x23, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
srlw x7, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x11, 0x8000000000000001 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
srlw x29, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x20, 0x8000000000000001 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
srlw x18, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x8000000000000001 # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x14, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x24, 0x8000000000000001 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
srlw x26, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x24, 0x8000000000000001 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
srlw x29, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x12, 0x8000000000000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
srlw x31, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x31, 0x8000000000000001 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
srlw x16, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x17, 0x8000000000000001 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
srlw x16, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x19, 0x7fffffffffffffff # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
srlw x8, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x2, 0x7fffffffffffffff # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
srlw x11, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x29, 0x7fffffffffffffff # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
srlw x17, x29, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x20, 0x7fffffffffffffff # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
srlw x31, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x31, 0x7fffffffffffffff # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
srlw x6, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x7, 0x7fffffffffffffff # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
srlw x29, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x27, 0x7fffffffffffffff # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
srlw x1, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x21, 0x7fffffffffffffff # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
srlw x22, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x17, 0x7fffffffffffffff # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
srlw x18, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x2, 0x7fffffffffffffff # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
srlw x19, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x7fffffffffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x19, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x1, 0x7fffffffffffffff # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
srlw x9, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x13, 0x7fffffffffffffff # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
srlw x27, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x21, 0x7fffffffffffffff # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
srlw x17, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x11, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
srlw x13, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x1, 0x7fffffffffffffff # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
srlw x17, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x11, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
srlw x23, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x16, 0x7ffffffffffffffe # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
srlw x10, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x20, 0x7ffffffffffffffe # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
srlw x8, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x10, 0x7ffffffffffffffe # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
srlw x1, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x24, 0x7ffffffffffffffe # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
srlw x3, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x29, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
srlw x21, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x31, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
srlw x30, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x27, 0x7ffffffffffffffe # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
srlw x30, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x29, 0x7ffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
srlw x3, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x31, 0x7ffffffffffffffe # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
srlw x7, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x7ffffffffffffffe # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x1, x23, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x10, 0x7ffffffffffffffe # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
srlw x18, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x18, 0x7ffffffffffffffe # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
srlw x16, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
srlw x12, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x27, 0x7ffffffffffffffe # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
srlw x23, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x9, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
srlw x14, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x15, 0xffffffffffffffff # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
srlw x16, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x30, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
srlw x29, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x18, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
srlw x16, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x24, 0xffffffffffffffff # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
srlw x5, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x7, 0xffffffffffffffff # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
srlw x13, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x20, 0xffffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
srlw x22, x20, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x8, 0xffffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
srlw x26, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x13, 0xffffffffffffffff # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
srlw x7, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x25, 0xffffffffffffffff # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
srlw x26, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x24, 0xffffffffffffffff # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
srlw x14, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0xffffffffffffffff # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x12, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x3, 0xffffffffffffffff # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
srlw x12, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x2, 0xffffffffffffffff # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
srlw x7, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x2, 0xffffffffffffffff # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
srlw x3, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x2, 0xffffffffffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
srlw x30, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x23, 0xffffffffffffffff # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
srlw x24, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x11, 0xfffffffffffffffe # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
srlw x6, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x23, 0xfffffffffffffffe # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
srlw x25, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x11, 0xfffffffffffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
srlw x3, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x12, 0xfffffffffffffffe # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
srlw x28, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x2, 0xfffffffffffffffe # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
srlw x28, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x16, 0xfffffffffffffffe # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
srlw x14, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x24, 0xfffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
srlw x11, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
srlw x11, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x18, 0xfffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
srlw x12, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x21, 0xfffffffffffffffe # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
srlw x19, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0xfffffffffffffffe # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x21, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x23, 0xfffffffffffffffe # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
srlw x30, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x3, 0xfffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
srlw x8, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
srlw x2, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x27, 0xfffffffffffffffe # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
srlw x31, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x18, 0xfffffffffffffffe # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
srlw x27, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
srlw x8, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
srlw x16, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
srlw x20, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
srlw x9, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
srlw x11, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
srlw x25, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
srlw x17, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
srlw x25, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
srlw x7, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
srlw x18, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x21, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
srlw x8, x23, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
srlw x25, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
srlw x3, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
srlw x12, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
srlw x22, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
srlw x22, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
srlw x6, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
srlw x2, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
srlw x5, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
srlw x6, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
srlw x26, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
srlw x21, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
srlw x30, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
srlw x13, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
srlw x2, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x21, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
srlw x23, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
srlw x3, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
srlw x16, x21, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
srlw x23, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
srlw x27, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x19, 0x5555555555555555 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
srlw x21, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x18, 0x5555555555555555 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
srlw x1, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x3, 0x5555555555555555 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
srlw x11, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x8, 0x5555555555555555 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
srlw x27, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x1, 0x5555555555555555 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
srlw x13, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x10, 0x5555555555555555 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
srlw x1, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x11, 0x5555555555555555 # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
srlw x21, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x28, 0x5555555555555555 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
srlw x21, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x1, 0x5555555555555555 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
srlw x28, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x7, 0x5555555555555555 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
srlw x28, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x5555555555555555 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x27, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x29, 0x5555555555555555 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
srlw x10, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x5, 0x5555555555555555 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
srlw x31, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x21, 0x5555555555555555 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
srlw x5, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x6, 0x5555555555555555 # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
srlw x31, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x6, 0x5555555555555555 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
srlw x3, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x1, 0x00000000ffffffff # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
srlw x8, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x28, 0x00000000ffffffff # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
srlw x26, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x26, 0x00000000ffffffff # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
srlw x20, x26, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x12, 0x00000000ffffffff # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
srlw x8, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x6, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
srlw x28, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
srlw x22, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x5, 0x00000000ffffffff # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
srlw x27, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x17, 0x00000000ffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
srlw x28, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x16, 0x00000000ffffffff # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
srlw x5, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x22, 0x00000000ffffffff # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
srlw x5, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x00000000ffffffff # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x21, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x27, 0x00000000ffffffff # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
srlw x10, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x21, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
srlw x6, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x11, 0x00000000ffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
srlw x5, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x30, 0x00000000ffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
srlw x12, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x17, 0x00000000ffffffff # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
srlw x25, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x5, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
srlw x18, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x26, 0x00000000fffffffe # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
srlw x8, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x10, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
srlw x5, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x3, 0x00000000fffffffe # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
srlw x28, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x30, 0x00000000fffffffe # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
srlw x28, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x29, 0x00000000fffffffe # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
srlw x2, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x24, 0x00000000fffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
srlw x27, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x19, 0x00000000fffffffe # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
srlw x16, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x6, 0x00000000fffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
srlw x10, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x8, 0x00000000fffffffe # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
srlw x6, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000fffffffe # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x12, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x18, 0x00000000fffffffe # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
srlw x10, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x24, 0x00000000fffffffe # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
srlw x17, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
srlw x19, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x2, 0x00000000fffffffe # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
srlw x7, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x18, 0x00000000fffffffe # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
srlw x7, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x8, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
srlw x10, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x14, 0x0000000100000000 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
srlw x17, x14, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x10, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
srlw x8, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x30, 0x0000000100000000 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
srlw x20, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x23, 0x0000000100000000 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
srlw x7, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x25, 0x0000000100000000 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
srlw x20, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x8, 0x0000000100000000 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
srlw x20, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x16, 0x0000000100000000 # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
srlw x25, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000100000000 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
srlw x3, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000100000000 # initialize rs1
li x6, 0x5bbc887763ae86f2 # initialize rs2
srlw x15, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x0000000100000000 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x30, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x15, 0x0000000100000000 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
srlw x24, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x30, 0x0000000100000000 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
srlw x5, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x26, 0x0000000100000000 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
srlw x15, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x31, 0x0000000100000000 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
srlw x30, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x10, 0x0000000100000000 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
srlw x20, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x9, 0x0000000100000001 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
srlw x7, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x26, 0x0000000100000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
srlw x2, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x12, 0x0000000100000001 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
srlw x22, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x3, 0x0000000100000001 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
srlw x7, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x26, 0x0000000100000001 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
srlw x11, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000100000001 # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
srlw x25, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x11, 0x0000000100000001 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
srlw x1, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x5, 0x0000000100000001 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
srlw x14, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x5, 0x0000000100000001 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
srlw x16, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x21, 0x0000000100000001 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
srlw x7, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x0000000100000001 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
srlw x12, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x11, 0x0000000100000001 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
srlw x10, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x28, 0x0000000100000001 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
srlw x22, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
srlw x16, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x21, 0x0000000100000001 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
srlw x6, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x11, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
srlw x27, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x5904ea9780c4cfb4 # initialize rs1
li x0, 0xccdce24f1fd99827 # initialize rs2
srlw x30, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xcf88e045a9b5cc81 # initialize rs1
li x1, 0xb462a9c2c180e1dc # initialize rs2
srlw x5, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x529d23df2eee230e # initialize rs1
li x2, 0xa8c6151d97f20718 # initialize rs2
srlw x25, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xd75265a6af5b5e64 # initialize rs1
li x3, 0x4fdabd9929ca532d # initialize rs2
srlw x30, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe0f8c39717d08952 # initialize rs1
li x4, 0x01c37b9a3d3bfabb # initialize rs2
srlw x25, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xcada35ccd44b4b1d # initialize rs1
li x5, 0x8f337dedd4dae330 # initialize rs2
srlw x20, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc180fb5ebc730852 # initialize rs1
li x6, 0x6467e880ad6e8528 # initialize rs2
srlw x10, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xc9c0dbe4143bd709 # initialize rs1
li x7, 0xfa971ad091967c5a # initialize rs2
srlw x27, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xbff9982e0b9c13dd # initialize rs1
li x8, 0x4dc6e0db7f65d11e # initialize rs2
srlw x23, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x79c7493fc93fea16 # initialize rs1
li x9, 0x352eaf393ea1c617 # initialize rs2
srlw x10, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x35511f2e5953b3f3 # initialize rs1
li x10, 0x2b51edb6a09d16d4 # initialize rs2
srlw x14, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x0dd9a0b54743aa62 # initialize rs1
li x11, 0x1b7abb8f69e039e3 # initialize rs2
srlw x20, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xc197a4e61bca5323 # initialize rs1
li x12, 0x2996b62b25b6ee21 # initialize rs2
srlw x24, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x38c67ce204411a09 # initialize rs1
li x13, 0x7a9018aa2fda874a # initialize rs2
srlw x19, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xc435a05cec574e6b # initialize rs1
li x14, 0x33252e4d357b4beb # initialize rs2
srlw x8, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xda5a9267f1ef13aa # initialize rs1
li x15, 0xe94e329f11fcc635 # initialize rs2
srlw x3, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xf1ed09193259511f # initialize rs1
li x16, 0x94b9f437f8625f95 # initialize rs2
srlw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x0b849e0c8477e87b # initialize rs1
li x17, 0xcbfdd2aa582dd261 # initialize rs2
srlw x18, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x1dbab02117d84e9a # initialize rs1
li x18, 0x43413d81edc9f0c2 # initialize rs2
srlw x7, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xd5e954c9db96b3c9 # initialize rs1
li x19, 0xc5092edb29f2f432 # initialize rs2
srlw x3, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x4621ad02275c70e5 # initialize rs1
li x20, 0x39741b4a71eb85db # initialize rs2
srlw x12, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xa9db3e10e3941acc # initialize rs1
li x21, 0x5e718d18bd306850 # initialize rs2
srlw x10, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x68b117286919d4c9 # initialize rs1
li x22, 0x4b4627b9ae88f6ea # initialize rs2
srlw x13, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xd95be04d15fb48cd # initialize rs1
li x23, 0x06f0112074925ddf # initialize rs2
srlw x28, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x84ba309aa1c4f3d8 # initialize rs1
li x24, 0x57126a26b8af84f1 # initialize rs2
srlw x29, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xae4d5b109b81e1ec # initialize rs1
li x25, 0xddde11ac618789b1 # initialize rs2
srlw x31, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x9e4b72cefcea186f # initialize rs1
li x26, 0xeab94f0ba3c4a452 # initialize rs2
srlw x13, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xf63d5f3bc2643b1c # initialize rs1
li x27, 0x9f77fcd70f9a787e # initialize rs2
srlw x12, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x4d38b7d7b71add4e # initialize rs1
li x28, 0x5bae79e951639102 # initialize rs2
srlw x29, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xf1c225c51928ac44 # initialize rs1
li x29, 0xdf5228baa3430256 # initialize rs2
srlw x21, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x205d15f887f3c8cc # initialize rs1
li x30, 0x837f4969de421000 # initialize rs2
srlw x12, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x378b64df5dbb375d # initialize rs1
li x31, 0xf27bafe96dadb104 # initialize rs2
srlw x14, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x1825e3316d93942f # initialize rs1
li x3, 0x5201bebb4697b259 # initialize rs2
srlw x0, x0, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xcba6447c8068fc0f # initialize rs1
li x15, 0xd588fcc1ff41c293 # initialize rs2
srlw x1, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x45de8317527dcdf9 # initialize rs1
li x25, 0x82e3eb03396c7417 # initialize rs2
srlw x2, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x976c778ee48b14fb # initialize rs1
li x26, 0xb150dfe1c00538ab # initialize rs2
srlw x3, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x6d1479e22fc00841 # initialize rs1
li x7, 0x1234ae660d81bac7 # initialize rs2
srlw x4, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2439816af935fd16 # initialize rs1
li x2, 0x6c3f2a17349a3950 # initialize rs2
srlw x5, x5, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x77edcaf73e42401b # initialize rs1
li x27, 0x97a464f607c2a0fd # initialize rs2
srlw x6, x6, x27 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x6e5cb44eb05edc61 # initialize rs1
li x17, 0x2cac99771dc533f2 # initialize rs2
srlw x7, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x12353b51251c7589 # initialize rs1
li x21, 0xde3ca62f7cb318a1 # initialize rs2
srlw x8, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xfadbc9e73be66537 # initialize rs1
li x22, 0x7f957fda6f8a0f7d # initialize rs2
srlw x9, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xd5134db34d9c5ee2 # initialize rs1
li x6, 0x65e720642f37d6c7 # initialize rs2
srlw x10, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x11ebc99d96ce9087 # initialize rs1
li x26, 0xe3ab10a455b7e4c1 # initialize rs2
srlw x11, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x7f73b1d6cd89d89a # initialize rs1
li x26, 0xc3a685e4df946195 # initialize rs2
srlw x12, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x89b6c8c9e5f22914 # initialize rs1
li x9, 0x0ddeb92f2e445388 # initialize rs2
srlw x13, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x93e94a2de6a81584 # initialize rs1
li x17, 0xdd22d208de147ec1 # initialize rs2
srlw x14, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x6b36e2485d459021 # initialize rs1
li x13, 0x7dd2912bf5fb7944 # initialize rs2
srlw x15, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x85b4cfed0be7b031 # initialize rs1
li x26, 0x527be3ef026d5aff # initialize rs2
srlw x16, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xbf95bf2e2f5ec856 # initialize rs1
li x2, 0x0674717fa83f1114 # initialize rs2
srlw x17, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x42e14060be0f0440 # initialize rs1
li x7, 0xc4a9fbef04a4b7d3 # initialize rs2
srlw x18, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1dcc17fe78c0eec2 # initialize rs1
li x5, 0xa4cc5605195f0668 # initialize rs2
srlw x19, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x45bc173df244af83 # initialize rs1
li x1, 0x0d3a4a18bd89d160 # initialize rs2
srlw x20, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x338705b0d7c24a87 # initialize rs1
li x12, 0x5acc15c81d0b9146 # initialize rs2
srlw x21, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xd4d978501b6cede0 # initialize rs1
li x1, 0x805c9ae2b6d16c94 # initialize rs2
srlw x22, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x81484fbadc8b90d4 # initialize rs1
li x7, 0xa0a3678ec185c162 # initialize rs2
srlw x23, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xe19c8f4a993c5316 # initialize rs1
li x18, 0xd203263b8620e6f5 # initialize rs2
srlw x24, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xe6a3ad1102870981 # initialize rs1
li x1, 0x241002e4914940eb # initialize rs2
srlw x25, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x7d950c288019e31c # initialize rs1
li x22, 0x2bb8bb660fd2181b # initialize rs2
srlw x26, x26, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x88bfe374be8438e0 # initialize rs1
li x6, 0x60671d3e3ab2cfc5 # initialize rs2
srlw x27, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x4e099c4ef1e69293 # initialize rs1
li x5, 0x14599178c5a6d590 # initialize rs2
srlw x28, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x54d304e629f1eb1b # initialize rs1
li x25, 0x3ab231af3fbf65ee # initialize rs2
srlw x29, x29, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x6db65081b648956d # initialize rs1
li x7, 0xb060cd29140e6734 # initialize rs2
srlw x30, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xd972cb838ff7c43b # initialize rs1
li x10, 0x387aabebe33e7469 # initialize rs2
srlw x31, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x25, 0x00fa992d9dde1670 # initialize rs1
li x0, 0x92a8d3696a4fbe7c # initialize rs2
srlw x0, x25, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x19, 0xca1375a5cd0aff33 # initialize rs1
li x1, 0x48141a136c52d3aa # initialize rs2
srlw x1, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x26, 0xb9deaec97667645d # initialize rs1
li x2, 0x18b8aaa4e30bdb85 # initialize rs2
srlw x2, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x2, 0xd01c2cedc76ea953 # initialize rs1
li x3, 0x403926cd94decd2e # initialize rs2
srlw x3, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0xfb8e633026a134c3 # initialize rs1
li x4, 0x59fbf42b9ee861d3 # initialize rs2
srlw x4, x23, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x25, 0x52f6b23818e89c94 # initialize rs1
li x5, 0x420054e80c34614b # initialize rs2
srlw x5, x25, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x29, 0x7894cd9047ef3d16 # initialize rs1
li x6, 0x860a032bd83faf26 # initialize rs2
srlw x6, x29, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0x08a3be7627064f68 # initialize rs1
li x7, 0xc3d8c82192deff65 # initialize rs2
srlw x7, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x2, 0xecbdf4598831f89a # initialize rs1
li x8, 0xcadc2529e5b71ea2 # initialize rs2
srlw x8, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x20, 0x8bde9d0c65b18de3 # initialize rs1
li x9, 0x01aa8fc1a92847b6 # initialize rs2
srlw x9, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x3, 0x66038512fda35226 # initialize rs1
li x10, 0x83e3e888fd3db378 # initialize rs2
srlw x10, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x22, 0x0cc21df3244587a9 # initialize rs1
li x11, 0x0e5d873d7ea8ea99 # initialize rs2
srlw x11, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x25, 0x59637905eed36feb # initialize rs1
li x12, 0x0917e3e4e15c7654 # initialize rs2
srlw x12, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x1, 0x695d067ec9fc69e9 # initialize rs1
li x13, 0xdb67904a6eee4f2c # initialize rs2
srlw x13, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x27, 0x43b646eaea0e1053 # initialize rs1
li x14, 0x172c8e92afc2faca # initialize rs2
srlw x14, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x20, 0x156920ef2188260b # initialize rs1
li x15, 0xd9404924f6b8902e # initialize rs2
srlw x15, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x5, 0xf68beaaa0ebb1100 # initialize rs1
li x16, 0x48831a8677e79a78 # initialize rs2
srlw x16, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x31, 0x0a248d8968d63214 # initialize rs1
li x17, 0x4b42f594214876a3 # initialize rs2
srlw x17, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x21, 0xf107c2ad6d2a03f8 # initialize rs1
li x18, 0x33bfdd379c0b3f84 # initialize rs2
srlw x18, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x7, 0x711c85a8ee81ad51 # initialize rs1
li x19, 0x00788108f0787135 # initialize rs2
srlw x19, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x19, 0x1d726adb1be1cae0 # initialize rs1
li x20, 0x6ac40c9535c2e5e3 # initialize rs2
srlw x20, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x14, 0x3b61095781f5586d # initialize rs1
li x21, 0x568f58addbe49d93 # initialize rs2
srlw x21, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x2, 0x31a18424313d00b5 # initialize rs1
li x22, 0x221c3b583730b63c # initialize rs2
srlw x22, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x26, 0x561125d8a312d885 # initialize rs1
li x23, 0x3dccb7b0985d124c # initialize rs2
srlw x23, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x18, 0xd0861ee4865cf4ab # initialize rs1
li x24, 0x5e826c7d780a9b87 # initialize rs2
srlw x24, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x14, 0x9273cdea8199eb3f # initialize rs1
li x25, 0x402d7d9168ea1333 # initialize rs2
srlw x25, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x23, 0x79ed73cd0b558620 # initialize rs1
li x26, 0x41b83b0f359742b4 # initialize rs2
srlw x26, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x19, 0x1f2f40b3e5404cc4 # initialize rs1
li x27, 0x060310af60a3da49 # initialize rs2
srlw x27, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x8, 0xd252e0aa83a0d15c # initialize rs1
li x28, 0xb198c1f3fa7f4101 # initialize rs2
srlw x28, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x8, 0x46fc94e91444c594 # initialize rs1
li x29, 0xfde86cc562e91bc7 # initialize rs2
srlw x29, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x29, 0x7e60ec55e0581135 # initialize rs1
li x30, 0xadb905b28ec1d748 # initialize rs2
srlw x30, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x5, 0x3b8364ea398f7148 # initialize rs1
li x31, 0xbe46b7e53a44461d # initialize rs2
srlw x31, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x7bf5c2dc9f4af0e0 # initialize rs1
li x0, 0x35ef5ba70c62b2f0 # initialize rs2
srlw x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xe79708ce8b617c42 # initialize rs1
li x1, 0x1aea3b587ea43b68 # initialize rs2
srlw x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x602a199a4ea67e02 # initialize rs1
li x2, 0xa864e32943b30797 # initialize rs2
srlw x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x2fd03432fc58006a # initialize rs1
li x3, 0xec04acfe38c20af7 # initialize rs2
srlw x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x8fdb0ff56e4dfcfc # initialize rs1
li x4, 0x6af18d09a750d7be # initialize rs2
srlw x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2cdbfa6e5d6c041f # initialize rs1
li x5, 0x9df5a5d0d0db401f # initialize rs2
srlw x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x41dd228389d58cec # initialize rs1
li x6, 0xfd9339a2c986533c # initialize rs2
srlw x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x5fefa3d4b66f53ef # initialize rs1
li x7, 0x448a04febf8268c2 # initialize rs2
srlw x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xeee4061194c9dbca # initialize rs1
li x8, 0xf7f4ec55cc481263 # initialize rs2
srlw x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xf22eb517f3738681 # initialize rs1
li x9, 0xf9b82c288504612e # initialize rs2
srlw x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xf2571022029e928c # initialize rs1
li x10, 0x4345bf452b7110f0 # initialize rs2
srlw x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xe2c659926d686212 # initialize rs1
li x11, 0xc5ba01d1b4060fb9 # initialize rs2
srlw x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x1effe67664255674 # initialize rs1
li x12, 0x89b2838c072a401e # initialize rs2
srlw x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xa0c099ba3e0283da # initialize rs1
li x13, 0x4a05ae1eda51e822 # initialize rs2
srlw x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xc61d871a8ddbcdae # initialize rs1
li x14, 0x06ed4b8d5a507c7b # initialize rs2
srlw x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x315e23db3eea29e7 # initialize rs1
li x15, 0x56b6a7f0396e0f6b # initialize rs2
srlw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xafab494d9cdd425c # initialize rs1
li x16, 0x3215a6ce8accabc5 # initialize rs2
srlw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x095525d8ca9d6a60 # initialize rs1
li x17, 0x018453796695421e # initialize rs2
srlw x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x59b968b6e7d244f8 # initialize rs1
li x18, 0x8dffd563552c5467 # initialize rs2
srlw x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x168633e547d497a3 # initialize rs1
li x19, 0xb47fdf46694a6ee1 # initialize rs2
srlw x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xb8256a22d4ff012f # initialize rs1
li x20, 0xea3dfb8ff5822093 # initialize rs2
srlw x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xc602ad8093a67d16 # initialize rs1
li x21, 0xb237ccf36578aa7f # initialize rs2
srlw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x7d8a2a75da7a8f1b # initialize rs1
li x22, 0x115692dbde3aad80 # initialize rs2
srlw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x83e506ab23edc65a # initialize rs1
li x23, 0xc2711dcc3602c229 # initialize rs2
srlw x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x60d14d5508986bc3 # initialize rs1
li x24, 0x633fdef46d8d39a8 # initialize rs2
srlw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xfd25b85aedc53953 # initialize rs1
li x25, 0x7d9ece51aa3b89d7 # initialize rs2
srlw x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xb0c2f76e5956be5a # initialize rs1
li x26, 0x49e572de1494a180 # initialize rs2
srlw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xedeeb909803d3ece # initialize rs1
li x27, 0x5b425ffcb2d017f9 # initialize rs2
srlw x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x418ede6075c61282 # initialize rs1
li x28, 0x49b2bf1bcf5904d4 # initialize rs2
srlw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x71da0ecb8be68299 # initialize rs1
li x29, 0xdf45ec5dd95119c4 # initialize rs2
srlw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x9f3846deb10bd3e5 # initialize rs1
li x30, 0xf46dbd7815be2e1a # initialize rs2
srlw x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x49b996c164a6aa9b # initialize rs1
li x31, 0x12e3ca0e2f26c114 # initialize rs2
srlw x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x11, x3 # perform first operation
srlw x25, x29, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x22, x20 # perform first operation
srlw x17, x26, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x30, x2 # perform first operation
srlw x17, x11, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x19, x3, x18 # perform first operation
srlw x18, x19, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x23, x9, x24 # perform first operation
srlw x16, x18, x20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x10, x5, x18 # perform first operation
srlw x18, x16, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x25, x22, x26 # perform first operation
srlw x25, x12, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x29, x16 # perform first operation
srlw x1, x18, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x19, x1 # perform first operation
srlw x20, x26, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x10, x1 # perform first operation
srlw x10, x30, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x1, x22, x17 # perform first operation
srlw x17, x28, x11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x28, x30 # perform first operation
srlw x29, x1, x6 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-addiw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xd944853f3b31907d # initialize rs1
addiw x29, x0, -1762 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x3bcd4b96921be9f2 # initialize rs1
addiw x16, x1, -733 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x8cc5e8d04062a244 # initialize rs1
addiw x24, x2, -361 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xd6b1398f55dda615 # initialize rs1
addiw x5, x3, 795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xee5447d68a1ec7f1 # initialize rs1
addiw x28, x4, -1832 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x40233143bc14c470 # initialize rs1
addiw x13, x5, 823 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc3eee146b0f7df64 # initialize rs1
addiw x7, x6, -409 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
li x7, 0x4e251d3c91c35627 # initialize rs1
addiw x21, x7, -197 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x38aab17b95275f90 # initialize rs1
addiw x11, x8, -1178 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x6f9b2ed1b6a28e4b # initialize rs1
addiw x26, x9, 708 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x29cfdbc4459b8b85 # initialize rs1
addiw x12, x10, 1158 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x5d6605a7e4750106 # initialize rs1
addiw x14, x11, 1264 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xc23b39a07bec9ede # initialize rs1
addiw x18, x12, 386 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xd13940507747ce89 # initialize rs1
addiw x8, x13, 1788 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc859f54d92c2ab80 # initialize rs1
addiw x23, x14, 222 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x4bd2fddc5304e623 # initialize rs1
addiw x31, x15, -1511 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xc078acba96840e06 # initialize rs1
addiw x21, x16, 1383 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xee0c8b87cad10eac # initialize rs1
addiw x16, x17, 335 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x49bff1178b980ef0 # initialize rs1
addiw x31, x18, 1199 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x90614e5657935ee5 # initialize rs1
addiw x17, x19, 2026 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x26ad3e2dc32973f5 # initialize rs1
addiw x1, x20, 1621 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x5abab7e2fe377f58 # initialize rs1
addiw x7, x21, 1803 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xd10af39b0ad25c44 # initialize rs1
addiw x26, x22, -1600 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x41f90774ea4e5f50 # initialize rs1
addiw x26, x23, -354 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x20a3c1b588454bf3 # initialize rs1
addiw x2, x24, 857 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x9785ab4c4d74098c # initialize rs1
addiw x23, x25, -1538 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x7b43f3e29b8119be # initialize rs1
addiw x7, x26, 710 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xd853720bbf9e5963 # initialize rs1
addiw x10, x27, -446 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xd8945999861606db # initialize rs1
addiw x20, x28, 353 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xaa1d3cc362e08108 # initialize rs1
addiw x2, x29, 1166 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x01279c860575fbda # initialize rs1
addiw x28, x30, 1178 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x3040a49d5150fc4f # initialize rs1
addiw x28, x31, -16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 248)

# Testcase cp_rd (Test destination rd = x0)
li x23, 0x7d23280c574cb30c # initialize rs1
addiw x0, x23, 702 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x31, 0x7a6481def7af5a3c # initialize rs1
addiw x1, x31, -542 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x18, 0x0b89e8c57b52daf0 # initialize rs1
addiw x2, x18, -326 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x28, 0x4663ecf1ddd7e2fa # initialize rs1
addiw x3, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0xec7ccaf87eef92f2 # initialize rs1
addiw x4, x5, 1615 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
li x16, 0x1a443ef17802a073 # initialize rs1
addiw x5, x16, -322 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0x4449c729d3d1b842 # initialize rs1
addiw x6, x5, -1087 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0xced248b7cc2ca5e0 # initialize rs1
addiw x7, x22, 1332 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x24, 0x5e9bc572f0e8bee1 # initialize rs1
addiw x8, x24, 309 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x6, 0x9bdc15201dc8919e # initialize rs1
addiw x9, x6, 494 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0xa52b4e43ac5e7d73 # initialize rs1
addiw x10, x31, -1063 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x31, 0xa82c7ad7b30d3a22 # initialize rs1
addiw x11, x31, -1484 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x28, 0xcb678dca82078d70 # initialize rs1
addiw x12, x28, 1844 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x9, 0xbc3798265af67ec3 # initialize rs1
addiw x13, x9, -219 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x12, 0xaabd2c47280c6ec5 # initialize rs1
addiw x14, x12, 452 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x5, 0x3c1f305b1b20d8ec # initialize rs1
addiw x15, x5, -886 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x12, 0x52d35117c4b5a2e1 # initialize rs1
addiw x16, x12, 1199 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x13, 0x7e1b9ee26fbfaf0a # initialize rs1
addiw x17, x13, -35 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x25, 0xfaa79d03e8383481 # initialize rs1
addiw x18, x25, 904 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x1, 0xc3cb7e00962a54cb # initialize rs1
addiw x19, x1, 871 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x27, 0xb59ead74ddbd03ee # initialize rs1
addiw x20, x27, 843 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x30, 0xddc9bb908ddcd39e # initialize rs1
addiw x21, x30, -19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x7, 0xe187cfe26658656e # initialize rs1
addiw x22, x7, 279 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x2, 0xce3c8df85aa75544 # initialize rs1
addiw x23, x2, 672 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x24, 0x922fc449c0fbc2df # initialize rs1
addiw x24, x24, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x30, 0xe3e28f1d6c5394af # initialize rs1
addiw x25, x30, 1442 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x11, 0xc6db3ed9d47885d6 # initialize rs1
addiw x26, x11, -1474 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x11, 0x782be7aed4e824c6 # initialize rs1
addiw x27, x11, -1570 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x22, 0x5483d975be834146 # initialize rs1
addiw x28, x22, -767 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x31, 0xf6c5b64df436ec69 # initialize rs1
addiw x29, x31, 1058 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x29, 0xde459b532a9d4507 # initialize rs1
addiw x30, x29, 1188 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x22, 0x318fee409dacf6e2 # initialize rs1
addiw x31, x22, 453 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x31, 0x0000000000000000 # initialize rs1
addiw x7, x31, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x6, 0x0000000000000001 # initialize rs1
addiw x21, x6, 2029 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x8, 0x0000000000000002 # initialize rs1
addiw x27, x8, 819 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x1, 0x8000000000000000 # initialize rs1
addiw x2, x1, 97 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x22, 0x8000000000000001 # initialize rs1
addiw x8, x22, -145 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x25, 0x7fffffffffffffff # initialize rs1
addiw x11, x25, 1128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x19, 0x7ffffffffffffffe # initialize rs1
addiw x20, x19, 1445 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x24, 0xffffffffffffffff # initialize rs1
addiw x23, x24, 643 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
addiw x30, x29, 413 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x23, 0x5bbc887763ae86f2 # initialize rs1
addiw x24, x23, -1137 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x7, x31, 367 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x27, 0x5555555555555555 # initialize rs1
addiw x17, x27, -1274 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x24, 0x00000000ffffffff # initialize rs1
addiw x10, x24, -1735 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x29, 0x00000000fffffffe # initialize rs1
addiw x7, x29, 213 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x9, 0x0000000100000000 # initialize rs1
addiw x6, x9, 918 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x28, 0x0000000100000001 # initialize rs1
addiw x26, x28, 1690 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 632)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000000 # initialize rs1
addiw x7, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 640)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000000 # initialize rs1
addiw x31, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 648)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000000 # initialize rs1
addiw x26, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 656)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
addiw x19, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000000 # initialize rs1
addiw x11, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 672)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000000 # initialize rs1
addiw x5, x6, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 680)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000000 # initialize rs1
addiw x30, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 688)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
addiw x20, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 696)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
addiw x12, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 704)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000000 # initialize rs1
addiw x7, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 712)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
addiw x9, x30, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 720)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000000 # initialize rs1
addiw x19, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 728)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000000 # initialize rs1
addiw x17, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 736)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
addiw x19, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 744)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
addiw x14, x9, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
addiw x29, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 760)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000000 # initialize rs1
addiw x1, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 768)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
addiw x1, x29, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 776)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000000 # initialize rs1
addiw x11, x23, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 784)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000000 # initialize rs1
addiw x18, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 792)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
addiw x25, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 800)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000001 # initialize rs1
addiw x24, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 808)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000001 # initialize rs1
addiw x23, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000001 # initialize rs1
addiw x9, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 824)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
addiw x28, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 832)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000001 # initialize rs1
addiw x23, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 840)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
addiw x6, x22, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 848)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
addiw x8, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 856)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
addiw x15, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 864)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000001 # initialize rs1
addiw x28, x26, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 872)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000001 # initialize rs1
addiw x15, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 880)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
addiw x8, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 888)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
addiw x15, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 896)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000001 # initialize rs1
addiw x14, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 904)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
addiw x22, x1, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 912)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000001 # initialize rs1
addiw x6, x31, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 920)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000001 # initialize rs1
addiw x24, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 928)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000001 # initialize rs1
addiw x15, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 936)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
addiw x17, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 944)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
addiw x26, x6, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 952)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000002 # initialize rs1
addiw x2, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 960)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
addiw x23, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 968)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
addiw x21, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 976)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000002 # initialize rs1
addiw x28, x31, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 984)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
addiw x3, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 992)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
addiw x1, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1000)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000002 # initialize rs1
addiw x28, x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1008)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000002 # initialize rs1
addiw x25, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1016)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000002 # initialize rs1
addiw x12, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1024)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000002 # initialize rs1
addiw x15, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1032)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000002 # initialize rs1
addiw x15, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1040)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000002 # initialize rs1
addiw x27, x28, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1048)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000002 # initialize rs1
addiw x30, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1056)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000002 # initialize rs1
addiw x24, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1064)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000002 # initialize rs1
addiw x18, x19, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1072)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
addiw x11, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1080)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000002 # initialize rs1
addiw x19, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1088)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
addiw x9, x22, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1096)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
addiw x5, x12, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1104)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
addiw x22, x14, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1112)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000000 # initialize rs1
addiw x22, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1120)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
addiw x11, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1128)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
addiw x9, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1136)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
addiw x26, x19, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1144)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
addiw x14, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1152)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000000 # initialize rs1
addiw x27, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1160)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
addiw x9, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1168)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000000 # initialize rs1
addiw x29, x17, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1176)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
addiw x10, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1184)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000000 # initialize rs1
addiw x24, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1192)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000000 # initialize rs1
addiw x5, x26, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1200)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
addiw x21, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1208)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000000 # initialize rs1
addiw x15, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1216)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
addiw x6, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1224)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000000 # initialize rs1
addiw x12, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
addiw x22, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1240)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
addiw x28, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1248)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
addiw x25, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1256)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000000 # initialize rs1
addiw x16, x30, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1264)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000000 # initialize rs1
addiw x27, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1272)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000001 # initialize rs1
addiw x7, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1280)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000001 # initialize rs1
addiw x27, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1288)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
addiw x8, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
addiw x15, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1304)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
addiw x9, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1312)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
addiw x15, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1320)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
addiw x16, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
addiw x29, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1336)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
addiw x18, x20, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1344)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000001 # initialize rs1
addiw x11, x5, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1352)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000001 # initialize rs1
addiw x7, x10, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1360)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000001 # initialize rs1
addiw x2, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1368)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000001 # initialize rs1
addiw x18, x3, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1376)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000001 # initialize rs1
addiw x22, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1384)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
addiw x27, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1392)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000001 # initialize rs1
addiw x9, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1400)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000001 # initialize rs1
addiw x27, x5, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1408)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
addiw x1, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1416)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000001 # initialize rs1
addiw x11, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1424)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000001 # initialize rs1
addiw x19, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1432)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffffffffffff # initialize rs1
addiw x13, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1440)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffffffffffff # initialize rs1
addiw x17, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1448)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
addiw x15, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1456)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffffffffffff # initialize rs1
addiw x26, x9, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1464)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
addiw x31, x14, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1472)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffffffffffff # initialize rs1
addiw x9, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1480)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffffffffffff # initialize rs1
addiw x2, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1488)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
addiw x9, x16, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1496)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
addiw x3, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1504)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
addiw x17, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1512)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
addiw x11, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1520)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
addiw x5, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1528)

# Testcase cr_rs1_imm_corners
li x11, 0x7fffffffffffffff # initialize rs1
addiw x6, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1536)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffffffffffff # initialize rs1
addiw x20, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1544)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
addiw x29, x16, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1552)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
addiw x2, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1560)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffffffffffff # initialize rs1
addiw x30, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1568)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffffffffffff # initialize rs1
addiw x21, x17, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1576)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
addiw x5, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1584)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
addiw x23, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1592)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffffffffffe # initialize rs1
addiw x12, x17, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1600)

# Testcase cr_rs1_imm_corners
li x18, 0x7ffffffffffffffe # initialize rs1
addiw x22, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1608)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addiw x16, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1616)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addiw x31, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1624)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffffffffffe # initialize rs1
addiw x12, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1632)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffffffffffe # initialize rs1
addiw x12, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1640)

# Testcase cr_rs1_imm_corners
li x21, 0x7ffffffffffffffe # initialize rs1
addiw x15, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffffffffffe # initialize rs1
addiw x5, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1656)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
addiw x27, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1664)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
addiw x15, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1672)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffffffffffe # initialize rs1
addiw x6, x14, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1680)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addiw x3, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1688)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffffffffffe # initialize rs1
addiw x3, x17, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1696)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
addiw x2, x24, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1704)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffffffffffe # initialize rs1
addiw x19, x16, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1712)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
addiw x5, x19, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1720)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addiw x9, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1728)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffffffffffe # initialize rs1
addiw x5, x29, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1736)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffffffffffe # initialize rs1
addiw x1, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1744)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addiw x1, x23, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1752)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffffffffffff # initialize rs1
addiw x9, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1760)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffffffffffff # initialize rs1
addiw x31, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1768)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffffffffffff # initialize rs1
addiw x20, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1776)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffffffffffff # initialize rs1
addiw x1, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1784)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
addiw x9, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x23, 0xffffffffffffffff # initialize rs1
addiw x31, x23, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
addiw x8, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 8)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
addiw x10, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 16)

# Testcase cr_rs1_imm_corners
li x25, 0xffffffffffffffff # initialize rs1
addiw x29, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 24)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffffffffffff # initialize rs1
addiw x29, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 32)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
addiw x19, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 40)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
addiw x13, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 48)

# Testcase cr_rs1_imm_corners
li x25, 0xffffffffffffffff # initialize rs1
addiw x28, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 56)

# Testcase cr_rs1_imm_corners
li x25, 0xffffffffffffffff # initialize rs1
addiw x26, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 64)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffffffffffff # initialize rs1
addiw x23, x5, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 72)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
addiw x8, x9, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 80)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffffffffffff # initialize rs1
addiw x11, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 88)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffffffffffff # initialize rs1
addiw x27, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 96)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
addiw x20, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 104)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
addiw x26, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 112)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
addiw x3, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 120)

# Testcase cr_rs1_imm_corners
li x29, 0xfffffffffffffffe # initialize rs1
addiw x2, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 128)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
addiw x7, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
addiw x15, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 144)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffffffffffe # initialize rs1
addiw x17, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 152)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffffffffffe # initialize rs1
addiw x29, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 160)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffffffffffe # initialize rs1
addiw x3, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 168)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffffffffffe # initialize rs1
addiw x24, x13, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffffffffffe # initialize rs1
addiw x19, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 184)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffffffffffe # initialize rs1
addiw x18, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 192)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffffffffffe # initialize rs1
addiw x21, x7, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 200)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
addiw x7, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 208)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
addiw x15, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 216)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
addiw x8, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 224)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
addiw x9, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 232)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffffffffffe # initialize rs1
addiw x3, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 240)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
addiw x11, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 248)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
addiw x7, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 256)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
addiw x15, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 264)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
addiw x25, x31, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 272)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc887763ae86f2 # initialize rs1
addiw x16, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 280)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc887763ae86f2 # initialize rs1
addiw x12, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 288)

# Testcase cr_rs1_imm_corners
li x5, 0x5bbc887763ae86f2 # initialize rs1
addiw x11, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 296)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
addiw x21, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 304)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc887763ae86f2 # initialize rs1
addiw x8, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
addiw x23, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 320)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
addiw x11, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc887763ae86f2 # initialize rs1
addiw x13, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 336)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
addiw x2, x18, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 344)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
addiw x24, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
addiw x5, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 360)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc887763ae86f2 # initialize rs1
addiw x19, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 368)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
addiw x8, x17, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 376)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
addiw x19, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 384)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc887763ae86f2 # initialize rs1
addiw x21, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 392)

# Testcase cr_rs1_imm_corners
li x5, 0x5bbc887763ae86f2 # initialize rs1
addiw x27, x5, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 400)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
addiw x23, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 408)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc887763ae86f2 # initialize rs1
addiw x26, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 416)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
addiw x27, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 424)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
addiw x31, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 432)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x2, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 440)

# Testcase cr_rs1_imm_corners
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x12, x3, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 448)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x12, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 456)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x28, x9, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x18, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 472)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x5, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 480)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x1, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 488)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x16, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 496)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x24, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 504)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x3, x9, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 512)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x21, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 520)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x27, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 528)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x31, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 536)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x9, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 544)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x15, x17, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 552)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x14, x27, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 560)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x23, x1, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 568)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x10, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x31, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 584)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
addiw x18, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 592)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
addiw x9, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 600)

# Testcase cr_rs1_imm_corners
li x5, 0x5555555555555555 # initialize rs1
addiw x22, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 608)

# Testcase cr_rs1_imm_corners
li x7, 0x5555555555555555 # initialize rs1
addiw x27, x7, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 616)

# Testcase cr_rs1_imm_corners
li x13, 0x5555555555555555 # initialize rs1
addiw x26, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 624)

# Testcase cr_rs1_imm_corners
li x3, 0x5555555555555555 # initialize rs1
addiw x13, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 632)

# Testcase cr_rs1_imm_corners
li x19, 0x5555555555555555 # initialize rs1
addiw x8, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 640)

# Testcase cr_rs1_imm_corners
li x13, 0x5555555555555555 # initialize rs1
addiw x26, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 648)

# Testcase cr_rs1_imm_corners
li x25, 0x5555555555555555 # initialize rs1
addiw x13, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 656)

# Testcase cr_rs1_imm_corners
li x2, 0x5555555555555555 # initialize rs1
addiw x7, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 664)

# Testcase cr_rs1_imm_corners
li x5, 0x5555555555555555 # initialize rs1
addiw x6, x5, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 672)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
addiw x7, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 680)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
addiw x15, x26, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 688)

# Testcase cr_rs1_imm_corners
li x19, 0x5555555555555555 # initialize rs1
addiw x3, x19, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 696)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
addiw x15, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 704)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
addiw x21, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 712)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
addiw x21, x9, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 720)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
addiw x13, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 728)

# Testcase cr_rs1_imm_corners
li x7, 0x5555555555555555 # initialize rs1
addiw x27, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 736)

# Testcase cr_rs1_imm_corners
li x23, 0x5555555555555555 # initialize rs1
addiw x1, x23, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 744)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
addiw x12, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 752)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000ffffffff # initialize rs1
addiw x22, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 760)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000ffffffff # initialize rs1
addiw x28, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 768)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000ffffffff # initialize rs1
addiw x9, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 776)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
addiw x3, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 784)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
addiw x7, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 792)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000ffffffff # initialize rs1
addiw x20, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000ffffffff # initialize rs1
addiw x23, x30, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 808)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
addiw x12, x1, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 816)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000ffffffff # initialize rs1
addiw x30, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 824)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
addiw x22, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000ffffffff # initialize rs1
addiw x2, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 840)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000ffffffff # initialize rs1
addiw x10, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 848)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000ffffffff # initialize rs1
addiw x20, x8, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 856)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000ffffffff # initialize rs1
addiw x7, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 864)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
addiw x13, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 872)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
addiw x15, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 880)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
addiw x8, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 888)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
addiw x29, x1, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 896)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000ffffffff # initialize rs1
addiw x16, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 904)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000ffffffff # initialize rs1
addiw x25, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 912)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
addiw x15, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 920)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000fffffffe # initialize rs1
addiw x23, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 928)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
addiw x24, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 936)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
addiw x24, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 944)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
addiw x29, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 952)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000fffffffe # initialize rs1
addiw x26, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 960)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
addiw x21, x23, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
addiw x14, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 976)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
addiw x7, x20, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 984)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
addiw x28, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 992)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000fffffffe # initialize rs1
addiw x31, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1000)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000fffffffe # initialize rs1
addiw x8, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1008)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
addiw x28, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1016)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000fffffffe # initialize rs1
addiw x8, x24, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1024)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000fffffffe # initialize rs1
addiw x14, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1032)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
addiw x12, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1040)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000fffffffe # initialize rs1
addiw x22, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1048)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
addiw x27, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1056)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
addiw x9, x30, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1064)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000fffffffe # initialize rs1
addiw x26, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1072)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000000 # initialize rs1
addiw x25, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1080)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
addiw x23, x24, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1088)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000100000000 # initialize rs1
addiw x12, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1096)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
addiw x1, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1104)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000100000000 # initialize rs1
addiw x14, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1112)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000000 # initialize rs1
addiw x21, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1120)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
addiw x5, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1128)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
addiw x24, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1136)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000100000000 # initialize rs1
addiw x9, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1144)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
addiw x23, x30, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1152)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
addiw x16, x31, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1160)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
addiw x23, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1168)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000000 # initialize rs1
addiw x13, x20, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1176)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000000 # initialize rs1
addiw x29, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1184)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000000 # initialize rs1
addiw x25, x17, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1192)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000000 # initialize rs1
addiw x15, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1200)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000000 # initialize rs1
addiw x25, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1208)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000000 # initialize rs1
addiw x12, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1216)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
addiw x26, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1224)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000000 # initialize rs1
addiw x23, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1232)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
addiw x27, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000001 # initialize rs1
addiw x18, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1248)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
addiw x2, x31, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1256)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000001 # initialize rs1
addiw x24, x5, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1264)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
addiw x6, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1272)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
addiw x21, x15, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1280)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000100000001 # initialize rs1
addiw x5, x1, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1288)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
addiw x6, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1296)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000001 # initialize rs1
addiw x10, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000001 # initialize rs1
addiw x29, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1312)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000001 # initialize rs1
addiw x18, x7, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1320)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000001 # initialize rs1
addiw x28, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1328)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000001 # initialize rs1
addiw x13, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1336)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000001 # initialize rs1
addiw x17, x23, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1344)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000001 # initialize rs1
addiw x31, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
addiw x31, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1360)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000001 # initialize rs1
addiw x22, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1368)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000001 # initialize rs1
addiw x7, x29, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1376)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
addiw x23, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1384)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
addiw x22, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x764add849eee69ed # initialize rs1
addiw x0, x0, -360 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xb1c701eba4368fd3 # initialize rs1
addiw x1, x1, 314 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x5f47946b79e575ed # initialize rs1
addiw x2, x2, -154 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xd7db345fe31e9603 # initialize rs1
addiw x3, x3, 1884 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x2f49e38dbf304af5 # initialize rs1
addiw x4, x4, -1302 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3de4341fd6849bb2 # initialize rs1
addiw x5, x5, -953 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xccf658e3c2f0a10c # initialize rs1
addiw x6, x6, -255 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8ac212bd35cce14c # initialize rs1
addiw x7, x7, -472 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x01d83f896f3784fc # initialize rs1
addiw x8, x8, 1831 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x0cb1d25c447a5297 # initialize rs1
addiw x9, x9, -276 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x324f447151a743b5 # initialize rs1
addiw x10, x10, -798 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x10008a03a992ae80 # initialize rs1
addiw x11, x11, -1181 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x3aab9a02d274db6f # initialize rs1
addiw x12, x12, -589 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x7bfa14de7cf5938a # initialize rs1
addiw x13, x13, 1643 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x903b5fa60777221d # initialize rs1
addiw x14, x14, 1258 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xed0ac21bd01b07c7 # initialize rs1
addiw x15, x15, -381 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x955717d9a89408ac # initialize rs1
addiw x16, x16, -995 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x74afca83416332a2 # initialize rs1
addiw x17, x17, 1240 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xdad6983aef09ff93 # initialize rs1
addiw x18, x18, 446 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x31fd707e0c0d776e # initialize rs1
addiw x19, x19, -1285 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x2287578398ed31f1 # initialize rs1
addiw x20, x20, 653 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xa05d471c0bb1d0de # initialize rs1
addiw x21, x21, 1140 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x80079741d3119deb # initialize rs1
addiw x22, x22, 656 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x4a0d79c890608484 # initialize rs1
addiw x23, x23, -1873 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x96c2007d35ac3718 # initialize rs1
addiw x24, x24, -732 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x1c6dccc1239c047f # initialize rs1
addiw x25, x25, 1336 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x5a0cbf42d257da16 # initialize rs1
addiw x26, x26, -667 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x4cbc866c28a66764 # initialize rs1
addiw x27, x27, 76 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x6b385d8ac3119d32 # initialize rs1
addiw x28, x28, 1846 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xb01baab5f08f6784 # initialize rs1
addiw x29, x29, 1629 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x9c98d9ff922ac450 # initialize rs1
addiw x30, x30, -889 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x0d73a201bc969106 # initialize rs1
addiw x31, x31, 1105 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x9, 0x9ae619ef9d591894 # initialize rs1
addiw x2, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1656)

# Testcase cp_imm_corners
li x8, 0xdca409f95e357abe # initialize rs1
addiw x25, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1664)

# Testcase cp_imm_corners
li x29, 0x93c9eec5ab6658f7 # initialize rs1
addiw x6, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1672)

# Testcase cp_imm_corners
li x16, 0xd7f15a841f83e614 # initialize rs1
addiw x22, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1680)

# Testcase cp_imm_corners
li x31, 0xf882ded340e11509 # initialize rs1
addiw x21, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1688)

# Testcase cp_imm_corners
li x10, 0xefe166aabdc6e8f9 # initialize rs1
addiw x24, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1696)

# Testcase cp_imm_corners
li x21, 0x4d19157b23054820 # initialize rs1
addiw x19, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1704)

# Testcase cp_imm_corners
li x2, 0xfc9946fb69f61637 # initialize rs1
addiw x29, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1712)

# Testcase cp_imm_corners
li x10, 0x913f8d19c71858ec # initialize rs1
addiw x14, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1720)

# Testcase cp_imm_corners
li x7, 0xb22beb6a5d1f898d # initialize rs1
addiw x6, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1728)

# Testcase cp_imm_corners
li x18, 0x6db77fb1255be0f8 # initialize rs1
addiw x1, x18, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1736)

# Testcase cp_imm_corners
li x6, 0x0c1ac389ff33ad16 # initialize rs1
addiw x12, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1744)

# Testcase cp_imm_corners
li x21, 0xe64cdf47da695df2 # initialize rs1
addiw x30, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1752)

# Testcase cp_imm_corners
li x16, 0xcafd618feac9a128 # initialize rs1
addiw x21, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1760)

# Testcase cp_imm_corners
li x7, 0xcb442df03390a2d7 # initialize rs1
addiw x6, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1768)

# Testcase cp_imm_corners
li x22, 0x3f26ed2b313058f9 # initialize rs1
addiw x20, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1776)

# Testcase cp_imm_corners
li x13, 0x1bd40812a6fc7715 # initialize rs1
addiw x24, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1784)

# Testcase cp_imm_corners
li x14, 0xaeaf98a43900206b # initialize rs1
addiw x21, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x11, 0xa97042c16975640c # initialize rs1
addiw x1, x11, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 0)

# Testcase cp_imm_corners
li x13, 0xc7958054487b448a # initialize rs1
addiw x29, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x31, x6, x26 # perform first operation
addiw x29, x7, -312 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x5, x16, x2 # perform first operation
addiw x12, x14, -840 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x22, x1 # perform first operation
addiw x31, x25, -1792 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x23, x30, x1 # perform first operation
addiw x3, x23, 475 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x7, x19 # perform first operation
addiw x19, x27, 1805 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x7, x25 # perform first operation
addiw x12, x2, -624 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x15, x21, x22 # perform first operation
addiw x15, x3, 237 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x26, x21 # perform first operation
addiw x12, x20, -531 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x10, x20 # perform first operation
addiw x12, x7, -884 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x26, x3, x9 # perform first operation
addiw x3, x24, 1129 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x30, x23 # perform first operation
addiw x23, x21, -813 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x27, x15 # perform first operation
addiw x10, x2, 1194 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-sw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x15, 0x1ec9c302994a9cba # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1243 # sub immediate from rs1 to counter offset
sw x15, -1243(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x5, 0x7dde71f54f262cf5 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 380 # sub immediate from rs1 to counter offset
sw x5, -380(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x30, 0x438d3f380e933dcb # initialize rs2
la x3, scratch # base address 
addi x3, x3, -148 # sub immediate from rs1 to counter offset
sw x30, 148(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x30, 0xafc16a49550d64b1 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 674 # sub immediate from rs1 to counter offset
sw x30, -674(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
li x27, 0x14f77aeb534a6317 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 753 # sub immediate from rs1 to counter offset
sw x27, -753(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0x8c31c85f4059c329 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1470 # sub immediate from rs1 to counter offset
sw x14, 1470(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x25, 0x66c3080d62db324e # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1542 # sub immediate from rs1 to counter offset
sw x25, 1542(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x17, 0x91937b1be85d098a # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1353 # sub immediate from rs1 to counter offset
sw x17, 1353(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x5, 0xd4f9d668ab1a413c # initialize rs2
la x9, scratch # base address 
addi x9, x9, -824 # sub immediate from rs1 to counter offset
sw x5, 824(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x30, 0x3027d49711552883 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1076 # sub immediate from rs1 to counter offset
sw x30, -1076(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x29, 0x4363efdb0eefc761 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -933 # sub immediate from rs1 to counter offset
sw x29, 933(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x25, 0x4f1349573da4d60f # initialize rs2
la x12, scratch # base address 
addi x12, x12, 556 # sub immediate from rs1 to counter offset
sw x25, -556(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x22, 0x2069ca02018d95f2 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 337 # sub immediate from rs1 to counter offset
sw x22, -337(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x27, 0x9497146ecce6c915 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -856 # sub immediate from rs1 to counter offset
sw x27, 856(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x14, 0x65134e8d4a01dc61 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1694 # sub immediate from rs1 to counter offset
sw x14, -1694(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x13, 0x927902c7ebfb3e5d # initialize rs2
la x16, scratch # base address 
addi x16, x16, 716 # sub immediate from rs1 to counter offset
sw x13, -716(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x26, 0xd22cbce4d7a68738 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 355 # sub immediate from rs1 to counter offset
sw x26, -355(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x1, 0xe34b5edd6525e85b # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1744 # sub immediate from rs1 to counter offset
sw x1, -1744(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x20, 0x207f405498190cfd # initialize rs2
la x19, scratch # base address 
addi x19, x19, 836 # sub immediate from rs1 to counter offset
sw x20, -836(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x24, 0x7555ca1ac7be5f4b # initialize rs2
la x20, scratch # base address 
addi x20, x20, -166 # sub immediate from rs1 to counter offset
sw x24, 166(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x7, 0x3e3753c95cf2a85d # initialize rs2
la x21, scratch # base address 
addi x21, x21, -342 # sub immediate from rs1 to counter offset
sw x7, 342(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x6, 0xc7864b113a1582b7 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -855 # sub immediate from rs1 to counter offset
sw x6, 855(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x30, 0xa6d9ba23ea31bb55 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1855 # sub immediate from rs1 to counter offset
sw x30, -1855(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x22, 0xbea3fe1fc6bf2112 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 883 # sub immediate from rs1 to counter offset
sw x22, -883(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x23, 0xe71fc84fd779628e # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1539 # sub immediate from rs1 to counter offset
sw x23, -1539(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x24, 0x08e18b3dcba10c73 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1099 # sub immediate from rs1 to counter offset
sw x24, -1099(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x18, 0x1862ca6f43ed29b2 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 298 # sub immediate from rs1 to counter offset
sw x18, -298(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x31, 0xca361c8ef086a5f4 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1288 # sub immediate from rs1 to counter offset
sw x31, 1288(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x28, 0x36da8bead247edc8 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1699 # sub immediate from rs1 to counter offset
sw x28, 1699(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x19, 0x4c1b5bad3427de21 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1545 # sub immediate from rs1 to counter offset
sw x19, -1545(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x8, 0x87b9737b75d3e1dd # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1730 # sub immediate from rs1 to counter offset
sw x8, -1730(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0x1a9800b7f7c5f234 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -501 # sub immediate from rs1 to counter offset
sw x0, 501(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0xb50c53397fbbd633 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1699 # sub immediate from rs1 to counter offset
sw x1, -1699(x11) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0xe158a37074fe037b # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1440 # sub immediate from rs1 to counter offset
sw x2, -1440(x14) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0x36cf6fa8ca74cf0e # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1429 # sub immediate from rs1 to counter offset
sw x3, -1429(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xad7e476c04ec458c # initialize rs2
la x29, scratch # base address 
addi x29, x29, -291 # sub immediate from rs1 to counter offset
sw x4, 291(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x05e022c4897efdf9 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1740 # sub immediate from rs1 to counter offset
sw x5, -1740(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x1ec04107fda6ea3c # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1851 # sub immediate from rs1 to counter offset
sw x6, 1851(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xef65eefcfa206737 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -853 # sub immediate from rs1 to counter offset
sw x7, 853(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0xc9cdc496e1e7e640 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -466 # sub immediate from rs1 to counter offset
sw x8, 466(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0xb5784fc7eca0ca7f # initialize rs2
la x18, scratch # base address 
addi x18, x18, 977 # sub immediate from rs1 to counter offset
sw x9, -977(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0xb928116d7c78b83a # initialize rs2
la x21, scratch # base address 
addi x21, x21, -356 # sub immediate from rs1 to counter offset
sw x10, 356(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0xea86e90469bb647a # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1014 # sub immediate from rs1 to counter offset
sw x11, 1014(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0x1429b87619f718ac # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1987 # sub immediate from rs1 to counter offset
sw x12, -1987(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0x8d6718ddaf2368e4 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 830 # sub immediate from rs1 to counter offset
sw x13, -830(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0x829c837eaf7edf81 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 92 # sub immediate from rs1 to counter offset
sw x14, -92(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0xff459a32ad82cb9a # initialize rs2
la x18, scratch # base address 
addi x18, x18, -893 # sub immediate from rs1 to counter offset
sw x15, 893(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0x0ae95af07abbd135 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -725 # sub immediate from rs1 to counter offset
sw x16, 725(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0x679b13c9259b26b9 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1284 # sub immediate from rs1 to counter offset
sw x17, -1284(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x5580946281c29e44 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1386 # sub immediate from rs1 to counter offset
sw x18, -1386(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0x73303c1a6eaa0ae6 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1806 # sub immediate from rs1 to counter offset
sw x19, 1806(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0xcb3fc7c87d28eed4 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -3 # sub immediate from rs1 to counter offset
sw x20, 3(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0x2254a5fe0761fb1c # initialize rs2
la x23, scratch # base address 
addi x23, x23, -122 # sub immediate from rs1 to counter offset
sw x21, 122(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x5a202df517eaecbf # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1465 # sub immediate from rs1 to counter offset
sw x22, -1465(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x0ceddd1a068672ff # initialize rs2
la x17, scratch # base address 
addi x17, x17, 770 # sub immediate from rs1 to counter offset
sw x23, -770(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0x65b19d2a7e1ec12d # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1364 # sub immediate from rs1 to counter offset
sw x24, -1364(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x3d88a73e8f35566e # initialize rs2
la x16, scratch # base address 
addi x16, x16, 751 # sub immediate from rs1 to counter offset
sw x25, -751(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0x6ff415637257dffc # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1281 # sub immediate from rs1 to counter offset
sw x26, 1281(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x62972c601db5b892 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1218 # sub immediate from rs1 to counter offset
sw x27, -1218(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0xc2c68b8a0ca61336 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1371 # sub immediate from rs1 to counter offset
sw x28, -1371(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0x76960acc35994f92 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 774 # sub immediate from rs1 to counter offset
sw x29, -774(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0xd69d5604ad895ba3 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1000 # sub immediate from rs1 to counter offset
sw x30, -1000(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0x44225c1edd84fe12 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 154 # sub immediate from rs1 to counter offset
sw x31, -154(x27) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x1, 0x0000000000000000 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1680 # sub immediate from rs1 to counter offset
sw x1, 1680(x3) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x8, 0x0000000000000001 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1761 # sub immediate from rs1 to counter offset
sw x8, 1761(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x28, 0x0000000000000002 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1364 # sub immediate from rs1 to counter offset
sw x28, 1364(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x16, 0x8000000000000000 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -303 # sub immediate from rs1 to counter offset
sw x16, 303(x1) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x13, 0x8000000000000001 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1717 # sub immediate from rs1 to counter offset
sw x13, 1717(x2) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x28, 0x7fffffffffffffff # initialize rs2
la x14, scratch # base address 
addi x14, x14, -350 # sub immediate from rs1 to counter offset
sw x28, 350(x14) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x1, 0x7ffffffffffffffe # initialize rs2
la x20, scratch # base address 
addi x20, x20, -669 # sub immediate from rs1 to counter offset
sw x1, 669(x20) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x18, 0xffffffffffffffff # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1053 # sub immediate from rs1 to counter offset
sw x18, -1053(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x31, 0xfffffffffffffffe # initialize rs2
la x28, scratch # base address 
addi x28, x28, 673 # sub immediate from rs1 to counter offset
sw x31, -673(x28) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -462 # sub immediate from rs1 to counter offset
sw x7, 462(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1265 # sub immediate from rs1 to counter offset
sw x21, 1265(x28) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x12, 0x5555555555555555 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 506 # sub immediate from rs1 to counter offset
sw x12, -506(x1) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x28, 0x00000000ffffffff # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1620 # sub immediate from rs1 to counter offset
sw x28, 1620(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x24, 0x00000000fffffffe # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1448 # sub immediate from rs1 to counter offset
sw x24, -1448(x8) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x19, 0x0000000100000000 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1977 # sub immediate from rs1 to counter offset
sw x19, 1977(x2) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x31, 0x0000000100000001 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 320 # sub immediate from rs1 to counter offset
sw x31, -320(x8) # perform operation 

# Testcase cp_imm_corners
li x14, 0xa869aeb0edb5074b # initialize rs2
la x2, scratch # base address 
addi x2, x2, 0 # sub immediate from rs1 to counter offset
sw x14, 0(x2) # perform operation 

# Testcase cp_imm_corners
li x20, 0x04ded4660598871e # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1 # sub immediate from rs1 to counter offset
sw x20, 1(x1) # perform operation 

# Testcase cp_imm_corners
li x15, 0x25a3c0c2bdadf7c8 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -2 # sub immediate from rs1 to counter offset
sw x15, 2(x5) # perform operation 

# Testcase cp_imm_corners
li x20, 0xce58193d6f97533c # initialize rs2
la x25, scratch # base address 
addi x25, x25, -3 # sub immediate from rs1 to counter offset
sw x20, 3(x25) # perform operation 

# Testcase cp_imm_corners
li x29, 0xf23dda6c44d1f553 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -4 # sub immediate from rs1 to counter offset
sw x29, 4(x3) # perform operation 

# Testcase cp_imm_corners
li x24, 0x6748695f480a7cb6 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -8 # sub immediate from rs1 to counter offset
sw x24, 8(x1) # perform operation 

# Testcase cp_imm_corners
li x22, 0x9a2c5749f43f8c3a # initialize rs2
la x2, scratch # base address 
addi x2, x2, -16 # sub immediate from rs1 to counter offset
sw x22, 16(x2) # perform operation 

# Testcase cp_imm_corners
li x7, 0x3994839a26092589 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -32 # sub immediate from rs1 to counter offset
sw x7, 32(x29) # perform operation 

# Testcase cp_imm_corners
li x8, 0x4d95337834cb3d54 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -64 # sub immediate from rs1 to counter offset
sw x8, 64(x27) # perform operation 

# Testcase cp_imm_corners
li x8, 0xe8ea418ad32ec038 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -128 # sub immediate from rs1 to counter offset
sw x8, 128(x9) # perform operation 

# Testcase cp_imm_corners
li x1, 0x4c4903e0bc3d9703 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -256 # sub immediate from rs1 to counter offset
sw x1, 256(x26) # perform operation 

# Testcase cp_imm_corners
li x3, 0x6366c3299fa54278 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -512 # sub immediate from rs1 to counter offset
sw x3, 512(x30) # perform operation 

# Testcase cp_imm_corners
li x7, 0x86b586d14c97651c # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1023 # sub immediate from rs1 to counter offset
sw x7, 1023(x11) # perform operation 

# Testcase cp_imm_corners
li x7, 0xb2f52f5c0762a0a5 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1024 # sub immediate from rs1 to counter offset
sw x7, 1024(x12) # perform operation 

# Testcase cp_imm_corners
li x11, 0x6fb6b14b7eacc09a # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1795 # sub immediate from rs1 to counter offset
sw x11, 1795(x7) # perform operation 

# Testcase cp_imm_corners
li x31, 0xf13442f9b5157f72 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -2047 # sub immediate from rs1 to counter offset
sw x31, 2047(x13) # perform operation 

# Testcase cp_imm_corners
li x16, 0x27fa5d826185370e # initialize rs2
la x31, scratch # base address 
addi x31, x31, 2047 # increment rs1 by 2047 
addi x31, x31, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x16, -2048(x31) # perform operation 

# Testcase cp_imm_corners
li x11, 0x1eb8e04859551468 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 2047 # sub immediate from rs1 to counter offset
sw x11, -2047(x6) # perform operation 

# Testcase cp_imm_corners
li x25, 0x8ac91bfe6dbe92b2 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 2 # sub immediate from rs1 to counter offset
sw x25, -2(x15) # perform operation 

# Testcase cp_imm_corners
li x10, 0x5daa160c97d76e06 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1 # sub immediate from rs1 to counter offset
sw x10, -1(x11) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x2, scratch
addi x2, x2, 4
add x29, x12, x19 # perform first operation
sw x30, -4(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x25, scratch
addi x25, x25, 86
add x7, x6, x28 # perform first operation
sw x22, -86(x25) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x20, scratch
addi x20, x20, 1206
add x3, x26, x5 # perform first operation
sw x7, -1206(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x26, scratch
addi x26, x26, 1482
add x16, x16, x0 # perform first operation
sw x25, -1482(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x20, scratch
addi x20, x20, 225
add x26, x26, x0 # perform first operation
sw x26, -225(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x10, scratch
addi x10, x10, -1871
add x5, x5, x0 # perform first operation
sw x24, 1871(x10) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-xori.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xacf6da24c06b043c # initialize rs1
xori x11, x0, -1974 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xa6acaa48f656a1b3 # initialize rs1
xori x15, x1, 1404 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xe6e0c990141bae33 # initialize rs1
xori x17, x2, -1054 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xf79e20a9e4277d9c # initialize rs1
xori x16, x3, 946 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0f21abcbd854fbb9 # initialize rs1
xori x29, x4, -926 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x5bbebfe194110935 # initialize rs1
xori x6, x5, -1386 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0x17eb902ff2c5663f # initialize rs1
xori x14, x6, -921 # perform operation
RVTEST_SIGUPD(x7, x0, x14, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x92dd24eb49bc0ac7 # initialize rs1
xori x9, x7, 1866 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x8ea5382a49878ce2 # initialize rs1
xori x23, x8, 1988 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x15ebfeee8e604875 # initialize rs1
xori x21, x9, -1482 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x46b75789f244f643 # initialize rs1
xori x2, x10, -1970 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x882b67b1d0e76827 # initialize rs1
xori x30, x11, -651 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x97cd303baf4f7ae0 # initialize rs1
xori x5, x12, -1073 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x84e9ffb1542561c9 # initialize rs1
xori x25, x13, 1449 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x982a680e3586e3f6 # initialize rs1
xori x2, x14, 1426 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x6893b29e60607e89 # initialize rs1
xori x31, x15, -881 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x363e6070ad4734b9 # initialize rs1
xori x18, x16, 955 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x00946f86f1f768ad # initialize rs1
xori x19, x17, -463 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x79aa4826b2c39f2e # initialize rs1
xori x13, x18, 603 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x4541806d4430c41c # initialize rs1
xori x31, x19, 820 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x4b4dc5d8b219de86 # initialize rs1
xori x17, x20, -174 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x650ebb8e52f5b22e # initialize rs1
xori x5, x21, 2020 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xd45fb493e9bbfdee # initialize rs1
xori x17, x22, 1923 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x6ef88ef8f63ce893 # initialize rs1
xori x9, x23, 1751 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x92a68a6e56e7e23f # initialize rs1
xori x30, x24, 470 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x56c01e9266d6ff2d # initialize rs1
xori x9, x25, 558 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xb7b7d8d5e45cd14b # initialize rs1
xori x18, x26, 1407 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x1d201fca148ee358 # initialize rs1
xori x8, x27, 728 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x78e6200a24e9fd04 # initialize rs1
xori x16, x28, 1248 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x2aa15c8d7a4d8f5f # initialize rs1
xori x19, x29, -1839 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xfae9d694c663ce85 # initialize rs1
xori x25, x30, 1340 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xd220e96afe235aa5 # initialize rs1
xori x14, x31, 1249 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 248)

# Testcase cp_rd (Test destination rd = x0)
li x1, 0x4cd4f89a0c0de2b8 # initialize rs1
xori x0, x1, -1627 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x12, 0x49660b0c78c5ca81 # initialize rs1
xori x1, x12, 375 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x7, 0x54c6fb1b9425eed7 # initialize rs1
xori x2, x7, -1297 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x19, 0xefe8dbc976de6838 # initialize rs1
xori x3, x19, 1548 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x8, 0xda585bc12e2decfe # initialize rs1
xori x4, x8, 709 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x6, 0xe2a2bbf3042deca6 # initialize rs1
xori x5, x6, -653 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
li x13, 0x8d5e48256394063e # initialize rs1
xori x6, x13, -1219 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x5, 0x1e733f11369f60d3 # initialize rs1
xori x7, x5, 1214 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x13, 0x80fbc76d87b73c48 # initialize rs1
xori x8, x13, 141 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x13, 0x178fe43942806431 # initialize rs1
xori x9, x13, -1768 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x7, 0x86abfb934e3c1b22 # initialize rs1
xori x10, x7, 1620 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x31, 0x79ad95ff96bd543a # initialize rs1
xori x11, x31, 1043 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x27, 0xfaa9c175af9da88d # initialize rs1
xori x12, x27, 1226 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x23, 0xbd24d3bfa6fc26e7 # initialize rs1
xori x13, x23, -1581 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x19, 0xd4df601a22af5889 # initialize rs1
xori x14, x19, -1541 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x17, 0x88e6d8f8fca18bb0 # initialize rs1
xori x15, x17, 1357 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x24, 0x874b06ed4f2201db # initialize rs1
xori x16, x24, 1409 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x20, 0x5e977384751dbe67 # initialize rs1
xori x17, x20, 1410 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x15, 0x30f5a51cadc80dde # initialize rs1
xori x18, x15, 443 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x18, 0xe2d7fc72764a4a64 # initialize rs1
xori x19, x18, 1563 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x26, 0xe42a2bbf009ec040 # initialize rs1
xori x20, x26, 1139 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x6, 0x9e5b66ca0f46bb5a # initialize rs1
xori x21, x6, -188 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x27, 0x3080c65899848893 # initialize rs1
xori x22, x27, 641 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x13, 0xafa41566ad51ff1d # initialize rs1
xori x23, x13, -1686 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0xa4d67e479f8718fc # initialize rs1
xori x24, x14, -893 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x25, 0x0e5090c23f3f3633 # initialize rs1
xori x25, x25, -1880 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x12, 0xdd7efdedfc22624b # initialize rs1
xori x26, x12, 1747 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x21, 0x331f6c919f814941 # initialize rs1
xori x27, x21, 496 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x17, 0x2caf49c3043d8a5d # initialize rs1
xori x28, x17, -1612 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x23, 0x5bfb87ed836b3b06 # initialize rs1
xori x29, x23, -1715 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x28, 0xac75d3bcce49e109 # initialize rs1
xori x30, x28, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x16, 0x690f613f4424de96 # initialize rs1
xori x31, x16, -1775 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x11, 0x0000000000000000 # initialize rs1
xori x23, x11, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x21, 0x0000000000000001 # initialize rs1
xori x14, x21, -643 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x21, 0x0000000000000002 # initialize rs1
xori x5, x21, 265 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x20, 0x8000000000000000 # initialize rs1
xori x22, x20, -1510 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x24, 0x8000000000000001 # initialize rs1
xori x6, x24, -1222 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x15, 0x7fffffffffffffff # initialize rs1
xori x19, x15, -258 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x18, 0x7ffffffffffffffe # initialize rs1
xori x26, x18, -838 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x12, 0xffffffffffffffff # initialize rs1
xori x22, x12, 1402 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x20, 0xfffffffffffffffe # initialize rs1
xori x2, x20, -1542 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x3, 0x5bbc887763ae86f2 # initialize rs1
xori x17, x3, -1289 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x24, x8, -1559 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x28, 0x5555555555555555 # initialize rs1
xori x20, x28, 368 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x8, 0x00000000ffffffff # initialize rs1
xori x18, x8, -572 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x26, 0x00000000fffffffe # initialize rs1
xori x11, x26, 920 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x8, 0x0000000100000000 # initialize rs1
xori x18, x8, 1597 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x20, 0x0000000100000001 # initialize rs1
xori x5, x20, -1253 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 632)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
xori x1, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 640)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000000 # initialize rs1
xori x10, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 648)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000000 # initialize rs1
xori x16, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 656)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000000 # initialize rs1
xori x7, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 664)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000000 # initialize rs1
xori x17, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 672)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
xori x14, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 680)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000000 # initialize rs1
xori x14, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 688)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000000 # initialize rs1
xori x11, x13, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 696)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000000 # initialize rs1
xori x2, x13, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 704)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
xori x27, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000000 # initialize rs1
xori x21, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 720)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000000 # initialize rs1
xori x17, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 728)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
xori x20, x9, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 736)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000000 # initialize rs1
xori x1, x23, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 744)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000000 # initialize rs1
xori x3, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 752)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000000 # initialize rs1
xori x5, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 760)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
xori x2, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 768)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
xori x19, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 776)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000000 # initialize rs1
xori x6, x13, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000000 # initialize rs1
xori x18, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 792)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
xori x10, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 800)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000001 # initialize rs1
xori x28, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 808)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000001 # initialize rs1
xori x31, x11, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 816)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
xori x11, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 824)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000001 # initialize rs1
xori x20, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 832)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000001 # initialize rs1
xori x19, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 840)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
xori x31, x1, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 848)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
xori x30, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 856)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
xori x28, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
xori x26, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 872)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
xori x11, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 880)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000001 # initialize rs1
xori x23, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 888)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000001 # initialize rs1
xori x22, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 896)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
xori x6, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 904)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000001 # initialize rs1
xori x8, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 912)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
xori x14, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 920)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000001 # initialize rs1
xori x20, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 928)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000001 # initialize rs1
xori x28, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 936)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000001 # initialize rs1
xori x20, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 944)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
xori x26, x5, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 952)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000002 # initialize rs1
xori x25, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 960)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000002 # initialize rs1
xori x21, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
xori x6, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 976)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
xori x1, x8, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 984)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
xori x13, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 992)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000002 # initialize rs1
xori x20, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1000)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000002 # initialize rs1
xori x17, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1008)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
xori x19, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1016)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
xori x14, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1024)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000002 # initialize rs1
xori x24, x17, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1032)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000002 # initialize rs1
xori x7, x2, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000002 # initialize rs1
xori x22, x9, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1048)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000002 # initialize rs1
xori x15, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1056)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
xori x19, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1064)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000002 # initialize rs1
xori x28, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1072)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000002 # initialize rs1
xori x31, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1080)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000002 # initialize rs1
xori x22, x28, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1088)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
xori x29, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1096)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
xori x2, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1104)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
xori x29, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1112)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000000 # initialize rs1
xori x3, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
xori x12, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1128)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
xori x1, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1136)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000000 # initialize rs1
xori x21, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1144)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
xori x15, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1152)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000000 # initialize rs1
xori x15, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1160)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
xori x15, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1168)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
xori x18, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1176)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000000 # initialize rs1
xori x10, x7, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1184)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
xori x8, x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1192)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
xori x31, x19, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1200)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
xori x16, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1208)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
xori x25, x1, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1216)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
xori x31, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1224)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000000 # initialize rs1
xori x2, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1232)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
xori x25, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1240)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000000 # initialize rs1
xori x6, x5, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1248)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000000 # initialize rs1
xori x10, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1256)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000000 # initialize rs1
xori x6, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1264)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000000 # initialize rs1
xori x12, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1272)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000001 # initialize rs1
xori x14, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1280)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
xori x22, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1288)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
xori x14, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1296)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000001 # initialize rs1
xori x13, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1304)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000001 # initialize rs1
xori x27, x29, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1312)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
xori x2, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000001 # initialize rs1
xori x12, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1328)

# Testcase cr_rs1_imm_corners
li x25, 0x8000000000000001 # initialize rs1
xori x18, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000001 # initialize rs1
xori x8, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000001 # initialize rs1
xori x7, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1352)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000001 # initialize rs1
xori x20, x8, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1360)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000001 # initialize rs1
xori x1, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1368)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000001 # initialize rs1
xori x19, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1376)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000001 # initialize rs1
xori x12, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1384)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000001 # initialize rs1
xori x21, x17, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1392)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000001 # initialize rs1
xori x24, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1400)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000001 # initialize rs1
xori x28, x8, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1408)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000001 # initialize rs1
xori x27, x23, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1416)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
xori x18, x13, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1424)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
xori x22, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1432)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
xori x9, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1440)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffffffffffff # initialize rs1
xori x23, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1448)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffffffffffff # initialize rs1
xori x20, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1456)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffffffffffff # initialize rs1
xori x2, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1464)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
xori x18, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1472)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffffffffffff # initialize rs1
xori x28, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1480)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffffffffffff # initialize rs1
xori x20, x19, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1488)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
xori x29, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1496)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
xori x16, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
xori x20, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1512)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
xori x11, x24, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1520)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffffffffffff # initialize rs1
xori x30, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1528)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffffffffffff # initialize rs1
xori x15, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1536)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
xori x12, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1544)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
xori x21, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1552)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
xori x21, x20, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1560)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
xori x14, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1568)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffffffffffff # initialize rs1
xori x5, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1576)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
xori x25, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1584)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
xori x20, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1592)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
xori x16, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1600)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffffffffffe # initialize rs1
xori x1, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1608)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffffffffffe # initialize rs1
xori x28, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1616)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
xori x30, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1624)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
xori x14, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1632)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
xori x19, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1640)

# Testcase cr_rs1_imm_corners
li x31, 0x7ffffffffffffffe # initialize rs1
xori x22, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1648)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
xori x10, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1656)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
xori x5, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1664)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
xori x31, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1672)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
xori x26, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1680)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
xori x17, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1688)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffffffffffe # initialize rs1
xori x1, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1696)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
xori x11, x28, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1704)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
xori x28, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1712)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
xori x24, x20, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
xori x14, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1728)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffffffffffe # initialize rs1
xori x30, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1736)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffffffffffe # initialize rs1
xori x17, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1744)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
xori x28, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffffffffffff # initialize rs1
xori x16, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1760)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffffffffffff # initialize rs1
xori x5, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1768)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffffffffffff # initialize rs1
xori x11, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1776)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffffffffffff # initialize rs1
xori x30, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1784)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffffffffffff # initialize rs1
xori x14, x16, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
xori x28, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 0)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
xori x28, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 8)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffffffffffff # initialize rs1
xori x14, x28, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 16)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
xori x18, x24, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 24)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffffffffffff # initialize rs1
xori x8, x29, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 32)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
xori x23, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 40)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
xori x19, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 48)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffffffffffff # initialize rs1
xori x22, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 56)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
xori x11, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffffffffffff # initialize rs1
xori x18, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffffffffffff # initialize rs1
xori x29, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 80)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffffffffffff # initialize rs1
xori x18, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
xori x5, x2, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 96)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffffffffffff # initialize rs1
xori x20, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 104)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffffffffffff # initialize rs1
xori x11, x14, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 112)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
xori x15, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 120)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
xori x26, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 128)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
xori x8, x31, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 136)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
xori x10, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 144)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffffffffffe # initialize rs1
xori x12, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 152)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
xori x2, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 160)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
xori x30, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 168)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
xori x22, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 176)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffffffffffe # initialize rs1
xori x7, x22, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 184)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
xori x11, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 192)

# Testcase cr_rs1_imm_corners
li x9, 0xfffffffffffffffe # initialize rs1
xori x24, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 200)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
xori x13, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 208)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffffffffffe # initialize rs1
xori x24, x20, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffffffffffe # initialize rs1
xori x16, x11, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 224)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffffffffffe # initialize rs1
xori x17, x21, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 232)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
xori x9, x2, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 240)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
xori x24, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 248)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
xori x27, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 256)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffffffffffe # initialize rs1
xori x7, x3, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 264)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
xori x27, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 272)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
xori x28, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 280)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc887763ae86f2 # initialize rs1
xori x16, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 288)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc887763ae86f2 # initialize rs1
xori x29, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 296)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
xori x15, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 304)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc887763ae86f2 # initialize rs1
xori x31, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 312)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc887763ae86f2 # initialize rs1
xori x16, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
xori x21, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 328)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
xori x6, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 336)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
xori x19, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 344)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc887763ae86f2 # initialize rs1
xori x21, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 352)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc887763ae86f2 # initialize rs1
xori x13, x10, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
xori x12, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 368)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
xori x9, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 376)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc887763ae86f2 # initialize rs1
xori x28, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 384)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc887763ae86f2 # initialize rs1
xori x31, x19, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 392)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc887763ae86f2 # initialize rs1
xori x13, x9, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 400)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc887763ae86f2 # initialize rs1
xori x6, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 408)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc887763ae86f2 # initialize rs1
xori x23, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 416)

# Testcase cr_rs1_imm_corners
li x27, 0x5bbc887763ae86f2 # initialize rs1
xori x30, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc887763ae86f2 # initialize rs1
xori x20, x8, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 432)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x29, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 440)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x28, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 448)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x15, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x29, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 464)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x17, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 472)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x28, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x27, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 488)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x14, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 496)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x12, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 504)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x24, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 512)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x18, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 520)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x19, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 528)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x6, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x9, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 544)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x7, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x2, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 560)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x20, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 568)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x12, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 576)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x3, x10, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 584)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
xori x25, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 592)

# Testcase cr_rs1_imm_corners
li x30, 0x5555555555555555 # initialize rs1
xori x5, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 600)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
xori x11, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 608)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
xori x28, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 616)

# Testcase cr_rs1_imm_corners
li x23, 0x5555555555555555 # initialize rs1
xori x27, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 624)

# Testcase cr_rs1_imm_corners
li x12, 0x5555555555555555 # initialize rs1
xori x6, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 632)

# Testcase cr_rs1_imm_corners
li x2, 0x5555555555555555 # initialize rs1
xori x14, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 640)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
xori x22, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 648)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
xori x26, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 656)

# Testcase cr_rs1_imm_corners
li x29, 0x5555555555555555 # initialize rs1
xori x14, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 664)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
xori x14, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 672)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
xori x21, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
xori x1, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 688)

# Testcase cr_rs1_imm_corners
li x18, 0x5555555555555555 # initialize rs1
xori x23, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
xori x1, x14, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 704)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
xori x30, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 712)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
xori x27, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 720)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
xori x11, x28, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cr_rs1_imm_corners
li x29, 0x5555555555555555 # initialize rs1
xori x6, x29, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 736)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
xori x5, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 744)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
xori x14, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
xori x11, x17, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 760)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
xori x12, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 768)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
xori x1, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 776)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
xori x28, x27, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 784)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
xori x17, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 792)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000ffffffff # initialize rs1
xori x25, x8, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 800)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
xori x16, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 808)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
xori x11, x27, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 816)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000ffffffff # initialize rs1
xori x13, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 824)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000ffffffff # initialize rs1
xori x28, x12, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 832)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000ffffffff # initialize rs1
xori x10, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 840)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000ffffffff # initialize rs1
xori x18, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 848)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000ffffffff # initialize rs1
xori x5, x8, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 856)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000ffffffff # initialize rs1
xori x12, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 864)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000ffffffff # initialize rs1
xori x21, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 872)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000ffffffff # initialize rs1
xori x28, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 880)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
xori x26, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 888)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
xori x20, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 896)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000ffffffff # initialize rs1
xori x16, x14, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 904)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000ffffffff # initialize rs1
xori x7, x30, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 912)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000fffffffe # initialize rs1
xori x1, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 920)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000fffffffe # initialize rs1
xori x27, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 928)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000fffffffe # initialize rs1
xori x19, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 936)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
xori x29, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 944)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000fffffffe # initialize rs1
xori x23, x13, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 952)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
xori x22, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 960)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000fffffffe # initialize rs1
xori x1, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 968)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
xori x13, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 976)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
xori x24, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 984)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000fffffffe # initialize rs1
xori x7, x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 992)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
xori x21, x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1000)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
xori x27, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1008)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000fffffffe # initialize rs1
xori x5, x1, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1016)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000fffffffe # initialize rs1
xori x20, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1024)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
xori x7, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1032)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000fffffffe # initialize rs1
xori x16, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000fffffffe # initialize rs1
xori x25, x6, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1048)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000fffffffe # initialize rs1
xori x14, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1056)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000fffffffe # initialize rs1
xori x11, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1064)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000fffffffe # initialize rs1
xori x17, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
xori x19, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1080)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000000 # initialize rs1
xori x21, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1088)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
xori x7, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1096)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000000 # initialize rs1
xori x3, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1104)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
xori x7, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1112)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000000 # initialize rs1
xori x27, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1120)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000000 # initialize rs1
xori x7, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1128)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000000 # initialize rs1
xori x24, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1136)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000100000000 # initialize rs1
xori x6, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1144)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000100000000 # initialize rs1
xori x27, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1152)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
xori x26, x24, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1160)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
xori x29, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1168)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000100000000 # initialize rs1
xori x31, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1176)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000000 # initialize rs1
xori x11, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1184)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000000 # initialize rs1
xori x16, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1192)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000000 # initialize rs1
xori x11, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1200)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000000 # initialize rs1
xori x29, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1208)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
xori x8, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000000 # initialize rs1
xori x25, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1224)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
xori x30, x18, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1232)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
xori x29, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1240)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000100000001 # initialize rs1
xori x15, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1248)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
xori x6, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1256)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000001 # initialize rs1
xori x28, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1264)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
xori x29, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1272)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
xori x29, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1280)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000001 # initialize rs1
xori x8, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1288)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000001 # initialize rs1
xori x3, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1296)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
xori x1, x22, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1304)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000001 # initialize rs1
xori x21, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1312)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000100000001 # initialize rs1
xori x1, x25, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1320)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
xori x26, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1328)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000001 # initialize rs1
xori x26, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1336)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
xori x8, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000001 # initialize rs1
xori x3, x9, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1352)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
xori x30, x31, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1360)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
xori x16, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1368)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
xori x25, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1376)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000001 # initialize rs1
xori x16, x11, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1384)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
xori x5, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xc0fb74e114bda9a3 # initialize rs1
xori x0, x0, -1467 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xa54dca1660b68283 # initialize rs1
xori x1, x1, 727 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xb392ae54d186f7f6 # initialize rs1
xori x2, x2, 1575 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x5ab0bd17b78ccea6 # initialize rs1
xori x3, x3, -214 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x507de1b08b95dfd0 # initialize rs1
xori x4, x4, 973 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2d073d623607a937 # initialize rs1
xori x5, x5, -982 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x1aaf4b4488bbf1be # initialize rs1
xori x6, x6, -949 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb9c43a0580e83a5a # initialize rs1
xori x7, x7, 1457 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x840b8b98732f8e32 # initialize rs1
xori x8, x8, 871 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x90b29e061538da80 # initialize rs1
xori x9, x9, 1328 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xc0f47cde396ae102 # initialize rs1
xori x10, x10, 664 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x124c1db8f94576a0 # initialize rs1
xori x11, x11, -1403 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x05367dc2f77e5492 # initialize rs1
xori x12, x12, 1218 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb6d777ee2f2cde7d # initialize rs1
xori x13, x13, -1669 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xdee101553220ab0b # initialize rs1
xori x14, x14, 594 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x4be2849ccc9527cb # initialize rs1
xori x15, x15, 524 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xd865c669df2a04e6 # initialize rs1
xori x16, x16, 573 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xece3922cd2d054c5 # initialize rs1
xori x17, x17, -1782 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x5c27506faf220600 # initialize rs1
xori x18, x18, 1896 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x103bc254d64ff461 # initialize rs1
xori x19, x19, -497 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x6aba5c3d545754ff # initialize rs1
xori x20, x20, -1292 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xbe0354c4194437db # initialize rs1
xori x21, x21, 1882 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xf7a60003e54587ce # initialize rs1
xori x22, x22, -1883 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x256cb2a0f8a5d23e # initialize rs1
xori x23, x23, 1435 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xf6af65b1fd2c7cc8 # initialize rs1
xori x24, x24, 852 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x689863fe56b7c6b6 # initialize rs1
xori x25, x25, -938 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x6df84c3a576bbf9d # initialize rs1
xori x26, x26, 1041 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xb215e9e62d95077c # initialize rs1
xori x27, x27, 894 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xd770571a9dc657db # initialize rs1
xori x28, x28, -1802 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x458921eb6a4750cb # initialize rs1
xori x29, x29, 1007 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x843377b4a450e195 # initialize rs1
xori x30, x30, 689 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xcb2e2769d7f7e251 # initialize rs1
xori x31, x31, 1944 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x1, 0x47225bf9d8cc99c8 # initialize rs1
xori x8, x1, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1656)

# Testcase cp_imm_corners
li x18, 0x039471e53db66c54 # initialize rs1
xori x31, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1664)

# Testcase cp_imm_corners
li x24, 0x9cfd9ef102dd3f77 # initialize rs1
xori x6, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1672)

# Testcase cp_imm_corners
li x17, 0x35922e44f0b95266 # initialize rs1
xori x11, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1680)

# Testcase cp_imm_corners
li x17, 0xe41ca1c38561e303 # initialize rs1
xori x9, x17, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1688)

# Testcase cp_imm_corners
li x25, 0x304389c54df2f427 # initialize rs1
xori x20, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1696)

# Testcase cp_imm_corners
li x29, 0xf71c4708c721c469 # initialize rs1
xori x5, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1704)

# Testcase cp_imm_corners
li x19, 0x2225be9d8ea5d8b1 # initialize rs1
xori x20, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1712)

# Testcase cp_imm_corners
li x9, 0x08252d1f2255f16b # initialize rs1
xori x7, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1720)

# Testcase cp_imm_corners
li x21, 0x7df2f60af251f441 # initialize rs1
xori x29, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1728)

# Testcase cp_imm_corners
li x28, 0x406fbca521783f99 # initialize rs1
xori x13, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1736)

# Testcase cp_imm_corners
li x8, 0xae52d542b8c32463 # initialize rs1
xori x31, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1744)

# Testcase cp_imm_corners
li x15, 0xa31bd071412b81c9 # initialize rs1
xori x18, x15, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1752)

# Testcase cp_imm_corners
li x5, 0x32241e14f952b940 # initialize rs1
xori x20, x5, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1760)

# Testcase cp_imm_corners
li x29, 0x80e24a78c80ea9f9 # initialize rs1
xori x26, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1768)

# Testcase cp_imm_corners
li x31, 0xffed276a4bab64fe # initialize rs1
xori x14, x31, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1776)

# Testcase cp_imm_corners
li x30, 0x40cc2f6a059e6650 # initialize rs1
xori x28, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1784)

# Testcase cp_imm_corners
li x23, 0xb7589190b3c1d504 # initialize rs1
xori x24, x23, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x9, 0x6e2003efc9b47981 # initialize rs1
xori x19, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cp_imm_corners
li x6, 0x10a07341f5e763f6 # initialize rs1
xori x10, x6, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x19, x10 # perform first operation
xori x26, x12, -652 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x10, x25 # perform first operation
xori x17, x20, -1559 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x16, x12 # perform first operation
xori x8, x3, 239 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x14, x2, x6 # perform first operation
xori x14, x14, 789 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x28, x16, x24 # perform first operation
xori x28, x6, -521 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x30, x15 # perform first operation
xori x9, x25, 1789 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x14, x8 # perform first operation
xori x16, x24, -1273 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x10, x21 # perform first operation
xori x29, x26, -305 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x26, x2, x1 # perform first operation
xori x26, x20, 1226 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x5, x6 # perform first operation
xori x5, x15, -140 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x6, x2 # perform first operation
xori x2, x13, -1986 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x9, x11 # perform first operation
xori x5, x2, 1796 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-sllw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x63e576537ee31caa # initialize rs1
li x10, 0xdabf6cf386d911fc # initialize rs2
sllw x20, x0, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xa4d1f884423f94d5 # initialize rs1
li x28, 0x1066e7a97ef2d9dc # initialize rs2
sllw x29, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x7387f68df2c55d29 # initialize rs1
li x20, 0x05291b8702073a14 # initialize rs2
sllw x30, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x7733c1ad62a2cc39 # initialize rs1
li x12, 0xe02fad193b3ed479 # initialize rs2
sllw x19, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb100b4278a940424 # initialize rs1
li x13, 0xd0bf290d2c62278d # initialize rs2
sllw x23, x4, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa5cebc8e3eb547cd # initialize rs1
li x3, 0x7a45e7d122fea919 # initialize rs2
sllw x24, x5, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x24, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x261bc6338a92623b # initialize rs1
li x11, 0xdf9381678eaf753f # initialize rs2
sllw x4, x6, x11 # perform operation
RVTEST_SIGUPD(x7, x0, x4, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8e3a5d23410735b2 # initialize rs1
li x21, 0xd80e6911a79722a2 # initialize rs2
sllw x11, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x24e67e49d7fbdad3 # initialize rs1
li x28, 0xc7e4821d2e9c384b # initialize rs2
sllw x21, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x0b1447d17c0de43a # initialize rs1
li x26, 0x2e537d57ca13b5d3 # initialize rs2
sllw x22, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x3fb17860c7eb6b84 # initialize rs1
li x5, 0xcb34d5fdd030abf1 # initialize rs2
sllw x21, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x9a87c27494da296b # initialize rs1
li x31, 0x5015be530f48c09d # initialize rs2
sllw x5, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xfc90a64557f21e7c # initialize rs1
li x25, 0xf62d2ae41a9e5514 # initialize rs2
sllw x1, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x412e0ec49eacbad1 # initialize rs1
li x1, 0x22bd637b27df736c # initialize rs2
sllw x17, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x4e2e3d429b4b64f7 # initialize rs1
li x19, 0x36f0117d5835bc36 # initialize rs2
sllw x10, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xff5355fb47adc489 # initialize rs1
li x11, 0x6360b76a5ce55664 # initialize rs2
sllw x26, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x8b393f7ba1a4b93b # initialize rs1
li x5, 0x3223eddb382b6d8e # initialize rs2
sllw x24, x16, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x33c812037d761d2a # initialize rs1
li x6, 0x5984039ffc2db4b6 # initialize rs2
sllw x29, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xb941ea8539ef2889 # initialize rs1
li x9, 0xcbea44ec22768699 # initialize rs2
sllw x2, x18, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x5b48136d73780f1a # initialize rs1
li x14, 0x94bdf477bb7a4212 # initialize rs2
sllw x30, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xf5bc54038128345c # initialize rs1
li x8, 0x3d5d60cb34df114b # initialize rs2
sllw x26, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x8f2351357a87152e # initialize rs1
li x24, 0x1d0b85fca1eb6f7d # initialize rs2
sllw x26, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x129cd277b042a7b4 # initialize rs1
li x30, 0x001c3580e94eb2c1 # initialize rs2
sllw x24, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x613c341e4e0b00bb # initialize rs1
li x5, 0x38b3fc2df0ebfa1b # initialize rs2
sllw x31, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x6329718cfe93a69c # initialize rs1
li x29, 0x1663d1bf52369166 # initialize rs2
sllw x6, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x782139a4a52f9286 # initialize rs1
li x17, 0x842debffe6894354 # initialize rs2
sllw x28, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x2303817f08d0babb # initialize rs1
li x14, 0x226cc5b451a892bf # initialize rs2
sllw x1, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x99efc718830769dc # initialize rs1
li x16, 0x5b7e2bed686c4f82 # initialize rs2
sllw x15, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x2d0a11ab110d1e55 # initialize rs1
li x14, 0x93b503bf523d05f9 # initialize rs2
sllw x21, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xce817771224bbae0 # initialize rs1
li x17, 0xff60fb2e366b5a8b # initialize rs2
sllw x16, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe2500e015b0017a1 # initialize rs1
li x2, 0x0431bde05a7a90ab # initialize rs2
sllw x3, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x7f6d24e131743e20 # initialize rs1
li x5, 0xa69eec2f69d482db # initialize rs2
sllw x1, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x12, 0x48fab09598248de6 # initialize rs1
li x0, 0xf0fa23e9fb8e8700 # initialize rs2
sllw x21, x12, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x23, 0x87f078c86382b71e # initialize rs1
li x1, 0xd551bdfb8485152d # initialize rs2
sllw x16, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x19, 0x4d8cf1344e928dfd # initialize rs1
li x2, 0x696383d27f3674d7 # initialize rs2
sllw x15, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x1, 0x10ca45f9ac789455 # initialize rs1
li x3, 0x9b17d4fe054f53e7 # initialize rs2
sllw x6, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x31, 0xa417378a5ec1f245 # initialize rs1
li x4, 0x4c85083b3b732c83 # initialize rs2
sllw x21, x31, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0x2908593477d9bd8c # initialize rs1
li x5, 0x5a629f94afd45c7a # initialize rs2
sllw x21, x11, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x21, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x2, 0x16bea1b74b499743 # initialize rs1
li x6, 0x5b41b4e7aa994c5f # initialize rs2
sllw x15, x2, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x15, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0xcaf9c489b2f02e18 # initialize rs1
li x7, 0x6c0a133e8d41f9a7 # initialize rs2
sllw x31, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x3, 0xa0b4798fcefada01 # initialize rs1
li x8, 0xfb8fd4f0f794d25b # initialize rs2
sllw x7, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x27, 0x3229ed6b7c4d19d6 # initialize rs1
li x9, 0x274a74955aa9b486 # initialize rs2
sllw x23, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x1, 0x81f29b92f2bdb766 # initialize rs1
li x10, 0x33acef56002f316e # initialize rs2
sllw x14, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x31, 0xa3d56f96eb570c62 # initialize rs1
li x11, 0x5cdade3d72db78e2 # initialize rs2
sllw x23, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x19, 0x5a503bbe83dc84dd # initialize rs1
li x12, 0xafe137a50dd5f8d4 # initialize rs2
sllw x8, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x14, 0x32549aab81f66e8b # initialize rs1
li x13, 0x3d31084fb0f2a78f # initialize rs2
sllw x27, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x17, 0x7defdb0dea9ad1a9 # initialize rs1
li x14, 0x63af805ff38f67e9 # initialize rs2
sllw x21, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x7, 0x8be4db7020136941 # initialize rs1
li x15, 0xb332e6e5c1d9730f # initialize rs2
sllw x1, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x29, 0x94760ba06b1ceb30 # initialize rs1
li x16, 0x74c6f409ea9e3390 # initialize rs2
sllw x25, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x30, 0x651c3270fb97757f # initialize rs1
li x17, 0x74e5b9f2f82453fb # initialize rs2
sllw x11, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x1, 0x728a05ece475ec62 # initialize rs1
li x18, 0x57001ff43add1f01 # initialize rs2
sllw x7, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x18, 0x3f4092ff0a965780 # initialize rs1
li x19, 0xa8465258d043453c # initialize rs2
sllw x7, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x24, 0xeaed25c6977f3b0a # initialize rs1
li x20, 0xa337a806ee619938 # initialize rs2
sllw x17, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x5, 0xaa9446e5718c3d5f # initialize rs1
li x21, 0x0dcee2e9be26a94f # initialize rs2
sllw x1, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x10, 0x20aadb023fd0d149 # initialize rs1
li x22, 0x9d2b13f63110ecc3 # initialize rs2
sllw x6, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x5, 0x6ab491327cf7c140 # initialize rs1
li x23, 0xd045f64af4daf880 # initialize rs2
sllw x31, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x17, 0xab0d77dbb5f8be7a # initialize rs1
li x24, 0x4a2ca87057a70c3d # initialize rs2
sllw x18, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x26, 0xcb1f4ea6e0b1f25a # initialize rs1
li x25, 0xdb266c56fa4bd323 # initialize rs2
sllw x13, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x10, 0x3fae69dd1ebb7b1f # initialize rs1
li x26, 0x428d8da7a61e3ebb # initialize rs2
sllw x12, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x23, 0x63b685686e963dfa # initialize rs1
li x27, 0x1438ddabf6a870f1 # initialize rs2
sllw x12, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x5, 0x94c55497c243cff0 # initialize rs1
li x28, 0xc2419f662c8f1b9d # initialize rs2
sllw x3, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x15, 0x31a456138046437c # initialize rs1
li x29, 0x73f5b89bf7ed1b72 # initialize rs2
sllw x11, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x22, 0x5f76b3fbc60f62e0 # initialize rs1
li x30, 0x5b2b8557dd3547a4 # initialize rs2
sllw x23, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x15, 0xdd105e617d85034d # initialize rs1
li x31, 0xb5ae68a7f7a04e4d # initialize rs2
sllw x25, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 504)

# Testcase cp_rd (Test destination rd = x0)
li x31, 0xd3cd5aee24bf95d8 # initialize rs1
li x19, 0x4606343679adcb62 # initialize rs2
sllw x0, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x16, 0x8a40527696855d9e # initialize rs1
li x15, 0x90a00878be730c61 # initialize rs2
sllw x1, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x16, 0x24b36bed6d532b62 # initialize rs1
li x6, 0x324297d07cc7f8b6 # initialize rs2
sllw x2, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x22, 0x37b313b1b5cb7a23 # initialize rs1
li x1, 0x097d79c98a6a0b38 # initialize rs2
sllw x3, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0x3846cc2e12425808 # initialize rs1
li x16, 0x98c61e813761dd2e # initialize rs2
sllw x4, x12, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x12, 0x98123f2c977b171d # initialize rs1
li x19, 0x3bb6f908e7e8cf1c # initialize rs2
sllw x5, x12, x19 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0x59912a68ff5f5338 # initialize rs1
li x29, 0x603ebe043f001613 # initialize rs2
sllw x6, x8, x29 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0xdf087f5e81661ebc # initialize rs1
li x20, 0x71d8c7315bde41a6 # initialize rs2
sllw x7, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x11, 0x42feaa46847490e5 # initialize rs1
li x18, 0x8bd532215170cb53 # initialize rs2
sllw x8, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x1, 0x5a71a3054285c864 # initialize rs1
li x7, 0x3e9e410459745684 # initialize rs2
sllw x9, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x12, 0xdf28ed3f3fe3b20a # initialize rs1
li x24, 0xf59c077b8d1ff3a1 # initialize rs2
sllw x10, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x10, 0x1d40f2e51e7c7308 # initialize rs1
li x27, 0x1f3779e29a2c8764 # initialize rs2
sllw x11, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x2, 0x2c294cfb72a62d38 # initialize rs1
li x28, 0x5c1bbba90a189272 # initialize rs2
sllw x12, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x28, 0x48cf826fd1a1dc46 # initialize rs1
li x8, 0x7ab625f26d69ef39 # initialize rs2
sllw x13, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x31, 0x1450a41e019b41e3 # initialize rs1
li x17, 0xdbfb623529bbec09 # initialize rs2
sllw x14, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0x5d4b409711bea44e # initialize rs1
li x20, 0x7be62c0e10b54350 # initialize rs2
sllw x15, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x19, 0x48152b77aa27711a # initialize rs1
li x30, 0x55add629cbcad5de # initialize rs2
sllw x16, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x12, 0x5dca6586e92c78df # initialize rs1
li x9, 0x18dfcae4fce7f322 # initialize rs2
sllw x17, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x16, 0xca06d7d8ee6ffb2e # initialize rs1
li x10, 0x9413ace72f9b0175 # initialize rs2
sllw x18, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x18, 0x2f3eef3ab1784f9c # initialize rs1
li x9, 0xb0fe3a09705d99b1 # initialize rs2
sllw x19, x18, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x29, 0x8f30b000738cef92 # initialize rs1
li x6, 0x935b9ea59847dfbf # initialize rs2
sllw x20, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x8, 0x12d9cc4e286a92e5 # initialize rs1
li x18, 0x1092edcc4b12b8b5 # initialize rs2
sllw x21, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x5, 0x170e293d941bc67d # initialize rs1
li x31, 0x3b45f413f1d8ad88 # initialize rs2
sllw x22, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x2, 0xdf25ac2b24954bb0 # initialize rs1
li x24, 0xa166e2bfa452af4b # initialize rs2
sllw x23, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x18, 0x76b218c63573e522 # initialize rs1
li x31, 0x78e7e475692d7357 # initialize rs2
sllw x24, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0x1d4c49ad4cc4f062 # initialize rs1
li x23, 0x439931b2abce96e0 # initialize rs2
sllw x25, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x20, 0xdca9eca243848f99 # initialize rs1
li x1, 0xcdfbcd814f3a8914 # initialize rs2
sllw x26, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x29, 0x17cfadd63ac069bf # initialize rs1
li x26, 0xfe72a833b83ef438 # initialize rs2
sllw x27, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x3, 0x68bc5f89fb71c95f # initialize rs1
li x12, 0xf7c87da8d0e44e40 # initialize rs2
sllw x28, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x26, 0xebe8e2c48fdd6f6b # initialize rs1
li x5, 0x0467f788c25e3fc1 # initialize rs2
sllw x29, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x20, 0xa76c3a0d14a491cf # initialize rs1
li x1, 0x1477d7c38143b597 # initialize rs2
sllw x30, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x21, 0xbc1c91d359715de0 # initialize rs1
li x13, 0x2d46721ce11b19a6 # initialize rs2
sllw x31, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x12, 0x0000000000000000 # initialize rs1
li x8, 0x78ed7b1de35db1bc # initialize rs2
sllw x10, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x31, 0x0000000000000001 # initialize rs1
li x12, 0xc9692bde27a241ac # initialize rs2
sllw x3, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x29, 0x0000000000000002 # initialize rs1
li x11, 0x7bac71749e1863d5 # initialize rs2
sllw x30, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x9, 0x8000000000000000 # initialize rs1
li x18, 0xae09877169ac7c31 # initialize rs2
sllw x8, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x27, 0x8000000000000001 # initialize rs1
li x29, 0x28511fc4ffdd2dbd # initialize rs2
sllw x7, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x12, 0x7fffffffffffffff # initialize rs1
li x1, 0x4e3d3ae75ee2249c # initialize rs2
sllw x3, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x29, 0x7ffffffffffffffe # initialize rs1
li x26, 0xdd0f8d2e572ab419 # initialize rs2
sllw x8, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x28, 0xffffffffffffffff # initialize rs1
li x3, 0xc53e8ac75b4c69b1 # initialize rs2
sllw x18, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
li x28, 0x095e887ab3e7e698 # initialize rs2
sllw x3, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0xfcfdbcf661301457 # initialize rs2
sllw x2, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x63f85e1e1006b722 # initialize rs2
sllw x24, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x20, 0x5555555555555555 # initialize rs1
li x14, 0x42e2387bb09179c2 # initialize rs2
sllw x26, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x5, 0xf47075c146223159 # initialize rs2
sllw x2, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x2, 0x12f2292aa68d91c0 # initialize rs2
sllw x24, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x8, 0x0000000100000000 # initialize rs1
li x27, 0xd5be7e03628c108c # initialize rs2
sllw x24, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x15, 0x0000000100000001 # initialize rs1
li x13, 0xdb58798e3cc43483 # initialize rs2
sllw x14, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x24, 0x69800a0497ce0a54 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sllw x12, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x29, 0x34044ec258e3ccf1 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
sllw x6, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x24, 0x42aaf5837542ea69 # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
sllw x20, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x24, 0x2350361bef410f54 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
sllw x29, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x2, 0x07984009558b24c5 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
sllw x22, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x18, 0x69e329586a178b0d # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sllw x25, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x29, 0xff6b041426cbae8e # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
sllw x26, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x17, 0xad9297297eb5bdeb # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
sllw x11, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x14, 0xf3c68081e59b656d # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
sllw x10, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x18, 0xe1ffeef25e898c02 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
sllw x16, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x8, 0x50405474518c471b # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x19, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x13, 0xd4524f17e94fcaed # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
sllw x8, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x28, 0x8e785bbf6f7fd75e # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
sllw x16, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x11, 0xae82fc7c19d68d38 # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
sllw x15, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x1, 0x5e1cedcdef440438 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
sllw x7, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x11, 0x0eb13448443df8b3 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
sllw x30, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x27, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
sllw x9, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x8, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sllw x16, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x26, 0x0000000000000000 # initialize rs1
li x11, 0x0000000000000002 # initialize rs2
sllw x1, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x29, 0x0000000000000000 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
sllw x13, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x29, 0x0000000000000000 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
sllw x9, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000000000000 # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
sllw x31, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000000000000 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
sllw x26, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x18, 0x0000000000000000 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
sllw x28, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x27, 0x0000000000000000 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
sllw x15, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x24, 0x0000000000000000 # initialize rs1
li x23, 0x5bbc887763ae86f2 # initialize rs2
sllw x22, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x0000000000000000 # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x11, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x3, 0x0000000000000000 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
sllw x2, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x13, 0x0000000000000000 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
sllw x19, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x10, 0x0000000000000000 # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
sllw x20, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x14, 0x0000000000000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sllw x18, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x24, 0x0000000000000000 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sllw x17, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x26, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
sllw x14, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x11, 0x0000000000000001 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
sllw x27, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x2, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
sllw x16, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x9, 0x0000000000000001 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
sllw x8, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x2, 0x0000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sllw x23, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x14, 0x0000000000000001 # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
sllw x18, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x27, 0x0000000000000001 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sllw x1, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x9, 0x0000000000000001 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
sllw x24, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x15, 0x0000000000000001 # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
sllw x19, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x10, 0x0000000000000001 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
sllw x20, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x0000000000000001 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x27, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x3, 0x0000000000000001 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sllw x21, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
sllw x8, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x12, 0x0000000000000001 # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sllw x30, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x1, 0x0000000000000001 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
sllw x21, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x12, 0x0000000000000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
sllw x11, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x22, 0x0000000000000002 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
sllw x16, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x26, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
sllw x1, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x23, 0x0000000000000002 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
sllw x5, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x27, 0x0000000000000002 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
sllw x30, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x19, 0x0000000000000002 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sllw x23, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000000000002 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
sllw x7, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x26, 0x0000000000000002 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sllw x19, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x26, 0x0000000000000002 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
sllw x10, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x3, 0x0000000000000002 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
sllw x17, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x7, 0x0000000000000002 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
sllw x31, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x0000000000000002 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x16, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x6, 0x0000000000000002 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sllw x8, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x10, 0x0000000000000002 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sllw x28, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x11, 0x0000000000000002 # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
sllw x26, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x3, 0x0000000000000002 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
sllw x6, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x23, 0x0000000000000002 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
sllw x30, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x6, 0x8000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sllw x1, x6, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x11, 0x8000000000000000 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
sllw x17, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x31, 0x8000000000000000 # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
sllw x14, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x16, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
sllw x27, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x12, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
sllw x19, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x8, 0x8000000000000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
sllw x20, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x22, 0x8000000000000000 # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
sllw x21, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x19, 0x8000000000000000 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
sllw x31, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x22, 0x8000000000000000 # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
sllw x2, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x17, 0x8000000000000000 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
sllw x8, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x8000000000000000 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x19, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x19, 0x8000000000000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
sllw x6, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x3, 0x8000000000000000 # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
sllw x24, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x31, 0x8000000000000000 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
sllw x16, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x29, 0x8000000000000000 # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
sllw x31, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x11, 0x8000000000000000 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sllw x5, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x21, 0x8000000000000001 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
sllw x3, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x25, 0x8000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
sllw x27, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x18, 0x8000000000000001 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
sllw x22, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x31, 0x8000000000000001 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
sllw x22, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x23, 0x8000000000000001 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
sllw x31, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x22, 0x8000000000000001 # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
sllw x2, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x27, 0x8000000000000001 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
sllw x5, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
sllw x19, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x18, 0x8000000000000001 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
sllw x3, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x6, 0x8000000000000001 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sllw x23, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x8000000000000001 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x2, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x9, 0x8000000000000001 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
sllw x15, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x11, 0x8000000000000001 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
sllw x31, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x1, 0x8000000000000001 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
sllw x8, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x10, 0x8000000000000001 # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
sllw x22, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x11, 0x8000000000000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sllw x29, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x8, 0x7fffffffffffffff # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
sllw x11, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x14, 0x7fffffffffffffff # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
sllw x5, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x27, 0x7fffffffffffffff # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sllw x10, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x28, 0x7fffffffffffffff # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sllw x10, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x2, 0x7fffffffffffffff # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
sllw x5, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x22, 0x7fffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
sllw x10, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x2, 0x7fffffffffffffff # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
sllw x9, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
sllw x22, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x7, 0x7fffffffffffffff # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
sllw x6, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x18, 0x7fffffffffffffff # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
sllw x15, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x7fffffffffffffff # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x18, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x19, 0x7fffffffffffffff # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
sllw x22, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x23, 0x7fffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sllw x5, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x11, 0x7fffffffffffffff # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sllw x31, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x31, 0x7fffffffffffffff # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
sllw x21, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x2, 0x7fffffffffffffff # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sllw x23, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x15, 0x7ffffffffffffffe # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sllw x23, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x30, 0x7ffffffffffffffe # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sllw x3, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x10, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
sllw x6, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x24, 0x7ffffffffffffffe # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sllw x10, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x3, 0x7ffffffffffffffe # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
sllw x5, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x22, 0x7ffffffffffffffe # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
sllw x21, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x7, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sllw x23, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x17, 0x7ffffffffffffffe # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
sllw x15, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sllw x20, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x7, 0x7ffffffffffffffe # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
sllw x22, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x7ffffffffffffffe # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x14, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x21, 0x7ffffffffffffffe # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
sllw x18, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x12, 0x7ffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sllw x29, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x8, 0x7ffffffffffffffe # initialize rs1
li x25, 0x00000000fffffffe # initialize rs2
sllw x5, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x9, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
sllw x31, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x15, 0x7ffffffffffffffe # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
sllw x28, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x27, 0xffffffffffffffff # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
sllw x7, x27, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x27, 0xffffffffffffffff # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
sllw x30, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x30, 0xffffffffffffffff # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
sllw x7, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x2, 0xffffffffffffffff # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sllw x17, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x20, 0xffffffffffffffff # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
sllw x27, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x28, 0xffffffffffffffff # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
sllw x25, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x23, 0xffffffffffffffff # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sllw x26, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
sllw x22, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x7, 0xffffffffffffffff # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
sllw x27, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x30, 0xffffffffffffffff # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
sllw x11, x30, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0xffffffffffffffff # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x29, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x3, 0xffffffffffffffff # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sllw x17, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x25, 0xffffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sllw x2, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x14, 0xffffffffffffffff # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
sllw x13, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x18, 0xffffffffffffffff # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sllw x16, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x19, 0xffffffffffffffff # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
sllw x31, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x24, 0xfffffffffffffffe # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
sllw x23, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x20, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sllw x8, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x22, 0xfffffffffffffffe # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
sllw x23, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x30, 0xfffffffffffffffe # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sllw x11, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x27, 0xfffffffffffffffe # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
sllw x16, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sllw x25, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sllw x17, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
sllw x23, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x20, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
sllw x12, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x27, 0xfffffffffffffffe # initialize rs1
li x6, 0x5bbc887763ae86f2 # initialize rs2
sllw x23, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0xfffffffffffffffe # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x24, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x30, 0xfffffffffffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sllw x10, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x30, 0xfffffffffffffffe # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
sllw x1, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x13, 0xfffffffffffffffe # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
sllw x20, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x9, 0xfffffffffffffffe # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sllw x26, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x20, 0xfffffffffffffffe # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
sllw x23, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
sllw x14, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sllw x25, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sllw x6, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sllw x7, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
sllw x13, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sllw x3, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sllw x25, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
sllw x18, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
sllw x17, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
sllw x8, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x28, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
sllw x22, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
sllw x1, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sllw x22, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
sllw x9, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
sllw x17, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
sllw x2, x20, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sllw x17, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sllw x11, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sllw x2, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
sllw x16, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
sllw x24, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sllw x1, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
sllw x24, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
sllw x15, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
sllw x6, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x25, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
sllw x14, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
sllw x13, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
sllw x20, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sllw x11, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
sllw x16, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x25, 0x5555555555555555 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sllw x3, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x3, 0x5555555555555555 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sllw x21, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x24, 0x5555555555555555 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sllw x27, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x11, 0x5555555555555555 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sllw x3, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x9, 0x5555555555555555 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
sllw x2, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x17, 0x5555555555555555 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
sllw x29, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x30, 0x5555555555555555 # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
sllw x28, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x24, 0x5555555555555555 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
sllw x15, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x16, 0x5555555555555555 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
sllw x9, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x21, 0x5555555555555555 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sllw x20, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0x5555555555555555 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x29, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x16, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
sllw x15, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x23, 0x5555555555555555 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
sllw x1, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x30, 0x5555555555555555 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
sllw x20, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x26, 0x5555555555555555 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
sllw x23, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x17, 0x5555555555555555 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
sllw x23, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x10, 0x00000000ffffffff # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
sllw x9, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x23, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sllw x21, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x19, 0x00000000ffffffff # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
sllw x9, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x3, 0x00000000ffffffff # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
sllw x9, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x2, 0x00000000ffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sllw x13, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x18, 0x00000000ffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
sllw x22, x18, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0x00000000ffffffff # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sllw x7, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x12, 0x00000000ffffffff # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
sllw x23, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x17, 0x00000000ffffffff # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
sllw x12, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x5, 0x00000000ffffffff # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
sllw x23, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x00000000ffffffff # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x16, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x9, 0x00000000ffffffff # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
sllw x23, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
sllw x25, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x8, 0x00000000ffffffff # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
sllw x28, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x16, 0x00000000ffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sllw x25, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x12, 0x00000000ffffffff # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
sllw x22, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x12, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
sllw x9, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x28, 0x00000000fffffffe # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sllw x17, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x11, 0x00000000fffffffe # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sllw x1, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x13, 0x00000000fffffffe # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
sllw x31, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x12, 0x00000000fffffffe # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
sllw x10, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x20, 0x00000000fffffffe # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sllw x31, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x00000000fffffffe # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
sllw x6, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x20, 0x00000000fffffffe # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
sllw x14, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x21, 0x00000000fffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sllw x2, x21, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x5, 0x00000000fffffffe # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
sllw x28, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x00000000fffffffe # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x10, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x24, 0x00000000fffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sllw x16, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x26, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sllw x29, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x12, 0x00000000fffffffe # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
sllw x17, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x25, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
sllw x11, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x1, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
sllw x29, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x27, 0x0000000100000000 # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
sllw x5, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x10, 0x0000000100000000 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
sllw x27, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x22, 0x0000000100000000 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
sllw x25, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x24, 0x0000000100000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
sllw x13, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x28, 0x0000000100000000 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sllw x2, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x24, 0x0000000100000000 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
sllw x10, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x31, 0x0000000100000000 # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
sllw x23, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x8, 0x0000000100000000 # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
sllw x7, x8, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000100000000 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
sllw x27, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x28, 0x0000000100000000 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
sllw x29, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000100000000 # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x3, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x30, 0x0000000100000000 # initialize rs1
li x12, 0x5555555555555555 # initialize rs2
sllw x6, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x8, 0x0000000100000000 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sllw x21, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x20, 0x0000000100000000 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sllw x1, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x12, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
sllw x18, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x1, 0x0000000100000000 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
sllw x15, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x27, 0x0000000100000001 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
sllw x1, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x2, 0x0000000100000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sllw x23, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x5, 0x0000000100000001 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sllw x1, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x1, 0x0000000100000001 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
sllw x25, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x1, 0x0000000100000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
sllw x30, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x22, 0x0000000100000001 # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sllw x19, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000100000001 # initialize rs1
li x30, 0x7ffffffffffffffe # initialize rs2
sllw x23, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000001 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
sllw x29, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sllw x26, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x9, 0x0000000100000001 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
sllw x30, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x0000000100000001 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
sllw x21, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x1, 0x0000000100000001 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
sllw x22, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x12, 0x0000000100000001 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
sllw x28, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x17, 0x0000000100000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
sllw x16, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x27, 0x0000000100000001 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sllw x2, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x16, 0x0000000100000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sllw x10, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x3feb3debbdf0fbe1 # initialize rs1
li x0, 0x10bf2da7660d74af # initialize rs2
sllw x18, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x89b5bd8389694429 # initialize rs1
li x1, 0x656bdc7de8165c22 # initialize rs2
sllw x12, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xc8011ae292a8da0c # initialize rs1
li x2, 0xc253a5a54d43f156 # initialize rs2
sllw x5, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x75d0c66dce23c95b # initialize rs1
li x3, 0xfe58d5258fa4f3b8 # initialize rs2
sllw x23, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x571b143e65454860 # initialize rs1
li x4, 0x30c57e75e8f3a058 # initialize rs2
sllw x5, x4, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
li x5, 0xd40bf47f891a27cd # initialize rs1
li x5, 0x7115b551695e981c # initialize rs2
sllw x31, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xd2ab2630d438fffd # initialize rs1
li x6, 0x5d052863d4cc19d5 # initialize rs2
sllw x4, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x4, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x61cb50a40d95844b # initialize rs1
li x7, 0xc8dc1fd2fbbee7a6 # initialize rs2
sllw x4, x7, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xb397b2507d791cf1 # initialize rs1
li x8, 0xed427783161234d3 # initialize rs2
sllw x15, x8, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x4d748010dc090a94 # initialize rs1
li x9, 0xdf22024980b76aaf # initialize rs2
sllw x21, x9, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x5b67dcfbfc2f0ad0 # initialize rs1
li x10, 0x428e39012af28ece # initialize rs2
sllw x8, x10, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xce89de98190aeca8 # initialize rs1
li x11, 0xd1576d049dafab0e # initialize rs2
sllw x9, x11, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x2681b4fc37fa0406 # initialize rs1
li x12, 0xc9c267b3a5a5cb89 # initialize rs2
sllw x6, x12, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x479e8b2d4425741e # initialize rs1
li x13, 0xf9afdbc759c3cef9 # initialize rs2
sllw x14, x13, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xe9326171a801496c # initialize rs1
li x14, 0x3e235477e11deddd # initialize rs2
sllw x15, x14, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x563c009c52e016b5 # initialize rs1
li x15, 0xd196bc20d5fc3b78 # initialize rs2
sllw x2, x15, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x4ecce87e6d25e0bb # initialize rs1
li x16, 0x002770d89cbc2c14 # initialize rs2
sllw x20, x16, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x2605e36138d95d49 # initialize rs1
li x17, 0x3701b0ae285fc030 # initialize rs2
sllw x14, x17, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x4377fedc5030f8db # initialize rs1
li x18, 0x207c8dbe9582a934 # initialize rs2
sllw x6, x18, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xb3247788d8a591dd # initialize rs1
li x19, 0xf285b761eb2b0366 # initialize rs2
sllw x13, x19, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x0316d3e628101a45 # initialize rs1
li x20, 0x05547bbf509ca5d1 # initialize rs2
sllw x22, x20, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x29114c9e57f34024 # initialize rs1
li x21, 0x6ccd209c61136749 # initialize rs2
sllw x13, x21, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xac9ccf8920a56c4a # initialize rs1
li x22, 0xacee336c7a0043c4 # initialize rs2
sllw x12, x22, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x763d7670076f3aa9 # initialize rs1
li x23, 0x8417436acd2fc50f # initialize rs2
sllw x29, x23, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x2c5463eea7054923 # initialize rs1
li x24, 0x765d6616cbf09a1e # initialize rs2
sllw x11, x24, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x5f29a7943459e473 # initialize rs1
li x25, 0xd27a858d5b3f9fbc # initialize rs2
sllw x21, x25, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xf0c98db94113b14c # initialize rs1
li x26, 0xf4dfb7792c3dfc98 # initialize rs2
sllw x18, x26, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x087d14585a1848b0 # initialize rs1
li x27, 0x0377892e41f74981 # initialize rs2
sllw x3, x27, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xa28c9ed9f671c9d3 # initialize rs1
li x28, 0xa32cc4492185a1d5 # initialize rs2
sllw x1, x28, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x06d0e6b382afdb7a # initialize rs1
li x29, 0x62661204d4b400a9 # initialize rs2
sllw x24, x29, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x4739ad4cf85fc4fd # initialize rs1
li x30, 0xac98e2fa95ce7e33 # initialize rs2
sllw x13, x30, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x6e52a40647605cc6 # initialize rs1
li x31, 0x1af87bf83b6b2d9a # initialize rs2
sllw x16, x31, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xe0fa0207fd5d0630 # initialize rs1
li x23, 0x6cd0c49bcfc07ac8 # initialize rs2
sllw x0, x0, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x4618090f7822911c # initialize rs1
li x20, 0xec0324e05b161477 # initialize rs2
sllw x1, x1, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x5a6e9eafa2124677 # initialize rs1
li x18, 0x150a99c0aca02b2e # initialize rs2
sllw x2, x2, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x2d71d0f4e60f2021 # initialize rs1
li x4, 0x54ed3b5edb147b0e # initialize rs2
sllw x3, x3, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
li x4, 0x25576389b30b50ef # initialize rs1
li x23, 0x56e48012f06f8bac # initialize rs2
sllw x4, x4, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8330435473573a6e # initialize rs1
li x31, 0xb40965f61d6e734a # initialize rs2
sllw x5, x5, x31 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4a1a7a7c4287f1bb # initialize rs1
li x30, 0x965486a6b81da9d9 # initialize rs2
sllw x6, x6, x30 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x580fa7b10f84bdda # initialize rs1
li x14, 0x6be3482e62e87e59 # initialize rs2
sllw x7, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xf1d225153f7d5e96 # initialize rs1
li x23, 0x1f8f9c11ab301c16 # initialize rs2
sllw x8, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x5e5c5f8e2ed28364 # initialize rs1
li x20, 0xb793e992c0f7ffcb # initialize rs2
sllw x9, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xbeb34fd01ce7b7d9 # initialize rs1
li x30, 0xbf8e55c746626e5c # initialize rs2
sllw x10, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xf1a990e6fba46280 # initialize rs1
li x31, 0x7bd9c49dac0b5789 # initialize rs2
sllw x11, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xc2d17b051d7114c8 # initialize rs1
li x22, 0x170695d1f801d8f8 # initialize rs2
sllw x12, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x0c0b76fef5b225a9 # initialize rs1
li x20, 0xdbb547246234f23b # initialize rs2
sllw x13, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x0d89c2433d2112eb # initialize rs1
li x16, 0xc0a960b83be315a6 # initialize rs2
sllw x14, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x6b6a6172206ba1fa # initialize rs1
li x18, 0xde5e9c5e4f449147 # initialize rs2
sllw x15, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x6be848fde6c5d6f5 # initialize rs1
li x19, 0xedf9cc871401b24f # initialize rs2
sllw x16, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xdd720c24c3b56392 # initialize rs1
li x25, 0xddb85f2aa36b27e0 # initialize rs2
sllw x17, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x93f00f3ed0ce8865 # initialize rs1
li x17, 0x23778f39cf10596a # initialize rs2
sllw x18, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x405bc7fc55eafb01 # initialize rs1
li x27, 0x42adceca691ecaca # initialize rs2
sllw x19, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x37125ddd34efd7fb # initialize rs1
li x7, 0x5e536a5a614f0cbb # initialize rs2
sllw x20, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x92e1d4644846af97 # initialize rs1
li x1, 0x7c4b91702bb0c6e9 # initialize rs2
sllw x21, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xc511836b5110eca0 # initialize rs1
li x13, 0x9b211b9ca12d61e4 # initialize rs2
sllw x22, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x7be2e1a9f905dc58 # initialize rs1
li x11, 0xdaea5a302fc89147 # initialize rs2
sllw x23, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xd3bff243ecee9504 # initialize rs1
li x24, 0xa89bc394128429f6 # initialize rs2
sllw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x36b31aa0e99c071f # initialize rs1
li x17, 0xceb7f30729717107 # initialize rs2
sllw x25, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xe905b7e0fa201fcb # initialize rs1
li x5, 0xba230a28846cede2 # initialize rs2
sllw x26, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x09bcaadc2ad5cfe9 # initialize rs1
li x22, 0x3bfaf26b3a0142ba # initialize rs2
sllw x27, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x26c693e89bbd8bb9 # initialize rs1
li x19, 0x4b1d2d2d898f136b # initialize rs2
sllw x28, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x82041961467ab737 # initialize rs1
li x29, 0x86801640d578549e # initialize rs2
sllw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xa3cafcfcce5343e5 # initialize rs1
li x15, 0x99ae0a1d79278594 # initialize rs2
sllw x30, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x5717a7bbde83739a # initialize rs1
li x10, 0xedf3e68f95bb457f # initialize rs2
sllw x31, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x5, 0x3250cc27f78c21a7 # initialize rs1
li x0, 0xf5d54f8a37d7aa7b # initialize rs2
sllw x0, x5, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x22, 0xc994d8f90c65af5d # initialize rs1
li x1, 0x7aeba2b43329c22f # initialize rs2
sllw x1, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x27, 0x5d8abb5bd489926b # initialize rs1
li x2, 0x97d5e35cc06ce862 # initialize rs2
sllw x2, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x16, 0x999e453c34a77a81 # initialize rs1
li x3, 0xe68140f331c3c2f8 # initialize rs2
sllw x3, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x29, 0x77fdb9fffe733d73 # initialize rs1
li x4, 0x3377b3a7ecf68c52 # initialize rs2
sllw x4, x29, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x31, 0xe81492e5c09e58ab # initialize rs1
li x5, 0xbf3cfc898cbc7ad8 # initialize rs2
sllw x5, x31, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0x43bd44c57b6d693b # initialize rs1
li x6, 0xf176e375bc182fad # initialize rs2
sllw x6, x10, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0xa294f47c0b482e52 # initialize rs1
li x7, 0x9f6aabccc59c480a # initialize rs2
sllw x7, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x22, 0x9f4e75e8f6082224 # initialize rs1
li x8, 0x5b39701e64f362e1 # initialize rs2
sllw x8, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x15, 0x01112905dc1771a6 # initialize rs1
li x9, 0xb30c1a970f7e6a4d # initialize rs2
sllw x9, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x18, 0xd2561708c3aadad2 # initialize rs1
li x10, 0x5dc54b152aa70970 # initialize rs2
sllw x10, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x23, 0xbd0826ad48398b91 # initialize rs1
li x11, 0x8c28d9bf4d98201b # initialize rs2
sllw x11, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x30, 0x38d147b8d8f147a2 # initialize rs1
li x12, 0xd5818f56e2f1a078 # initialize rs2
sllw x12, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x16, 0xc8e0537857f8ebc6 # initialize rs1
li x13, 0xc336a6a20a900b3a # initialize rs2
sllw x13, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x19, 0x220f0e2a940cffa3 # initialize rs1
li x14, 0xaf80b33b900c6354 # initialize rs2
sllw x14, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x3, 0x303b59c366fddd21 # initialize rs1
li x15, 0x7df0ea545ad40848 # initialize rs2
sllw x15, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x27, 0xce8291aca7d91091 # initialize rs1
li x16, 0xd8385da5a9c16413 # initialize rs2
sllw x16, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x19, 0x511db7518e235c6a # initialize rs1
li x17, 0x7096dfd1f4ad70b0 # initialize rs2
sllw x17, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x11, 0xa295d72771a20309 # initialize rs1
li x18, 0x518d3101b50b3497 # initialize rs2
sllw x18, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x26, 0x57a21e970b8b5b25 # initialize rs1
li x19, 0x1fa53206f96ed5cb # initialize rs2
sllw x19, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x17, 0x96fa1ea80f2d3f7e # initialize rs1
li x20, 0x6deff64e7ab4d3e1 # initialize rs2
sllw x20, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x5, 0x84cdd8d45be2b92e # initialize rs1
li x21, 0x93f7d507dd98f8a0 # initialize rs2
sllw x21, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x11, 0x92e720671977e7dc # initialize rs1
li x22, 0xd1f86ce2aac1dacb # initialize rs2
sllw x22, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x11, 0x5d98dbb0ff09bebd # initialize rs1
li x23, 0xf58a949d3bc9841c # initialize rs2
sllw x23, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x3, 0xe9c6a1496c17e12c # initialize rs1
li x24, 0xd20d19dca7c2acfd # initialize rs2
sllw x24, x3, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x9, 0x40659f41d51a7202 # initialize rs1
li x25, 0x491c0e71ec4911b9 # initialize rs2
sllw x25, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x11, 0xea142f8c5bcfd611 # initialize rs1
li x26, 0x3a637559091e272d # initialize rs2
sllw x26, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x14, 0x7b0ae5508a62ae5e # initialize rs1
li x27, 0xb9e830b2d3a2524e # initialize rs2
sllw x27, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x11, 0x58ccb927a937e9f1 # initialize rs1
li x28, 0x5548c6c7533a982c # initialize rs2
sllw x28, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x13, 0x6c67f2859710cd89 # initialize rs1
li x29, 0xe9e0f58e6d73b400 # initialize rs2
sllw x29, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x15, 0x50cc90b2ced35020 # initialize rs1
li x30, 0x8e8b1ce3203c3d40 # initialize rs2
sllw x30, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x28, 0x393a334389b9ea14 # initialize rs1
li x31, 0x59e02fc8efc8e277 # initialize rs2
sllw x31, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xe587e469f3a5c718 # initialize rs1
li x0, 0xc15714b343404282 # initialize rs2
sllw x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x5fe7e4dd122c05cc # initialize rs1
li x1, 0xe84cc58a3649415f # initialize rs2
sllw x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x40d4f3d1ac8df4e2 # initialize rs1
li x2, 0x83353b4ee747c979 # initialize rs2
sllw x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x9e02d90ca5ff17f1 # initialize rs1
li x3, 0xfd057adc672f8fb4 # initialize rs2
sllw x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x72e3781a6e4ce947 # initialize rs1
li x4, 0xf940ba3047a89726 # initialize rs2
sllw x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9b6809ab021f0a85 # initialize rs1
li x5, 0x03893d1a63f50f4c # initialize rs2
sllw x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe933df3895f0474d # initialize rs1
li x6, 0xc7a1eb5faa6ccc70 # initialize rs2
sllw x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x4b9e44057587e0d9 # initialize rs1
li x7, 0xf8a3b369ef63a2f9 # initialize rs2
sllw x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xa5e6506067134cb5 # initialize rs1
li x8, 0x83019454d57f3fb7 # initialize rs2
sllw x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x4f37df7611c95606 # initialize rs1
li x9, 0x1d42a689b9bd1db0 # initialize rs2
sllw x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x0e9f2d46a21b9b60 # initialize rs1
li x10, 0x9621c3cbcefd505f # initialize rs2
sllw x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xad8ff646378fbb91 # initialize rs1
li x11, 0xcd14220c9ab9bf8a # initialize rs2
sllw x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xa1c59fbd193c1f85 # initialize rs1
li x12, 0x3ab84104b8972463 # initialize rs2
sllw x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x31194d4f66c0d947 # initialize rs1
li x13, 0x5178177555201dff # initialize rs2
sllw x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x5b8cd58872a949e2 # initialize rs1
li x14, 0xe6bdef9900b4bdc2 # initialize rs2
sllw x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xc78efb6513a43b56 # initialize rs1
li x15, 0xbbf079b17e02eb30 # initialize rs2
sllw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x651975ac7b71d421 # initialize rs1
li x16, 0x95606ef8293f629a # initialize rs2
sllw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x251f38a620f079a2 # initialize rs1
li x17, 0x68affb864d79a309 # initialize rs2
sllw x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x338db1036f343292 # initialize rs1
li x18, 0xec949d30e75c8b0a # initialize rs2
sllw x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x38b15e1b8d401853 # initialize rs1
li x19, 0x2388be6b2964d6cc # initialize rs2
sllw x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x58a34f267da354fa # initialize rs1
li x20, 0x5259768cc1c87497 # initialize rs2
sllw x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xc60ab05b94399637 # initialize rs1
li x21, 0x95ebcf1c725b8c14 # initialize rs2
sllw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x607a0feecbdde26a # initialize rs1
li x22, 0xb8a16957a0c67b93 # initialize rs2
sllw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xbccf2525080024f6 # initialize rs1
li x23, 0xbe19fcfb3b9777e2 # initialize rs2
sllw x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xbbafd089e1a5a1c2 # initialize rs1
li x24, 0xe20ee37adced7d8f # initialize rs2
sllw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x37fd5e4baef74773 # initialize rs1
li x25, 0x344ce260f42aea26 # initialize rs2
sllw x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x7ba7d073dd29bf74 # initialize rs1
li x26, 0x9e6e8c111e994039 # initialize rs2
sllw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xdf1409348a541277 # initialize rs1
li x27, 0x50ce659c4f1458e2 # initialize rs2
sllw x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x133814aef3112e3e # initialize rs1
li x28, 0x3aa25c66263684d0 # initialize rs2
sllw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x9b61e6460a772723 # initialize rs1
li x29, 0x0a88db45f2d0f093 # initialize rs2
sllw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x913bc4cf723538a9 # initialize rs1
li x30, 0x04690486bd2fdaf4 # initialize rs2
sllw x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xa110331a93b53318 # initialize rs1
li x31, 0x487e33af91d02f52 # initialize rs2
sllw x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x31, x16 # perform first operation
sllw x18, x3, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x5, x16 # perform first operation
sllw x22, x30, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x24, x7 # perform first operation
sllw x6, x28, x20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x3, x16, x5 # perform first operation
sllw x16, x23, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x30, x26 # perform first operation
sllw x26, x30, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x25, x2 # perform first operation
sllw x11, x16, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x6, x10, x23 # perform first operation
sllw x6, x20, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x30, x15, x11 # perform first operation
sllw x30, x26, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x26, x27, x31 # perform first operation
sllw x26, x24, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x25, x21 # perform first operation
sllw x25, x10, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x7, x26 # perform first operation
sllw x26, x29, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x13, x23, x22 # perform first operation
sllw x29, x31, x11 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-sb.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x15, 0xd10af3ae6fb3ac64 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1103 # sub immediate from rs1 to counter offset
sb x15, 1103(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x23, 0xb0b4ffc5d7d4a354 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1611 # sub immediate from rs1 to counter offset
sb x23, -1611(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x12, 0xd431bfc197d714c5 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -707 # sub immediate from rs1 to counter offset
sb x12, 707(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x11, 0x37062cbf137e8bfd # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1931 # sub immediate from rs1 to counter offset
sb x11, 1931(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x2, 0x7d4a7492dbe871a2 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 712 # sub immediate from rs1 to counter offset
sb x2, -712(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0x43c6a0ead303d589 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 358 # sub immediate from rs1 to counter offset
sb x8, -358(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x8, 0xbe4635057bca2468 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 250 # sub immediate from rs1 to counter offset
sb x8, -250(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x7, 0xcde7b335da85fac1 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -960 # sub immediate from rs1 to counter offset
sb x7, 960(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x5, 0xde94a0955d0c3e81 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1769 # sub immediate from rs1 to counter offset
sb x5, 1769(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x19, 0x96c21637f580af86 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -334 # sub immediate from rs1 to counter offset
sb x19, 334(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x27, 0x9d89e960b381fa8d # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1194 # sub immediate from rs1 to counter offset
sb x27, 1194(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x6, 0x4c076da252c6b964 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 953 # sub immediate from rs1 to counter offset
sb x6, -953(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x19, 0x6414f6ac5dbb7832 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1233 # sub immediate from rs1 to counter offset
sb x19, 1233(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x10, 0xb39ab081a7569ce0 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1812 # sub immediate from rs1 to counter offset
sb x10, -1812(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x14, 0xc20f7df9571c2d33 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1980 # sub immediate from rs1 to counter offset
sb x14, -1980(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x14, 0x49ddddc6cc475993 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -276 # sub immediate from rs1 to counter offset
sb x14, 276(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x10, 0xa397dd618d860a1f # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1181 # sub immediate from rs1 to counter offset
sb x10, 1181(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x3, 0xa486158729d1d4dd # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1033 # sub immediate from rs1 to counter offset
sb x3, 1033(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x29, 0x4d29f78d090aae2c # initialize rs2
la x19, scratch # base address 
addi x19, x19, -563 # sub immediate from rs1 to counter offset
sb x29, 563(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x13, 0x3b72d46a783f5bc8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 2034 # sub immediate from rs1 to counter offset
sb x13, -2034(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x26, 0xeeebeb72625e490a # initialize rs2
la x21, scratch # base address 
addi x21, x21, -833 # sub immediate from rs1 to counter offset
sb x26, 833(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x8, 0x3088629a98148c86 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1219 # sub immediate from rs1 to counter offset
sb x8, 1219(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x24, 0x929a7f38e78da5ed # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1905 # sub immediate from rs1 to counter offset
sb x24, -1905(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x20, 0x142ec8ec74695f98 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1931 # sub immediate from rs1 to counter offset
sb x20, -1931(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x11, 0x788edef5297f3752 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1495 # sub immediate from rs1 to counter offset
sb x11, -1495(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x16, 0x1c7be8343296dc79 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -682 # sub immediate from rs1 to counter offset
sb x16, 682(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x30, 0xd779ee3ee7c22503 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -985 # sub immediate from rs1 to counter offset
sb x30, 985(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x19, 0x815703697b02e849 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -704 # sub immediate from rs1 to counter offset
sb x19, 704(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x30, 0x69655d1c88eb616f # initialize rs2
la x29, scratch # base address 
addi x29, x29, 166 # sub immediate from rs1 to counter offset
sb x30, -166(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x26, 0x4f8d8fc3d80783c5 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1686 # sub immediate from rs1 to counter offset
sb x26, 1686(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x22, 0x52a3bd063078a09a # initialize rs2
la x31, scratch # base address 
addi x31, x31, 391 # sub immediate from rs1 to counter offset
sb x22, -391(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0xfcd8c7a49578cb00 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1061 # sub immediate from rs1 to counter offset
sb x0, 1061(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x0b898a99dfe67374 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1009 # sub immediate from rs1 to counter offset
sb x1, -1009(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0x9e3ebcafb4deebb1 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -2013 # sub immediate from rs1 to counter offset
sb x2, 2013(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0x73b0f7fd2a6b987d # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1339 # sub immediate from rs1 to counter offset
sb x3, -1339(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x768eb49802082b4a # initialize rs2
la x13, scratch # base address 
addi x13, x13, 235 # sub immediate from rs1 to counter offset
sb x4, -235(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbff110c26f76cbf9 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1646 # sub immediate from rs1 to counter offset
sb x5, 1646(x22) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc5189ff9cf26039a # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1013 # sub immediate from rs1 to counter offset
sb x6, -1013(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x118b0d6f7b65e704 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1651 # sub immediate from rs1 to counter offset
sb x7, -1651(x4) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0xd786156450f6b492 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -510 # sub immediate from rs1 to counter offset
sb x8, 510(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0xedc259e8ebec3361 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1187 # sub immediate from rs1 to counter offset
sb x9, 1187(x4) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0xd466f6e615111f1b # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1689 # sub immediate from rs1 to counter offset
sb x10, -1689(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0x0282a17acb595c7c # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1963 # sub immediate from rs1 to counter offset
sb x11, 1963(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0xf9ec8e30ddf9d25c # initialize rs2
la x4, scratch # base address 
addi x4, x4, -57 # sub immediate from rs1 to counter offset
sb x12, 57(x4) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0xcaf6ab462fa3da90 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -666 # sub immediate from rs1 to counter offset
sb x13, 666(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0x78474e2a2944b28f # initialize rs2
la x4, scratch # base address 
addi x4, x4, 736 # sub immediate from rs1 to counter offset
sb x14, -736(x4) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0xe95e5306f38b6090 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1838 # sub immediate from rs1 to counter offset
sb x15, -1838(x10) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0xfa0a8f2c552c2f3c # initialize rs2
la x30, scratch # base address 
addi x30, x30, 741 # sub immediate from rs1 to counter offset
sb x16, -741(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0x529750bc316a4506 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -935 # sub immediate from rs1 to counter offset
sb x17, 935(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x11542caee6b0acbe # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1071 # sub immediate from rs1 to counter offset
sb x18, 1071(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0x5fd4d787f99137b6 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1037 # sub immediate from rs1 to counter offset
sb x19, -1037(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0x256b8c95b06590ea # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1426 # sub immediate from rs1 to counter offset
sb x20, 1426(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0x91ac62518f5a013b # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1203 # sub immediate from rs1 to counter offset
sb x21, 1203(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x96d2700daa4febd8 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -154 # sub immediate from rs1 to counter offset
sb x22, 154(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x56d3618fd7645843 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1817 # sub immediate from rs1 to counter offset
sb x23, -1817(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0x0fedb53f102e8a07 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 275 # sub immediate from rs1 to counter offset
sb x24, -275(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x0fb7cef1048bebe6 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1541 # sub immediate from rs1 to counter offset
sb x25, -1541(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0xb88f32de83f78172 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1202 # sub immediate from rs1 to counter offset
sb x26, 1202(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x0697aa130c4a84f1 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 784 # sub immediate from rs1 to counter offset
sb x27, -784(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0x64092e14af854ec7 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -941 # sub immediate from rs1 to counter offset
sb x28, 941(x24) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0xa3d018400d8024f1 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 132 # sub immediate from rs1 to counter offset
sb x29, -132(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0x9fc5f8848a5f496b # initialize rs2
la x18, scratch # base address 
addi x18, x18, -477 # sub immediate from rs1 to counter offset
sb x30, 477(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0xa16d521624c60fa4 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -288 # sub immediate from rs1 to counter offset
sb x31, 288(x21) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x19, 0x0000000000000000 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1943 # sub immediate from rs1 to counter offset
sb x19, 1943(x10) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x9, 0x0000000000000001 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1485 # sub immediate from rs1 to counter offset
sb x9, 1485(x22) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x3, 0x0000000000000002 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1484 # sub immediate from rs1 to counter offset
sb x3, -1484(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x30, 0x8000000000000000 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -894 # sub immediate from rs1 to counter offset
sb x30, 894(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x10, 0x8000000000000001 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -505 # sub immediate from rs1 to counter offset
sb x10, 505(x12) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x25, 0x7fffffffffffffff # initialize rs2
la x14, scratch # base address 
addi x14, x14, 482 # sub immediate from rs1 to counter offset
sb x25, -482(x14) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x14, 0x7ffffffffffffffe # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1437 # sub immediate from rs1 to counter offset
sb x14, -1437(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x3, 0xffffffffffffffff # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1965 # sub immediate from rs1 to counter offset
sb x3, 1965(x8) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x8, 0xfffffffffffffffe # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1999 # sub immediate from rs1 to counter offset
sb x8, -1999(x2) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x17, 0x5bbc887763ae86f2 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1365 # sub immediate from rs1 to counter offset
sb x17, -1365(x29) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1415 # sub immediate from rs1 to counter offset
sb x1, 1415(x13) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x26, 0x5555555555555555 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1642 # sub immediate from rs1 to counter offset
sb x26, -1642(x13) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x11, 0x00000000ffffffff # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1933 # sub immediate from rs1 to counter offset
sb x11, -1933(x1) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x22, 0x00000000fffffffe # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1565 # sub immediate from rs1 to counter offset
sb x22, -1565(x20) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x11, 0x0000000100000000 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1003 # sub immediate from rs1 to counter offset
sb x11, 1003(x27) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x7, 0x0000000100000001 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -862 # sub immediate from rs1 to counter offset
sb x7, 862(x15) # perform operation 

# Testcase cp_imm_corners
li x11, 0x5c7524fb8901a0ec # initialize rs2
la x18, scratch # base address 
addi x18, x18, 0 # sub immediate from rs1 to counter offset
sb x11, 0(x18) # perform operation 

# Testcase cp_imm_corners
li x19, 0xbfde198c87191592 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1 # sub immediate from rs1 to counter offset
sb x19, 1(x14) # perform operation 

# Testcase cp_imm_corners
li x12, 0x12c800201733f3b4 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2 # sub immediate from rs1 to counter offset
sb x12, 2(x17) # perform operation 

# Testcase cp_imm_corners
li x22, 0x45396afc12e839ab # initialize rs2
la x25, scratch # base address 
addi x25, x25, -3 # sub immediate from rs1 to counter offset
sb x22, 3(x25) # perform operation 

# Testcase cp_imm_corners
li x29, 0x3bc75a46a0a7ea98 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -4 # sub immediate from rs1 to counter offset
sb x29, 4(x26) # perform operation 

# Testcase cp_imm_corners
li x6, 0xa4ecf7a982710dbd # initialize rs2
la x14, scratch # base address 
addi x14, x14, -8 # sub immediate from rs1 to counter offset
sb x6, 8(x14) # perform operation 

# Testcase cp_imm_corners
li x3, 0xa7cd8df57b0895ba # initialize rs2
la x19, scratch # base address 
addi x19, x19, -16 # sub immediate from rs1 to counter offset
sb x3, 16(x19) # perform operation 

# Testcase cp_imm_corners
li x9, 0x7135b07a73d3860d # initialize rs2
la x18, scratch # base address 
addi x18, x18, -32 # sub immediate from rs1 to counter offset
sb x9, 32(x18) # perform operation 

# Testcase cp_imm_corners
li x25, 0x258ef87a74e6690d # initialize rs2
la x9, scratch # base address 
addi x9, x9, -64 # sub immediate from rs1 to counter offset
sb x25, 64(x9) # perform operation 

# Testcase cp_imm_corners
li x2, 0x8d42b0f32d7bd483 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -128 # sub immediate from rs1 to counter offset
sb x2, 128(x8) # perform operation 

# Testcase cp_imm_corners
li x4, 0x49778f7e99509d2c # initialize rs2
la x21, scratch # base address 
addi x21, x21, -256 # sub immediate from rs1 to counter offset
sb x4, 256(x21) # perform operation 

# Testcase cp_imm_corners
li x20, 0xd7344cd0e6f3af70 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -512 # sub immediate from rs1 to counter offset
sb x20, 512(x1) # perform operation 

# Testcase cp_imm_corners
li x4, 0x80ceb276876d080b # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1023 # sub immediate from rs1 to counter offset
sb x4, 1023(x26) # perform operation 

# Testcase cp_imm_corners
li x10, 0x5ca963114ae5afa2 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1024 # sub immediate from rs1 to counter offset
sb x10, 1024(x12) # perform operation 

# Testcase cp_imm_corners
li x29, 0xae17f69e8f074708 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1795 # sub immediate from rs1 to counter offset
sb x29, 1795(x24) # perform operation 

# Testcase cp_imm_corners
li x19, 0x6faa799870694422 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -2047 # sub immediate from rs1 to counter offset
sb x19, 2047(x28) # perform operation 

# Testcase cp_imm_corners
li x1, 0x8fea06fc8c779201 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 2047 # increment rs1 by 2047 
addi x29, x29, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sb x1, -2048(x29) # perform operation 

# Testcase cp_imm_corners
li x10, 0xf4726d951092a56b # initialize rs2
la x2, scratch # base address 
addi x2, x2, 2047 # sub immediate from rs1 to counter offset
sb x10, -2047(x2) # perform operation 

# Testcase cp_imm_corners
li x9, 0x89527cdf59c3157b # initialize rs2
la x29, scratch # base address 
addi x29, x29, 2 # sub immediate from rs1 to counter offset
sb x9, -2(x29) # perform operation 

# Testcase cp_imm_corners
li x4, 0x37e43ca5844bc9b4 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1 # sub immediate from rs1 to counter offset
sb x4, -1(x14) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x27, scratch
addi x27, x27, 2039
add x8, x12, x24 # perform first operation
sb x15, -2039(x27) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x17, scratch
addi x17, x17, 1097
add x18, x24, x8 # perform first operation
sb x4, -1097(x17) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x18, scratch
addi x18, x18, -1722
add x7, x28, x15 # perform first operation
sb x17, 1722(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x31, scratch
addi x31, x31, -684
add x31, x31, x0 # perform first operation
sb x13, 684(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x21, scratch
addi x21, x21, -766
add x30, x30, x0 # perform first operation
sb x30, 766(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x11, scratch
addi x11, x11, 180
add x29, x29, x0 # perform first operation
sb x17, -180(x11) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-sub.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xbfa9050577ee8207 # initialize rs1
li x27, 0x4d60d73623261797 # initialize rs2
sub x26, x0, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5c5dfa24a5d1dd5d # initialize rs1
li x17, 0xfe5d315f4cbe77d5 # initialize rs2
sub x8, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x1886307f0e05331b # initialize rs1
li x11, 0x8f3a24783a792282 # initialize rs2
sub x9, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x3f178292eb9fb0de # initialize rs1
li x16, 0x3d1f62e179a8cf4d # initialize rs2
sub x14, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x83aeef1a690688c2 # initialize rs1
li x11, 0x3dbf3fbcf5ce41b8 # initialize rs2
sub x17, x4, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3780321deb043c3d # initialize rs1
li x20, 0xe40eb9b210423394 # initialize rs2
sub x10, x5, x20 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x12f7d37c04fc638a # initialize rs1
li x12, 0xdd7ce4ebd31172c8 # initialize rs2
sub x11, x6, x12 # perform operation
RVTEST_SIGUPD(x7, x0, x11, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x889172c137f0e04d # initialize rs1
li x13, 0x5f1fd3f6734aa012 # initialize rs2
sub x27, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x8b57c012708bb9bd # initialize rs1
li x30, 0x8a502610a79263fe # initialize rs2
sub x18, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xbc91b7179aab143f # initialize rs1
li x10, 0xf170fbd593d33b5a # initialize rs2
sub x20, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x8ac744f9777f7e4d # initialize rs1
li x30, 0x10a3848193c5d178 # initialize rs2
sub x14, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xffba122c28b22484 # initialize rs1
li x19, 0x4a096c495a12e803 # initialize rs2
sub x13, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x7f60236d2fafcddb # initialize rs1
li x17, 0x5a4d26e3cf812e8e # initialize rs2
sub x9, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xac8352ff9cbb9572 # initialize rs1
li x6, 0xe93242d7ead21a5e # initialize rs2
sub x19, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x2f4a3139d0efc381 # initialize rs1
li x30, 0x2f3152e68eb8cbb2 # initialize rs2
sub x26, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x9c5d6f6877bc17c9 # initialize rs1
li x7, 0x8274316bbab4b6b9 # initialize rs2
sub x1, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x5d0127c6a8ff93c6 # initialize rs1
li x20, 0x722675a5b8efb116 # initialize rs2
sub x1, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xdd357aeac55fe2ff # initialize rs1
li x29, 0x58f3c4eb1ea840b2 # initialize rs2
sub x27, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xe977bd68c9618cc8 # initialize rs1
li x26, 0x8a4dc0563fbf68cb # initialize rs2
sub x8, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x7861c87c044d6003 # initialize rs1
li x21, 0xe800379b14865d9d # initialize rs2
sub x11, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe5a86568ab5ca6b5 # initialize rs1
li x19, 0x6e41871f3638038e # initialize rs2
sub x11, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x81baaefd54d6d43c # initialize rs1
li x25, 0xeff584830eed6dea # initialize rs2
sub x13, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xae45a930fde9cd22 # initialize rs1
li x31, 0xd0d309a81b947d45 # initialize rs2
sub x23, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x72f7b2698e09ec09 # initialize rs1
li x7, 0x525f7942fd3d3f8c # initialize rs2
sub x22, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x61ce405290a55979 # initialize rs1
li x22, 0x63b0517721467f0e # initialize rs2
sub x26, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xbfc0e49e140a5c4b # initialize rs1
li x8, 0x983439f8652d3786 # initialize rs2
sub x12, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x84c1ce0a6f6c65c0 # initialize rs1
li x29, 0x44f7989a551b1007 # initialize rs2
sub x1, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x0f648242f65ef7d1 # initialize rs1
li x20, 0x23d523a0b02b4396 # initialize rs2
sub x22, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x04440e7611272330 # initialize rs1
li x20, 0x46846baeb62e8533 # initialize rs2
sub x11, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x1c65cf64c997bee1 # initialize rs1
li x7, 0xddf159ff4c242863 # initialize rs2
sub x25, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x15468227d5f57df9 # initialize rs1
li x13, 0x31c9fc97c3323f49 # initialize rs2
sub x10, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x6d6c38deb2eeb404 # initialize rs1
li x15, 0x259905596e0ee943 # initialize rs2
sub x14, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x6, 0xe141cc44f8eb113a # initialize rs1
li x0, 0x60f22be787695456 # initialize rs2
sub x25, x6, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x31, 0x9b75291eec43c25b # initialize rs1
li x1, 0xba85118661f1bee2 # initialize rs2
sub x3, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x19, 0xa1cfaae122913b53 # initialize rs1
li x2, 0x618293a7da678d6f # initialize rs2
sub x23, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x11, 0x43364ced9972de75 # initialize rs1
li x3, 0xca855f39423cd1b2 # initialize rs2
sub x13, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0x713fd8aecaa00481 # initialize rs1
li x4, 0x0a40cf7adece509b # initialize rs2
sub x7, x24, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x12, 0x6bc09e6608a20e98 # initialize rs1
li x5, 0xfd96fd9a490caead # initialize rs2
sub x17, x12, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x17, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x4c002fd98810a72e # initialize rs1
li x6, 0x8d81d6966489cc6d # initialize rs2
sub x26, x4, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x26, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x25, 0xb20d2c6ce9e0e279 # initialize rs1
li x7, 0x010ded8239e13b17 # initialize rs2
sub x8, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x6, 0xaa589d8df8a9f887 # initialize rs1
li x8, 0x7bd766ce307ceb3b # initialize rs2
sub x2, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x1, 0xff6a8173678d9986 # initialize rs1
li x9, 0xfb4e9cdd4f42e14c # initialize rs2
sub x28, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x16, 0x3832c644603b7aa2 # initialize rs1
li x10, 0x2a963c006bdd00af # initialize rs2
sub x23, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x14, 0xe1130ce72a8d4c31 # initialize rs1
li x11, 0xf7f947b12600dc8f # initialize rs2
sub x23, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x31, 0x1e71ce8366b062b4 # initialize rs1
li x12, 0x0f8db1b92bb66e38 # initialize rs2
sub x14, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x15, 0x1356e41335f9cf7d # initialize rs1
li x13, 0x6c27f2efda1fe54f # initialize rs2
sub x11, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x31, 0x82a588d9259e1fd2 # initialize rs1
li x14, 0xd842a97616067113 # initialize rs2
sub x2, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x17, 0x4f93d100d4407c8a # initialize rs1
li x15, 0x71ddb13140cb2e40 # initialize rs2
sub x12, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x26, 0xe704e0c123521800 # initialize rs1
li x16, 0xec51666e27109b76 # initialize rs2
sub x12, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x14, 0x29bebf25995f643f # initialize rs1
li x17, 0x0736b6cd7db5dccb # initialize rs2
sub x18, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x1, 0xea6d7442a1a9e11c # initialize rs1
li x18, 0x511c6a6211bb5211 # initialize rs2
sub x23, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x7, 0xe1e09a066bb57375 # initialize rs1
li x19, 0x2f2d8458cec21f8b # initialize rs2
sub x5, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x22, 0x94f607564ff05a87 # initialize rs1
li x20, 0x9e6d3d8a22d0d2b8 # initialize rs2
sub x2, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x26, 0xb7c149494b5e0900 # initialize rs1
li x21, 0x3b48d2dd691a0bbc # initialize rs2
sub x22, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x30, 0x346b70e4d2fa537d # initialize rs1
li x22, 0x2de93517a388a7f0 # initialize rs2
sub x10, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x9, 0xaa31faf81c1345e0 # initialize rs1
li x23, 0x339b5d336ed00746 # initialize rs2
sub x3, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x11, 0x3f33cf2134eac7be # initialize rs1
li x24, 0x099f2dd4f0be479a # initialize rs2
sub x6, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x1, 0x0aa971d8f0a26d40 # initialize rs1
li x25, 0xf21a6b0bbee36b3e # initialize rs2
sub x5, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x25, 0x372fbdd1080ffa01 # initialize rs1
li x26, 0x903b47b95d3086be # initialize rs2
sub x6, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x19, 0x1cfb41f502f6b48c # initialize rs1
li x27, 0x82f39fb3391d9707 # initialize rs2
sub x20, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x13, 0x2c37a040324ddcdc # initialize rs1
li x28, 0x98abe17644f50925 # initialize rs2
sub x12, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x8, 0x266b7b4cbdb54657 # initialize rs1
li x29, 0x6ac2c39f7d2b42aa # initialize rs2
sub x21, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x28, 0x54b7a5cb810c34d5 # initialize rs1
li x30, 0x18c95aee559312cf # initialize rs2
sub x23, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x11, 0x0d8eff02cf8e4b17 # initialize rs1
li x31, 0xf8d5ef69f934f7cc # initialize rs2
sub x29, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 504)

# Testcase cp_rd (Test destination rd = x0)
li x10, 0x4e749b1ef0185ba0 # initialize rs1
li x31, 0x930efbeef7fdd7f1 # initialize rs2
sub x0, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x3, 0x584d90ce0df415e0 # initialize rs1
li x12, 0xeac62b7c31d6b39c # initialize rs2
sub x1, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x13, 0x0dca7320566fe676 # initialize rs1
li x5, 0x7dc8abb2873a74fe # initialize rs2
sub x2, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x26, 0x9ccf10c88ce2bce1 # initialize rs1
li x31, 0xb1d96b4d8ce8f221 # initialize rs2
sub x3, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x16, 0x746ee1be160bd576 # initialize rs1
li x14, 0x822b5a1870962bdc # initialize rs2
sub x4, x16, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x7, 0x5ecda46d370600b5 # initialize rs1
li x10, 0x6364952b8f3a5be0 # initialize rs2
sub x5, x7, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0x26273e81633cca57 # initialize rs1
li x14, 0x99faec4b68643402 # initialize rs2
sub x6, x10, x14 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0x903a4ad3164b5a6f # initialize rs1
li x26, 0x6f1d29540947b572 # initialize rs2
sub x7, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x13, 0x7ffb761e50974bb9 # initialize rs1
li x9, 0xd21c63aeea51294c # initialize rs2
sub x8, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0xba16dbf560af35ef # initialize rs1
li x15, 0x42fe8e80c0bde935 # initialize rs2
sub x9, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0x89b6f40f0ddb464f # initialize rs1
li x20, 0xd53f04518d31612a # initialize rs2
sub x10, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x15, 0xcc99051155046926 # initialize rs1
li x1, 0x3457819eda0b0273 # initialize rs2
sub x11, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x29, 0xd796be3a8cbaac62 # initialize rs1
li x5, 0x36c79d2a8e766cfb # initialize rs2
sub x12, x29, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x5, 0x7f54f485541e3931 # initialize rs1
li x30, 0xf63f6d6a5bcc73bf # initialize rs2
sub x13, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x14, 0x78fac88903527aa2 # initialize rs1
li x2, 0x82e1fbd79c78be3e # initialize rs2
sub x14, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x10, 0xf1a494f6a73af8d1 # initialize rs1
li x9, 0x76e3c0af30ea8623 # initialize rs2
sub x15, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x23, 0x01a831a205720715 # initialize rs1
li x31, 0x4c3cb7f6640da469 # initialize rs2
sub x16, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x5, 0xef4ed45f731b02a5 # initialize rs1
li x15, 0x55754ae5e5edee15 # initialize rs2
sub x17, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x28, 0x4b8893a534426da8 # initialize rs1
li x23, 0xca449ced1fa2338a # initialize rs2
sub x18, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x16, 0xcf8169d4a44a7185 # initialize rs1
li x12, 0x224cf5a6acba90ef # initialize rs2
sub x19, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x22, 0xb9505051d1de8a6b # initialize rs1
li x25, 0x3922c6c043b3f8f8 # initialize rs2
sub x20, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x18, 0x73d0828262b7d7c0 # initialize rs1
li x30, 0xab68053d0011f854 # initialize rs2
sub x21, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x11, 0x0d9f61e2be0b6550 # initialize rs1
li x9, 0xf909b64ca4bda87b # initialize rs2
sub x22, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x15, 0x38f5f8ef5396dd5a # initialize rs1
li x12, 0x33b9007dc2973af8 # initialize rs2
sub x23, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x29, 0x9f82de5aa49d4e9e # initialize rs1
li x19, 0xd6a9f8cb9dd485c1 # initialize rs2
sub x24, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x1, 0xa26a9c34beb991a3 # initialize rs1
li x13, 0x54e88941c3411fe8 # initialize rs2
sub x25, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x9, 0x04d963474a965df1 # initialize rs1
li x5, 0x4ae3c3d9b1984167 # initialize rs2
sub x26, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x27, 0x54d12229f73f9ea0 # initialize rs1
li x23, 0x985def8aaece499a # initialize rs2
sub x27, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x20, 0x24c7ecbdacd9854a # initialize rs1
li x3, 0x3e2822f11eb403df # initialize rs2
sub x28, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0x28e6b550a6bc8e9f # initialize rs1
li x2, 0x8cb3d5b706b7fdec # initialize rs2
sub x29, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0x547b3e499509cdba # initialize rs1
li x26, 0x26ef872d428733db # initialize rs2
sub x30, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x17, 0x7e516105c488b502 # initialize rs1
li x28, 0xdc42b625c2183daf # initialize rs2
sub x31, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x27, 0x0000000000000000 # initialize rs1
li x31, 0x72650f52555967cf # initialize rs2
sub x15, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x14, 0x0000000000000001 # initialize rs1
li x13, 0x0f6a790fab08e3f6 # initialize rs2
sub x10, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x11, 0x0000000000000002 # initialize rs1
li x16, 0x3afcc1a789b980e3 # initialize rs2
sub x18, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x16, 0x8000000000000000 # initialize rs1
li x18, 0x7778839a3353c125 # initialize rs2
sub x27, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x12, 0x8000000000000001 # initialize rs1
li x5, 0x8a403a9b9514cd97 # initialize rs2
sub x17, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x3, 0x7fffffffffffffff # initialize rs1
li x20, 0xba04f84bc00b3586 # initialize rs2
sub x10, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x25, 0xa2429a448a91adc3 # initialize rs2
sub x9, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x19, 0xffffffffffffffff # initialize rs1
li x11, 0xd20e9d266d436e59 # initialize rs2
sub x7, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x1, 0xfffffffffffffffe # initialize rs1
li x29, 0x427631c124a8e2e4 # initialize rs2
sub x16, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0xc627a629e050afd2 # initialize rs2
sub x7, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x28bb7669d835cae1 # initialize rs2
sub x19, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x27, 0x5555555555555555 # initialize rs1
li x18, 0x6f0616e36828aecd # initialize rs2
sub x21, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x23, 0x00000000ffffffff # initialize rs1
li x15, 0x9a19c77441b9f528 # initialize rs2
sub x12, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x9, 0x00000000fffffffe # initialize rs1
li x17, 0xa78f16389f228117 # initialize rs2
sub x31, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x27, 0x0000000100000000 # initialize rs1
li x21, 0x5193fa5b775ef378 # initialize rs2
sub x7, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x2, 0x0000000100000001 # initialize rs1
li x30, 0x7a75d925fe57a004 # initialize rs2
sub x24, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x2, 0xc2db6bf36c961dc9 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sub x16, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0x798399be702146e1 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
sub x31, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x29, 0x529f921c6396916e # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sub x24, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x11, 0x60248e802556fbc2 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sub x13, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x1, 0x9774ab1da83727cd # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
sub x21, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x6, 0x049777789d02cc83 # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
sub x1, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x30, 0x130e2ad194ee7b91 # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
sub x6, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x31, 0xb4d697f80aa19096 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
sub x22, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x15, 0xfbb384340fdc0726 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
sub x9, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x3, 0xd262c20cbd5c19f4 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
sub x22, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x20, 0x54f08800080a4773 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x1, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x23, 0xfa28db503de71881 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
sub x25, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x6, 0x8d8579c13e538eeb # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
sub x14, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x7, 0x759344c344f92337 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sub x14, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x9, 0x1c48ebe8a6a8a74f # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
sub x18, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x14, 0xb6800ea54e1f8ea5 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
sub x5, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x23, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
sub x20, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x1, 0x0000000000000000 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
sub x13, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x23, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
sub x25, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x18, 0x0000000000000000 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
sub x27, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x8, 0x0000000000000000 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
sub x3, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
sub x13, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x10, 0x0000000000000000 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sub x18, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x17, 0x0000000000000000 # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
sub x14, x17, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x30, 0x0000000000000000 # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
sub x10, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x10, 0x0000000000000000 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
sub x19, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x0000000000000000 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x7, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x22, 0x0000000000000000 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sub x30, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x24, 0x0000000000000000 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
sub x2, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x23, 0x0000000000000000 # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
sub x25, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x2, 0x0000000000000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sub x6, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x27, 0x0000000000000000 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
sub x24, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x22, 0x0000000000000001 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sub x7, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x15, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sub x8, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x5, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
sub x18, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x9, 0x0000000000000001 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
sub x13, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x23, 0x0000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
sub x3, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x11, 0x0000000000000001 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
sub x12, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000000000001 # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
sub x6, x5, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x3, 0x0000000000000001 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
sub x17, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000001 # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sub x30, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x3, 0x0000000000000001 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
sub x24, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x0000000000000001 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x3, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x15, 0x0000000000000001 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
sub x17, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x14, 0x0000000000000001 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sub x16, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x9, 0x0000000000000001 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sub x13, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x8, 0x0000000000000001 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sub x29, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x27, 0x0000000000000001 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
sub x17, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x30, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
sub x25, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x21, 0x0000000000000002 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
sub x7, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x29, 0x0000000000000002 # initialize rs1
li x11, 0x0000000000000002 # initialize rs2
sub x3, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x5, 0x0000000000000002 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
sub x27, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x18, 0x0000000000000002 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sub x19, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x13, 0x0000000000000002 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
sub x29, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000000000002 # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
sub x9, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x10, 0x0000000000000002 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sub x14, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000000000002 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
sub x16, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x9, 0x0000000000000002 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sub x16, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x0000000000000002 # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x10, x18, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x31, 0x0000000000000002 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
sub x8, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x15, 0x0000000000000002 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
sub x30, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x17, 0x0000000000000002 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sub x20, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x25, 0x0000000000000002 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
sub x7, x25, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x18, 0x0000000000000002 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
sub x21, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x27, 0x8000000000000000 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sub x7, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x8, 0x8000000000000000 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
sub x14, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x22, 0x8000000000000000 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sub x12, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x21, 0x8000000000000000 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
sub x30, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x20, 0x8000000000000000 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sub x11, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x19, 0x8000000000000000 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
sub x16, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x9, 0x8000000000000000 # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
sub x14, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x23, 0x8000000000000000 # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
sub x24, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x1, 0x8000000000000000 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
sub x5, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x31, 0x8000000000000000 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
sub x22, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x8000000000000000 # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x27, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x28, 0x8000000000000000 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
sub x21, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x6, 0x8000000000000000 # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
sub x15, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x20, 0x8000000000000000 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
sub x7, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x20, 0x8000000000000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
sub x15, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x9, 0x8000000000000000 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
sub x21, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x20, 0x8000000000000001 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
sub x23, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x16, 0x8000000000000001 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
sub x1, x16, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x22, 0x8000000000000001 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
sub x31, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x24, 0x8000000000000001 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
sub x26, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
sub x2, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x20, 0x8000000000000001 # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sub x27, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x15, 0x8000000000000001 # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
sub x3, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x26, 0x8000000000000001 # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
sub x18, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x29, 0x8000000000000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sub x19, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x21, 0x8000000000000001 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sub x13, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x8000000000000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x30, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x15, 0x8000000000000001 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
sub x27, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x28, 0x8000000000000001 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
sub x31, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x12, 0x8000000000000001 # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
sub x9, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x12, 0x8000000000000001 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
sub x8, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x7, 0x8000000000000001 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
sub x5, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x30, 0x7fffffffffffffff # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
sub x7, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x2, 0x7fffffffffffffff # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sub x21, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x29, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sub x19, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x12, 0x7fffffffffffffff # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sub x31, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x31, 0x7fffffffffffffff # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sub x13, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x8, 0x7fffffffffffffff # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
sub x21, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x11, 0x7fffffffffffffff # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
sub x25, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x6, 0x7fffffffffffffff # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
sub x24, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x22, 0x7fffffffffffffff # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sub x19, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x29, 0x7fffffffffffffff # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
sub x3, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x7fffffffffffffff # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x27, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x19, 0x7fffffffffffffff # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sub x16, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x28, 0x7fffffffffffffff # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sub x16, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x19, 0x7fffffffffffffff # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
sub x25, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x19, 0x7fffffffffffffff # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
sub x31, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x16, 0x7fffffffffffffff # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
sub x20, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x24, 0x7ffffffffffffffe # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
sub x22, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x23, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
sub x6, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x1, 0x7ffffffffffffffe # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
sub x17, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x9, 0x7ffffffffffffffe # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
sub x2, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x5, 0x7ffffffffffffffe # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
sub x15, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x16, 0x7ffffffffffffffe # initialize rs1
li x30, 0x7fffffffffffffff # initialize rs2
sub x8, x16, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
sub x13, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0x7ffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sub x18, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x11, 0x7ffffffffffffffe # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
sub x17, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x6, 0x7ffffffffffffffe # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sub x5, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x7ffffffffffffffe # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x15, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x7, 0x7ffffffffffffffe # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
sub x31, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x10, 0x7ffffffffffffffe # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sub x18, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x19, 0x7ffffffffffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
sub x16, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x7, 0x7ffffffffffffffe # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
sub x25, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x28, 0x7ffffffffffffffe # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
sub x20, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x6, 0xffffffffffffffff # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
sub x24, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x13, 0xffffffffffffffff # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
sub x7, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x24, 0xffffffffffffffff # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sub x2, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x1, 0xffffffffffffffff # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
sub x5, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x30, 0xffffffffffffffff # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
sub x8, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x30, 0xffffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sub x20, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x27, 0xffffffffffffffff # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sub x23, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x13, 0xffffffffffffffff # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
sub x17, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x8, 0xffffffffffffffff # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
sub x21, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x6, 0xffffffffffffffff # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
sub x11, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0xffffffffffffffff # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x30, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x6, 0xffffffffffffffff # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
sub x24, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x20, 0xffffffffffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
sub x14, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x7, 0xffffffffffffffff # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sub x27, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x2, 0xffffffffffffffff # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
sub x18, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x3, 0xffffffffffffffff # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
sub x18, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x16, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
sub x20, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x14, 0xfffffffffffffffe # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sub x6, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x16, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
sub x23, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x18, 0xfffffffffffffffe # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
sub x24, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x12, 0xfffffffffffffffe # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sub x30, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x28, 0xfffffffffffffffe # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
sub x3, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x3, 0xfffffffffffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
sub x22, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x22, 0xfffffffffffffffe # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
sub x2, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x18, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
sub x20, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x13, 0xfffffffffffffffe # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
sub x24, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0xfffffffffffffffe # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x17, x8, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x11, 0xfffffffffffffffe # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
sub x25, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x6, 0xfffffffffffffffe # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sub x16, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x18, 0xfffffffffffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sub x27, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x3, 0xfffffffffffffffe # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sub x31, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x20, 0xfffffffffffffffe # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
sub x26, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
sub x17, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
sub x29, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
sub x2, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
sub x27, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sub x19, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
sub x11, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sub x10, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sub x3, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
sub x17, x15, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
sub x12, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x28, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sub x25, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
sub x17, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
sub x15, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
sub x13, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sub x27, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
sub x2, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
sub x19, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sub x2, x26, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
sub x20, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
sub x7, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
sub x29, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
sub x3, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
sub x29, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
sub x6, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sub x23, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x12, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sub x2, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
sub x29, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
sub x30, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sub x30, x27, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
sub x8, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x26, 0x5555555555555555 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
sub x16, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x12, 0x5555555555555555 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sub x9, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x17, 0x5555555555555555 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
sub x11, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x24, 0x5555555555555555 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
sub x11, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x19, 0x5555555555555555 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
sub x18, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x18, 0x5555555555555555 # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
sub x13, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x28, 0x5555555555555555 # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
sub x30, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x11, 0x5555555555555555 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
sub x29, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x11, 0x5555555555555555 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
sub x20, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x25, 0x5555555555555555 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sub x2, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x5555555555555555 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x5, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x12, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
sub x25, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x14, 0x5555555555555555 # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
sub x21, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x21, 0x5555555555555555 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
sub x26, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x17, 0x5555555555555555 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
sub x21, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x24, 0x5555555555555555 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
sub x30, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x23, 0x00000000ffffffff # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
sub x16, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x20, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sub x19, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x17, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sub x24, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x8, 0x00000000ffffffff # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
sub x7, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x10, 0x00000000ffffffff # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sub x30, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x17, 0x00000000ffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
sub x11, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x8, 0x00000000ffffffff # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sub x6, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x30, 0x00000000ffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
sub x27, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x11, 0x00000000ffffffff # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
sub x15, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x18, 0x00000000ffffffff # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
sub x1, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x00000000ffffffff # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x3, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x5, 0x00000000ffffffff # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
sub x6, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x5, 0x00000000ffffffff # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
sub x22, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x12, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
sub x25, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x16, 0x00000000ffffffff # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sub x2, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x25, 0x00000000ffffffff # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
sub x15, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x19, 0x00000000fffffffe # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sub x5, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x14, 0x00000000fffffffe # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
sub x7, x14, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x17, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
sub x8, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x22, 0x00000000fffffffe # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
sub x1, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x23, 0x00000000fffffffe # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
sub x30, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x20, 0x00000000fffffffe # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sub x13, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0x00000000fffffffe # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
sub x6, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x23, 0x00000000fffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sub x16, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x6, 0x00000000fffffffe # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
sub x1, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x2, 0x00000000fffffffe # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
sub x22, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x00000000fffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x27, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x28, 0x00000000fffffffe # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
sub x17, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x5, 0x00000000fffffffe # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
sub x26, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
sub x26, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x19, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
sub x31, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x1, 0x00000000fffffffe # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
sub x5, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x6, 0x0000000100000000 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
sub x19, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x26, 0x0000000100000000 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sub x19, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x7, 0x0000000100000000 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
sub x31, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x8, 0x0000000100000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
sub x5, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x23, 0x0000000100000000 # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
sub x28, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x16, 0x0000000100000000 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
sub x15, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000000 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
sub x31, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x7, 0x0000000100000000 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
sub x17, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x15, 0x0000000100000000 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
sub x13, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x8, 0x0000000100000000 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
sub x27, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000100000000 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x25, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x30, 0x0000000100000000 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sub x29, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x15, 0x0000000100000000 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sub x25, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x2, 0x0000000100000000 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sub x31, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x24, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sub x17, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x30, 0x0000000100000000 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
sub x10, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x24, 0x0000000100000001 # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
sub x13, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x28, 0x0000000100000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
sub x9, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x14, 0x0000000100000001 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
sub x24, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x19, 0x0000000100000001 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
sub x29, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x25, 0x0000000100000001 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
sub x1, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x26, 0x0000000100000001 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
sub x30, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x6, 0x0000000100000001 # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sub x12, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x20, 0x0000000100000001 # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
sub x15, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x29, 0x0000000100000001 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
sub x24, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x2, 0x0000000100000001 # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sub x30, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x0000000100000001 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
sub x2, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x16, 0x0000000100000001 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
sub x22, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x20, 0x0000000100000001 # initialize rs1
li x25, 0x00000000ffffffff # initialize rs2
sub x27, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x18, 0x0000000100000001 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
sub x20, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x17, 0x0000000100000001 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
sub x13, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x18, 0x0000000100000001 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
sub x11, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x9e899df6d8055903 # initialize rs1
li x0, 0xe3af92d9d1789440 # initialize rs2
sub x2, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x087c8cb987f7ee95 # initialize rs1
li x1, 0xaa75537b6a79a5dd # initialize rs2
sub x20, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xdbefae3d6102758d # initialize rs1
li x2, 0xa6ddd30546cada59 # initialize rs2
sub x17, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x5ba30bc991f55d22 # initialize rs1
li x3, 0x1dd625c31780a711 # initialize rs2
sub x7, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xcb1f39bd0e3b75c5 # initialize rs1
li x4, 0x4ad0fbdacf318b08 # initialize rs2
sub x18, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8922017a21085899 # initialize rs1
li x5, 0x2bf59c8429a03d27 # initialize rs2
sub x31, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xeab87f0ae871885c # initialize rs1
li x6, 0xa677702df176181d # initialize rs2
sub x10, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xfff8b446fd4d8d0f # initialize rs1
li x7, 0xbdd8d8331ffd7fd2 # initialize rs2
sub x8, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x5a1ef5c840b09601 # initialize rs1
li x8, 0x464e38a7db3dafe6 # initialize rs2
sub x12, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x0d9961de734770a1 # initialize rs1
li x9, 0x0a7a944a1c8e214c # initialize rs2
sub x14, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xf3d21fa296ac930f # initialize rs1
li x10, 0xee7fb4235b14a6de # initialize rs2
sub x31, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x61be024e122a0bf0 # initialize rs1
li x11, 0xd4019c69ab07b295 # initialize rs2
sub x30, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xdaa7bd7674c35c13 # initialize rs1
li x12, 0x0b14832ff423c25c # initialize rs2
sub x31, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x444845a9de69a9cd # initialize rs1
li x13, 0x6be0679c4793712d # initialize rs2
sub x6, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x314ea893fc50eaff # initialize rs1
li x14, 0x413bb2c02fb1c22a # initialize rs2
sub x20, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x86788571c9890ef0 # initialize rs1
li x15, 0xce740e5e426ee017 # initialize rs2
sub x26, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x9d6f41bb9920e6a5 # initialize rs1
li x16, 0xe09da3fcd87b409f # initialize rs2
sub x10, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xa792ed386743b908 # initialize rs1
li x17, 0x215859650f1b8317 # initialize rs2
sub x22, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xd2e184d7c7fc79e0 # initialize rs1
li x18, 0xc91992f4da8ee2ee # initialize rs2
sub x2, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x15834b36c9c09b9d # initialize rs1
li x19, 0xb32cd9e31fbab2d2 # initialize rs2
sub x12, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xfa710170a0f91781 # initialize rs1
li x20, 0xec0d01e2a0385080 # initialize rs2
sub x27, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xb972986de4a8661f # initialize rs1
li x21, 0xebfe0f0e55bfa25d # initialize rs2
sub x9, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x9abad7ff32213623 # initialize rs1
li x22, 0x5438a1a23029f6b6 # initialize rs2
sub x10, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xd79b8a7843bb0e44 # initialize rs1
li x23, 0x3fedff889ea5ae00 # initialize rs2
sub x14, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xc2018af16a704fdc # initialize rs1
li x24, 0x50c2078365a780e9 # initialize rs2
sub x27, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x21ff47b70bc77d42 # initialize rs1
li x25, 0x419fae4cbebd37e8 # initialize rs2
sub x22, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xcc24d76503b80261 # initialize rs1
li x26, 0x655408c8eb4ac907 # initialize rs2
sub x18, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xdda102f3aaad4309 # initialize rs1
li x27, 0x817ec8bf9d41da4f # initialize rs2
sub x22, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xbfca0381b6bbc281 # initialize rs1
li x28, 0x3e411037fb087f78 # initialize rs2
sub x7, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x5acd52aa5194618b # initialize rs1
li x29, 0x9f2bce38201b66a7 # initialize rs2
sub x13, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xec52f4d68f1714a4 # initialize rs1
li x30, 0xe696eefd707fc479 # initialize rs2
sub x7, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xb7677af16765fef2 # initialize rs1
li x31, 0x75cddc7d76ae9b2c # initialize rs2
sub x2, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xdd7fb24e460f11af # initialize rs1
li x9, 0x01181023d809cad5 # initialize rs2
sub x0, x0, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xa4f0dfd8eb88107e # initialize rs1
li x11, 0x96ee03b4cc1526d1 # initialize rs2
sub x1, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xb6d0065157e3c813 # initialize rs1
li x18, 0x4d289d685bba50ae # initialize rs2
sub x2, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x04115c33a8283aac # initialize rs1
li x30, 0x28295d0ffc3f01ca # initialize rs2
sub x3, x3, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9e65dc79b35b7b21 # initialize rs1
li x18, 0xbaea6f18f935e73a # initialize rs2
sub x4, x4, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1cd98f140495460a # initialize rs1
li x26, 0x2601531e38c316c3 # initialize rs2
sub x5, x5, x26 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xdeeeb033d175ea4a # initialize rs1
li x26, 0x7847497c5ef9392c # initialize rs2
sub x6, x6, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1f24a373c501b956 # initialize rs1
li x30, 0x9698219598f87317 # initialize rs2
sub x7, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xd6aee3c1d520f8d7 # initialize rs1
li x11, 0x1be68d713f8bd47d # initialize rs2
sub x8, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xd1425bcece878959 # initialize rs1
li x17, 0xe192e15d19c41c84 # initialize rs2
sub x9, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x1637548a57a090cb # initialize rs1
li x3, 0x6135171e7d728d84 # initialize rs2
sub x10, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x75cfe52626612c6c # initialize rs1
li x28, 0x4f932f8aa2f519df # initialize rs2
sub x11, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x3390b929eb1ba344 # initialize rs1
li x22, 0xa8225edee5a3767b # initialize rs2
sub x12, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x8b3d20201051aebc # initialize rs1
li x18, 0x8681e13ae84f57c5 # initialize rs2
sub x13, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x7f02883aacdfdc59 # initialize rs1
li x28, 0x78ca478e1e6f4a66 # initialize rs2
sub x14, x14, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x967d3e0c6e0b486f # initialize rs1
li x27, 0x00385d0b5dcc5ad0 # initialize rs2
sub x15, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x2e717a429a9753ca # initialize rs1
li x5, 0xe5f84d185e0812a4 # initialize rs2
sub x16, x16, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x0a77fe0fbae48acc # initialize rs1
li x29, 0x71d988b7e5147ee2 # initialize rs2
sub x17, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x67f110c93dc2989a # initialize rs1
li x14, 0xff34b65930e497d6 # initialize rs2
sub x18, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xc302aca48e64e59f # initialize rs1
li x19, 0x9e4a18c698296bd8 # initialize rs2
sub x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x560cf06387360b62 # initialize rs1
li x9, 0x3d61b8c923a81c37 # initialize rs2
sub x20, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x28460a7068ec395a # initialize rs1
li x17, 0x5e057d74623eb139 # initialize rs2
sub x21, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x5cd8d5ab21e5f108 # initialize rs1
li x25, 0x7609e2b08c08a759 # initialize rs2
sub x22, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xcb9ef211eb8c8dd4 # initialize rs1
li x19, 0x669203b0997e9f26 # initialize rs2
sub x23, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x8ae9191bf3d4a602 # initialize rs1
li x2, 0xc6ec3d3c9352c088 # initialize rs2
sub x24, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x968cb8e8abe6db24 # initialize rs1
li x27, 0x31a1bddb12d9123a # initialize rs2
sub x25, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xea99f52c1ee6e0c4 # initialize rs1
li x10, 0x5364310fcb0dc75e # initialize rs2
sub x26, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x98d0260c0e51d09b # initialize rs1
li x14, 0xaebee364a503c8dd # initialize rs2
sub x27, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x3df5a7ced898ccd8 # initialize rs1
li x1, 0x8ca8d08005b650aa # initialize rs2
sub x28, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x9fefabd591b3a413 # initialize rs1
li x6, 0xef5eb4c31f0a0589 # initialize rs2
sub x29, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x823cf3213f87702a # initialize rs1
li x9, 0x424f928e4f599ec1 # initialize rs2
sub x30, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xfa368aad3cd8b342 # initialize rs1
li x1, 0xd658c4b1eae63103 # initialize rs2
sub x31, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x30, 0x5f306af5b66ff94b # initialize rs1
li x0, 0x3c0d168bcf637eed # initialize rs2
sub x0, x30, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x30, 0xce403f7beb741fad # initialize rs1
li x1, 0xf90b898f79de5f22 # initialize rs2
sub x1, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x9, 0x5fa27349d9c58d0c # initialize rs1
li x2, 0xaac5b11e2e15dc37 # initialize rs2
sub x2, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x31, 0x97be7419940b7a99 # initialize rs1
li x3, 0xcca3e98d0533cc2c # initialize rs2
sub x3, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x21, 0xd6347c35ac89fa87 # initialize rs1
li x4, 0xe34b677ef5570870 # initialize rs2
sub x4, x21, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x26, 0x80ed533378b8993d # initialize rs1
li x5, 0xe6704f648e0386bd # initialize rs2
sub x5, x26, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0x42f35bcb0051f65d # initialize rs1
li x6, 0x2060d05666ab94d8 # initialize rs2
sub x6, x31, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x1, 0x2024b30ded764976 # initialize rs1
li x7, 0xa1c8a16270c0afc2 # initialize rs2
sub x7, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x23, 0xcc29fe603b719ff4 # initialize rs1
li x8, 0x74e2a601ddb20b38 # initialize rs2
sub x8, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x8, 0xf372a172559ca253 # initialize rs1
li x9, 0xf99307f10bc7d465 # initialize rs2
sub x9, x8, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x29, 0xb88de9e6847b5cae # initialize rs1
li x10, 0x143b64c18fbbdb07 # initialize rs2
sub x10, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x13, 0x0edd67adda84bf48 # initialize rs1
li x11, 0xb58f02d7b4c8ce66 # initialize rs2
sub x11, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x13, 0x5957c5c8f64ff062 # initialize rs1
li x12, 0x3318023c293ff8a9 # initialize rs2
sub x12, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x21, 0x3387dc5224e6701a # initialize rs1
li x13, 0x1be6ccf44c466d0d # initialize rs2
sub x13, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x3, 0x37c2429f47b4836d # initialize rs1
li x14, 0x5ba37ef4d0038bf6 # initialize rs2
sub x14, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x16, 0xb83c7c9339dd08d1 # initialize rs1
li x15, 0x0e43567ee4501c38 # initialize rs2
sub x15, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x14, 0x79b64205408d3103 # initialize rs1
li x16, 0x5b4b0fb2f4e9d0f4 # initialize rs2
sub x16, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x13, 0xb2ea036c89623865 # initialize rs1
li x17, 0xb5cabf6aebddae97 # initialize rs2
sub x17, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x2, 0x721de9e6acc64615 # initialize rs1
li x18, 0x74739185054bdfb4 # initialize rs2
sub x18, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x10, 0x96f488a5cdd422ae # initialize rs1
li x19, 0x9d53dd8bd144b81a # initialize rs2
sub x19, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x8, 0x98cb11897186f303 # initialize rs1
li x20, 0x77811d4196e92cb6 # initialize rs2
sub x20, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x10, 0xd278b67c5c33c65c # initialize rs1
li x21, 0x9fab78df5732a530 # initialize rs2
sub x21, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x5, 0x80b4c81931ea3ad5 # initialize rs1
li x22, 0x21a769d037142ee8 # initialize rs2
sub x22, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x27, 0xf4b75279c3a53895 # initialize rs1
li x23, 0x3771d076b8e407cc # initialize rs2
sub x23, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x9, 0x77d52c87f4245519 # initialize rs1
li x24, 0xe777e925ad948f48 # initialize rs2
sub x24, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x31, 0xcca3d3778dc83f1e # initialize rs1
li x25, 0xfaa484784ad6b277 # initialize rs2
sub x25, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x28, 0x46d455ab1ff639dc # initialize rs1
li x26, 0x29521a9f354442c2 # initialize rs2
sub x26, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x16, 0xd3d5c93410693dec # initialize rs1
li x27, 0x558a82f6f795c45b # initialize rs2
sub x27, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x10, 0x9b0f32b3bf3eeb19 # initialize rs1
li x28, 0x966ea4c55028b8e5 # initialize rs2
sub x28, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x18, 0xae0226101136f6ec # initialize rs1
li x29, 0xb98f312912b05445 # initialize rs2
sub x29, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x30, 0x3d1002eed67c077e # initialize rs1
li x30, 0xb2becd7f8e1155e6 # initialize rs2
sub x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x27, 0xe7df8d3ff9623631 # initialize rs1
li x31, 0x295c7690c67854ae # initialize rs2
sub x31, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x5cf72222b53cb049 # initialize rs1
li x0, 0x7e7ed7f59ce905c7 # initialize rs2
sub x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xc12284427352aa6e # initialize rs1
li x1, 0x5a9ca0aa8e64d842 # initialize rs2
sub x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0xdb3d588aea851381 # initialize rs1
li x2, 0x912cc99dc95d0032 # initialize rs2
sub x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x92280953f652684f # initialize rs1
li x3, 0x7aadbc8fcab56360 # initialize rs2
sub x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe58cc140dfd90e60 # initialize rs1
li x4, 0x26fefdddf7ae17b1 # initialize rs2
sub x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xec0dc8bc6e901a2c # initialize rs1
li x5, 0xf72e49632c0b1176 # initialize rs2
sub x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x55488f53ef39b1a6 # initialize rs1
li x6, 0xe9187416e446f3de # initialize rs2
sub x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x40cd0d3841e83764 # initialize rs1
li x7, 0xf48a263b7365136c # initialize rs2
sub x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x02d2a86496ce9353 # initialize rs1
li x8, 0x43390b64a5ec56c8 # initialize rs2
sub x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xed7d87a012a50953 # initialize rs1
li x9, 0x99468a88ece09899 # initialize rs2
sub x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x380c708c18e7a945 # initialize rs1
li x10, 0x340fc8d59ec3122f # initialize rs2
sub x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xeae5a7eaee117810 # initialize rs1
li x11, 0x7a9154c88f82d763 # initialize rs2
sub x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x26545394520ed4b0 # initialize rs1
li x12, 0x7489d2d9f3a9e706 # initialize rs2
sub x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x5ced5c4f916d6720 # initialize rs1
li x13, 0x18f09d317d21bb04 # initialize rs2
sub x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xf86bf1d3617c6bb4 # initialize rs1
li x14, 0x07192b43c2e5dbc2 # initialize rs2
sub x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x48ea2e6f62d965c9 # initialize rs1
li x15, 0xcddb7ab052f6c80a # initialize rs2
sub x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x8d82aee99fcad338 # initialize rs1
li x16, 0xffd0228eff303c93 # initialize rs2
sub x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xb99a2b9d61738206 # initialize rs1
li x17, 0xf06a5c12329917e6 # initialize rs2
sub x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x43afbb07b76c837f # initialize rs1
li x18, 0x0c4be0c622145378 # initialize rs2
sub x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xa0c4076e4c80c684 # initialize rs1
li x19, 0xcc85134146bba2af # initialize rs2
sub x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xe40ae9b8134279a0 # initialize rs1
li x20, 0x5f900dee978b61ad # initialize rs2
sub x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x8cc32c312ad4af23 # initialize rs1
li x21, 0x3daa2a31455a061f # initialize rs2
sub x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x41ecef341a282dd3 # initialize rs1
li x22, 0x25962f4762e88305 # initialize rs2
sub x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x7ca0201e3c2e1125 # initialize rs1
li x23, 0xc3a2db29701b11d2 # initialize rs2
sub x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x40b9194465cdd70c # initialize rs1
li x24, 0xfefde6188e4675ab # initialize rs2
sub x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x83ff8d588c6ec9e4 # initialize rs1
li x25, 0xd9f8552c806eb311 # initialize rs2
sub x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x69d1173048b18779 # initialize rs1
li x26, 0x5ff93184134f9835 # initialize rs2
sub x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x6ad304e5db6b35ea # initialize rs1
li x27, 0x44946851a6c7679b # initialize rs2
sub x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x641141921f1731ca # initialize rs1
li x28, 0x0ddc57b3bb902893 # initialize rs2
sub x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x08c9296597049518 # initialize rs1
li x29, 0x52ce7aab28a42f50 # initialize rs2
sub x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x1a2a90d56074383e # initialize rs1
li x30, 0x506d3a0c32ece205 # initialize rs2
sub x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x02e6912e4f22adbb # initialize rs1
li x31, 0x11d3bf41bc05220d # initialize rs2
sub x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x17, x26 # perform first operation
sub x28, x19, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x7, x16, x17 # perform first operation
sub x5, x20, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x15, x24, x30 # perform first operation
sub x31, x7, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x25, x23, x2 # perform first operation
sub x15, x25, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x24, x18 # perform first operation
sub x18, x5, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x3, x26 # perform first operation
sub x26, x8, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x14, x24 # perform first operation
sub x29, x9, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x17, x30, x13 # perform first operation
sub x17, x14, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x28, x24 # perform first operation
sub x11, x26, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x17, x24 # perform first operation
sub x17, x26, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x23, x2 # perform first operation
sub x2, x11, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x25, x14, x1 # perform first operation
sub x8, x18, x3 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-beq.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x9a7b3e64430e797b # initialize rs1
li x26, 0x540096c4895e02a2 # initialize rs2
beq x0, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x540096c4895e02a2 # initialize rs1
li x26, 0x540096c4895e02a2 # initialize rs2
beq x0, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xbb03230e3697b307 # initialize rs1
li x17, 0x90390627221e7238 # initialize rs2
beq x1, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x90390627221e7238 # initialize rs1
li x17, 0x90390627221e7238 # initialize rs2
beq x1, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x8d81b25a591c0be2 # initialize rs1
li x25, 0xbe6d2e9cd09d0827 # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xbe6d2e9cd09d0827 # initialize rs1
li x25, 0xbe6d2e9cd09d0827 # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x6530f85b839e7e13 # initialize rs1
li x9, 0x5037fd7772ad56b5 # initialize rs2
beq x3, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5037fd7772ad56b5 # initialize rs1
li x9, 0x5037fd7772ad56b5 # initialize rs2
beq x3, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x07ff3ec89f7481cc # initialize rs1
li x26, 0xb212874a15a74ad0 # initialize rs2
beq x4, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xb212874a15a74ad0 # initialize rs1
li x26, 0xb212874a15a74ad0 # initialize rs2
beq x4, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6b58ea576416a91f # initialize rs1
li x28, 0xc44a867df79c6c81 # initialize rs2
beq x5, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xc44a867df79c6c81 # initialize rs1
li x28, 0xc44a867df79c6c81 # initialize rs2
beq x5, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x0aa24439619d6d36 # initialize rs1
li x5, 0xd121c2ac466e8ba3 # initialize rs2
beq x6, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xd121c2ac466e8ba3 # initialize rs1
li x5, 0xd121c2ac466e8ba3 # initialize rs2
beq x6, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb8dd063feb229d85 # initialize rs1
li x20, 0xbf5b320772cc3c63 # initialize rs2
beq x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xbf5b320772cc3c63 # initialize rs1
li x20, 0xbf5b320772cc3c63 # initialize rs2
beq x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf195fa532ed69549 # initialize rs1
li x22, 0xa4206d06d6f43940 # initialize rs2
beq x8, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xa4206d06d6f43940 # initialize rs1
li x22, 0xa4206d06d6f43940 # initialize rs2
beq x8, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x472be16875d72f0d # initialize rs1
li x6, 0xa1458a0ccf940fab # initialize rs2
beq x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xa1458a0ccf940fab # initialize rs1
li x6, 0xa1458a0ccf940fab # initialize rs2
beq x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x9e7081895a09c956 # initialize rs1
li x4, 0x93373a13378a3042 # initialize rs2
beq x10, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x93373a13378a3042 # initialize rs1
li x4, 0x93373a13378a3042 # initialize rs2
beq x10, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xc1e191e7506cc6d0 # initialize rs1
li x24, 0x6e8322452b36a6b4 # initialize rs2
beq x11, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x6e8322452b36a6b4 # initialize rs1
li x24, 0x6e8322452b36a6b4 # initialize rs2
beq x11, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x85cab0209fc29695 # initialize rs1
li x15, 0x0fbd1867ad3bce07 # initialize rs2
beq x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0fbd1867ad3bce07 # initialize rs1
li x15, 0x0fbd1867ad3bce07 # initialize rs2
beq x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xb3660ba50aab5bcf # initialize rs1
li x31, 0x9a2d41a0a98da919 # initialize rs2
beq x13, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x9a2d41a0a98da919 # initialize rs1
li x31, 0x9a2d41a0a98da919 # initialize rs2
beq x13, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xd73adbc41d617331 # initialize rs1
li x15, 0x65fde9f082b87296 # initialize rs2
beq x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x65fde9f082b87296 # initialize rs1
li x15, 0x65fde9f082b87296 # initialize rs2
beq x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x08efaee54312a58c # initialize rs1
li x9, 0xe48f86be6f5b17fa # initialize rs2
beq x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xe48f86be6f5b17fa # initialize rs1
li x9, 0xe48f86be6f5b17fa # initialize rs2
beq x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xa72895c75fd1a0af # initialize rs1
li x13, 0x87db52f5d98560cf # initialize rs2
beq x16, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x87db52f5d98560cf # initialize rs1
li x13, 0x87db52f5d98560cf # initialize rs2
beq x16, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xd7c83c108e9852b8 # initialize rs1
li x29, 0xa6f4927d6c322b2d # initialize rs2
beq x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xa6f4927d6c322b2d # initialize rs1
li x29, 0xa6f4927d6c322b2d # initialize rs2
beq x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x9eede694a2587afb # initialize rs1
li x21, 0x4632edb3c1091ce8 # initialize rs2
beq x18, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x4632edb3c1091ce8 # initialize rs1
li x21, 0x4632edb3c1091ce8 # initialize rs2
beq x18, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xdf2588875c075bc6 # initialize rs1
li x16, 0x216ad16df0c0b78a # initialize rs2
beq x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x216ad16df0c0b78a # initialize rs1
li x16, 0x216ad16df0c0b78a # initialize rs2
beq x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xed933e2b7e5596cb # initialize rs1
li x28, 0x4ec124a39bb4b47b # initialize rs2
beq x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x4ec124a39bb4b47b # initialize rs1
li x28, 0x4ec124a39bb4b47b # initialize rs2
beq x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xf2879906b8a8e6b1 # initialize rs1
li x14, 0xf846eeed2107ec59 # initialize rs2
beq x21, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xf846eeed2107ec59 # initialize rs1
li x14, 0xf846eeed2107ec59 # initialize rs2
beq x21, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x473bccbb367ad031 # initialize rs1
li x26, 0xc69dc1bfa5607fc8 # initialize rs2
beq x22, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xc69dc1bfa5607fc8 # initialize rs1
li x26, 0xc69dc1bfa5607fc8 # initialize rs2
beq x22, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x43123e12c765be33 # initialize rs1
li x15, 0xdd000f0aa7d667cc # initialize rs2
beq x23, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xdd000f0aa7d667cc # initialize rs1
li x15, 0xdd000f0aa7d667cc # initialize rs2
beq x23, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xb490dd508aa90423 # initialize rs1
li x23, 0x02075b45c2f60cb6 # initialize rs2
beq x24, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x02075b45c2f60cb6 # initialize rs1
li x23, 0x02075b45c2f60cb6 # initialize rs2
beq x24, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x5263ceaa0dcf7fd5 # initialize rs1
li x3, 0xf51d64b975cb17c7 # initialize rs2
beq x25, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xf51d64b975cb17c7 # initialize rs1
li x3, 0xf51d64b975cb17c7 # initialize rs2
beq x25, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x165dff849f773824 # initialize rs1
li x3, 0x3f72469d74a14116 # initialize rs2
beq x26, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x3f72469d74a14116 # initialize rs1
li x3, 0x3f72469d74a14116 # initialize rs2
beq x26, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x1830c99d33ae4c9b # initialize rs1
li x10, 0xe99ca7030f300dd5 # initialize rs2
beq x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xe99ca7030f300dd5 # initialize rs1
li x10, 0xe99ca7030f300dd5 # initialize rs2
beq x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x4d95dcc7d27ee1bb # initialize rs1
li x16, 0xceb55d2614af5424 # initialize rs2
beq x28, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xceb55d2614af5424 # initialize rs1
li x16, 0xceb55d2614af5424 # initialize rs2
beq x28, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xd9b4a788d14c83d4 # initialize rs1
li x16, 0x965b54d906761b20 # initialize rs2
beq x29, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x965b54d906761b20 # initialize rs1
li x16, 0x965b54d906761b20 # initialize rs2
beq x29, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x3b78bc05a1475231 # initialize rs1
li x11, 0x85479a2f1428be56 # initialize rs2
beq x30, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x85479a2f1428be56 # initialize rs1
li x11, 0x85479a2f1428be56 # initialize rs2
beq x30, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x4f10e126ab23d968 # initialize rs1
li x3, 0xa737734cb7fbcf46 # initialize rs2
beq x31, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xa737734cb7fbcf46 # initialize rs1
li x3, 0xa737734cb7fbcf46 # initialize rs2
beq x31, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x30, 0xa8e07f92da47589b # initialize rs1
li x0, 0x02a33c7b7d33cf6f # initialize rs2
beq x30, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x02a33c7b7d33cf6f # initialize rs1
li x0, 0x02a33c7b7d33cf6f # initialize rs2
beq x30, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x25, 0x5f6b62b05ef0bb1e # initialize rs1
li x1, 0x903cd0bb59dbc625 # initialize rs2
beq x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x903cd0bb59dbc625 # initialize rs1
li x1, 0x903cd0bb59dbc625 # initialize rs2
beq x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x18, 0x3e0242c0417733df # initialize rs1
li x2, 0x1634f459c7098182 # initialize rs2
beq x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x1634f459c7098182 # initialize rs1
li x2, 0x1634f459c7098182 # initialize rs2
beq x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x2, 0xb8a3e20a837c9c68 # initialize rs1
li x3, 0x94fb792eb969dc36 # initialize rs2
beq x2, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x94fb792eb969dc36 # initialize rs1
li x3, 0x94fb792eb969dc36 # initialize rs2
beq x2, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
li x6, 0xb3c0744ff070419a # initialize rs1
li x4, 0x19340d72f4983f99 # initialize rs2
beq x6, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x19340d72f4983f99 # initialize rs1
li x4, 0x19340d72f4983f99 # initialize rs2
beq x6, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x43ab9be9948f02f9 # initialize rs1
li x5, 0xf3aae8af725342c3 # initialize rs2
beq x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xf3aae8af725342c3 # initialize rs1
li x5, 0xf3aae8af725342c3 # initialize rs2
beq x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0xdbc8298c74962314 # initialize rs1
li x6, 0xc614ec60d093993c # initialize rs2
beq x31, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xc614ec60d093993c # initialize rs1
li x6, 0xc614ec60d093993c # initialize rs2
beq x31, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0x6ee5f4c2ceed6f15 # initialize rs1
li x7, 0x55535e8b8c6b0634 # initialize rs2
beq x24, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55535e8b8c6b0634 # initialize rs1
li x7, 0x55535e8b8c6b0634 # initialize rs2
beq x24, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x31, 0xa3a68f82ae9aee9d # initialize rs1
li x8, 0x12d243913de4dcb2 # initialize rs2
beq x31, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x12d243913de4dcb2 # initialize rs1
li x8, 0x12d243913de4dcb2 # initialize rs2
beq x31, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x19, 0x96e8a60b1ff017b0 # initialize rs1
li x9, 0xa95859ae35933a94 # initialize rs2
beq x19, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xa95859ae35933a94 # initialize rs1
li x9, 0xa95859ae35933a94 # initialize rs2
beq x19, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x24, 0x600f83e6f6db5dd0 # initialize rs1
li x10, 0xdd8637caecf6a7f0 # initialize rs2
beq x24, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xdd8637caecf6a7f0 # initialize rs1
li x10, 0xdd8637caecf6a7f0 # initialize rs2
beq x24, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x28, 0xa54184045d791b68 # initialize rs1
li x11, 0x83ea5fc1d2e3cd0d # initialize rs2
beq x28, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x83ea5fc1d2e3cd0d # initialize rs1
li x11, 0x83ea5fc1d2e3cd0d # initialize rs2
beq x28, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x3, 0x6d1949b83c7a0ab9 # initialize rs1
li x12, 0x81980e376b91149b # initialize rs2
beq x3, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x81980e376b91149b # initialize rs1
li x12, 0x81980e376b91149b # initialize rs2
beq x3, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x24, 0x2c0d9ceb99f685be # initialize rs1
li x13, 0x5408f4b17d01e9f8 # initialize rs2
beq x24, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5408f4b17d01e9f8 # initialize rs1
li x13, 0x5408f4b17d01e9f8 # initialize rs2
beq x24, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x18, 0x563ba97c5fb3a172 # initialize rs1
li x14, 0x7a31d3b413f8011d # initialize rs2
beq x18, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7a31d3b413f8011d # initialize rs1
li x14, 0x7a31d3b413f8011d # initialize rs2
beq x18, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x9, 0x617e1825dd4e0f5d # initialize rs1
li x15, 0xcfce6012e3c35a81 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xcfce6012e3c35a81 # initialize rs1
li x15, 0xcfce6012e3c35a81 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x3, 0x47c8947d4c950fda # initialize rs1
li x16, 0xf99e10598cf1a476 # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xf99e10598cf1a476 # initialize rs1
li x16, 0xf99e10598cf1a476 # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x9, 0x91dddc58c91734a5 # initialize rs1
li x17, 0xacaa9670553fd8b8 # initialize rs2
beq x9, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xacaa9670553fd8b8 # initialize rs1
li x17, 0xacaa9670553fd8b8 # initialize rs2
beq x9, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x31, 0xc0ec0bd8ab3ea1df # initialize rs1
li x18, 0x2fff271655fb2f35 # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x2fff271655fb2f35 # initialize rs1
li x18, 0x2fff271655fb2f35 # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x20, 0xcaec27f3ba7ad34b # initialize rs1
li x19, 0xd8efc9b9efc77816 # initialize rs2
beq x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xd8efc9b9efc77816 # initialize rs1
li x19, 0xd8efc9b9efc77816 # initialize rs2
beq x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x9, 0xd07abe4aa51f0705 # initialize rs1
li x20, 0xf45c25a832d59054 # initialize rs2
beq x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xf45c25a832d59054 # initialize rs1
li x20, 0xf45c25a832d59054 # initialize rs2
beq x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x10, 0x3baf337a2d2b7d6e # initialize rs1
li x21, 0xa0079fbec0ab088d # initialize rs2
beq x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xa0079fbec0ab088d # initialize rs1
li x21, 0xa0079fbec0ab088d # initialize rs2
beq x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x29, 0x7badf4a03d1877de # initialize rs1
li x22, 0xc221c374aeb7da83 # initialize rs2
beq x29, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xc221c374aeb7da83 # initialize rs1
li x22, 0xc221c374aeb7da83 # initialize rs2
beq x29, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x2, 0xfcecb908f3a2d3d2 # initialize rs1
li x23, 0x727f7b127935ac89 # initialize rs2
beq x2, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x727f7b127935ac89 # initialize rs1
li x23, 0x727f7b127935ac89 # initialize rs2
beq x2, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x13, 0xce8ae203df13a045 # initialize rs1
li x24, 0xce65d1ce101a21c7 # initialize rs2
beq x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xce65d1ce101a21c7 # initialize rs1
li x24, 0xce65d1ce101a21c7 # initialize rs2
beq x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x2, 0x981d544922a29189 # initialize rs1
li x25, 0x3cfa7ae48281318f # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x3cfa7ae48281318f # initialize rs1
li x25, 0x3cfa7ae48281318f # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x8, 0x3c744dc6a2ae4500 # initialize rs1
li x26, 0x4504b847c5f89266 # initialize rs2
beq x8, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x4504b847c5f89266 # initialize rs1
li x26, 0x4504b847c5f89266 # initialize rs2
beq x8, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x11, 0xf1ee8fc2d482ddb8 # initialize rs1
li x27, 0xe57e26faa0235d98 # initialize rs2
beq x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xe57e26faa0235d98 # initialize rs1
li x27, 0xe57e26faa0235d98 # initialize rs2
beq x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x22, 0x22b54f2181b4b70d # initialize rs1
li x28, 0xbfede899ec397f33 # initialize rs2
beq x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xbfede899ec397f33 # initialize rs1
li x28, 0xbfede899ec397f33 # initialize rs2
beq x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x10, 0xec1d42f0c7309408 # initialize rs1
li x29, 0x0d1ad2adc283ba19 # initialize rs2
beq x10, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0d1ad2adc283ba19 # initialize rs1
li x29, 0x0d1ad2adc283ba19 # initialize rs2
beq x10, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x28, 0x84046e53fb9a2419 # initialize rs1
li x30, 0x7e2aa78d9402b61b # initialize rs2
beq x28, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7e2aa78d9402b61b # initialize rs1
li x30, 0x7e2aa78d9402b61b # initialize rs2
beq x28, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x26, 0xdb5f416631de2e5c # initialize rs1
li x31, 0xe46e2edc441773c5 # initialize rs2
beq x26, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe46e2edc441773c5 # initialize rs1
li x31, 0xe46e2edc441773c5 # initialize rs2
beq x26, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x16, 0x0000000000000000 # initialize rs1
li x14, 0xd103b39c65109277 # initialize rs2
beq x16, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xd103b39c65109277 # initialize rs1
li x14, 0xd103b39c65109277 # initialize rs2
beq x16, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x22, 0x0000000000000001 # initialize rs1
li x7, 0x31dc46dd42e32774 # initialize rs2
beq x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x31dc46dd42e32774 # initialize rs1
li x7, 0x31dc46dd42e32774 # initialize rs2
beq x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x3, 0x0000000000000002 # initialize rs1
li x30, 0xbed792a9a7018a0e # initialize rs2
beq x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xbed792a9a7018a0e # initialize rs1
li x30, 0xbed792a9a7018a0e # initialize rs2
beq x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x8, 0x8000000000000000 # initialize rs1
li x11, 0xeec1a739d328621a # initialize rs2
beq x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xeec1a739d328621a # initialize rs1
li x11, 0xeec1a739d328621a # initialize rs2
beq x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x19, 0x8000000000000001 # initialize rs1
li x21, 0x2a9341a7938b7a2a # initialize rs2
beq x19, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2a9341a7938b7a2a # initialize rs1
li x21, 0x2a9341a7938b7a2a # initialize rs2
beq x19, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x26, 0x7fffffffffffffff # initialize rs1
li x9, 0x9c8071ca5633405e # initialize rs2
beq x26, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x9c8071ca5633405e # initialize rs1
li x9, 0x9c8071ca5633405e # initialize rs2
beq x26, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x12, 0x7ffffffffffffffe # initialize rs1
li x23, 0x0404d9c84d9b520b # initialize rs2
beq x12, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0404d9c84d9b520b # initialize rs1
li x23, 0x0404d9c84d9b520b # initialize rs2
beq x12, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x5, 0xffffffffffffffff # initialize rs1
li x25, 0xa7bbaa15a7b5f217 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xa7bbaa15a7b5f217 # initialize rs1
li x25, 0xa7bbaa15a7b5f217 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x30, 0xfffffffffffffffe # initialize rs1
li x22, 0x8c83086af410543d # initialize rs2
beq x30, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x8c83086af410543d # initialize rs1
li x22, 0x8c83086af410543d # initialize rs2
beq x30, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x884dcc845463017f # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x884dcc845463017f # initialize rs1
li x15, 0x884dcc845463017f # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x040e7ae69556ede2 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x040e7ae69556ede2 # initialize rs1
li x15, 0x040e7ae69556ede2 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x8, 0x5555555555555555 # initialize rs1
li x7, 0xd805c7148135116e # initialize rs2
beq x8, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xd805c7148135116e # initialize rs1
li x7, 0xd805c7148135116e # initialize rs2
beq x8, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x3, 0x00000000ffffffff # initialize rs1
li x15, 0x41852a2ea4568431 # initialize rs2
beq x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x41852a2ea4568431 # initialize rs1
li x15, 0x41852a2ea4568431 # initialize rs2
beq x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x31, 0x00000000fffffffe # initialize rs1
li x5, 0xaace96ef484de0c5 # initialize rs2
beq x31, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaace96ef484de0c5 # initialize rs1
li x5, 0xaace96ef484de0c5 # initialize rs2
beq x31, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x1, 0x0000000100000000 # initialize rs1
li x29, 0xa5f9c1e56cb37690 # initialize rs2
beq x1, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xa5f9c1e56cb37690 # initialize rs1
li x29, 0xa5f9c1e56cb37690 # initialize rs2
beq x1, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x7, 0x0000000100000001 # initialize rs1
li x26, 0x0ed289985daeaf89 # initialize rs2
beq x7, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0ed289985daeaf89 # initialize rs1
li x26, 0x0ed289985daeaf89 # initialize rs2
beq x7, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x23, 0xca55b95287f5e643 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
beq x23, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
beq x23, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x25, 0xe2f2ac737fb4e225 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
beq x25, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
beq x25, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x3, 0x9da9ac41afcfb981 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
beq x3, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
beq x3, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x15, 0x80483e6c86318e41 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
beq x15, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x8000000000000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
beq x15, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x11, 0x96e7697d6bcd2bd8 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
beq x11, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
beq x11, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x23, 0x752111a912d355cf # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
beq x23, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffffffffffff # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
beq x23, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x31, 0x4ea78d76690b97d4 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
beq x31, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
beq x31, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x2, 0x9eb6224fddd94fbe # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
beq x2, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffffffffffff # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
beq x2, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x26, 0x512b626f37b1d814 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
beq x26, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xfffffffffffffffe # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
beq x26, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x9, 0xb6a9bb00f689ded2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
beq x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
beq x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x24, 0x8863a0f6a1e72970 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x24, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x24, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x24, 0xfe361f4943af9833 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
beq x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
beq x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x11, 0xfe9b3409cd114486 # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
beq x11, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000ffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
beq x11, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x27, 0x09751ac9267f6f50 # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
beq x27, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000fffffffe # initialize rs1
li x21, 0x00000000fffffffe # initialize rs2
beq x27, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x18, 0xacd49242ca14edc8 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
beq x18, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
beq x18, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x15, 0x2005338db283e10b # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
beq x15, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
beq x15, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x15, 0x0000000000000000 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
beq x15, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000000 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
beq x15, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x8, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
beq x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
beq x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x20, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
beq x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
beq x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x29, 0x0000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
beq x29, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
beq x29, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x27, 0x0000000000000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
beq x27, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
beq x27, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x5, 0x0000000000000000 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
beq x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
beq x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x22, 0x0000000000000000 # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7ffffffffffffffe # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x10, 0x0000000000000000 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
beq x10, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffffffffffff # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
beq x10, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x13, 0x0000000000000000 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffffffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x23, 0x0000000000000000 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
beq x23, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
beq x23, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x0000000000000000 # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x2, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x2, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x7, 0x0000000000000000 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
beq x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
beq x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x22, 0x0000000000000000 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
beq x22, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
beq x22, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x1, 0x0000000000000000 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
beq x1, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
beq x1, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x27, 0x0000000000000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x26, 0x0000000000000000 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000001 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x9, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x9, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000000 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x9, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x1, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x23, 0x0000000000000001 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
beq x23, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
beq x23, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x12, 0x0000000000000001 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
beq x12, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
beq x12, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x11, 0x0000000000000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
beq x11, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8000000000000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
beq x11, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x27, 0x0000000000000001 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
beq x27, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
beq x27, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x14, 0x0000000000000001 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
beq x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
beq x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x30, 0x0000000000000001 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
beq x30, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
beq x30, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000001 # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
beq x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
beq x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x22, 0x0000000000000001 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
beq x22, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
beq x22, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x0000000000000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x19, 0x0000000000000001 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
beq x19, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5555555555555555 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
beq x19, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x18, 0x0000000000000001 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
beq x18, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000ffffffff # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
beq x18, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x27, 0x0000000000000001 # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
beq x27, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000fffffffe # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
beq x27, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x23, 0x0000000000000001 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
beq x23, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
beq x23, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x3, 0x0000000000000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
beq x3, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
beq x3, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x15, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
beq x15, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
beq x15, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x12, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x23, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
beq x23, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
beq x23, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x23, 0x0000000000000002 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x10, 0x0000000000000002 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8000000000000001 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x12, 0x0000000000000002 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
beq x12, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
beq x12, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x30, 0x0000000000000002 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
beq x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
beq x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x10, 0x0000000000000002 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffffffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x13, 0x0000000000000002 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffffffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000000000002 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
beq x29, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
beq x29, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x0000000000000002 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x6, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x6, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x9, 0x0000000000000002 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x5, 0x0000000000000002 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000ffffffff # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x1, 0x0000000000000002 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
beq x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
beq x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x16, 0x0000000000000002 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
beq x16, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
beq x16, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x13, 0x0000000000000002 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
beq x13, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000100000001 # initialize rs1
li x27, 0x0000000100000001 # initialize rs2
beq x13, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x11, 0x8000000000000000 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x11, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000000000000 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x11, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x20, 0x8000000000000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
beq x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
beq x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x20, 0x8000000000000000 # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
beq x20, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
beq x20, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x6, 0x8000000000000000 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
beq x6, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x8000000000000000 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
beq x6, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x1, 0x8000000000000000 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
beq x1, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
beq x1, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x12, 0x8000000000000000 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
beq x12, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
beq x12, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x30, 0x8000000000000000 # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
beq x30, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
beq x30, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x7, 0x8000000000000000 # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
beq x7, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffffffffffff # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
beq x7, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x22, 0x8000000000000000 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
beq x22, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffffffffffe # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
beq x22, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x2, 0x8000000000000000 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
beq x2, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
beq x2, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x8000000000000000 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x11, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x11, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x28, 0x8000000000000000 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
beq x28, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5555555555555555 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
beq x28, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x25, 0x8000000000000000 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
beq x25, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
beq x25, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x26, 0x8000000000000000 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
beq x26, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
beq x26, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x24, 0x8000000000000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
beq x24, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
beq x24, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x13, 0x8000000000000000 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000100000001 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x20, 0x8000000000000001 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
beq x20, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
beq x20, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x12, 0x8000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x12, 0x8000000000000001 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
beq x12, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000002 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
beq x12, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x2, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
beq x2, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x26, 0x8000000000000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
beq x26, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
beq x26, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x24, 0x8000000000000001 # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
beq x24, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffffffffffe # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
beq x24, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x14, 0x8000000000000001 # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x14, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xffffffffffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x14, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x1, 0x8000000000000001 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
beq x1, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
beq x1, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x6, 0x8000000000000001 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
beq x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
beq x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x8000000000000001 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x30, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x30, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x11, 0x8000000000000001 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
beq x11, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
beq x11, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x15, 0x8000000000000001 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
beq x15, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
beq x15, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x14, 0x8000000000000001 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x5, 0x8000000000000001 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x20, 0x8000000000000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
beq x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000001 # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
beq x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x17, 0x7fffffffffffffff # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000000 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
beq x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x24, 0x7fffffffffffffff # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
beq x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
beq x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x25, 0x7fffffffffffffff # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
beq x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
beq x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x14, 0x7fffffffffffffff # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
beq x14, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
beq x14, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x26, 0x7fffffffffffffff # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
beq x26, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
beq x26, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x6, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
beq x6, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
beq x6, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0x7fffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
beq x24, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
beq x24, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x14, 0x7fffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
beq x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
beq x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x25, 0x7fffffffffffffff # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
beq x25, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
beq x25, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x22, 0x7fffffffffffffff # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x7fffffffffffffff # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x7, 0x7fffffffffffffff # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
beq x7, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
beq x7, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x15, 0x7fffffffffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
beq x15, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
beq x15, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x19, 0x7fffffffffffffff # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
beq x19, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
beq x19, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x16, 0x7fffffffffffffff # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
beq x16, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
beq x16, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x3, 0x7fffffffffffffff # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
beq x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
beq x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x7, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
beq x7, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
beq x7, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x9, 0x7ffffffffffffffe # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
beq x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
beq x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x16, 0x7ffffffffffffffe # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
beq x16, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
beq x16, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x23, 0x7ffffffffffffffe # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
beq x23, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
beq x23, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x27, 0x7ffffffffffffffe # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
beq x27, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
beq x27, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x12, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
beq x12, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
beq x12, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x18, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
beq x18, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
beq x18, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x6, 0x7ffffffffffffffe # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
beq x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
beq x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x3, 0x7ffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
beq x3, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
beq x3, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x11, 0x7ffffffffffffffe # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
beq x11, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
beq x11, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x7ffffffffffffffe # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x7, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x7, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x20, 0x7ffffffffffffffe # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
beq x20, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
beq x20, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x31, 0x7ffffffffffffffe # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
beq x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000ffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
beq x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x15, 0x7ffffffffffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
beq x15, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
beq x15, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x23, 0x7ffffffffffffffe # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
beq x23, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
beq x23, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x27, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
beq x27, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
beq x27, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x15, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
beq x15, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
beq x15, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x19, 0xffffffffffffffff # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
beq x19, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
beq x19, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x3, 0xffffffffffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000002 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
beq x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x14, 0xffffffffffffffff # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x16, 0xffffffffffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
beq x16, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
beq x16, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x20, 0xffffffffffffffff # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
beq x20, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x21, 0x7fffffffffffffff # initialize rs2
beq x20, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
beq x24, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
beq x24, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x11, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
beq x11, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
beq x11, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x30, 0xffffffffffffffff # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
beq x30, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffffffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
beq x30, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x27, 0xffffffffffffffff # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
beq x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
beq x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0xffffffffffffffff # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x17, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x17, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x6, 0xffffffffffffffff # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x6, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x6, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x3, 0xffffffffffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
beq x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000ffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
beq x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x21, 0xffffffffffffffff # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
beq x21, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000fffffffe # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
beq x21, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x30, 0xffffffffffffffff # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
beq x30, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000100000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
beq x30, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x5, 0xffffffffffffffff # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x27, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x14, 0xfffffffffffffffe # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
beq x14, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
beq x14, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x19, 0xfffffffffffffffe # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
beq x19, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
beq x19, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x17, 0xfffffffffffffffe # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
beq x17, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
beq x17, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x10, 0xfffffffffffffffe # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
beq x10, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
beq x10, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x1, 0xfffffffffffffffe # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
beq x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7fffffffffffffff # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
beq x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x7, 0xfffffffffffffffe # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
beq x7, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7ffffffffffffffe # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
beq x7, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x5, 0xfffffffffffffffe # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
beq x5, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
beq x5, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x15, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
beq x15, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
beq x15, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x16, 0xfffffffffffffffe # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
beq x16, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x5bbc887763ae86f2 # initialize rs2
beq x16, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0xfffffffffffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x14, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x14, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x21, 0xfffffffffffffffe # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
beq x21, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
beq x21, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x8, 0xfffffffffffffffe # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
beq x8, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
beq x8, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x25, 0xfffffffffffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
beq x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
beq x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x18, 0xfffffffffffffffe # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
beq x18, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000000 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
beq x18, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x18, 0xfffffffffffffffe # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
beq x18, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
beq x18, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
beq x15, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
beq x15, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
beq x26, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
beq x26, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
beq x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
beq x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
beq x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
beq x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
beq x12, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
beq x12, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
beq x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
beq x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
beq x20, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
beq x20, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
beq x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
beq x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
beq x21, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
beq x21, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
beq x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
beq x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x13, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x13, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
beq x3, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5555555555555555 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
beq x3, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
beq x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000ffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
beq x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
beq x24, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000000 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
beq x24, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x7, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x7, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
beq x29, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000000 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
beq x29, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
beq x28, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
beq x28, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
beq x19, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
beq x19, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
beq x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
beq x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
beq x25, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
beq x25, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
beq x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
beq x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
beq x11, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffffffffffff # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
beq x11, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
beq x10, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
beq x10, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x24, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x24, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x14, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x14, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
beq x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
beq x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
beq x11, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000ffffffff # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
beq x11, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
beq x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000fffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
beq x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
beq x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
beq x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
beq x29, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000100000001 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
beq x29, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x5, 0x5555555555555555 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
beq x5, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
beq x5, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x27, 0x5555555555555555 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x27, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x27, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x20, 0x5555555555555555 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
beq x20, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
beq x20, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x9, 0x5555555555555555 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x31, 0x5555555555555555 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
beq x31, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000001 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
beq x31, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x21, 0x5555555555555555 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7fffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x7, 0x5555555555555555 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
beq x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
beq x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x27, 0x5555555555555555 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
beq x6, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
beq x6, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x28, 0x5555555555555555 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
beq x28, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
beq x28, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x5555555555555555 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x14, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
beq x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5555555555555555 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
beq x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x25, 0x5555555555555555 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
beq x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
beq x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x30, 0x5555555555555555 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
beq x30, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000fffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
beq x30, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x14, 0x5555555555555555 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
beq x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
beq x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x14, 0x5555555555555555 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000100000001 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x25, 0x00000000ffffffff # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
beq x25, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
beq x25, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x19, 0x00000000ffffffff # initialize rs1
li x31, 0x0000000000000001 # initialize rs2
beq x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000001 # initialize rs1
li x31, 0x0000000000000001 # initialize rs2
beq x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x23, 0x00000000ffffffff # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x28, 0x00000000ffffffff # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
beq x28, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000000 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
beq x28, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x23, 0x00000000ffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
beq x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x28, 0x00000000ffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
beq x28, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7fffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
beq x28, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x21, 0x00000000ffffffff # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x8, 0x00000000ffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffffffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
beq x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x13, 0x00000000ffffffff # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x25, 0x00000000ffffffff # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
beq x25, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
beq x25, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x00000000ffffffff # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x15, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x15, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x29, 0x00000000ffffffff # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
beq x29, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5555555555555555 # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
beq x29, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x13, 0x00000000ffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
beq x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000ffffffff # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
beq x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x24, 0x00000000ffffffff # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
beq x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000fffffffe # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
beq x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x26, 0x00000000ffffffff # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
beq x26, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000000 # initialize rs1
li x19, 0x0000000100000000 # initialize rs2
beq x26, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x27, 0x00000000ffffffff # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x27, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x27, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x2, 0x00000000fffffffe # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
beq x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000000 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
beq x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x9, 0x00000000fffffffe # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
beq x9, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
beq x9, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x30, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
beq x30, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000000000002 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
beq x30, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x23, 0x00000000fffffffe # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
beq x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
beq x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x17, 0x00000000fffffffe # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
beq x17, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
beq x17, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x17, 0x00000000fffffffe # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
beq x17, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7fffffffffffffff # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
beq x17, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
beq x11, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7ffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
beq x11, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x1, 0x00000000fffffffe # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
beq x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x3, 0x00000000fffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x26, 0x00000000fffffffe # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
beq x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x00000000fffffffe # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x24, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x24, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x31, 0x00000000fffffffe # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
beq x31, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5555555555555555 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
beq x31, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x9, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
beq x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x19, 0x00000000ffffffff # initialize rs2
beq x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x10, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
beq x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x20, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
beq x20, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
beq x20, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x26, 0x00000000fffffffe # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
beq x26, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000100000001 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
beq x26, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x3, 0x0000000100000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
beq x3, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
beq x3, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x2, 0x0000000100000000 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
beq x2, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
beq x2, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x20, 0x0000000100000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
beq x20, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
beq x20, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x13, 0x0000000100000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
beq x13, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
beq x13, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x5, 0x0000000100000000 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
beq x5, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
beq x5, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x21, 0x0000000100000000 # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x19, 0x0000000100000000 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
beq x19, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
beq x19, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x31, 0x0000000100000000 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
beq x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
beq x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x19, 0x0000000100000000 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
beq x19, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffffffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
beq x19, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x5, 0x0000000100000000 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
beq x5, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
beq x5, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x0000000100000000 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x22, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x22, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x26, 0x0000000100000000 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
beq x26, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
beq x26, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x17, 0x0000000100000000 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
beq x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
beq x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x15, 0x0000000100000000 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
beq x15, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000fffffffe # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
beq x15, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x31, 0x0000000100000000 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
beq x31, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
beq x31, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x11, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
beq x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x14, 0x0000000100000001 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x6, 0x0000000100000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x6, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
beq x6, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x20, 0x0000000100000001 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
beq x20, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
beq x20, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x30, 0x0000000100000001 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
beq x30, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
beq x30, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x12, 0x0000000100000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
beq x12, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000001 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
beq x12, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x24, 0x0000000100000001 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
beq x24, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffffffffffff # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
beq x24, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x2, 0x0000000100000001 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
beq x2, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
beq x2, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x11, 0x0000000100000001 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
beq x11, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffffffffffff # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
beq x11, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x2, 0x0000000100000001 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
beq x2, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfffffffffffffffe # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
beq x2, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x27, 0x0000000100000001 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
beq x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
beq x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x0000000100000001 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x9, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
beq x9, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x7, 0x0000000100000001 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x7, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
beq x7, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x24, 0x0000000100000001 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
beq x24, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000ffffffff # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
beq x24, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x8, 0x0000000100000001 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
beq x8, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000fffffffe # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
beq x8, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x25, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
beq x25, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000100000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
beq x25, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x22, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
beq x22, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
beq x22, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xe3d6b6a46e8150e9 # initialize rs1
li x0, 0xa75369578482c26e # initialize rs2
beq x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xa75369578482c26e # initialize rs1
li x0, 0xa75369578482c26e # initialize rs2
beq x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x989d8f8cc558e4b9 # initialize rs1
li x1, 0xe6da3165fed07fa8 # initialize rs2
beq x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xe6da3165fed07fa8 # initialize rs1
li x1, 0xe6da3165fed07fa8 # initialize rs2
beq x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x169905faa691ff7b # initialize rs1
li x2, 0xdb5b18d0e0eb67d3 # initialize rs2
beq x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xdb5b18d0e0eb67d3 # initialize rs1
li x2, 0xdb5b18d0e0eb67d3 # initialize rs2
beq x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x1f31219d10092e60 # initialize rs1
li x3, 0x3e1950a2f49d985c # initialize rs2
beq x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x3e1950a2f49d985c # initialize rs1
li x3, 0x3e1950a2f49d985c # initialize rs2
beq x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x19769b95c377b327 # initialize rs1
li x4, 0x740aa3021f55ccff # initialize rs2
beq x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x740aa3021f55ccff # initialize rs1
li x4, 0x740aa3021f55ccff # initialize rs2
beq x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x84f5199424ab15f8 # initialize rs1
li x5, 0x315f58558dfb0b1a # initialize rs2
beq x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x315f58558dfb0b1a # initialize rs1
li x5, 0x315f58558dfb0b1a # initialize rs2
beq x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x36fddfac1a1e9d9a # initialize rs1
li x6, 0x3f3fb7585555679d # initialize rs2
beq x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x3f3fb7585555679d # initialize rs1
li x6, 0x3f3fb7585555679d # initialize rs2
beq x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x35041be9932dc459 # initialize rs1
li x7, 0x2f038f8870c2f6f4 # initialize rs2
beq x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x2f038f8870c2f6f4 # initialize rs1
li x7, 0x2f038f8870c2f6f4 # initialize rs2
beq x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x43867aa61c8ff6a2 # initialize rs1
li x8, 0x8d861e15a3bb45b3 # initialize rs2
beq x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8d861e15a3bb45b3 # initialize rs1
li x8, 0x8d861e15a3bb45b3 # initialize rs2
beq x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xf8c1253629888958 # initialize rs1
li x9, 0x16bcfa99de366c3a # initialize rs2
beq x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x16bcfa99de366c3a # initialize rs1
li x9, 0x16bcfa99de366c3a # initialize rs2
beq x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x237e9ecbeed9dd1e # initialize rs1
li x10, 0x6b483273ba269105 # initialize rs2
beq x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x6b483273ba269105 # initialize rs1
li x10, 0x6b483273ba269105 # initialize rs2
beq x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x5a62d6888114e81d # initialize rs1
li x11, 0x7588f5c158fc7290 # initialize rs2
beq x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7588f5c158fc7290 # initialize rs1
li x11, 0x7588f5c158fc7290 # initialize rs2
beq x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x4d129b7ab150f3bd # initialize rs1
li x12, 0x53deb435a1c4091b # initialize rs2
beq x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x53deb435a1c4091b # initialize rs1
li x12, 0x53deb435a1c4091b # initialize rs2
beq x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xff4969afd3f043d9 # initialize rs1
li x13, 0x5fe735d276d9b69f # initialize rs2
beq x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5fe735d276d9b69f # initialize rs1
li x13, 0x5fe735d276d9b69f # initialize rs2
beq x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x3ef5df2a4fe7f659 # initialize rs1
li x14, 0x02a7bd5dc2548a60 # initialize rs2
beq x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x02a7bd5dc2548a60 # initialize rs1
li x14, 0x02a7bd5dc2548a60 # initialize rs2
beq x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xfcbecd5aea153a8b # initialize rs1
li x15, 0xe2012a4e00dcfd2e # initialize rs2
beq x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xe2012a4e00dcfd2e # initialize rs1
li x15, 0xe2012a4e00dcfd2e # initialize rs2
beq x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x16bec80de93e5562 # initialize rs1
li x16, 0xa321e35666954827 # initialize rs2
beq x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xa321e35666954827 # initialize rs1
li x16, 0xa321e35666954827 # initialize rs2
beq x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x5a4f4e6c80998a86 # initialize rs1
li x17, 0x8d47410e375ba208 # initialize rs2
beq x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8d47410e375ba208 # initialize rs1
li x17, 0x8d47410e375ba208 # initialize rs2
beq x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x131da778545d6247 # initialize rs1
li x18, 0xac022bd14352d95c # initialize rs2
beq x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xac022bd14352d95c # initialize rs1
li x18, 0xac022bd14352d95c # initialize rs2
beq x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x1966e5bccde95ecb # initialize rs1
li x19, 0xecea648e34df6d36 # initialize rs2
beq x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xecea648e34df6d36 # initialize rs1
li x19, 0xecea648e34df6d36 # initialize rs2
beq x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x1c69410b07a1edae # initialize rs1
li x20, 0x43a1c6a7f4402246 # initialize rs2
beq x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x43a1c6a7f4402246 # initialize rs1
li x20, 0x43a1c6a7f4402246 # initialize rs2
beq x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xeed246aa4aa90fd2 # initialize rs1
li x21, 0xe518c3319848bd0b # initialize rs2
beq x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xe518c3319848bd0b # initialize rs1
li x21, 0xe518c3319848bd0b # initialize rs2
beq x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x6ff1c23eb7345cd3 # initialize rs1
li x22, 0x785df52d3ca0b651 # initialize rs2
beq x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x785df52d3ca0b651 # initialize rs1
li x22, 0x785df52d3ca0b651 # initialize rs2
beq x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xbc8cb80c5bb2d9e3 # initialize rs1
li x23, 0x959131d511cd2816 # initialize rs2
beq x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x959131d511cd2816 # initialize rs1
li x23, 0x959131d511cd2816 # initialize rs2
beq x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x3f73c70c161e82eb # initialize rs1
li x24, 0x6a200b0a14b82215 # initialize rs2
beq x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x6a200b0a14b82215 # initialize rs1
li x24, 0x6a200b0a14b82215 # initialize rs2
beq x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x8396dabeb2ce081f # initialize rs1
li x25, 0x3586894f25238c48 # initialize rs2
beq x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x3586894f25238c48 # initialize rs1
li x25, 0x3586894f25238c48 # initialize rs2
beq x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x7e28c8b2952aef0c # initialize rs1
li x26, 0xaf03748a3a988f00 # initialize rs2
beq x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xaf03748a3a988f00 # initialize rs1
li x26, 0xaf03748a3a988f00 # initialize rs2
beq x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xd55d636f42fe78c0 # initialize rs1
li x27, 0xcb1974de4798cbc8 # initialize rs2
beq x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xcb1974de4798cbc8 # initialize rs1
li x27, 0xcb1974de4798cbc8 # initialize rs2
beq x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x63f6458c74da01da # initialize rs1
li x28, 0x4e576a94420f11e4 # initialize rs2
beq x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x4e576a94420f11e4 # initialize rs1
li x28, 0x4e576a94420f11e4 # initialize rs2
beq x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xe2c83d9f1b8e4abc # initialize rs1
li x29, 0x90ced6b4ac6d9a7f # initialize rs2
beq x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x90ced6b4ac6d9a7f # initialize rs1
li x29, 0x90ced6b4ac6d9a7f # initialize rs2
beq x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x2a35beb9ce2dd0d1 # initialize rs1
li x30, 0xff3acc820e686886 # initialize rs2
beq x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xff3acc820e686886 # initialize rs1
li x30, 0xff3acc820e686886 # initialize rs2
beq x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xf9d8caf9d6abc2f9 # initialize rs1
li x31, 0x838d2d1755ef5025 # initialize rs2
beq x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x838d2d1755ef5025 # initialize rs1
li x31, 0x838d2d1755ef5025 # initialize rs2
beq x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: beq x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x30, x17, x11 # perform first operation
beq x19, x13, arbitraryLabel115
nop
arbitraryLabel115:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x28, x15 # perform first operation
beq x9, x30, arbitraryLabel116
nop
arbitraryLabel116:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x25, x30, x15 # perform first operation
beq x17, x16, arbitraryLabel117
nop
arbitraryLabel117:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x25, x1, x21 # perform first operation
beq x25, x19, arbitraryLabel118
nop
arbitraryLabel118:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x20, x2 # perform first operation
beq x8, x7, arbitraryLabel119
nop
arbitraryLabel119:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x8, x11 # perform first operation
beq x28, x2, arbitraryLabel120
nop
arbitraryLabel120:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lhu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x2, 0x4ebd237e2ac2d983 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 340 # sub immediate from rs1 to counter offset
sd x2, -340 (x1) # store value to put something in memory
lhu x7, -340(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x27, 0x252df801ffbc0241 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -2018 # sub immediate from rs1 to counter offset
sd x27, 2018 (x2) # store value to put something in memory
lhu x15, 2018(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x19, 0x819b4062e4de8f66 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 401 # sub immediate from rs1 to counter offset
sd x19, -401 (x3) # store value to put something in memory
lhu x28, -401(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0xf0c3eeb1f7eaba87 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1872 # sub immediate from rs1 to counter offset
sd x23, 1872 (x4) # store value to put something in memory
lhu x16, 1872(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x16, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0x4f26281b91fa5954 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -799 # sub immediate from rs1 to counter offset
sd x14, 799 (x5) # store value to put something in memory
lhu x4, 799(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x4, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0xa81c42acc9b57afb # initialize rs2
la x6, scratch # base address 
addi x6, x6, -495 # sub immediate from rs1 to counter offset
sd x17, 495 (x6) # store value to put something in memory
lhu x5, 495(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x5, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0xd8946d7b20fa3007 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1472 # sub immediate from rs1 to counter offset
sd x24, -1472 (x7) # store value to put something in memory
lhu x29, -1472(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x2, 0x7632d44e93d6d162 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -385 # sub immediate from rs1 to counter offset
sd x2, 385 (x8) # store value to put something in memory
lhu x27, 385(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x17, 0x7e00230b2748e1c7 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -437 # sub immediate from rs1 to counter offset
sd x17, 437 (x9) # store value to put something in memory
lhu x24, 437(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x18, 0x9bf1cb400673aa43 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1225 # sub immediate from rs1 to counter offset
sd x18, -1225 (x10) # store value to put something in memory
lhu x14, -1225(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x18, 0xe6c0af525ed4adca # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1031 # sub immediate from rs1 to counter offset
sd x18, 1031 (x11) # store value to put something in memory
lhu x13, 1031(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x10, 0x52154d3f36c6bbab # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1574 # sub immediate from rs1 to counter offset
sd x10, -1574 (x12) # store value to put something in memory
lhu x20, -1574(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x11, 0x955567142fde67b7 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -958 # sub immediate from rs1 to counter offset
sd x11, 958 (x13) # store value to put something in memory
lhu x3, 958(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x3, 0x3cbff5e80457f802 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1643 # sub immediate from rs1 to counter offset
sd x3, -1643 (x14) # store value to put something in memory
lhu x21, -1643(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x12, 0xa31887d270a8e966 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1980 # sub immediate from rs1 to counter offset
sd x12, 1980 (x15) # store value to put something in memory
lhu x11, 1980(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x15, 0xbf6a0f249ce0e087 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -8 # sub immediate from rs1 to counter offset
sd x15, 8 (x16) # store value to put something in memory
lhu x10, 8(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x19, 0x5f8539feed016ab7 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1036 # sub immediate from rs1 to counter offset
sd x19, 1036 (x17) # store value to put something in memory
lhu x22, 1036(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x9, 0xc62d32242335c43c # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1550 # sub immediate from rs1 to counter offset
sd x9, 1550 (x18) # store value to put something in memory
lhu x22, 1550(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x21, 0xc0a0dad08600741b # initialize rs2
la x19, scratch # base address 
addi x19, x19, 720 # sub immediate from rs1 to counter offset
sd x21, -720 (x19) # store value to put something in memory
lhu x7, -720(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x1, 0x1c6d55a3c4037dca # initialize rs2
la x20, scratch # base address 
addi x20, x20, -626 # sub immediate from rs1 to counter offset
sd x1, 626 (x20) # store value to put something in memory
lhu x31, 626(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x16, 0x84fb597e7dd0c1da # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1323 # sub immediate from rs1 to counter offset
sd x16, 1323 (x21) # store value to put something in memory
lhu x20, 1323(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x13, 0xe3c136dfcf31b247 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1220 # sub immediate from rs1 to counter offset
sd x13, -1220 (x22) # store value to put something in memory
lhu x14, -1220(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x2, 0x1a2f7b3690d8d8ae # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1800 # sub immediate from rs1 to counter offset
sd x2, -1800 (x23) # store value to put something in memory
lhu x28, -1800(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x19, 0xfe831e3ca33a6422 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 433 # sub immediate from rs1 to counter offset
sd x19, -433 (x24) # store value to put something in memory
lhu x10, -433(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x7, 0x5ba8708697faa56f # initialize rs2
la x25, scratch # base address 
addi x25, x25, -639 # sub immediate from rs1 to counter offset
sd x7, 639 (x25) # store value to put something in memory
lhu x1, 639(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x22, 0x058465c6ad6b0a8f # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1195 # sub immediate from rs1 to counter offset
sd x22, -1195 (x26) # store value to put something in memory
lhu x5, -1195(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x2, 0xc96d20a195ecee4a # initialize rs2
la x27, scratch # base address 
addi x27, x27, 27 # sub immediate from rs1 to counter offset
sd x2, -27 (x27) # store value to put something in memory
lhu x3, -27(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x30, 0x827a87b772e1888d # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1693 # sub immediate from rs1 to counter offset
sd x30, 1693 (x28) # store value to put something in memory
lhu x20, 1693(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x2, 0xf8fa473e60360fac # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1758 # sub immediate from rs1 to counter offset
sd x2, 1758 (x29) # store value to put something in memory
lhu x30, 1758(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x17, 0xe31f61da48360009 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1240 # sub immediate from rs1 to counter offset
sd x17, -1240 (x30) # store value to put something in memory
lhu x20, -1240(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x22, 0xe753b9853e504f41 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1374 # sub immediate from rs1 to counter offset
sd x22, -1374 (x31) # store value to put something in memory
lhu x27, -1374(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 240)

# Testcase cp_rd (Test destination rd = x0)
li x10, 0xf7dc23239a8fd186 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1179 # sub immediate from rs1 to counter offset
sd x10, 1179 (x12) # store value to put something in memory
lhu x0, 1179(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x27, 0x79ade9fd8122fed2 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1540 # sub immediate from rs1 to counter offset
sd x27, -1540 (x5) # store value to put something in memory
lhu x1, -1540(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x30, 0xb8bb053413c65983 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 740 # sub immediate from rs1 to counter offset
sd x30, -740 (x22) # store value to put something in memory
lhu x2, -740(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x22, 0x7dedcd3af10226d5 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1290 # sub immediate from rs1 to counter offset
sd x22, -1290 (x26) # store value to put something in memory
lhu x3, -1290(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x19, 0x15083442986c43f2 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -101 # sub immediate from rs1 to counter offset
sd x19, 101 (x11) # store value to put something in memory
lhu x4, 101(x11) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0x364d65d7ff8bcd41 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1180 # sub immediate from rs1 to counter offset
sd x11, -1180 (x9) # store value to put something in memory
lhu x5, -1180(x9) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x12, 0xb368ddf573f6a019 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1179 # sub immediate from rs1 to counter offset
sd x12, -1179 (x25) # store value to put something in memory
lhu x6, -1179(x25) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x31, 0x4587a994ad6eccbf # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1633 # sub immediate from rs1 to counter offset
sd x31, 1633 (x1) # store value to put something in memory
lhu x7, 1633(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x20, 0x61825bce7ed4efc8 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 215 # sub immediate from rs1 to counter offset
sd x20, -215 (x13) # store value to put something in memory
lhu x8, -215(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x15, 0x7568e2989a37373b # initialize rs2
la x3, scratch # base address 
addi x3, x3, -919 # sub immediate from rs1 to counter offset
sd x15, 919 (x3) # store value to put something in memory
lhu x9, 919(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x14, 0x12ffd7a362548f47 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -510 # sub immediate from rs1 to counter offset
sd x14, 510 (x8) # store value to put something in memory
lhu x10, 510(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x17, 0x16cfa8f9ac1dce3c # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1125 # sub immediate from rs1 to counter offset
sd x17, -1125 (x9) # store value to put something in memory
lhu x11, -1125(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x8, 0x91f3fd8dc4d0bff0 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -687 # sub immediate from rs1 to counter offset
sd x8, 687 (x9) # store value to put something in memory
lhu x12, 687(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x28, 0x411da27e6e2550c5 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 114 # sub immediate from rs1 to counter offset
sd x28, -114 (x5) # store value to put something in memory
lhu x13, -114(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x21, 0x9351270687142e4c # initialize rs2
la x23, scratch # base address 
addi x23, x23, -306 # sub immediate from rs1 to counter offset
sd x21, 306 (x23) # store value to put something in memory
lhu x14, 306(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x23, 0x8492d37d56fe70b1 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -2001 # sub immediate from rs1 to counter offset
sd x23, 2001 (x10) # store value to put something in memory
lhu x15, 2001(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x5, 0xa8edb1d009688e5e # initialize rs2
la x21, scratch # base address 
addi x21, x21, 154 # sub immediate from rs1 to counter offset
sd x5, -154 (x21) # store value to put something in memory
lhu x16, -154(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x1, 0x713a45907d49330f # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1201 # sub immediate from rs1 to counter offset
sd x1, 1201 (x16) # store value to put something in memory
lhu x17, 1201(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x8, 0xf9483f1606e78bde # initialize rs2
la x7, scratch # base address 
addi x7, x7, 941 # sub immediate from rs1 to counter offset
sd x8, -941 (x7) # store value to put something in memory
lhu x18, -941(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x26, 0xbadf085fff253e57 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -38 # sub immediate from rs1 to counter offset
sd x26, 38 (x9) # store value to put something in memory
lhu x19, 38(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x8, 0xf20f2dad14dc2ebb # initialize rs2
la x6, scratch # base address 
addi x6, x6, 644 # sub immediate from rs1 to counter offset
sd x8, -644 (x6) # store value to put something in memory
lhu x20, -644(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x15, 0x30156b0af26b6a4c # initialize rs2
la x9, scratch # base address 
addi x9, x9, 546 # sub immediate from rs1 to counter offset
sd x15, -546 (x9) # store value to put something in memory
lhu x21, -546(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x18, 0x26e3c61763368887 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -2023 # sub immediate from rs1 to counter offset
sd x18, 2023 (x2) # store value to put something in memory
lhu x22, 2023(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x17, 0xd8dede6e0c25db3b # initialize rs2
la x31, scratch # base address 
addi x31, x31, -655 # sub immediate from rs1 to counter offset
sd x17, 655 (x31) # store value to put something in memory
lhu x23, 655(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x31, 0xfdfc640784cf904e # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1406 # sub immediate from rs1 to counter offset
sd x31, -1406 (x7) # store value to put something in memory
lhu x24, -1406(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x2, 0x41aa4cf7e5ff925b # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1389 # sub immediate from rs1 to counter offset
sd x2, -1389 (x16) # store value to put something in memory
lhu x25, -1389(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x25, 0x9fe9b4398e3214a6 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1467 # sub immediate from rs1 to counter offset
sd x25, 1467 (x20) # store value to put something in memory
lhu x26, 1467(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x6, 0x9d303aaa6bcaaaa9 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 265 # sub immediate from rs1 to counter offset
sd x6, -265 (x24) # store value to put something in memory
lhu x27, -265(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x30, 0x924924022eac8194 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1224 # sub immediate from rs1 to counter offset
sd x30, 1224 (x9) # store value to put something in memory
lhu x28, 1224(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x8, 0x2aa7145f738b3178 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -702 # sub immediate from rs1 to counter offset
sd x8, 702 (x12) # store value to put something in memory
lhu x29, 702(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x22, 0xda9a07f825993a88 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1561 # sub immediate from rs1 to counter offset
sd x22, 1561 (x23) # store value to put something in memory
lhu x30, 1561(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x26, 0x718cc95a250bfc08 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1759 # sub immediate from rs1 to counter offset
sd x26, 1759 (x18) # store value to put something in memory
lhu x31, 1759(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x13, 0xd4771d8ec9ecfdf7 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -3 # sub immediate from rs1 to counter offset
sd x13, 3 (x1) # store value to put something in memory
lhu x1, 3(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x6, 0xc62270169df81676 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -26 # sub immediate from rs1 to counter offset
sd x6, 26 (x2) # store value to put something in memory
lhu x2, 26(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x919b32c51c5705b4 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1180 # sub immediate from rs1 to counter offset
sd x3, 1180 (x3) # store value to put something in memory
lhu x3, 1180(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0xfd998a7ed4d5ef7d # initialize rs2
la x4, scratch # base address 
addi x4, x4, -530 # sub immediate from rs1 to counter offset
sd x27, 530 (x4) # store value to put something in memory
lhu x4, 530(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x31, 0xe7f09643aa8c66ed # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1974 # sub immediate from rs1 to counter offset
sd x31, 1974 (x5) # store value to put something in memory
lhu x5, 1974(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x3, 0xb61d884ae67a537a # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1775 # sub immediate from rs1 to counter offset
sd x3, -1775 (x6) # store value to put something in memory
lhu x6, -1775(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0xcbfb15121f626121 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -782 # sub immediate from rs1 to counter offset
sd x6, 782 (x7) # store value to put something in memory
lhu x7, 782(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x29, 0x7999cb61851d2005 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -2017 # sub immediate from rs1 to counter offset
sd x29, 2017 (x8) # store value to put something in memory
lhu x8, 2017(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x8, 0x9b86f3f830ad1dbd # initialize rs2
la x9, scratch # base address 
addi x9, x9, -888 # sub immediate from rs1 to counter offset
sd x8, 888 (x9) # store value to put something in memory
lhu x9, 888(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x13, 0xac15858916394f32 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1533 # sub immediate from rs1 to counter offset
sd x13, 1533 (x10) # store value to put something in memory
lhu x10, 1533(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x23, 0xd0665938e8ba8941 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1367 # sub immediate from rs1 to counter offset
sd x23, 1367 (x11) # store value to put something in memory
lhu x11, 1367(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x7, 0xd35fdf0ed475c5d8 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1047 # sub immediate from rs1 to counter offset
sd x7, 1047 (x12) # store value to put something in memory
lhu x12, 1047(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x11, 0xddb665597edb2c59 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1709 # sub immediate from rs1 to counter offset
sd x11, 1709 (x13) # store value to put something in memory
lhu x13, 1709(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x24, 0x68d8c6c5c0a065f8 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1913 # sub immediate from rs1 to counter offset
sd x24, -1913 (x14) # store value to put something in memory
lhu x14, -1913(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x22, 0xb1a246c5cf54880d # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1941 # sub immediate from rs1 to counter offset
sd x22, 1941 (x15) # store value to put something in memory
lhu x15, 1941(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x22, 0x45831eb8cbccc801 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -564 # sub immediate from rs1 to counter offset
sd x22, 564 (x16) # store value to put something in memory
lhu x16, 564(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x16, 0xde7c3463137aca6c # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1727 # sub immediate from rs1 to counter offset
sd x16, -1727 (x17) # store value to put something in memory
lhu x17, -1727(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x9, 0x7f03505811a2f99b # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1201 # sub immediate from rs1 to counter offset
sd x9, -1201 (x18) # store value to put something in memory
lhu x18, -1201(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x29, 0x5b9ad639b465e4e3 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1955 # sub immediate from rs1 to counter offset
sd x29, 1955 (x19) # store value to put something in memory
lhu x19, 1955(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x24, 0x25ab98267f3f6fe3 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1703 # sub immediate from rs1 to counter offset
sd x24, 1703 (x20) # store value to put something in memory
lhu x20, 1703(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x31, 0x6d908e3ffad66ee9 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -650 # sub immediate from rs1 to counter offset
sd x31, 650 (x21) # store value to put something in memory
lhu x21, 650(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x20, 0xd5b4b6b558dbaa8c # initialize rs2
la x22, scratch # base address 
addi x22, x22, -359 # sub immediate from rs1 to counter offset
sd x20, 359 (x22) # store value to put something in memory
lhu x22, 359(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x5, 0xd2b25bfe9ad74b4d # initialize rs2
la x23, scratch # base address 
addi x23, x23, -544 # sub immediate from rs1 to counter offset
sd x5, 544 (x23) # store value to put something in memory
lhu x23, 544(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x21, 0x5822e3ce142b56f6 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -464 # sub immediate from rs1 to counter offset
sd x21, 464 (x24) # store value to put something in memory
lhu x24, 464(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x13, 0x96455de3de6643f6 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1713 # sub immediate from rs1 to counter offset
sd x13, 1713 (x25) # store value to put something in memory
lhu x25, 1713(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x9, 0xfdfbc7894074bf1c # initialize rs2
la x26, scratch # base address 
addi x26, x26, 930 # sub immediate from rs1 to counter offset
sd x9, -930 (x26) # store value to put something in memory
lhu x26, -930(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x23, 0xfc450790d9107c88 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1264 # sub immediate from rs1 to counter offset
sd x23, -1264 (x27) # store value to put something in memory
lhu x27, -1264(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x1, 0x069b0fa294aa08d1 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -262 # sub immediate from rs1 to counter offset
sd x1, 262 (x28) # store value to put something in memory
lhu x28, 262(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x28, 0x4fa80f3a17362942 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1800 # sub immediate from rs1 to counter offset
sd x28, 1800 (x29) # store value to put something in memory
lhu x29, 1800(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x28, 0xa08bb60126e56fbe # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1720 # sub immediate from rs1 to counter offset
sd x28, 1720 (x30) # store value to put something in memory
lhu x30, 1720(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x30, 0x0ce82671b7909ad6 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -222 # sub immediate from rs1 to counter offset
sd x30, 222 (x31) # store value to put something in memory
lhu x31, 222(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x14, 0x217aa0d713e8f131 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 0 # sub immediate from rs1 to counter offset
sd x14, 0 (x22) # store value to put something in memory
lhu x3, 0(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 752)

# Testcase cp_imm_corners
li x8, 0x87ee1a37bcbf7c6b # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1 # sub immediate from rs1 to counter offset
sd x8, 1 (x21) # store value to put something in memory
lhu x30, 1(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 760)

# Testcase cp_imm_corners
li x18, 0x54d10f2708ea7043 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -2 # sub immediate from rs1 to counter offset
sd x18, 2 (x6) # store value to put something in memory
lhu x25, 2(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 768)

# Testcase cp_imm_corners
li x1, 0x152dcceccea19fa3 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -3 # sub immediate from rs1 to counter offset
sd x1, 3 (x30) # store value to put something in memory
lhu x7, 3(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 776)

# Testcase cp_imm_corners
li x19, 0xd9a246004b8b4d12 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -4 # sub immediate from rs1 to counter offset
sd x19, 4 (x13) # store value to put something in memory
lhu x2, 4(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 784)

# Testcase cp_imm_corners
li x17, 0x96ff5e9f26844b1c # initialize rs2
la x13, scratch # base address 
addi x13, x13, -8 # sub immediate from rs1 to counter offset
sd x17, 8 (x13) # store value to put something in memory
lhu x15, 8(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 792)

# Testcase cp_imm_corners
li x26, 0xe579eb8347a7b62a # initialize rs2
la x23, scratch # base address 
addi x23, x23, -16 # sub immediate from rs1 to counter offset
sd x26, 16 (x23) # store value to put something in memory
lhu x5, 16(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 800)

# Testcase cp_imm_corners
li x9, 0xea665cf97215a8f8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -32 # sub immediate from rs1 to counter offset
sd x9, 32 (x20) # store value to put something in memory
lhu x14, 32(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 808)

# Testcase cp_imm_corners
li x11, 0xb3cd4216d518d837 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -64 # sub immediate from rs1 to counter offset
sd x11, 64 (x22) # store value to put something in memory
lhu x3, 64(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 816)

# Testcase cp_imm_corners
li x30, 0x223a798c50d3430f # initialize rs2
la x29, scratch # base address 
addi x29, x29, -128 # sub immediate from rs1 to counter offset
sd x30, 128 (x29) # store value to put something in memory
lhu x8, 128(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 824)

# Testcase cp_imm_corners
li x12, 0xc39ab87ff43d51e4 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -256 # sub immediate from rs1 to counter offset
sd x12, 256 (x23) # store value to put something in memory
lhu x7, 256(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 832)

# Testcase cp_imm_corners
li x22, 0x35c02c4fbc1f7ef3 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -512 # sub immediate from rs1 to counter offset
sd x22, 512 (x19) # store value to put something in memory
lhu x30, 512(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 840)

# Testcase cp_imm_corners
li x11, 0x617c389d6ce46750 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1023 # sub immediate from rs1 to counter offset
sd x11, 1023 (x20) # store value to put something in memory
lhu x29, 1023(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 848)

# Testcase cp_imm_corners
li x14, 0x0a697eda4296f09a # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1024 # sub immediate from rs1 to counter offset
sd x14, 1024 (x11) # store value to put something in memory
lhu x13, 1024(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 856)

# Testcase cp_imm_corners
li x23, 0x12bf4489db8d14bd # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1795 # sub immediate from rs1 to counter offset
sd x23, 1795 (x10) # store value to put something in memory
lhu x30, 1795(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 864)

# Testcase cp_imm_corners
li x31, 0x9b1cf9ffa3d53f2f # initialize rs2
la x22, scratch # base address 
addi x22, x22, -2047 # sub immediate from rs1 to counter offset
sd x31, 2047 (x22) # store value to put something in memory
lhu x5, 2047(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 872)

# Testcase cp_imm_corners
li x12, 0x33cae2d47c8a34c5 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 2047 # increment rs1 by 2047 
addi x22, x22, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x12, -2048 (x22) # store value to put something in memory
lhu x11, -2048(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 880)

# Testcase cp_imm_corners
li x25, 0x75ec60cb0ee7f79e # initialize rs2
la x17, scratch # base address 
addi x17, x17, 2047 # sub immediate from rs1 to counter offset
sd x25, -2047 (x17) # store value to put something in memory
lhu x28, -2047(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 888)

# Testcase cp_imm_corners
li x2, 0x80eb420e19cb1136 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 2 # sub immediate from rs1 to counter offset
sd x2, -2 (x14) # store value to put something in memory
lhu x27, -2(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 896)

# Testcase cp_imm_corners
li x1, 0x128d8b201c7d5ec6 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1 # sub immediate from rs1 to counter offset
sd x1, -1 (x19) # store value to put something in memory
lhu x15, -1(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x29, scratch
addi x29, x29, 796
add x2, x1, x28 # perform first operation
lhu x25, -796(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x29, scratch
addi x29, x29, -638
add x28, x17, x8 # perform first operation
lhu x23, 638(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x10, scratch
addi x10, x10, 1382
add x1, x6, x9 # perform first operation
lhu x29, -1382(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x21, scratch
addi x21, x21, 1833
add x21, x21, x0 # perform first operation
lhu x26, -1833(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x12, scratch
addi x12, x12, 1659
add x12, x12, x0 # perform first operation
lhu x10, -1659(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x18, scratch
addi x18, x18, -1681
add x18, x18, x0 # perform first operation
lhu x22, 1681(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x12, scratch
addi x12, x12, -796
add x16, x22, x15 # perform first operation
lhu x16, 796(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x30, scratch
addi x30, x30, -12
add x6, x15, x12 # perform first operation
lhu x6, 12(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x18, scratch
addi x18, x18, 838
add x28, x14, x9 # perform first operation
lhu x28, -838(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x16, scratch
addi x16, x16, 165
add x2, x28, x23 # perform first operation
lhu x28, -165(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x27, scratch
addi x27, x27, 1568
add x28, x30, x2 # perform first operation
lhu x2, -1568(x27) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x7, scratch
addi x7, x7, 543
add x29, x6, x3 # perform first operation
lhu x22, -543(x7) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-lwu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x9, 0x3d1f7e69a2d88950 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 676 # sub immediate from rs1 to counter offset
sd x9, -676 (x1) # store value to put something in memory
lwu x6, -676(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x17, 0xfd873665a9125932 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -433 # sub immediate from rs1 to counter offset
sd x17, 433 (x2) # store value to put something in memory
lwu x18, 433(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x27, 0xd26cb50b7d38b48b # initialize rs2
la x3, scratch # base address 
addi x3, x3, -373 # sub immediate from rs1 to counter offset
sd x27, 373 (x3) # store value to put something in memory
lwu x20, 373(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0x59bcf78456fb333c # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1090 # sub immediate from rs1 to counter offset
sd x24, 1090 (x4) # store value to put something in memory
lwu x17, 1090(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x02aee8822c53fb53 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 275 # sub immediate from rs1 to counter offset
sd x23, -275 (x5) # store value to put something in memory
lwu x30, -275(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x30, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x20, 0x4405d9097eee79e2 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1140 # sub immediate from rs1 to counter offset
sd x20, 1140 (x6) # store value to put something in memory
lwu x18, 1140(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x18, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x31, 0xe743b39cba633bca # initialize rs2
la x7, scratch # base address 
addi x7, x7, -684 # sub immediate from rs1 to counter offset
sd x31, 684 (x7) # store value to put something in memory
lwu x9, 684(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x27, 0x24478c4f53556ad2 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1192 # sub immediate from rs1 to counter offset
sd x27, 1192 (x8) # store value to put something in memory
lwu x10, 1192(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x14, 0x52ec0ef10c6561de # initialize rs2
la x9, scratch # base address 
addi x9, x9, 5 # sub immediate from rs1 to counter offset
sd x14, -5 (x9) # store value to put something in memory
lwu x31, -5(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x17, 0xd3f37f36fe660023 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 651 # sub immediate from rs1 to counter offset
sd x17, -651 (x10) # store value to put something in memory
lwu x20, -651(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x9, 0x36a15c907503ccef # initialize rs2
la x11, scratch # base address 
addi x11, x11, -492 # sub immediate from rs1 to counter offset
sd x9, 492 (x11) # store value to put something in memory
lwu x15, 492(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x19, 0xbeef4eca8a797b1c # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1442 # sub immediate from rs1 to counter offset
sd x19, 1442 (x12) # store value to put something in memory
lwu x6, 1442(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x23, 0x14efd666775bda1a # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1832 # sub immediate from rs1 to counter offset
sd x23, 1832 (x13) # store value to put something in memory
lwu x29, 1832(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x21, 0x1489aadf48a20836 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1540 # sub immediate from rs1 to counter offset
sd x21, 1540 (x14) # store value to put something in memory
lwu x5, 1540(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x3, 0x68b17f2a76d652c5 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1593 # sub immediate from rs1 to counter offset
sd x3, -1593 (x15) # store value to put something in memory
lwu x31, -1593(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x23, 0xa65f9dec729103d2 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1241 # sub immediate from rs1 to counter offset
sd x23, 1241 (x16) # store value to put something in memory
lwu x1, 1241(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x27, 0xc44562bac88a109a # initialize rs2
la x17, scratch # base address 
addi x17, x17, -715 # sub immediate from rs1 to counter offset
sd x27, 715 (x17) # store value to put something in memory
lwu x24, 715(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x1, 0xd4ebf9b2c6397abb # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1262 # sub immediate from rs1 to counter offset
sd x1, -1262 (x18) # store value to put something in memory
lwu x14, -1262(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x13, 0x45ce5208f4580dd1 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -290 # sub immediate from rs1 to counter offset
sd x13, 290 (x19) # store value to put something in memory
lwu x18, 290(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x24, 0xd936c621764eca8b # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1155 # sub immediate from rs1 to counter offset
sd x24, 1155 (x20) # store value to put something in memory
lwu x31, 1155(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x15, 0x4661a60c47df392a # initialize rs2
la x21, scratch # base address 
addi x21, x21, -808 # sub immediate from rs1 to counter offset
sd x15, 808 (x21) # store value to put something in memory
lwu x10, 808(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x20, 0xe3f385885c479428 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1330 # sub immediate from rs1 to counter offset
sd x20, -1330 (x22) # store value to put something in memory
lwu x14, -1330(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x15, 0x7e8ac809505d5ea3 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1707 # sub immediate from rs1 to counter offset
sd x15, 1707 (x23) # store value to put something in memory
lwu x13, 1707(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x2, 0x319f7271edc22e68 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1273 # sub immediate from rs1 to counter offset
sd x2, -1273 (x24) # store value to put something in memory
lwu x12, -1273(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x11, 0xb013639724177fe1 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 351 # sub immediate from rs1 to counter offset
sd x11, -351 (x25) # store value to put something in memory
lwu x9, -351(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x11, 0x8e684dbc39442a50 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1019 # sub immediate from rs1 to counter offset
sd x11, 1019 (x26) # store value to put something in memory
lwu x27, 1019(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x31, 0x0fa4c55760bc41a4 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1660 # sub immediate from rs1 to counter offset
sd x31, 1660 (x27) # store value to put something in memory
lwu x29, 1660(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x6, 0xdc65f90fccdd0c61 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 965 # sub immediate from rs1 to counter offset
sd x6, -965 (x28) # store value to put something in memory
lwu x23, -965(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x20, 0x2e8179f09e0a6367 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -522 # sub immediate from rs1 to counter offset
sd x20, 522 (x29) # store value to put something in memory
lwu x1, 522(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x16, 0xd0508248e7343421 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1620 # sub immediate from rs1 to counter offset
sd x16, -1620 (x30) # store value to put something in memory
lwu x25, -1620(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x1, 0xa35978d9d9af4da2 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1648 # sub immediate from rs1 to counter offset
sd x1, -1648 (x31) # store value to put something in memory
lwu x24, -1648(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 240)

# Testcase cp_rd (Test destination rd = x0)
li x27, 0x96e0ca7770d25973 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1354 # sub immediate from rs1 to counter offset
sd x27, 1354 (x6) # store value to put something in memory
lwu x0, 1354(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x9, 0x46241493c45721fe # initialize rs2
la x5, scratch # base address 
addi x5, x5, 35 # sub immediate from rs1 to counter offset
sd x9, -35 (x5) # store value to put something in memory
lwu x1, -35(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x13, 0xe7837f56f1dc3452 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -498 # sub immediate from rs1 to counter offset
sd x13, 498 (x7) # store value to put something in memory
lwu x2, 498(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x8, 0x2fd3e89915312243 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1342 # sub immediate from rs1 to counter offset
sd x8, -1342 (x3) # store value to put something in memory
lwu x3, -1342(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0xa71a963cf528363a # initialize rs2
la x28, scratch # base address 
addi x28, x28, -913 # sub immediate from rs1 to counter offset
sd x25, 913 (x28) # store value to put something in memory
lwu x4, 913(x28) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0xa0dcfafe6d690c97 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1027 # sub immediate from rs1 to counter offset
sd x23, 1027 (x21) # store value to put something in memory
lwu x5, 1027(x21) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x20, 0x948353f8ba3bf786 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1018 # sub immediate from rs1 to counter offset
sd x20, -1018 (x16) # store value to put something in memory
lwu x6, -1018(x16) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0x6610b034e15056c0 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1271 # sub immediate from rs1 to counter offset
sd x19, -1271 (x13) # store value to put something in memory
lwu x7, -1271(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x8, 0xc82e0cd6b1672207 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -544 # sub immediate from rs1 to counter offset
sd x8, 544 (x16) # store value to put something in memory
lwu x8, 544(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x8, 0xe7f7525e29318938 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1585 # sub immediate from rs1 to counter offset
sd x8, 1585 (x6) # store value to put something in memory
lwu x9, 1585(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x7, 0x7f6fa87bf7f6b17d # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1891 # sub immediate from rs1 to counter offset
sd x7, -1891 (x9) # store value to put something in memory
lwu x10, -1891(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x24, 0xc79aac8852d90590 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -216 # sub immediate from rs1 to counter offset
sd x24, 216 (x9) # store value to put something in memory
lwu x11, 216(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x10, 0x74bb39839a58230e # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1547 # sub immediate from rs1 to counter offset
sd x10, 1547 (x20) # store value to put something in memory
lwu x12, 1547(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x30, 0x2ce97be22133a75d # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1464 # sub immediate from rs1 to counter offset
sd x30, -1464 (x29) # store value to put something in memory
lwu x13, -1464(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x20, 0x608ff7c0b8075066 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -655 # sub immediate from rs1 to counter offset
sd x20, 655 (x26) # store value to put something in memory
lwu x14, 655(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x15, 0x3305451f0534bf18 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1619 # sub immediate from rs1 to counter offset
sd x15, -1619 (x2) # store value to put something in memory
lwu x15, -1619(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x29, 0xb6626232434b2bf9 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1587 # sub immediate from rs1 to counter offset
sd x29, -1587 (x6) # store value to put something in memory
lwu x16, -1587(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x13, 0x162203271b33be29 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -268 # sub immediate from rs1 to counter offset
sd x13, 268 (x1) # store value to put something in memory
lwu x17, 268(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x11, 0xf6eb35607cb2a036 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1244 # sub immediate from rs1 to counter offset
sd x11, -1244 (x28) # store value to put something in memory
lwu x18, -1244(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x14, 0xe287f3a7d3fc428e # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1292 # sub immediate from rs1 to counter offset
sd x14, 1292 (x15) # store value to put something in memory
lwu x19, 1292(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x14, 0x670067624ac78eb4 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1254 # sub immediate from rs1 to counter offset
sd x14, 1254 (x26) # store value to put something in memory
lwu x20, 1254(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x20, 0x20f26a053d4928ce # initialize rs2
la x5, scratch # base address 
addi x5, x5, -343 # sub immediate from rs1 to counter offset
sd x20, 343 (x5) # store value to put something in memory
lwu x21, 343(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x6, 0x46dabea9064d3fb4 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1357 # sub immediate from rs1 to counter offset
sd x6, -1357 (x24) # store value to put something in memory
lwu x22, -1357(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x6, 0xdbcde5dff8817f94 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1600 # sub immediate from rs1 to counter offset
sd x6, 1600 (x23) # store value to put something in memory
lwu x23, 1600(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0x0e5c0df13ba4ff1b # initialize rs2
la x25, scratch # base address 
addi x25, x25, -724 # sub immediate from rs1 to counter offset
sd x14, 724 (x25) # store value to put something in memory
lwu x24, 724(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x19, 0x00a69272a2311a9e # initialize rs2
la x11, scratch # base address 
addi x11, x11, -622 # sub immediate from rs1 to counter offset
sd x19, 622 (x11) # store value to put something in memory
lwu x25, 622(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x2, 0x8d6022aad20e4dde # initialize rs2
la x5, scratch # base address 
addi x5, x5, 2033 # sub immediate from rs1 to counter offset
sd x2, -2033 (x5) # store value to put something in memory
lwu x26, -2033(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x27, 0x587b9737770dc3ce # initialize rs2
la x9, scratch # base address 
addi x9, x9, -853 # sub immediate from rs1 to counter offset
sd x27, 853 (x9) # store value to put something in memory
lwu x27, 853(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x18, 0x7072c5985ef5836e # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1313 # sub immediate from rs1 to counter offset
sd x18, -1313 (x1) # store value to put something in memory
lwu x28, -1313(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x7, 0x4423ca6ff30d162c # initialize rs2
la x27, scratch # base address 
addi x27, x27, 209 # sub immediate from rs1 to counter offset
sd x7, -209 (x27) # store value to put something in memory
lwu x29, -209(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x20, 0xde206639ff641f4e # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1103 # sub immediate from rs1 to counter offset
sd x20, 1103 (x10) # store value to put something in memory
lwu x30, 1103(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x24, 0x167d69019677bb9b # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1739 # sub immediate from rs1 to counter offset
sd x24, -1739 (x26) # store value to put something in memory
lwu x31, -1739(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x25, 0x4ed8afcb825415c0 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 861 # sub immediate from rs1 to counter offset
sd x25, -861 (x1) # store value to put something in memory
lwu x1, -861(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x28, 0x0f129f71fef79d22 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -2030 # sub immediate from rs1 to counter offset
sd x28, 2030 (x2) # store value to put something in memory
lwu x2, 2030(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x28, 0x8d5a563d5e6450ea # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1417 # sub immediate from rs1 to counter offset
sd x28, -1417 (x3) # store value to put something in memory
lwu x3, -1417(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x21, 0x02bb6a2dd53ebc5b # initialize rs2
la x4, scratch # base address 
addi x4, x4, 101 # sub immediate from rs1 to counter offset
sd x21, -101 (x4) # store value to put something in memory
lwu x4, -101(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0x1d5ba645ff243553 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -831 # sub immediate from rs1 to counter offset
sd x14, 831 (x5) # store value to put something in memory
lwu x5, 831(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x16, 0x56946d33e55d5995 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 956 # sub immediate from rs1 to counter offset
sd x16, -956 (x6) # store value to put something in memory
lwu x6, -956(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0xa4c9688f0815eced # initialize rs2
la x7, scratch # base address 
addi x7, x7, -244 # sub immediate from rs1 to counter offset
sd x4, 244 (x7) # store value to put something in memory
lwu x7, 244(x7) # perform operation
RVTEST_SIGUPD(x5, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x4, 0xd4d043ae80fd72b5 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1930 # sub immediate from rs1 to counter offset
sd x4, -1930 (x8) # store value to put something in memory
lwu x8, -1930(x8) # perform operation
RVTEST_SIGUPD(x5, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x19, 0xd53e6eca1c5f9e4c # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1295 # sub immediate from rs1 to counter offset
sd x19, 1295 (x9) # store value to put something in memory
lwu x9, 1295(x9) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x18, 0xa09c7a972caa467b # initialize rs2
la x10, scratch # base address 
addi x10, x10, 303 # sub immediate from rs1 to counter offset
sd x18, -303 (x10) # store value to put something in memory
lwu x10, -303(x10) # perform operation
RVTEST_SIGUPD(x5, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x21, 0xc4f3cb2ed40ba930 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 689 # sub immediate from rs1 to counter offset
sd x21, -689 (x11) # store value to put something in memory
lwu x11, -689(x11) # perform operation
RVTEST_SIGUPD(x5, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x25, 0x35f7ec5f04b7da3c # initialize rs2
la x12, scratch # base address 
addi x12, x12, 88 # sub immediate from rs1 to counter offset
sd x25, -88 (x12) # store value to put something in memory
lwu x12, -88(x12) # perform operation
RVTEST_SIGUPD(x5, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x21, 0xd5604d31f2bc76b7 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 404 # sub immediate from rs1 to counter offset
sd x21, -404 (x13) # store value to put something in memory
lwu x13, -404(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x25, 0x6692d9d02a5c5f5e # initialize rs2
la x14, scratch # base address 
addi x14, x14, 902 # sub immediate from rs1 to counter offset
sd x25, -902 (x14) # store value to put something in memory
lwu x14, -902(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x30, 0xaf2f642ec778b3be # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1335 # sub immediate from rs1 to counter offset
sd x30, 1335 (x15) # store value to put something in memory
lwu x15, 1335(x15) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x22, 0xa2b77d54fc82f185 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -297 # sub immediate from rs1 to counter offset
sd x22, 297 (x16) # store value to put something in memory
lwu x16, 297(x16) # perform operation
RVTEST_SIGUPD(x5, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x8, 0x830f46425c639457 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1800 # sub immediate from rs1 to counter offset
sd x8, 1800 (x17) # store value to put something in memory
lwu x17, 1800(x17) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x9, 0x410b8528b7d4eb9f # initialize rs2
la x18, scratch # base address 
addi x18, x18, 730 # sub immediate from rs1 to counter offset
sd x9, -730 (x18) # store value to put something in memory
lwu x18, -730(x18) # perform operation
RVTEST_SIGUPD(x5, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x13, 0x74aa24fbcbf33b76 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -176 # sub immediate from rs1 to counter offset
sd x13, 176 (x19) # store value to put something in memory
lwu x19, 176(x19) # perform operation
RVTEST_SIGUPD(x5, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x3, 0x7d7eaf56bced7ea2 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 432 # sub immediate from rs1 to counter offset
sd x3, -432 (x20) # store value to put something in memory
lwu x20, -432(x20) # perform operation
RVTEST_SIGUPD(x5, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x22, 0x9e9083dfaffe72c4 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 692 # sub immediate from rs1 to counter offset
sd x22, -692 (x21) # store value to put something in memory
lwu x21, -692(x21) # perform operation
RVTEST_SIGUPD(x5, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x24, 0x17f09391b754b2af # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1142 # sub immediate from rs1 to counter offset
sd x24, 1142 (x22) # store value to put something in memory
lwu x22, 1142(x22) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x26, 0x5d27d519cc962955 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1894 # sub immediate from rs1 to counter offset
sd x26, -1894 (x23) # store value to put something in memory
lwu x23, -1894(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x6, 0xe047c1788f203766 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 477 # sub immediate from rs1 to counter offset
sd x6, -477 (x24) # store value to put something in memory
lwu x24, -477(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x23, 0x9471f1ba32072995 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -684 # sub immediate from rs1 to counter offset
sd x23, 684 (x25) # store value to put something in memory
lwu x25, 684(x25) # perform operation
RVTEST_SIGUPD(x5, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x20, 0x3e27cdf584edda77 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 615 # sub immediate from rs1 to counter offset
sd x20, -615 (x26) # store value to put something in memory
lwu x26, -615(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x15, 0x50d9fa4e36980020 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1205 # sub immediate from rs1 to counter offset
sd x15, 1205 (x27) # store value to put something in memory
lwu x27, 1205(x27) # perform operation
RVTEST_SIGUPD(x5, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x10, 0xbbe72137af665235 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1184 # sub immediate from rs1 to counter offset
sd x10, 1184 (x28) # store value to put something in memory
lwu x28, 1184(x28) # perform operation
RVTEST_SIGUPD(x5, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x9, 0x237c06f49ddb6c07 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1499 # sub immediate from rs1 to counter offset
sd x9, 1499 (x29) # store value to put something in memory
lwu x29, 1499(x29) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x10, 0x87edf4f606a41f3a # initialize rs2
la x30, scratch # base address 
addi x30, x30, 833 # sub immediate from rs1 to counter offset
sd x10, -833 (x30) # store value to put something in memory
lwu x30, -833(x30) # perform operation
RVTEST_SIGUPD(x5, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x25, 0xc6bb25cb1e49c434 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1292 # sub immediate from rs1 to counter offset
sd x25, 1292 (x31) # store value to put something in memory
lwu x31, 1292(x31) # perform operation
RVTEST_SIGUPD(x5, x0, x31, 744)

# Testcase cp_imm_corners
li x11, 0x5272fee184a1b977 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 0 # sub immediate from rs1 to counter offset
sd x11, 0 (x25) # store value to put something in memory
lwu x22, 0(x25) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 752)

# Testcase cp_imm_corners
li x9, 0x045f56f87cffb2f4 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1 # sub immediate from rs1 to counter offset
sd x9, 1 (x31) # store value to put something in memory
lwu x8, 1(x31) # perform operation
RVTEST_SIGUPD(x5, x0, x8, 760)

# Testcase cp_imm_corners
li x22, 0x7b7b08aa9a54edcf # initialize rs2
la x1, scratch # base address 
addi x1, x1, -2 # sub immediate from rs1 to counter offset
sd x22, 2 (x1) # store value to put something in memory
lwu x12, 2(x1) # perform operation
RVTEST_SIGUPD(x5, x0, x12, 768)

# Testcase cp_imm_corners
li x12, 0x5d7885c43695f399 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -3 # sub immediate from rs1 to counter offset
sd x12, 3 (x26) # store value to put something in memory
lwu x3, 3(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x3, 776)

# Testcase cp_imm_corners
li x3, 0xf10be832f82ab1cb # initialize rs2
la x20, scratch # base address 
addi x20, x20, -4 # sub immediate from rs1 to counter offset
sd x3, 4 (x20) # store value to put something in memory
lwu x9, 4(x20) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 784)

# Testcase cp_imm_corners
li x28, 0xa848ab18326f9b1f # initialize rs2
la x26, scratch # base address 
addi x26, x26, -8 # sub immediate from rs1 to counter offset
sd x28, 8 (x26) # store value to put something in memory
lwu x31, 8(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x31, 792)

# Testcase cp_imm_corners
li x2, 0x99ec4ab95c581211 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -16 # sub immediate from rs1 to counter offset
sd x2, 16 (x26) # store value to put something in memory
lwu x25, 16(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x25, 800)

# Testcase cp_imm_corners
li x22, 0x920f643efef4472f # initialize rs2
la x24, scratch # base address 
addi x24, x24, -32 # sub immediate from rs1 to counter offset
sd x22, 32 (x24) # store value to put something in memory
lwu x11, 32(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x11, 808)

# Testcase cp_imm_corners
li x9, 0xac9380c7151d9afe # initialize rs2
la x6, scratch # base address 
addi x6, x6, -64 # sub immediate from rs1 to counter offset
sd x9, 64 (x6) # store value to put something in memory
lwu x26, 64(x6) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 816)

# Testcase cp_imm_corners
li x26, 0x8969293420a15d4c # initialize rs2
la x24, scratch # base address 
addi x24, x24, -128 # sub immediate from rs1 to counter offset
sd x26, 128 (x24) # store value to put something in memory
lwu x12, 128(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x12, 824)

# Testcase cp_imm_corners
li x13, 0xe952d4511323dc63 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -256 # sub immediate from rs1 to counter offset
sd x13, 256 (x9) # store value to put something in memory
lwu x1, 256(x9) # perform operation
RVTEST_SIGUPD(x5, x0, x1, 832)

# Testcase cp_imm_corners
li x26, 0x71820e0691ad8921 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -512 # sub immediate from rs1 to counter offset
sd x26, 512 (x6) # store value to put something in memory
lwu x17, 512(x6) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 840)

# Testcase cp_imm_corners
li x4, 0x61854a33c6479919 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1023 # sub immediate from rs1 to counter offset
sd x4, 1023 (x6) # store value to put something in memory
lwu x29, 1023(x6) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 848)

# Testcase cp_imm_corners
li x24, 0x197e776f8cd7ff96 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1024 # sub immediate from rs1 to counter offset
sd x24, 1024 (x27) # store value to put something in memory
lwu x14, 1024(x27) # perform operation
RVTEST_SIGUPD(x5, x0, x14, 856)

# Testcase cp_imm_corners
li x2, 0x4657ee6ba1963e3e # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1795 # sub immediate from rs1 to counter offset
sd x2, 1795 (x4) # store value to put something in memory
lwu x17, 1795(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 864)

# Testcase cp_imm_corners
li x17, 0xa8ad1f92150bd2bf # initialize rs2
la x11, scratch # base address 
addi x11, x11, -2047 # sub immediate from rs1 to counter offset
sd x17, 2047 (x11) # store value to put something in memory
lwu x14, 2047(x11) # perform operation
RVTEST_SIGUPD(x5, x0, x14, 872)

# Testcase cp_imm_corners
li x14, 0xb7e69738966634ed # initialize rs2
la x24, scratch # base address 
addi x24, x24, 2047 # increment rs1 by 2047 
addi x24, x24, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x14, -2048 (x24) # store value to put something in memory
lwu x18, -2048(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x18, 880)

# Testcase cp_imm_corners
li x29, 0x08c6b63eb7943d2e # initialize rs2
la x13, scratch # base address 
addi x13, x13, 2047 # sub immediate from rs1 to counter offset
sd x29, -2047 (x13) # store value to put something in memory
lwu x26, -2047(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 888)

# Testcase cp_imm_corners
li x31, 0xe1f48b775346bed9 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 2 # sub immediate from rs1 to counter offset
sd x31, -2 (x18) # store value to put something in memory
lwu x9, -2(x18) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 896)

# Testcase cp_imm_corners
li x30, 0xa74af07bcb369ff9 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1 # sub immediate from rs1 to counter offset
sd x30, -1 (x26) # store value to put something in memory
lwu x6, -1(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x6, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x17, scratch
addi x17, x17, -476
add x1, x16, x28 # perform first operation
lwu x18, 476(x17) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x24, scratch
addi x24, x24, -1461
add x2, x31, x11 # perform first operation
lwu x8, 1461(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x10, scratch
addi x10, x10, -1454
add x16, x13, x11 # perform first operation
lwu x30, 1454(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x27, scratch
addi x27, x27, -70
add x27, x27, x0 # perform first operation
lwu x15, 70(x27) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x21, scratch
addi x21, x21, 1000
add x21, x21, x0 # perform first operation
lwu x7, -1000(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x14, scratch
addi x14, x14, 1748
add x14, x14, x0 # perform first operation
lwu x6, -1748(x14) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x22, scratch
addi x22, x22, 2032
add x10, x6, x7 # perform first operation
lwu x10, -2032(x22) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x24, scratch
addi x24, x24, -393
add x20, x3, x21 # perform first operation
lwu x20, 393(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x20, scratch
addi x20, x20, -458
add x23, x24, x9 # perform first operation
lwu x23, 458(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x25, scratch
addi x25, x25, 1274
add x8, x14, x28 # perform first operation
lwu x14, -1274(x25) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x23, scratch
addi x23, x23, 1240
add x10, x18, x14 # perform first operation
lwu x14, -1240(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x27, scratch
addi x27, x27, -2037
add x18, x23, x8 # perform first operation
lwu x9, 2037(x27) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-sltu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xab31e68360fa8cfc # initialize rs1
li x22, 0xd1fe3dc67979f708 # initialize rs2
sltu x9, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xb52812201c06fac7 # initialize rs1
li x29, 0x627f2a68cfd9c30f # initialize rs2
sltu x27, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xfd4f54ace01311f2 # initialize rs1
li x21, 0x9fc9760440268614 # initialize rs2
sltu x16, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x7d46ad05799543c1 # initialize rs1
li x23, 0xc536e9f760b311a5 # initialize rs2
sltu x21, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4c88457fd51a0b4e # initialize rs1
li x9, 0x6aea8413a1e0ac99 # initialize rs2
sltu x15, x4, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe14566e2de151ab8 # initialize rs1
li x13, 0xee7fffe5f379294b # initialize rs2
sltu x22, x5, x13 # perform operation
RVTEST_SIGUPD(x6, x0, x22, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x34f6be9bccc2ecd0 # initialize rs1
li x27, 0xafb87e4ac36ab031 # initialize rs2
sltu x15, x6, x27 # perform operation
RVTEST_SIGUPD(x7, x0, x15, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x3a89c9a8d0ec5171 # initialize rs1
li x11, 0x79ba110e83357a27 # initialize rs2
sltu x22, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xe5745bf590719066 # initialize rs1
li x2, 0x159cbfa03c691560 # initialize rs2
sltu x18, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xaca26578dfc328c6 # initialize rs1
li x30, 0x35ac2b691b1daea5 # initialize rs2
sltu x27, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x0f40d55da13aa46c # initialize rs1
li x13, 0xa5ad807ac4ccc099 # initialize rs2
sltu x25, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x0e5a6c3233474463 # initialize rs1
li x14, 0xd42d03a1fa72fd11 # initialize rs2
sltu x31, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x4ba77e37c9a579a8 # initialize rs1
li x27, 0xb3397f52951f828d # initialize rs2
sltu x5, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x5dd0fd7d9e856cc3 # initialize rs1
li x20, 0xe83969d562491eeb # initialize rs2
sltu x1, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xb3135b5efbb99f8d # initialize rs1
li x10, 0xcb19c6c97440a9e2 # initialize rs2
sltu x29, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xba5099f9dfeaeca1 # initialize rs1
li x26, 0x49ea1002931b4602 # initialize rs2
sltu x29, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x5b579c4371775b58 # initialize rs1
li x9, 0x61c1223483183882 # initialize rs2
sltu x3, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x6351da1bfcc6a167 # initialize rs1
li x25, 0xacc0d9e5a0e94dc7 # initialize rs2
sltu x7, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x009d14c3062b0644 # initialize rs1
li x14, 0x6e8bc7dc57d19523 # initialize rs2
sltu x13, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xea741ed9649ce6dc # initialize rs1
li x8, 0x4805c352018c9f52 # initialize rs2
sltu x9, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x78583e9dcbf780f7 # initialize rs1
li x25, 0xa4f0fbd56ce7d264 # initialize rs2
sltu x24, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xb2c54933ce0c6883 # initialize rs1
li x9, 0x24f8aabfceb72614 # initialize rs2
sltu x2, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xa7398d2ccb929d3a # initialize rs1
li x20, 0xe6eb2a9a07a104d4 # initialize rs2
sltu x5, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xf656b11931cd27fb # initialize rs1
li x5, 0x5cd792689ced223f # initialize rs2
sltu x20, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x06937951443f2b26 # initialize rs1
li x21, 0x0cfbc38634597fc8 # initialize rs2
sltu x16, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xd94d37a2f8348ef5 # initialize rs1
li x16, 0x114fc61132852528 # initialize rs2
sltu x7, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xf2bde61a59649838 # initialize rs1
li x17, 0xbd91bbef443684b0 # initialize rs2
sltu x28, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x907d4b34d3ddc332 # initialize rs1
li x16, 0x32b61d1fcf92291c # initialize rs2
sltu x24, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xdc06b1d970fb690a # initialize rs1
li x31, 0xda56bf0ee3c8fa7b # initialize rs2
sltu x13, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x7647187b1cee6204 # initialize rs1
li x27, 0x9917d24abad3a42c # initialize rs2
sltu x11, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x1609d986a1d6c306 # initialize rs1
li x23, 0x796332cd39fd9fa0 # initialize rs2
sltu x28, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xbf317a2bcc3b4732 # initialize rs1
li x25, 0x685f3b622884df74 # initialize rs2
sltu x16, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x26, 0x367f844ec1fc3c36 # initialize rs1
li x0, 0x81effa217e310aa1 # initialize rs2
sltu x1, x26, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x24, 0xed86305eddddb762 # initialize rs1
li x1, 0x255d2e3c068a5c46 # initialize rs2
sltu x5, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x9, 0x6f74dc6331c5fd9b # initialize rs1
li x2, 0x8dbcd5a8659d7af2 # initialize rs2
sltu x22, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x15, 0xc498ef67a7c055ad # initialize rs1
li x3, 0x2dde7569a91d6451 # initialize rs2
sltu x22, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x30, 0x7a2f3b2ef32d3e3d # initialize rs1
li x4, 0xcdad6d7265b23b01 # initialize rs2
sltu x12, x30, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0x51fe91cc7e88b494 # initialize rs1
li x5, 0x19ac6fd7fd4f9d20 # initialize rs2
sltu x10, x4, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0xf2d5cd21fa6fc867 # initialize rs1
li x6, 0x1439744e63184cdc # initialize rs2
sltu x28, x10, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x28, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0x75472c1291794d88 # initialize rs1
li x7, 0xd2dd6825c7d00e58 # initialize rs2
sltu x23, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x3, 0xf11e3df3a732cfe6 # initialize rs1
li x8, 0x940c7393d158a49b # initialize rs2
sltu x1, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x30, 0xfc0ee000cf26eb13 # initialize rs1
li x9, 0x2aef4d82df9a0bc3 # initialize rs2
sltu x13, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x15, 0x94b630db91e5905d # initialize rs1
li x10, 0x3eaeae45aed864e9 # initialize rs2
sltu x31, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x15, 0x82aad0792dbcbb1d # initialize rs1
li x11, 0xb8a1605812b29984 # initialize rs2
sltu x9, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x16, 0xb8a4f5446e94966f # initialize rs1
li x12, 0x6a1849c57f4f1df0 # initialize rs2
sltu x21, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x24, 0x1dda2d5ab2c1ceea # initialize rs1
li x13, 0x99ecf2080c4a1a77 # initialize rs2
sltu x30, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x26, 0xb34d3f453f29e804 # initialize rs1
li x14, 0xf0d3edf52e297490 # initialize rs2
sltu x15, x26, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x23, 0xae05ed05d980b984 # initialize rs1
li x15, 0xe5c1639b4ed64346 # initialize rs2
sltu x11, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x15, 0x9195cb7d4ed64f85 # initialize rs1
li x16, 0x9053154c31c9e2e4 # initialize rs2
sltu x31, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0x6f9e69cc2b0004ed # initialize rs1
li x17, 0x54359a82f9782133 # initialize rs2
sltu x16, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x7, 0x1ae5475b5708c6fa # initialize rs1
li x18, 0x0ca84bab3e6ff18f # initialize rs2
sltu x21, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x14, 0x5404625f806cd6ac # initialize rs1
li x19, 0x2864cd24ac1adaf0 # initialize rs2
sltu x2, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x5, 0x97a9322237646ae5 # initialize rs1
li x20, 0xe9f67a6d3a71df32 # initialize rs2
sltu x8, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x5, 0x5568fcee587b9fe4 # initialize rs1
li x21, 0x64580790b687d05d # initialize rs2
sltu x16, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x11, 0x3d5f5ab3afb3aa44 # initialize rs1
li x22, 0x1c916b062e22de59 # initialize rs2
sltu x27, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x9, 0x9cc64f35c8697259 # initialize rs1
li x23, 0x53270d6421d94049 # initialize rs2
sltu x30, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x16, 0x657d9ef1e5f48220 # initialize rs1
li x24, 0xb087da5f0d190545 # initialize rs2
sltu x21, x16, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x8, 0x69ea05bb91c95079 # initialize rs1
li x25, 0x27d8a11bdeff7883 # initialize rs2
sltu x16, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x16, 0x7b0dbcf535c71150 # initialize rs1
li x26, 0xad91b745a802487c # initialize rs2
sltu x20, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x20, 0xf07315e05007fda6 # initialize rs1
li x27, 0x58080c36e2a7b721 # initialize rs2
sltu x2, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x7, 0xd4dc2e39c129473b # initialize rs1
li x28, 0xec244d6bf2a14d89 # initialize rs2
sltu x31, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x27, 0xd485cac5e9eb65d9 # initialize rs1
li x29, 0x9ce16badb795e1fe # initialize rs2
sltu x1, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x6, 0x868351c1bb47abde # initialize rs1
li x30, 0x4be5d6c4ac269a2c # initialize rs2
sltu x11, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x21, 0x0d59ddc3051aa964 # initialize rs1
li x31, 0x3840ec60ae747903 # initialize rs2
sltu x19, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 504)

# Testcase cp_rd (Test destination rd = x0)
li x30, 0x8fb265be7395e0b5 # initialize rs1
li x31, 0xef68463076b326b0 # initialize rs2
sltu x0, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x30, 0x3e08c5b5429e20e0 # initialize rs1
li x19, 0x521a4f8f13a4be3b # initialize rs2
sltu x1, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x11, 0x0330bae4858a8b46 # initialize rs1
li x9, 0xa5054d0d23c0f2ed # initialize rs2
sltu x2, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x23, 0x4729c31fe8c9e3fc # initialize rs1
li x16, 0x296ded18bd8a8b27 # initialize rs2
sltu x3, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0x343f8369e34361da # initialize rs1
li x6, 0x3b8d0b62ff6a0142 # initialize rs2
sltu x4, x18, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0x96f9e9b311829edd # initialize rs1
li x17, 0xe96c76400d10dd97 # initialize rs2
sltu x5, x28, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x7, 0x8deeafb7f9e2ef83 # initialize rs1
li x15, 0x27913e2a89bbb1f6 # initialize rs2
sltu x6, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
li x15, 0xb4edc2deeba8a845 # initialize rs1
li x6, 0xe9e6fd7203bba3ac # initialize rs2
sltu x7, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x3, 0xfcf18bd365722cc6 # initialize rs1
li x2, 0x1eeb2527d9dd9fd7 # initialize rs2
sltu x8, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x13, 0xb8c0a376ae24da92 # initialize rs1
li x3, 0x0026bee76914b3e9 # initialize rs2
sltu x9, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x6, 0xbbbeb2e12f510ebc # initialize rs1
li x28, 0xadb84c2df606b639 # initialize rs2
sltu x10, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x9, 0x2fa907d5f54c23ab # initialize rs1
li x7, 0x6a797c88898daddb # initialize rs2
sltu x11, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x29, 0xbf70c06c80663625 # initialize rs1
li x18, 0xaf1c44de7a79d40b # initialize rs2
sltu x12, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x10, 0xbfbcde93ac23911b # initialize rs1
li x11, 0x1ad57c91ef359fbb # initialize rs2
sltu x13, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x28, 0xac9666bbbeeac1f7 # initialize rs1
li x10, 0xf9defb20f113b70f # initialize rs2
sltu x14, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x11, 0xe0c4609a412d235d # initialize rs1
li x7, 0x94e082cd9c1ef154 # initialize rs2
sltu x15, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x12, 0x5d0d4a2d6234d76e # initialize rs1
li x7, 0x4634e887424af8b4 # initialize rs2
sltu x16, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x22, 0xe1459ea940f09cd0 # initialize rs1
li x14, 0x85f84f0004245f67 # initialize rs2
sltu x17, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x25, 0xbac532784912440b # initialize rs1
li x18, 0x9af724a87caf5380 # initialize rs2
sltu x18, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x23, 0x42b3485fb75cf77a # initialize rs1
li x21, 0x4c9554f3dc3eac39 # initialize rs2
sltu x19, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x13, 0x903d3e9f42051d49 # initialize rs1
li x31, 0xeb1c224450122d26 # initialize rs2
sltu x20, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x7, 0xe37873f768f9ddc6 # initialize rs1
li x25, 0x22292a4ad72b4503 # initialize rs2
sltu x21, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x14, 0x34617985081014c7 # initialize rs1
li x7, 0x62a4676246ebd8f2 # initialize rs2
sltu x22, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x10, 0xfad7fc3b2d5c980b # initialize rs1
li x7, 0x0b7debedfd04e1d5 # initialize rs2
sltu x23, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x15, 0x2cbed45e45670c54 # initialize rs1
li x26, 0xf7ba7f7d62c06a40 # initialize rs2
sltu x24, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x12, 0x0b3a11749a0229d6 # initialize rs1
li x30, 0x6c49ad6719b958dd # initialize rs2
sltu x25, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x18, 0x05e73040af97194d # initialize rs1
li x30, 0xd7189133a948926d # initialize rs2
sltu x26, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x25, 0xee860af41cda3064 # initialize rs1
li x9, 0x877041dceffeb2c6 # initialize rs2
sltu x27, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x8, 0x7b4392c475feb298 # initialize rs1
li x25, 0x7d8015c75c177b50 # initialize rs2
sltu x28, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x18, 0xbe9bbbbac408b2bb # initialize rs1
li x8, 0x340591e42fa1ff1a # initialize rs2
sltu x29, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x13, 0x30f787a2dc4fa1ac # initialize rs1
li x23, 0xf56f793198335c8c # initialize rs2
sltu x30, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x30, 0x80567d99f1737a65 # initialize rs1
li x15, 0xcc9c58891dd9bc76 # initialize rs2
sltu x31, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x1, 0x0000000000000000 # initialize rs1
li x27, 0xe667d0c95a1529fa # initialize rs2
sltu x22, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x21, 0x0000000000000001 # initialize rs1
li x19, 0x4df9a977ed280dfc # initialize rs2
sltu x9, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x30, 0x0000000000000002 # initialize rs1
li x16, 0xebd266b5050bd5fe # initialize rs2
sltu x19, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x24, 0x8000000000000000 # initialize rs1
li x2, 0x2b15c861c70dacea # initialize rs2
sltu x28, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x15, 0x8000000000000001 # initialize rs1
li x23, 0x605ab51dc7f5d523 # initialize rs2
sltu x21, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x28, 0x7fffffffffffffff # initialize rs1
li x25, 0x790e23ecf3404758 # initialize rs2
sltu x13, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x18, 0x7ffffffffffffffe # initialize rs1
li x5, 0x5afff76599592c2b # initialize rs2
sltu x25, x18, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x18, 0xffffffffffffffff # initialize rs1
li x7, 0xa4df569b7de20d04 # initialize rs2
sltu x13, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
li x12, 0x169178373f9ee7c6 # initialize rs2
sltu x17, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0xfc8c6350a1927287 # initialize rs2
sltu x11, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x00f23fd85f3887e7 # initialize rs2
sltu x20, x28, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x13, 0x5555555555555555 # initialize rs1
li x6, 0x55bf81f7ac9ac708 # initialize rs2
sltu x27, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x12, 0x00000000ffffffff # initialize rs1
li x5, 0xd73f902b02c39641 # initialize rs2
sltu x18, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x15, 0x00000000fffffffe # initialize rs1
li x3, 0x50e7479af74fd63c # initialize rs2
sltu x13, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x15, 0x0000000100000000 # initialize rs1
li x11, 0x938caca9ea79e155 # initialize rs2
sltu x21, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x2, 0x0000000100000001 # initialize rs1
li x28, 0x7954af0dd156a558 # initialize rs2
sltu x19, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x28, 0x6fd9120f19e5e023 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sltu x13, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x1, 0x354d4dd8bb670860 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sltu x24, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x3, 0x4c026a39b604d86b # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sltu x8, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x12, 0x34f36b5430bbdc98 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
sltu x18, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x28, 0x7c526a233ff730a0 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sltu x21, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x10, 0x3d8298254b096c3e # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
sltu x21, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x7, 0x2c93df9a9c0220ee # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
sltu x19, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x6, 0xd7a16029c615c95a # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
sltu x30, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x11, 0x97187c5fde1ed6de # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
sltu x1, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x28, 0xa98441a5cf29aa6d # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
sltu x19, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x1, 0x09a26ce3234c5673 # initialize rs1
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x8, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x6, 0xa231adc071034082 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
sltu x13, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x11, 0xf8c36fbbb5f5d29a # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
sltu x8, x11, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x31, 0x8c20dae2fed5c896 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
sltu x11, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x19, 0x04f134b053df7f3d # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sltu x25, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x28, 0x0644f08101f2f63a # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
sltu x17, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x25, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
sltu x15, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x19, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sltu x26, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x23, 0x0000000000000000 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
sltu x18, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x2, 0x0000000000000000 # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
sltu x8, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x6, 0x0000000000000000 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
sltu x9, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x16, 0x0000000000000000 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
sltu x21, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x16, 0x0000000000000000 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sltu x6, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x20, 0x0000000000000000 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
sltu x29, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x5, 0x0000000000000000 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
sltu x14, x5, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x3, 0x0000000000000000 # initialize rs1
li x13, 0x5bbc887763ae86f2 # initialize rs2
sltu x27, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x0000000000000000 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x18, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x6, 0x0000000000000000 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
sltu x15, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x8, 0x0000000000000000 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
sltu x27, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x7, 0x0000000000000000 # initialize rs1
li x3, 0x00000000fffffffe # initialize rs2
sltu x30, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x1, 0x0000000000000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
sltu x29, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x22, 0x0000000000000000 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
sltu x12, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x26, 0x0000000000000001 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
sltu x2, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x16, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
sltu x27, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x13, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
sltu x11, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x2, 0x0000000000000001 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sltu x11, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x20, 0x0000000000000001 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
sltu x2, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x27, 0x0000000000000001 # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
sltu x18, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x25, 0x0000000000000001 # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
sltu x24, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x5, 0x0000000000000001 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
sltu x1, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x2, 0x0000000000000001 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
sltu x26, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x23, 0x0000000000000001 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sltu x9, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x0000000000000001 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x3, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x16, 0x0000000000000001 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
sltu x22, x16, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x8, 0x0000000000000001 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
sltu x26, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x22, 0x0000000000000001 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sltu x7, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x23, 0x0000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
sltu x15, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x14, 0x0000000000000001 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
sltu x21, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x12, 0x0000000000000002 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
sltu x1, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x3, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
sltu x16, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x20, 0x0000000000000002 # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
sltu x8, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x10, 0x0000000000000002 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
sltu x21, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x13, 0x0000000000000002 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
sltu x15, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x9, 0x0000000000000002 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
sltu x3, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000002 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
sltu x16, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x15, 0x0000000000000002 # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
sltu x9, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x23, 0x0000000000000002 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
sltu x25, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x19, 0x0000000000000002 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
sltu x3, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x0000000000000002 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x16, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x21, 0x0000000000000002 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sltu x30, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x18, 0x0000000000000002 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
sltu x27, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x22, 0x0000000000000002 # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
sltu x28, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x30, 0x0000000000000002 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sltu x23, x30, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x11, 0x0000000000000002 # initialize rs1
li x8, 0x0000000100000001 # initialize rs2
sltu x12, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x20, 0x8000000000000000 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sltu x5, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x9, 0x8000000000000000 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
sltu x20, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x12, 0x8000000000000000 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
sltu x2, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x30, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
sltu x28, x30, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x13, 0x8000000000000000 # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
sltu x28, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x18, 0x8000000000000000 # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
sltu x9, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x11, 0x8000000000000000 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
sltu x27, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x10, 0x8000000000000000 # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
sltu x24, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x22, 0x8000000000000000 # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
sltu x17, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x25, 0x8000000000000000 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sltu x23, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x8000000000000000 # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x7, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x22, 0x8000000000000000 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
sltu x8, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x23, 0x8000000000000000 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sltu x2, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x23, 0x8000000000000000 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
sltu x18, x23, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x22, 0x8000000000000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
sltu x18, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x11, 0x8000000000000000 # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
sltu x2, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x27, 0x8000000000000001 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
sltu x9, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x8, 0x8000000000000001 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
sltu x17, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x26, 0x8000000000000001 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sltu x14, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x15, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
sltu x26, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x13, 0x8000000000000001 # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sltu x22, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x13, 0x8000000000000001 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
sltu x27, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x1, 0x8000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
sltu x5, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
sltu x11, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x16, 0x8000000000000001 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sltu x5, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x10, 0x8000000000000001 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
sltu x28, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x8000000000000001 # initialize rs1
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x22, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x27, 0x8000000000000001 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
sltu x18, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x13, 0x8000000000000001 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
sltu x21, x13, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x21, 0x8000000000000001 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
sltu x5, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x12, 0x8000000000000001 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
sltu x21, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x10, 0x8000000000000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
sltu x20, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x17, 0x7fffffffffffffff # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
sltu x6, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x2, 0x7fffffffffffffff # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
sltu x28, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x2, 0x7fffffffffffffff # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
sltu x24, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x5, 0x7fffffffffffffff # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
sltu x26, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x5, 0x7fffffffffffffff # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sltu x17, x5, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x7, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
sltu x25, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x14, 0x7fffffffffffffff # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
sltu x8, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
sltu x14, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x14, 0x7fffffffffffffff # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
sltu x2, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x5, 0x7fffffffffffffff # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
sltu x26, x5, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x7fffffffffffffff # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x11, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x17, 0x7fffffffffffffff # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sltu x28, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x12, 0x7fffffffffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
sltu x5, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x27, 0x7fffffffffffffff # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
sltu x1, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x12, 0x7fffffffffffffff # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
sltu x21, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x17, 0x7fffffffffffffff # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
sltu x21, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x27, 0x7ffffffffffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
sltu x3, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x3, 0x7ffffffffffffffe # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
sltu x29, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x9, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
sltu x5, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x3, 0x7ffffffffffffffe # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
sltu x23, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x7, 0x7ffffffffffffffe # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
sltu x10, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x18, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
sltu x3, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
sltu x22, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x21, 0x7ffffffffffffffe # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
sltu x27, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x2, 0x7ffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
sltu x11, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x5, 0x7ffffffffffffffe # initialize rs1
li x3, 0x5bbc887763ae86f2 # initialize rs2
sltu x17, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0x7ffffffffffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x8, x25, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x3, 0x7ffffffffffffffe # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
sltu x26, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x1, 0x7ffffffffffffffe # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sltu x27, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sltu x26, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x7, 0x7ffffffffffffffe # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
sltu x26, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x25, 0x7ffffffffffffffe # initialize rs1
li x6, 0x0000000100000001 # initialize rs2
sltu x26, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x22, 0xffffffffffffffff # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
sltu x5, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x13, 0xffffffffffffffff # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sltu x27, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x21, 0xffffffffffffffff # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sltu x17, x21, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x25, 0xffffffffffffffff # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
sltu x8, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x30, 0xffffffffffffffff # initialize rs1
li x24, 0x8000000000000001 # initialize rs2
sltu x22, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x1, 0xffffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sltu x30, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x15, 0xffffffffffffffff # initialize rs1
li x27, 0x7ffffffffffffffe # initialize rs2
sltu x12, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x1, 0xffffffffffffffff # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
sltu x26, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x23, 0xffffffffffffffff # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
sltu x20, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x14, 0xffffffffffffffff # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
sltu x7, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0xffffffffffffffff # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x14, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x22, 0xffffffffffffffff # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
sltu x8, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x13, 0xffffffffffffffff # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
sltu x2, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x12, 0xffffffffffffffff # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
sltu x31, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x8, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
sltu x24, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x12, 0xffffffffffffffff # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
sltu x16, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x25, 0xfffffffffffffffe # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
sltu x17, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x13, 0xfffffffffffffffe # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sltu x26, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x20, 0xfffffffffffffffe # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
sltu x30, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x29, 0xfffffffffffffffe # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
sltu x5, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x28, 0xfffffffffffffffe # initialize rs1
li x7, 0x8000000000000001 # initialize rs2
sltu x18, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x25, 0xfffffffffffffffe # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sltu x18, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x7, 0xfffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sltu x19, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sltu x15, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x9, 0xfffffffffffffffe # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
sltu x14, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x6, 0xfffffffffffffffe # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
sltu x9, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0xfffffffffffffffe # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x28, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x7, 0xfffffffffffffffe # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
sltu x30, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x31, 0xfffffffffffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sltu x17, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x3, 0xfffffffffffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
sltu x2, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x30, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
sltu x26, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x24, 0xfffffffffffffffe # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
sltu x31, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
sltu x30, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sltu x17, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x24, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
sltu x1, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sltu x12, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sltu x7, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
sltu x17, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sltu x5, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
sltu x6, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
sltu x14, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
sltu x15, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x16, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
sltu x6, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
sltu x23, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
sltu x29, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
sltu x9, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
sltu x14, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sltu x23, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
sltu x25, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
sltu x16, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sltu x30, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
sltu x23, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
sltu x8, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
sltu x15, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
sltu x31, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sltu x28, x21, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
sltu x24, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x3, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
sltu x2, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
sltu x21, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
sltu x18, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0x0000000100000000 # initialize rs2
sltu x27, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
sltu x15, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x20, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
sltu x1, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x14, 0x5555555555555555 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
sltu x1, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x26, 0x5555555555555555 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
sltu x27, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x31, 0x5555555555555555 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
sltu x6, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x9, 0x5555555555555555 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
sltu x25, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x11, 0x5555555555555555 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
sltu x19, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x3, 0x5555555555555555 # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
sltu x27, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x22, 0x5555555555555555 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
sltu x21, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x30, 0x5555555555555555 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
sltu x9, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x3, 0x5555555555555555 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
sltu x5, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x5555555555555555 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x8, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x23, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
sltu x21, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x12, 0x5555555555555555 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sltu x31, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x1, 0x5555555555555555 # initialize rs1
li x24, 0x00000000fffffffe # initialize rs2
sltu x22, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x15, 0x5555555555555555 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
sltu x18, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x15, 0x5555555555555555 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
sltu x19, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x9, 0x00000000ffffffff # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
sltu x14, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x25, 0x00000000ffffffff # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sltu x21, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x25, 0x00000000ffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sltu x17, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x10, 0x00000000ffffffff # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
sltu x5, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x10, 0x00000000ffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sltu x2, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
sltu x11, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x11, 0x00000000ffffffff # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
sltu x27, x11, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x22, 0x00000000ffffffff # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
sltu x28, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x25, 0x00000000ffffffff # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
sltu x7, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x31, 0x00000000ffffffff # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
sltu x2, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x00000000ffffffff # initialize rs1
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x15, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x20, 0x00000000ffffffff # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
sltu x28, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x16, 0x00000000ffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
sltu x26, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x6, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sltu x17, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x11, 0x00000000ffffffff # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
sltu x17, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x27, 0x00000000ffffffff # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
sltu x17, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x14, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
sltu x9, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x9, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sltu x28, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x7, 0x00000000fffffffe # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
sltu x31, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x9, 0x00000000fffffffe # initialize rs1
li x23, 0x8000000000000000 # initialize rs2
sltu x27, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x10, 0x00000000fffffffe # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
sltu x23, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x15, 0x00000000fffffffe # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
sltu x13, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x2, 0x00000000fffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sltu x23, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x30, 0x00000000fffffffe # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
sltu x24, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x19, 0x00000000fffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
sltu x27, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x8, 0x00000000fffffffe # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sltu x13, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x00000000fffffffe # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x10, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x17, 0x00000000fffffffe # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
sltu x9, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x11, 0x00000000fffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
sltu x9, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x12, 0x00000000fffffffe # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
sltu x16, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x14, 0x00000000fffffffe # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
sltu x28, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x28, 0x00000000fffffffe # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sltu x7, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x12, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
sltu x28, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x30, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
sltu x9, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x22, 0x0000000100000000 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sltu x7, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x24, 0x0000000100000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
sltu x13, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x15, 0x0000000100000000 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
sltu x2, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000100000000 # initialize rs1
li x10, 0x7fffffffffffffff # initialize rs2
sltu x28, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x27, 0x0000000100000000 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
sltu x9, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x13, 0x0000000100000000 # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
sltu x26, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x25, 0x0000000100000000 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
sltu x28, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x11, 0x0000000100000000 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
sltu x20, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x0000000100000000 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x15, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x8, 0x0000000100000000 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
sltu x20, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x24, 0x0000000100000000 # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
sltu x31, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x19, 0x0000000100000000 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
sltu x10, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x22, 0x0000000100000000 # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
sltu x27, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x14, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
sltu x17, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x27, 0x0000000100000001 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
sltu x14, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x7, 0x0000000100000001 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
sltu x15, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x11, 0x0000000100000001 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
sltu x14, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x3, 0x0000000100000001 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
sltu x6, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x2, 0x0000000100000001 # initialize rs1
li x26, 0x8000000000000001 # initialize rs2
sltu x11, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x14, 0x0000000100000001 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
sltu x15, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000001 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
sltu x23, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x9, 0x0000000100000001 # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
sltu x27, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x30, 0x0000000100000001 # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
sltu x15, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x6, 0x0000000100000001 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
sltu x2, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0x0000000100000001 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sltu x6, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x24, 0x0000000100000001 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
sltu x27, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x1, 0x0000000100000001 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
sltu x25, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x5, 0x0000000100000001 # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
sltu x23, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x25, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sltu x24, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x10, 0x0000000100000001 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sltu x2, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xa630a9598eafbee5 # initialize rs1
li x0, 0xf54f667a5579c555 # initialize rs2
sltu x8, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xd73659f2e451d67d # initialize rs1
li x1, 0xc6c4ea3a00305ad4 # initialize rs2
sltu x7, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x484b2d3a98b333b8 # initialize rs1
li x2, 0x02830e8acd1c35e2 # initialize rs2
sltu x17, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x3e4a5ec740c119a0 # initialize rs1
li x3, 0x6bcac179c2a52cc8 # initialize rs2
sltu x17, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x73506aea65c2fe41 # initialize rs1
li x4, 0x17397b241c6d8e9f # initialize rs2
sltu x22, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9afa1d51ae815192 # initialize rs1
li x5, 0x5617d1809c3a8d26 # initialize rs2
sltu x20, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x250c79764c8e6c61 # initialize rs1
li x6, 0x751aa19458321f2a # initialize rs2
sltu x15, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x15, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1636dbcaa8218a22 # initialize rs1
li x7, 0x3bbc9e54985a5ea1 # initialize rs2
sltu x3, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xe13197626a64b738 # initialize rs1
li x8, 0x37478b29d1ba3239 # initialize rs2
sltu x26, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xd71be06e4ae6d302 # initialize rs1
li x9, 0x653991e97032c2b8 # initialize rs2
sltu x13, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x6e687b2bf35c0200 # initialize rs1
li x10, 0x16f70c0533757596 # initialize rs2
sltu x12, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x09cbef229803c4aa # initialize rs1
li x11, 0xf8d43d37783f3ad2 # initialize rs2
sltu x31, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x279bdf52a51601c7 # initialize rs1
li x12, 0x112cedcdeccbfb0c # initialize rs2
sltu x18, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xfa33430172b18c0e # initialize rs1
li x13, 0xe6eaddabfba731a8 # initialize rs2
sltu x23, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x77834fc18e6dab55 # initialize rs1
li x14, 0xe0a0742154f29ecf # initialize rs2
sltu x13, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x27388bd69c3488a9 # initialize rs1
li x15, 0x48b151a79b848e0f # initialize rs2
sltu x14, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x84f04539b6eac346 # initialize rs1
li x16, 0xa5991499abd3a9e1 # initialize rs2
sltu x2, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x4dc3c7c001ccddd8 # initialize rs1
li x17, 0x8f8f864243a8a74b # initialize rs2
sltu x15, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x4ff8f1fae8947c78 # initialize rs1
li x18, 0x59ea90cf9291cd3c # initialize rs2
sltu x29, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x969ccdb4c58213fb # initialize rs1
li x19, 0x7ab59457cdfdbb90 # initialize rs2
sltu x7, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x15c530743f5f3ccc # initialize rs1
li x20, 0x9eba130a59ec4d74 # initialize rs2
sltu x8, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x07101839fe3582b6 # initialize rs1
li x21, 0xdea974bd87e50b18 # initialize rs2
sltu x17, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x8f6a3ae559d44566 # initialize rs1
li x22, 0xfaeca6ffe61c0331 # initialize rs2
sltu x24, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x93dcb376e1b6891a # initialize rs1
li x23, 0x59fde67752ca14d3 # initialize rs2
sltu x24, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xed7177d733c57b9d # initialize rs1
li x24, 0x523785b58e655262 # initialize rs2
sltu x23, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x56fefad4eae24238 # initialize rs1
li x25, 0x08e9617c81ddbdce # initialize rs2
sltu x16, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x0ebd57d4a2c5e5c5 # initialize rs1
li x26, 0x225598db4cbbb617 # initialize rs2
sltu x30, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xa8ab6cfd8f61a920 # initialize rs1
li x27, 0xd9780e747f91c41f # initialize rs2
sltu x26, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xdefeda44710922b8 # initialize rs1
li x28, 0x2a7d14076f3647c2 # initialize rs2
sltu x31, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x2c1f8b9dc274d0ab # initialize rs1
li x29, 0x62c8275e9a26e8f2 # initialize rs2
sltu x27, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x5551007cd41bb5eb # initialize rs1
li x30, 0x35d73722e16de744 # initialize rs2
sltu x7, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xaac1c8164d1543d2 # initialize rs1
li x31, 0xcec5a1c2537c985f # initialize rs2
sltu x13, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x229edcfddb6b3dac # initialize rs1
li x16, 0x0718ab1a6a61d1f9 # initialize rs2
sltu x0, x0, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x823bd9adc61dd5cc # initialize rs1
li x17, 0x423afcd651d47885 # initialize rs2
sltu x1, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x8a16b05fbf0614b0 # initialize rs1
li x6, 0x6e42198747101d2b # initialize rs2
sltu x2, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xc9972dc97b17efb3 # initialize rs1
li x13, 0x3f6146a59665e1f8 # initialize rs2
sltu x3, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x835656bdfca3458c # initialize rs1
li x24, 0x68925472369d00c7 # initialize rs2
sltu x4, x4, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdd98f12e04c1492c # initialize rs1
li x15, 0xd465fb551db7f4ed # initialize rs2
sltu x5, x5, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc281fa91b6b5c967 # initialize rs1
li x17, 0x5d6488454b8d060b # initialize rs2
sltu x6, x6, x17 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x53dbf0a94e8fb4b7 # initialize rs1
li x18, 0xa89cef2ce9d6c783 # initialize rs2
sltu x7, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x07baf8319cf984f3 # initialize rs1
li x21, 0x2f04fa1e69d3d218 # initialize rs2
sltu x8, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x6742f0c67200bbb7 # initialize rs1
li x29, 0x56d1a7081abe4eab # initialize rs2
sltu x9, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x42c68d2f45e72574 # initialize rs1
li x21, 0x3276f053f5338d08 # initialize rs2
sltu x10, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x6f54ecbfb8f9c4b9 # initialize rs1
li x15, 0xdedf2ba41f505910 # initialize rs2
sltu x11, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x3b35a88e3d327917 # initialize rs1
li x22, 0x0b213314db25f20b # initialize rs2
sltu x12, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x58ea8998382afb3c # initialize rs1
li x29, 0x629b554d526509ea # initialize rs2
sltu x13, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x36638019851c2cb9 # initialize rs1
li x6, 0x40685d7733963253 # initialize rs2
sltu x14, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x746a5e3531ef016e # initialize rs1
li x19, 0x326fc3b1028be339 # initialize rs2
sltu x15, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x8108c0601699a9f2 # initialize rs1
li x1, 0x342746d092930173 # initialize rs2
sltu x16, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x1a6ee3a63f925f1a # initialize rs1
li x24, 0xea961082f18eae08 # initialize rs2
sltu x17, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xbaf7d2524552ccf8 # initialize rs1
li x25, 0x2c8bc837e3b68708 # initialize rs2
sltu x18, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xb0780a3461ea41a9 # initialize rs1
li x21, 0xe7e6066f7b16d955 # initialize rs2
sltu x19, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xaccf72efc74e6f37 # initialize rs1
li x30, 0xaa06125a35ccae2f # initialize rs2
sltu x20, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x60608ed85cf61b4b # initialize rs1
li x30, 0x931505d8b9b4b0d0 # initialize rs2
sltu x21, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x7aaf1d0cd2ccd2d4 # initialize rs1
li x2, 0x5171aa2e9554a7a6 # initialize rs2
sltu x22, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xdd1552177d26a449 # initialize rs1
li x8, 0xed2a8e539d54c614 # initialize rs2
sltu x23, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x3bce5e6eb944bc39 # initialize rs1
li x23, 0xe85c1df506388e53 # initialize rs2
sltu x24, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x0ad44550487c68ad # initialize rs1
li x26, 0x44263e6bd3167207 # initialize rs2
sltu x25, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xb9db1f8a91aabc9e # initialize rs1
li x3, 0x4411a0f5fa56275f # initialize rs2
sltu x26, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x661f1b9833ee24c8 # initialize rs1
li x11, 0x173dbbeda3c5c3ee # initialize rs2
sltu x27, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x3547548cf8afec2a # initialize rs1
li x17, 0xec4f1b39e76e12e5 # initialize rs2
sltu x28, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x69907ce21de04288 # initialize rs1
li x13, 0x1e451ecfce95baf8 # initialize rs2
sltu x29, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xe29d4feb0469b62a # initialize rs1
li x17, 0xf2e004038138dc67 # initialize rs2
sltu x30, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xf9a2917a8334a1a5 # initialize rs1
li x19, 0x3b7c1be46dba957e # initialize rs2
sltu x31, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x23, 0x63b5755b07b788a2 # initialize rs1
li x0, 0xeb010bb57c3470c1 # initialize rs2
sltu x0, x23, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x8, 0x18b9a4aa2f526f76 # initialize rs1
li x1, 0x761f8df780323805 # initialize rs2
sltu x1, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x29, 0x2abe5f92c4e41e16 # initialize rs1
li x2, 0x6cb105bb9d7d0036 # initialize rs2
sltu x2, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x25, 0x37eb37a2771ae5b6 # initialize rs1
li x3, 0x5823aed6ebf5a172 # initialize rs2
sltu x3, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0xe9dc6ff36fbc92ba # initialize rs1
li x4, 0xb4962f8a157b1657 # initialize rs2
sltu x4, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x2, 0x6064eb6ecdef28af # initialize rs1
li x5, 0xdbb4c749d9099d90 # initialize rs2
sltu x5, x2, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0xa111943f25eb372a # initialize rs1
li x6, 0xa81ecbbb6bbb1e3f # initialize rs2
sltu x6, x27, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0x505939856fb07519 # initialize rs1
li x7, 0x89708f5878d69f9e # initialize rs2
sltu x7, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x21, 0x8f1e002a051240ee # initialize rs1
li x8, 0x3c9033c2ca7ff54c # initialize rs2
sltu x8, x21, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x27, 0x914ea02ed025ade4 # initialize rs1
li x9, 0x91ad08e2ebda2eaf # initialize rs2
sltu x9, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x2, 0x21a53cfcff0d7a43 # initialize rs1
li x10, 0x2b2b6a33a8d18b8d # initialize rs2
sltu x10, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x23, 0x5eb05c7ef3b13807 # initialize rs1
li x11, 0x20c5a5ab08829f6c # initialize rs2
sltu x11, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x25, 0xbb1e287f5fe178b8 # initialize rs1
li x12, 0xd4af34a0dc2b27dc # initialize rs2
sltu x12, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0xf50a05a1f2d202f1 # initialize rs1
li x13, 0xcfe21a0bb834120c # initialize rs2
sltu x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x8, 0x67d1b0adc73c5b0c # initialize rs1
li x14, 0x883cb099d389dd0d # initialize rs2
sltu x14, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x5, 0x324dd158ab17c423 # initialize rs1
li x15, 0x637f3cb4eb58c9d7 # initialize rs2
sltu x15, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x22, 0x1edc9e70e4cf670b # initialize rs1
li x16, 0xc194fb5264b8dc55 # initialize rs2
sltu x16, x22, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x23, 0x5e0bbf648fa22b03 # initialize rs1
li x17, 0xa1e3c5cd3f50d00d # initialize rs2
sltu x17, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x22, 0xa8dbd6f4c3431ecd # initialize rs1
li x18, 0x7c6f3b765cdabb5f # initialize rs2
sltu x18, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x1, 0xb9d4550099ced969 # initialize rs1
li x19, 0x0f7760e35541bdfa # initialize rs2
sltu x19, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x9, 0x80e5ba87c5a4dde9 # initialize rs1
li x20, 0xee3f68517b624f15 # initialize rs2
sltu x20, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x11, 0x9ce23cabb1c6a8b7 # initialize rs1
li x21, 0xa65e8b604de36b73 # initialize rs2
sltu x21, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x6, 0x0dff03557955713b # initialize rs1
li x22, 0x3391c414f63a4f3f # initialize rs2
sltu x22, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x13, 0x1e257c03f01e31a1 # initialize rs1
li x23, 0x09caf27bcee74387 # initialize rs2
sltu x23, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x12, 0xa06421216ed005bc # initialize rs1
li x24, 0x614368552294905a # initialize rs2
sltu x24, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x24, 0x1e861a938c9e0fa2 # initialize rs1
li x25, 0x1d18a065bae9499f # initialize rs2
sltu x25, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x6, 0x255d0ebd488d8f54 # initialize rs1
li x26, 0x92a9cd316a3b5147 # initialize rs2
sltu x26, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x7, 0x353f81f2f5a61a0e # initialize rs1
li x27, 0x6c90a0ef4d4b3329 # initialize rs2
sltu x27, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x11, 0xae789f962eb68e83 # initialize rs1
li x28, 0xc027338dd753f3e5 # initialize rs2
sltu x28, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x28, 0xbbf157bebf708c98 # initialize rs1
li x29, 0xa9194fe9c6f6e03d # initialize rs2
sltu x29, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x23, 0x4deabd867caa9ef7 # initialize rs1
li x30, 0x7b28c53043ad2bfc # initialize rs2
sltu x30, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x16, 0x2fee2d7e911472a4 # initialize rs1
li x31, 0x019539ef5959f7cc # initialize rs2
sltu x31, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xcf06817fdfbf2e97 # initialize rs1
li x0, 0x20e572bf59ab6f07 # initialize rs2
sltu x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x5ea9be4cf119b923 # initialize rs1
li x1, 0xefcafc61089f0e4a # initialize rs2
sltu x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x147230503560c6b4 # initialize rs1
li x2, 0x2120f78206949c24 # initialize rs2
sltu x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x800eb1d48a4fd2f2 # initialize rs1
li x3, 0x3406d2c923d7bb37 # initialize rs2
sltu x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4d6aa263b42261e6 # initialize rs1
li x4, 0x23ca04b64abaf7c4 # initialize rs2
sltu x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6234f9b260c38f1a # initialize rs1
li x5, 0x926cf503f1cc5ebc # initialize rs2
sltu x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x05ddb9bed30918c9 # initialize rs1
li x6, 0x172a7c3d3bd09a81 # initialize rs2
sltu x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa1d8c31c407dff1a # initialize rs1
li x7, 0x5413621caad83a02 # initialize rs2
sltu x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x20ad6fb2e0c6308c # initialize rs1
li x8, 0xe606c69b65011341 # initialize rs2
sltu x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x2b50779359a8c4ac # initialize rs1
li x9, 0x9dac10eda87acb3f # initialize rs2
sltu x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x5d78e5f461af6e22 # initialize rs1
li x10, 0x1ed011b738f4c337 # initialize rs2
sltu x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x0ca3c7377b572baa # initialize rs1
li x11, 0x347d3c72fbb14887 # initialize rs2
sltu x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x06bf569b9616fc7a # initialize rs1
li x12, 0x665cd5e0027746fb # initialize rs2
sltu x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xbbbe19551d254af9 # initialize rs1
li x13, 0x06fa4f5a06659520 # initialize rs2
sltu x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x953a2a9969c42003 # initialize rs1
li x14, 0x3868dcab6b429c25 # initialize rs2
sltu x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x9608aa71fa44f972 # initialize rs1
li x15, 0x38e35ae9470c383f # initialize rs2
sltu x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xe1067103cd6b51d8 # initialize rs1
li x16, 0x3f254ad53dce80f1 # initialize rs2
sltu x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xfae68e9bfafb0e0d # initialize rs1
li x17, 0xba4009fd6061bf83 # initialize rs2
sltu x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x2cc08ffdb4808e7c # initialize rs1
li x18, 0xaf37f1949847926e # initialize rs2
sltu x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x08feccaa0f4e2321 # initialize rs1
li x19, 0xa1472313f448605c # initialize rs2
sltu x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xb864f92ee979277f # initialize rs1
li x20, 0x6d0627d130aa46ca # initialize rs2
sltu x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xea9ade9df8ba2a96 # initialize rs1
li x21, 0x551f7327711cf455 # initialize rs2
sltu x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x1fbe2022e3a3a380 # initialize rs1
li x22, 0xcd23aae23192e31a # initialize rs2
sltu x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x614824ff1bf889b2 # initialize rs1
li x23, 0xc9d66fc893b34a2f # initialize rs2
sltu x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x72ef46734c9e7f29 # initialize rs1
li x24, 0x2ed49dc90b1263c2 # initialize rs2
sltu x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x74c7a9bfbe62af44 # initialize rs1
li x25, 0x91390b80b4bd2f62 # initialize rs2
sltu x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x86883d74885680a5 # initialize rs1
li x26, 0xebbdb95f684ee3b1 # initialize rs2
sltu x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xc5f04830542f598b # initialize rs1
li x27, 0x5e59437d2c3936d6 # initialize rs2
sltu x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x6de3702101cfa152 # initialize rs1
li x28, 0x33865a1560605c71 # initialize rs2
sltu x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x59a94e100cc0b329 # initialize rs1
li x29, 0x6a81b2081f10a898 # initialize rs2
sltu x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x05b105496f4ba546 # initialize rs1
li x30, 0x9b397ca6e9799ef2 # initialize rs2
sltu x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x7d0c576d4ada2d01 # initialize rs1
li x31, 0xe583e3e11370e5bf # initialize rs2
sltu x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x26, x7, x3 # perform first operation
sltu x5, x14, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x20, x12 # perform first operation
sltu x6, x11, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x25, x7 # perform first operation
sltu x15, x24, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x12, x20, x3 # perform first operation
sltu x3, x12, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x22, x17, x23 # perform first operation
sltu x23, x5, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x30, x28, x1 # perform first operation
sltu x26, x5, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x25, x14, x12 # perform first operation
sltu x25, x24, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x14, x16 # perform first operation
sltu x11, x26, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x14, x31 # perform first operation
sltu x11, x25, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x17, x11 # perform first operation
sltu x17, x16, x2 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x25, x16 # perform first operation
sltu x16, x29, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x5, x15 # perform first operation
sltu x26, x20, x1 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-sh.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x16, 0x1d5cf035150208d0 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1001 # sub immediate from rs1 to counter offset
sh x16, -1001(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x11, 0x42856846a8edb60d # initialize rs2
la x2, scratch # base address 
addi x2, x2, -23 # sub immediate from rs1 to counter offset
sh x11, 23(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x14, 0x817b8df90233022b # initialize rs2
la x3, scratch # base address 
addi x3, x3, 12 # sub immediate from rs1 to counter offset
sh x14, -12(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x17, 0xac0766701c8ac3ad # initialize rs2
la x4, scratch # base address 
addi x4, x4, 990 # sub immediate from rs1 to counter offset
sh x17, -990(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x35ee4058d59877e1 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 948 # sub immediate from rs1 to counter offset
sh x23, -948(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x2, 0x77e87769a8f7966a # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1645 # sub immediate from rs1 to counter offset
sh x2, 1645(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0xa48d5709e9bdf051 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1678 # sub immediate from rs1 to counter offset
sh x6, -1678(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x9, 0xf7e4349d8177b24b # initialize rs2
la x8, scratch # base address 
addi x8, x8, 591 # sub immediate from rs1 to counter offset
sh x9, -591(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x13, 0x4fd6b60c8164cbc5 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 857 # sub immediate from rs1 to counter offset
sh x13, -857(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x17, 0x83d866376a5739c1 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 665 # sub immediate from rs1 to counter offset
sh x17, -665(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x5, 0xcee4d4f329bca108 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1781 # sub immediate from rs1 to counter offset
sh x5, -1781(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x18, 0x6417801539b7e54d # initialize rs2
la x12, scratch # base address 
addi x12, x12, 94 # sub immediate from rs1 to counter offset
sh x18, -94(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x19, 0xcc2d99656d248ffc # initialize rs2
la x13, scratch # base address 
addi x13, x13, 990 # sub immediate from rs1 to counter offset
sh x19, -990(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x19, 0x542816879b6d70ff # initialize rs2
la x14, scratch # base address 
addi x14, x14, 481 # sub immediate from rs1 to counter offset
sh x19, -481(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x14, 0x86405baa36f97adf # initialize rs2
la x15, scratch # base address 
addi x15, x15, -88 # sub immediate from rs1 to counter offset
sh x14, 88(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x8, 0x714a34447c259537 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 441 # sub immediate from rs1 to counter offset
sh x8, -441(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x22, 0xde13fd1275df3a4b # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1089 # sub immediate from rs1 to counter offset
sh x22, 1089(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x10, 0x14ab94ac8766e116 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 328 # sub immediate from rs1 to counter offset
sh x10, -328(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x8, 0x0b7fda7207d5f572 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1318 # sub immediate from rs1 to counter offset
sh x8, -1318(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x2, 0xda0198125c1d7bfe # initialize rs2
la x20, scratch # base address 
addi x20, x20, -422 # sub immediate from rs1 to counter offset
sh x2, 422(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x1, 0x612cb7887dd55d3b # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1135 # sub immediate from rs1 to counter offset
sh x1, -1135(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x7, 0xdc3c38165fe2eb39 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -649 # sub immediate from rs1 to counter offset
sh x7, 649(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x29, 0x7866d7b945f99435 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 261 # sub immediate from rs1 to counter offset
sh x29, -261(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x28, 0xed07146aad6eb725 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -790 # sub immediate from rs1 to counter offset
sh x28, 790(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x26, 0x41b16496d1cb81bd # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1739 # sub immediate from rs1 to counter offset
sh x26, -1739(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x19, 0x8fab5e9e8850800a # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1497 # sub immediate from rs1 to counter offset
sh x19, -1497(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x17, 0x7db8eee9b55ba674 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1716 # sub immediate from rs1 to counter offset
sh x17, 1716(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x11, 0xa89a35efd31cf2ab # initialize rs2
la x28, scratch # base address 
addi x28, x28, -661 # sub immediate from rs1 to counter offset
sh x11, 661(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x14, 0xae470f0205d59987 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1636 # sub immediate from rs1 to counter offset
sh x14, -1636(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x13, 0xe3d849286ea8ecf7 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1902 # sub immediate from rs1 to counter offset
sh x13, -1902(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x13, 0x3b30691b607ddb62 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 319 # sub immediate from rs1 to counter offset
sh x13, -319(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0x25fcef361013d4a8 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1412 # sub immediate from rs1 to counter offset
sh x0, -1412(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x15575ee78b647e3f # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1362 # sub immediate from rs1 to counter offset
sh x1, -1362(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0x294829adfd20c1a4 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -53 # sub immediate from rs1 to counter offset
sh x2, 53(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0x2f79f4e48f762ff3 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1777 # sub immediate from rs1 to counter offset
sh x3, 1777(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x13061109a38cbdcd # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1304 # sub immediate from rs1 to counter offset
sh x4, 1304(x24) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa6c7449bd6af7d41 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1180 # sub immediate from rs1 to counter offset
sh x5, 1180(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x1c1cd5bedad5f19e # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1663 # sub immediate from rs1 to counter offset
sh x6, -1663(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x980910a19326002f # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1257 # sub immediate from rs1 to counter offset
sh x7, -1257(x10) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0x1828d52a52448b7e # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1641 # sub immediate from rs1 to counter offset
sh x8, 1641(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0x6bc553c306f1f765 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 983 # sub immediate from rs1 to counter offset
sh x9, -983(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0x3c6dbc07a59cf10a # initialize rs2
la x26, scratch # base address 
addi x26, x26, -519 # sub immediate from rs1 to counter offset
sh x10, 519(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0x56bd6b7081ccd45b # initialize rs2
la x17, scratch # base address 
addi x17, x17, -919 # sub immediate from rs1 to counter offset
sh x11, 919(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0x3f2ebe4c75ca6c81 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -764 # sub immediate from rs1 to counter offset
sh x12, 764(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0x92576993c1bc16c7 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1881 # sub immediate from rs1 to counter offset
sh x13, 1881(x20) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0xe52aaa955d851e26 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 145 # sub immediate from rs1 to counter offset
sh x14, -145(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0x13ec773da56f4080 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1840 # sub immediate from rs1 to counter offset
sh x15, 1840(x24) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0x9ccbaec9eb1665b7 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 709 # sub immediate from rs1 to counter offset
sh x16, -709(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0xc63d4141e7f84065 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1011 # sub immediate from rs1 to counter offset
sh x17, 1011(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x013269115c4f2a6c # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1862 # sub immediate from rs1 to counter offset
sh x18, -1862(x19) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0x31124a7eb73cc2d3 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1691 # sub immediate from rs1 to counter offset
sh x19, -1691(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0xaa101720dd7d54cb # initialize rs2
la x10, scratch # base address 
addi x10, x10, 895 # sub immediate from rs1 to counter offset
sh x20, -895(x10) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0xae4ff3757becd1e2 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1972 # sub immediate from rs1 to counter offset
sh x21, -1972(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x05e3b0eb26bde9f0 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1770 # sub immediate from rs1 to counter offset
sh x22, -1770(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x792eaa8f6be058f9 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1913 # sub immediate from rs1 to counter offset
sh x23, -1913(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0xf519d2f2b1f3cfec # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1953 # sub immediate from rs1 to counter offset
sh x24, 1953(x1) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0xaac02ca7ed85f054 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 108 # sub immediate from rs1 to counter offset
sh x25, -108(x19) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0x405aa12071637f04 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 469 # sub immediate from rs1 to counter offset
sh x26, -469(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x0b16c9f7b21b9183 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1526 # sub immediate from rs1 to counter offset
sh x27, -1526(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0xe9628a637c751435 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1463 # sub immediate from rs1 to counter offset
sh x28, 1463(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0xb7a655737dba2b66 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -860 # sub immediate from rs1 to counter offset
sh x29, 860(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0xa8a130c5337d41be # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1099 # sub immediate from rs1 to counter offset
sh x30, -1099(x11) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0x312ac65e58f09d78 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1509 # sub immediate from rs1 to counter offset
sh x31, 1509(x20) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x20, 0x0000000000000000 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1699 # sub immediate from rs1 to counter offset
sh x20, -1699(x8) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x15, 0x0000000000000001 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -153 # sub immediate from rs1 to counter offset
sh x15, 153(x21) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x11, 0x0000000000000002 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 643 # sub immediate from rs1 to counter offset
sh x11, -643(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x29, 0x8000000000000000 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -992 # sub immediate from rs1 to counter offset
sh x29, 992(x23) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x15, 0x8000000000000001 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 476 # sub immediate from rs1 to counter offset
sh x15, -476(x11) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x17, 0x7fffffffffffffff # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1854 # sub immediate from rs1 to counter offset
sh x17, 1854(x7) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x3, 0x7ffffffffffffffe # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1340 # sub immediate from rs1 to counter offset
sh x3, -1340(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs2
la x24, scratch # base address 
addi x24, x24, -585 # sub immediate from rs1 to counter offset
sh x21, 585(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x2, 0xfffffffffffffffe # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1778 # sub immediate from rs1 to counter offset
sh x2, -1778(x21) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 454 # sub immediate from rs1 to counter offset
sh x7, -454(x22) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
la x26, scratch # base address 
addi x26, x26, -391 # sub immediate from rs1 to counter offset
sh x6, 391(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x13, 0x5555555555555555 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1684 # sub immediate from rs1 to counter offset
sh x13, 1684(x11) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x9, 0x00000000ffffffff # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1847 # sub immediate from rs1 to counter offset
sh x9, 1847(x23) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x15, 0x00000000fffffffe # initialize rs2
la x16, scratch # base address 
addi x16, x16, -401 # sub immediate from rs1 to counter offset
sh x15, 401(x16) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x19, 0x0000000100000000 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 758 # sub immediate from rs1 to counter offset
sh x19, -758(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x3, 0x0000000100000001 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1413 # sub immediate from rs1 to counter offset
sh x3, 1413(x2) # perform operation 

# Testcase cp_imm_corners
li x25, 0xdf0c3b19dda1eefa # initialize rs2
la x24, scratch # base address 
addi x24, x24, 0 # sub immediate from rs1 to counter offset
sh x25, 0(x24) # perform operation 

# Testcase cp_imm_corners
li x17, 0xdfbf56583d49e2fb # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1 # sub immediate from rs1 to counter offset
sh x17, 1(x19) # perform operation 

# Testcase cp_imm_corners
li x20, 0x2a8612db928ec444 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2 # sub immediate from rs1 to counter offset
sh x20, 2(x17) # perform operation 

# Testcase cp_imm_corners
li x12, 0xe9c248e932335870 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -3 # sub immediate from rs1 to counter offset
sh x12, 3(x18) # perform operation 

# Testcase cp_imm_corners
li x5, 0xc464eaf7fac731b7 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -4 # sub immediate from rs1 to counter offset
sh x5, 4(x28) # perform operation 

# Testcase cp_imm_corners
li x21, 0x57166e7628e52ca4 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -8 # sub immediate from rs1 to counter offset
sh x21, 8(x25) # perform operation 

# Testcase cp_imm_corners
li x20, 0x9b6bff9df1380775 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -16 # sub immediate from rs1 to counter offset
sh x20, 16(x30) # perform operation 

# Testcase cp_imm_corners
li x9, 0xa2459044bbf79f2e # initialize rs2
la x10, scratch # base address 
addi x10, x10, -32 # sub immediate from rs1 to counter offset
sh x9, 32(x10) # perform operation 

# Testcase cp_imm_corners
li x12, 0x8871f376d20dc04a # initialize rs2
la x20, scratch # base address 
addi x20, x20, -64 # sub immediate from rs1 to counter offset
sh x12, 64(x20) # perform operation 

# Testcase cp_imm_corners
li x30, 0xb87c8af3f6955a9b # initialize rs2
la x18, scratch # base address 
addi x18, x18, -128 # sub immediate from rs1 to counter offset
sh x30, 128(x18) # perform operation 

# Testcase cp_imm_corners
li x6, 0x026cce213f72bafe # initialize rs2
la x19, scratch # base address 
addi x19, x19, -256 # sub immediate from rs1 to counter offset
sh x6, 256(x19) # perform operation 

# Testcase cp_imm_corners
li x28, 0xd9cbd8685f26a785 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -512 # sub immediate from rs1 to counter offset
sh x28, 512(x6) # perform operation 

# Testcase cp_imm_corners
li x12, 0x43d0d81b282fa1dc # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1023 # sub immediate from rs1 to counter offset
sh x12, 1023(x9) # perform operation 

# Testcase cp_imm_corners
li x8, 0x45802d7475ebc337 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1024 # sub immediate from rs1 to counter offset
sh x8, 1024(x1) # perform operation 

# Testcase cp_imm_corners
li x24, 0xb9cf4f86b9a39c82 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1795 # sub immediate from rs1 to counter offset
sh x24, 1795(x12) # perform operation 

# Testcase cp_imm_corners
li x28, 0x4a40fbef087e925e # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2047 # sub immediate from rs1 to counter offset
sh x28, 2047(x17) # perform operation 

# Testcase cp_imm_corners
li x18, 0x20baa56b03e22629 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2047 # increment rs1 by 2047 
addi x1, x1, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sh x18, -2048(x1) # perform operation 

# Testcase cp_imm_corners
li x15, 0x4037d3a0d54adb5b # initialize rs2
la x24, scratch # base address 
addi x24, x24, 2047 # sub immediate from rs1 to counter offset
sh x15, -2047(x24) # perform operation 

# Testcase cp_imm_corners
li x20, 0xeaefbadf88173728 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2 # sub immediate from rs1 to counter offset
sh x20, -2(x1) # perform operation 

# Testcase cp_imm_corners
li x10, 0xa3c560f0ce0da3a6 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1 # sub immediate from rs1 to counter offset
sh x10, -1(x15) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x10, scratch
addi x10, x10, -1960
add x16, x24, x9 # perform first operation
sh x27, 1960(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x20, scratch
addi x20, x20, 374
add x1, x17, x24 # perform first operation
sh x19, -374(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x3, scratch
addi x3, x3, -422
add x2, x27, x17 # perform first operation
sh x29, 422(x3) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x7, scratch
addi x7, x7, -220
add x1, x1, x0 # perform first operation
sh x14, 220(x7) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x28, scratch
addi x28, x28, 108
add x21, x21, x0 # perform first operation
sh x21, -108(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x17, scratch
addi x17, x17, -1106
add x13, x13, x0 # perform first operation
sh x21, 1106(x17) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-srliw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x3d7d5eccafc6b651 # initialize rs1
srliw x26, x0, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x37c75c7e8d8a7b8a # initialize rs1
srliw x6, x1, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x4e3908cd2affaeba # initialize rs1
srliw x11, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xd4e59f7e912261eb # initialize rs1
srliw x9, x3, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xbeb92cb0d200f650 # initialize rs1
srliw x12, x4, 31 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8db42bbcaa01a463 # initialize rs1
srliw x18, x5, 16 # perform operation
RVTEST_SIGUPD(x6, x0, x18, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xdc3d55640e070754 # initialize rs1
srliw x11, x6, 0 # perform operation
RVTEST_SIGUPD(x7, x0, x11, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xc99471dc0ffc3f24 # initialize rs1
srliw x27, x7, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xce32901f945dfd55 # initialize rs1
srliw x25, x8, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xe00a2ce7acfead91 # initialize rs1
srliw x7, x9, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xf74a744be348db4f # initialize rs1
srliw x1, x10, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x2c9deb07f2e05da5 # initialize rs1
srliw x15, x11, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x73fd8d5b7f34b020 # initialize rs1
srliw x8, x12, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x830548cc6536d29b # initialize rs1
srliw x1, x13, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc81544172d9be8f1 # initialize rs1
srliw x7, x14, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x8f4c9fc20c78e3e9 # initialize rs1
srliw x29, x15, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x7e1f87b4c8fd9139 # initialize rs1
srliw x15, x16, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xac0fda7c0fd3a12e # initialize rs1
srliw x18, x17, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x6ddafe2971245688 # initialize rs1
srliw x10, x18, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xb08a2d172a0229b0 # initialize rs1
srliw x8, x19, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xd6acdd528067f23f # initialize rs1
srliw x30, x20, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x4fd007306e89c1ce # initialize rs1
srliw x25, x21, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x5fa0ad231fd0bf8c # initialize rs1
srliw x27, x22, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x51565119dcd7f9d4 # initialize rs1
srliw x6, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x8983c6abcd196882 # initialize rs1
srliw x2, x24, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x74213aa0fabc5337 # initialize rs1
srliw x11, x25, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xea06000b5b23b6ae # initialize rs1
srliw x10, x26, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xcbc5cdc9d6772ae2 # initialize rs1
srliw x11, x27, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x7031428c2079d62f # initialize rs1
srliw x17, x28, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x3ac0eb931eafda7a # initialize rs1
srliw x2, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xa1c16a5cbe212896 # initialize rs1
srliw x9, x30, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xc988255bbafcd877 # initialize rs1
srliw x24, x31, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 248)

# Testcase cp_rd (Test destination rd = x0)
li x26, 0x4ca1e2ab77f07fe7 # initialize rs1
srliw x0, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x17, 0xa4dc4059270d8bbc # initialize rs1
srliw x1, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x3, 0x2a89a24fd976ee4a # initialize rs1
srliw x2, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x26, 0x9a2fc47b717d9239 # initialize rs1
srliw x3, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x11, 0x3e81de7d53483879 # initialize rs1
srliw x4, x11, 25 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0x6540ea0dbfed6940 # initialize rs1
srliw x5, x17, 6 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x30, 0x6c28562274836893 # initialize rs1
srliw x6, x30, 9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x2, 0x63bac57397fb93f5 # initialize rs1
srliw x7, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x12, 0x49eec13dda9ee25f # initialize rs1
srliw x8, x12, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x25, 0x2de7c925e7841d08 # initialize rs1
srliw x9, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0x821987464b7c62f7 # initialize rs1
srliw x10, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x26, 0x67c305330f3f1a78 # initialize rs1
srliw x11, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x30, 0x5c4817b6db3e7dff # initialize rs1
srliw x12, x30, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x16, 0x17af4b19ac926953 # initialize rs1
srliw x13, x16, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x14, 0x69baf1eb7e0a0bda # initialize rs1
srliw x14, x14, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x24, 0x453d4cf9fbf9a181 # initialize rs1
srliw x15, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x15, 0xa15af8a53f1505e6 # initialize rs1
srliw x16, x15, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x22, 0xefba16bd1530cab6 # initialize rs1
srliw x17, x22, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x8, 0x02742746160bd091 # initialize rs1
srliw x18, x8, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x14, 0x8d96c9aa06efcb4b # initialize rs1
srliw x19, x14, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x18, 0xa00424569dd07bde # initialize rs1
srliw x20, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x12, 0x4e823d7af066cce0 # initialize rs1
srliw x21, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x11, 0xa04147e06587f90d # initialize rs1
srliw x22, x11, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x8, 0xa479d991feceaf6b # initialize rs1
srliw x23, x8, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x13, 0x8a170b8148acf31e # initialize rs1
srliw x24, x13, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x24, 0x577c2a48d27e521a # initialize rs1
srliw x25, x24, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x23, 0x557960a794f6bd3e # initialize rs1
srliw x26, x23, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x23, 0xfa7067e2830ae529 # initialize rs1
srliw x27, x23, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x12, 0x23c9799ad9143f72 # initialize rs1
srliw x28, x12, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x13, 0x3a35e2986ef7cb2d # initialize rs1
srliw x29, x13, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x12, 0xd1a3e82d5e51a4ac # initialize rs1
srliw x30, x12, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x25, 0xdadbaeebedf3c1dd # initialize rs1
srliw x31, x25, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x19, 0x0000000000000000 # initialize rs1
srliw x11, x19, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x27, 0x0000000000000001 # initialize rs1
srliw x29, x27, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x27, 0x0000000000000002 # initialize rs1
srliw x2, x27, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x30, 0x8000000000000000 # initialize rs1
srliw x7, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x26, 0x8000000000000001 # initialize rs1
srliw x5, x26, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x13, 0x7fffffffffffffff # initialize rs1
srliw x22, x13, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x31, 0x7ffffffffffffffe # initialize rs1
srliw x12, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs1
srliw x10, x21, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x21, 0xfffffffffffffffe # initialize rs1
srliw x15, x21, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x5, 0x5bbc887763ae86f2 # initialize rs1
srliw x6, x5, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
srliw x14, x19, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x21, 0x5555555555555555 # initialize rs1
srliw x18, x21, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x5, 0x00000000ffffffff # initialize rs1
srliw x14, x5, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x21, 0x00000000fffffffe # initialize rs1
srliw x3, x21, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x5, 0x0000000100000000 # initialize rs1
srliw x29, x5, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x2, 0x0000000100000001 # initialize rs1
srliw x3, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x0ca0ddb006255f1c # initialize rs1
srliw x0, x0, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xac40713a9bcd958d # initialize rs1
srliw x1, x1, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xf5fff84c4afa2768 # initialize rs1
srliw x2, x2, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xf06b6d649fcf06b4 # initialize rs1
srliw x3, x3, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xaf677dca4e73a6ea # initialize rs1
srliw x4, x4, 21 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3f6787c66a3787f1 # initialize rs1
srliw x5, x5, 6 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x018d5cc6785a2e54 # initialize rs1
srliw x6, x6, 16 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1cdd220c4a95a13b # initialize rs1
srliw x7, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x2bc743884378af6b # initialize rs1
srliw x8, x8, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xb8fdeb31cf58219f # initialize rs1
srliw x9, x9, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xbcb4d1eb19b0ba33 # initialize rs1
srliw x10, x10, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xebe559e9652eed1a # initialize rs1
srliw x11, x11, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x9a9beffb07f121df # initialize rs1
srliw x12, x12, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x2af0b1d1e62af939 # initialize rs1
srliw x13, x13, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x40b3783ca55960a7 # initialize rs1
srliw x14, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xc0267efc7d500192 # initialize rs1
srliw x15, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xe6d57c27a93c3750 # initialize rs1
srliw x16, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x1ea1951263eb278d # initialize rs1
srliw x17, x17, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x6fb0658c61a304e6 # initialize rs1
srliw x18, x18, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1adabee162c628f6 # initialize rs1
srliw x19, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xc574875ddf1aafdd # initialize rs1
srliw x20, x20, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x272a23de6cad3ab9 # initialize rs1
srliw x21, x21, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xe8ceb5c029c311b1 # initialize rs1
srliw x22, x22, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x2bba3108aa29de37 # initialize rs1
srliw x23, x23, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xd21873d824e165b3 # initialize rs1
srliw x24, x24, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x70785a42fe860566 # initialize rs1
srliw x25, x25, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xe40e14f6429f5968 # initialize rs1
srliw x26, x26, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x58bf7303b25e386e # initialize rs1
srliw x27, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x4a539954b23a8cf9 # initialize rs1
srliw x28, x28, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xed8efd1fc6fc8dc7 # initialize rs1
srliw x29, x29, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x75b3ce3e40506c8e # initialize rs1
srliw x30, x30, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x14cf345438abca65 # initialize rs1
srliw x31, x31, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm_5 (Test bit = 0)
li x3, 0x2ff7f83f511b6009 # initialize rs1
srliw x23, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 896)

# Testcase cp_uimm_5 (Test bit = 1)
li x3, 0x8f2376c861a478a8 # initialize rs1
srliw x20, x3, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 904)

# Testcase cp_uimm_5 (Test bit = 2)
li x26, 0x54dcedaac9ad6de3 # initialize rs1
srliw x21, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 912)

# Testcase cp_uimm_5 (Test bit = 3)
li x23, 0x89aeadc86108700d # initialize rs1
srliw x21, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 920)

# Testcase cp_uimm_5 (Test bit = 4)
li x9, 0xf00b0340fe2a6618 # initialize rs1
srliw x27, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 928)

# Testcase cp_uimm_5 (Test bit = 5)
li x7, 0x1d71d71bab5aead0 # initialize rs1
srliw x2, x7, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 936)

# Testcase cp_uimm_5 (Test bit = 6)
li x31, 0x46231ef2744b2758 # initialize rs1
srliw x29, x31, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 944)

# Testcase cp_uimm_5 (Test bit = 7)
li x10, 0x15b19d45a6729736 # initialize rs1
srliw x1, x10, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 952)

# Testcase cp_uimm_5 (Test bit = 8)
li x1, 0x60a115fdc670adec # initialize rs1
srliw x6, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 960)

# Testcase cp_uimm_5 (Test bit = 9)
li x27, 0xf898463a71352310 # initialize rs1
srliw x21, x27, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cp_uimm_5 (Test bit = 10)
li x16, 0x65efc1b0e6b68bc0 # initialize rs1
srliw x24, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 976)

# Testcase cp_uimm_5 (Test bit = 11)
li x12, 0x65a096ee465f4bb8 # initialize rs1
srliw x19, x12, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 984)

# Testcase cp_uimm_5 (Test bit = 12)
li x26, 0x5e8a2f1fc4ec40b4 # initialize rs1
srliw x29, x26, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 992)

# Testcase cp_uimm_5 (Test bit = 13)
li x6, 0xf50b342466f0013a # initialize rs1
srliw x1, x6, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1000)

# Testcase cp_uimm_5 (Test bit = 14)
li x10, 0x5fedff9b9a4c1c11 # initialize rs1
srliw x16, x10, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1008)

# Testcase cp_uimm_5 (Test bit = 15)
li x9, 0xa3bc3555c9252290 # initialize rs1
srliw x26, x9, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1016)

# Testcase cp_uimm_5 (Test bit = 16)
li x7, 0x523aba0f0d395b32 # initialize rs1
srliw x12, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1024)

# Testcase cp_uimm_5 (Test bit = 17)
li x3, 0xf4969c315c75b19f # initialize rs1
srliw x19, x3, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1032)

# Testcase cp_uimm_5 (Test bit = 18)
li x6, 0x728908b7f89e14c3 # initialize rs1
srliw x25, x6, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1040)

# Testcase cp_uimm_5 (Test bit = 19)
li x28, 0x205804015c7f0151 # initialize rs1
srliw x13, x28, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1048)

# Testcase cp_uimm_5 (Test bit = 20)
li x22, 0xa92f2c3e870de50c # initialize rs1
srliw x21, x22, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1056)

# Testcase cp_uimm_5 (Test bit = 21)
li x9, 0x4e4ba4a9d5019ca9 # initialize rs1
srliw x30, x9, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1064)

# Testcase cp_uimm_5 (Test bit = 22)
li x16, 0x61bc2ad4df78b90f # initialize rs1
srliw x20, x16, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1072)

# Testcase cp_uimm_5 (Test bit = 23)
li x10, 0x13cf5ae3db91fce8 # initialize rs1
srliw x27, x10, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1080)

# Testcase cp_uimm_5 (Test bit = 24)
li x3, 0xb0083c804f691416 # initialize rs1
srliw x1, x3, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1088)

# Testcase cp_uimm_5 (Test bit = 25)
li x21, 0xca9221ec9c6b200b # initialize rs1
srliw x31, x21, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1096)

# Testcase cp_uimm_5 (Test bit = 26)
li x1, 0x7ef74c55036b3024 # initialize rs1
srliw x15, x1, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1104)

# Testcase cp_uimm_5 (Test bit = 27)
li x9, 0x54d860eda5150d8b # initialize rs1
srliw x11, x9, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1112)

# Testcase cp_uimm_5 (Test bit = 28)
li x29, 0xa606517647c8e43b # initialize rs1
srliw x1, x29, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1120)

# Testcase cp_uimm_5 (Test bit = 29)
li x11, 0x483010f2b01dc688 # initialize rs1
srliw x16, x11, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1128)

# Testcase cp_uimm_5 (Test bit = 30)
li x29, 0xdb4d37b150a8615a # initialize rs1
srliw x5, x29, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1136)

# Testcase cp_uimm_5 (Test bit = 31)
li x17, 0x21b0caf55d4b615d # initialize rs1
srliw x16, x17, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1144)

# Testcase cp_gpr/fpr_hazard nohaz test
add x19, x11, x23 # perform first operation
srliw x25, x10, 19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x8, x24, x11 # perform first operation
srliw x28, x1, 0 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x29, x13 # perform first operation
srliw x1, x15, 6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x3, x22 # perform first operation
srliw x22, x31, 8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x17, x31 # perform first operation
srliw x10, x3, 28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x11, x10 # perform first operation
srliw x10, x22, 2 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x6, x25 # perform first operation
srliw x24, x22, 6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x11, x20 # perform first operation
srliw x3, x1, 16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x22, x31 # perform first operation
srliw x20, x17, 15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x11, x13, x23 # perform first operation
srliw x13, x15, 24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x22, x13, x29 # perform first operation
srliw x29, x10, 20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x7, x29 # perform first operation
srliw x24, x23, 14 # perform second (triggering) operation

#.EQU SIGSIZE,1152


// ******************
// Tests from: WALLY-COV-blt.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x4ca4889d306fca93 # initialize rs1
li x11, 0x573c0e042848ae39 # initialize rs2
blt x0, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x573c0e042848ae39 # initialize rs1
li x11, 0x573c0e042848ae39 # initialize rs2
blt x0, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xe1953ef7d380dfc0 # initialize rs1
li x16, 0xc7565e8d7ff46da1 # initialize rs2
blt x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xc7565e8d7ff46da1 # initialize rs1
li x16, 0xc7565e8d7ff46da1 # initialize rs2
blt x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x3a3c1df93a302f2a # initialize rs1
li x19, 0x984af098e1f3cd5c # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x984af098e1f3cd5c # initialize rs1
li x19, 0x984af098e1f3cd5c # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xe28be71a67cda937 # initialize rs1
li x13, 0xb61a8dc8a271b953 # initialize rs2
blt x3, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xb61a8dc8a271b953 # initialize rs1
li x13, 0xb61a8dc8a271b953 # initialize rs2
blt x3, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9546ef0ffb233ed8 # initialize rs1
li x13, 0xd2e246fd002e9f5b # initialize rs2
blt x4, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xd2e246fd002e9f5b # initialize rs1
li x13, 0xd2e246fd002e9f5b # initialize rs2
blt x4, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9257579deed90e58 # initialize rs1
li x15, 0xcc78b2c75473478f # initialize rs2
blt x5, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xcc78b2c75473478f # initialize rs1
li x15, 0xcc78b2c75473478f # initialize rs2
blt x5, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x76defca99ad57a06 # initialize rs1
li x2, 0x845620a058f8d121 # initialize rs2
blt x6, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x845620a058f8d121 # initialize rs1
li x2, 0x845620a058f8d121 # initialize rs2
blt x6, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x4d07553918be83f7 # initialize rs1
li x1, 0xd35da38ec3c1659a # initialize rs2
blt x7, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xd35da38ec3c1659a # initialize rs1
li x1, 0xd35da38ec3c1659a # initialize rs2
blt x7, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xd92cf24a9ff1b9de # initialize rs1
li x2, 0x5d900902aa250464 # initialize rs2
blt x8, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5d900902aa250464 # initialize rs1
li x2, 0x5d900902aa250464 # initialize rs2
blt x8, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xb10c8f51a7dc90ed # initialize rs1
li x12, 0x64322dd120682712 # initialize rs2
blt x9, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x64322dd120682712 # initialize rs1
li x12, 0x64322dd120682712 # initialize rs2
blt x9, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xf1f9bc534d11a768 # initialize rs1
li x31, 0xd058817aaa512a32 # initialize rs2
blt x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xd058817aaa512a32 # initialize rs1
li x31, 0xd058817aaa512a32 # initialize rs2
blt x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x8ee869cd81f2aff4 # initialize rs1
li x14, 0xe2c975ed296972a1 # initialize rs2
blt x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xe2c975ed296972a1 # initialize rs1
li x14, 0xe2c975ed296972a1 # initialize rs2
blt x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x114551c0063c6bd4 # initialize rs1
li x15, 0xb6af3b85166ccfc0 # initialize rs2
blt x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xb6af3b85166ccfc0 # initialize rs1
li x15, 0xb6af3b85166ccfc0 # initialize rs2
blt x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x4d8988709d882cab # initialize rs1
li x8, 0xdde555bf36eaa814 # initialize rs2
blt x13, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xdde555bf36eaa814 # initialize rs1
li x8, 0xdde555bf36eaa814 # initialize rs2
blt x13, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x3767ebfe665f766a # initialize rs1
li x15, 0xee6ab9e763a9e6e2 # initialize rs2
blt x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xee6ab9e763a9e6e2 # initialize rs1
li x15, 0xee6ab9e763a9e6e2 # initialize rs2
blt x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x2fc7db358af43a6c # initialize rs1
li x16, 0x81c4ee78c260d775 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x81c4ee78c260d775 # initialize rs1
li x16, 0x81c4ee78c260d775 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x1d3cc01a6e69bfbe # initialize rs1
li x27, 0xe2202c31ca205058 # initialize rs2
blt x16, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xe2202c31ca205058 # initialize rs1
li x27, 0xe2202c31ca205058 # initialize rs2
blt x16, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xf5046e83aca67c80 # initialize rs1
li x3, 0x713d68e5674068e4 # initialize rs2
blt x17, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x713d68e5674068e4 # initialize rs1
li x3, 0x713d68e5674068e4 # initialize rs2
blt x17, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x18224a6fd599d8be # initialize rs1
li x19, 0x1061929193ecb2b8 # initialize rs2
blt x18, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x1061929193ecb2b8 # initialize rs1
li x19, 0x1061929193ecb2b8 # initialize rs2
blt x18, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xa02987c2d035e641 # initialize rs1
li x12, 0xcad5f15b092dcb68 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xcad5f15b092dcb68 # initialize rs1
li x12, 0xcad5f15b092dcb68 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x809d725de1696e70 # initialize rs1
li x13, 0x6784e6c3d5a68236 # initialize rs2
blt x20, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x6784e6c3d5a68236 # initialize rs1
li x13, 0x6784e6c3d5a68236 # initialize rs2
blt x20, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xbf90d2df2f447de7 # initialize rs1
li x10, 0x3ed2c0a6fd88c348 # initialize rs2
blt x21, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x3ed2c0a6fd88c348 # initialize rs1
li x10, 0x3ed2c0a6fd88c348 # initialize rs2
blt x21, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x729f4731e3f7e1cf # initialize rs1
li x7, 0xe953a5805f64db62 # initialize rs2
blt x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xe953a5805f64db62 # initialize rs1
li x7, 0xe953a5805f64db62 # initialize rs2
blt x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x4d0b9e820643926a # initialize rs1
li x16, 0x6352290d42e2758d # initialize rs2
blt x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x6352290d42e2758d # initialize rs1
li x16, 0x6352290d42e2758d # initialize rs2
blt x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x9736cf7dfbe02fe2 # initialize rs1
li x6, 0xfc407ddbf39c6a99 # initialize rs2
blt x24, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfc407ddbf39c6a99 # initialize rs1
li x6, 0xfc407ddbf39c6a99 # initialize rs2
blt x24, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xeb40766b809a0bfd # initialize rs1
li x13, 0x2425c97a395db9da # initialize rs2
blt x25, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x2425c97a395db9da # initialize rs1
li x13, 0x2425c97a395db9da # initialize rs2
blt x25, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x1d58d82681550b1a # initialize rs1
li x5, 0x7f3666a1393099a3 # initialize rs2
blt x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7f3666a1393099a3 # initialize rs1
li x5, 0x7f3666a1393099a3 # initialize rs2
blt x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x6499470e4cf94c45 # initialize rs1
li x3, 0x31d82cf159b42e7f # initialize rs2
blt x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x31d82cf159b42e7f # initialize rs1
li x3, 0x31d82cf159b42e7f # initialize rs2
blt x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x795b2b3ef974a328 # initialize rs1
li x13, 0x0af33402f279acee # initialize rs2
blt x28, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0af33402f279acee # initialize rs1
li x13, 0x0af33402f279acee # initialize rs2
blt x28, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x0da6ab967047ed23 # initialize rs1
li x11, 0xaed3d998598a987b # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaed3d998598a987b # initialize rs1
li x11, 0xaed3d998598a987b # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x5cf57d80a6198b29 # initialize rs1
li x27, 0x00f2976979dd594c # initialize rs2
blt x30, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00f2976979dd594c # initialize rs1
li x27, 0x00f2976979dd594c # initialize rs2
blt x30, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x8918ba16681735a7 # initialize rs1
li x2, 0x45674f2ca84dc5a5 # initialize rs2
blt x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x45674f2ca84dc5a5 # initialize rs1
li x2, 0x45674f2ca84dc5a5 # initialize rs2
blt x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x7, 0x5e7f9c0e2bdc628d # initialize rs1
li x0, 0xc4fe664a283b52ea # initialize rs2
blt x7, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xc4fe664a283b52ea # initialize rs1
li x0, 0xc4fe664a283b52ea # initialize rs2
blt x7, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x29, 0x28f7cc449e28f8ea # initialize rs1
li x1, 0x3bb0cc1c560ad3dc # initialize rs2
blt x29, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x3bb0cc1c560ad3dc # initialize rs1
li x1, 0x3bb0cc1c560ad3dc # initialize rs2
blt x29, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x30, 0x6d38718c5716dee8 # initialize rs1
li x2, 0x1879d5041aa6de5a # initialize rs2
blt x30, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x1879d5041aa6de5a # initialize rs1
li x2, 0x1879d5041aa6de5a # initialize rs2
blt x30, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x21, 0xbe9d8a543838bf83 # initialize rs1
li x3, 0x92303a8b6a41c591 # initialize rs2
blt x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x92303a8b6a41c591 # initialize rs1
li x3, 0x92303a8b6a41c591 # initialize rs2
blt x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0x6a2d87043baca9dd # initialize rs1
li x4, 0x975b535fdd770a87 # initialize rs2
blt x24, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x975b535fdd770a87 # initialize rs1
li x4, 0x975b535fdd770a87 # initialize rs2
blt x24, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0xf6c329bf529fe1ee # initialize rs1
li x5, 0x974c46869f016139 # initialize rs2
blt x17, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x974c46869f016139 # initialize rs1
li x5, 0x974c46869f016139 # initialize rs2
blt x17, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x7, 0x6332e566492c2c14 # initialize rs1
li x6, 0xc7642a8884a4d48d # initialize rs2
blt x7, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xc7642a8884a4d48d # initialize rs1
li x6, 0xc7642a8884a4d48d # initialize rs2
blt x7, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
li x27, 0xfc1d73a59650ddba # initialize rs1
li x7, 0x926bfe749d7f9c30 # initialize rs2
blt x27, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x926bfe749d7f9c30 # initialize rs1
li x7, 0x926bfe749d7f9c30 # initialize rs2
blt x27, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x1, 0xcc541fbb91adc85b # initialize rs1
li x8, 0x3df1083d0a0f7a5b # initialize rs2
blt x1, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x3df1083d0a0f7a5b # initialize rs1
li x8, 0x3df1083d0a0f7a5b # initialize rs2
blt x1, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x28, 0x9942718ec769af79 # initialize rs1
li x9, 0x72aba9756bbdf157 # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x72aba9756bbdf157 # initialize rs1
li x9, 0x72aba9756bbdf157 # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x12, 0x3eefc5ed75854ba4 # initialize rs1
li x10, 0x198d24279bdcda76 # initialize rs2
blt x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x198d24279bdcda76 # initialize rs1
li x10, 0x198d24279bdcda76 # initialize rs2
blt x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x29, 0xc85207d1ac9af312 # initialize rs1
li x11, 0xbaa605c929fc1049 # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xbaa605c929fc1049 # initialize rs1
li x11, 0xbaa605c929fc1049 # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x6, 0xd1171c4b5618451b # initialize rs1
li x12, 0x89a1ffbab39b434a # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x89a1ffbab39b434a # initialize rs1
li x12, 0x89a1ffbab39b434a # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x28, 0xa715d0809e5e2580 # initialize rs1
li x13, 0xd9fbc1c5c94ced6a # initialize rs2
blt x28, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xd9fbc1c5c94ced6a # initialize rs1
li x13, 0xd9fbc1c5c94ced6a # initialize rs2
blt x28, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x9, 0xea1649dcf7024eea # initialize rs1
li x14, 0xfe74f9b57dd4b5f2 # initialize rs2
blt x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xfe74f9b57dd4b5f2 # initialize rs1
li x14, 0xfe74f9b57dd4b5f2 # initialize rs2
blt x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x26, 0x379d08de79e06df2 # initialize rs1
li x15, 0xdd3a463e6c709242 # initialize rs2
blt x26, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xdd3a463e6c709242 # initialize rs1
li x15, 0xdd3a463e6c709242 # initialize rs2
blt x26, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x8, 0x74d644225f074cb8 # initialize rs1
li x16, 0x87566db6e3653766 # initialize rs2
blt x8, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x87566db6e3653766 # initialize rs1
li x16, 0x87566db6e3653766 # initialize rs2
blt x8, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x27, 0xe69a120e9bddb460 # initialize rs1
li x17, 0xaa7cc9bd6bedb7a2 # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaa7cc9bd6bedb7a2 # initialize rs1
li x17, 0xaa7cc9bd6bedb7a2 # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x5, 0xb9a434fac8c8c29c # initialize rs1
li x18, 0xf4749717771c6732 # initialize rs2
blt x5, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xf4749717771c6732 # initialize rs1
li x18, 0xf4749717771c6732 # initialize rs2
blt x5, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x23, 0x35ad954bbbb15f03 # initialize rs1
li x19, 0x94baa3d8a2079fad # initialize rs2
blt x23, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x94baa3d8a2079fad # initialize rs1
li x19, 0x94baa3d8a2079fad # initialize rs2
blt x23, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x13, 0xfa2197f0d1bec4fc # initialize rs1
li x20, 0x6f7882f496dc7009 # initialize rs2
blt x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x6f7882f496dc7009 # initialize rs1
li x20, 0x6f7882f496dc7009 # initialize rs2
blt x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x16, 0x046de39de7dd0e6e # initialize rs1
li x21, 0x0c210ca38291ae88 # initialize rs2
blt x16, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0c210ca38291ae88 # initialize rs1
li x21, 0x0c210ca38291ae88 # initialize rs2
blt x16, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x2, 0xf38d3583b6990747 # initialize rs1
li x22, 0x4b584e1ebbefbd9c # initialize rs2
blt x2, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x4b584e1ebbefbd9c # initialize rs1
li x22, 0x4b584e1ebbefbd9c # initialize rs2
blt x2, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x2, 0x9e96419b60557c28 # initialize rs1
li x23, 0xa0263ed5fd2a3936 # initialize rs2
blt x2, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xa0263ed5fd2a3936 # initialize rs1
li x23, 0xa0263ed5fd2a3936 # initialize rs2
blt x2, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x16, 0x11d5af40153a9369 # initialize rs1
li x24, 0x20b9753990b12b05 # initialize rs2
blt x16, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x20b9753990b12b05 # initialize rs1
li x24, 0x20b9753990b12b05 # initialize rs2
blt x16, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x21, 0x428d96ecb9da0d12 # initialize rs1
li x25, 0x517494fe3ad53279 # initialize rs2
blt x21, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x517494fe3ad53279 # initialize rs1
li x25, 0x517494fe3ad53279 # initialize rs2
blt x21, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x19, 0x15068dfec5427a20 # initialize rs1
li x26, 0x2a9265150750ec48 # initialize rs2
blt x19, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2a9265150750ec48 # initialize rs1
li x26, 0x2a9265150750ec48 # initialize rs2
blt x19, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x3, 0x6f178474b112310b # initialize rs1
li x27, 0xc292cff6e39ef972 # initialize rs2
blt x3, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xc292cff6e39ef972 # initialize rs1
li x27, 0xc292cff6e39ef972 # initialize rs2
blt x3, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x3, 0x9ec2afa843d96a44 # initialize rs1
li x28, 0x1a4b287d1816400e # initialize rs2
blt x3, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x1a4b287d1816400e # initialize rs1
li x28, 0x1a4b287d1816400e # initialize rs2
blt x3, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x2, 0xb7a742613969f87c # initialize rs1
li x29, 0x335d04ee660b8e97 # initialize rs2
blt x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x335d04ee660b8e97 # initialize rs1
li x29, 0x335d04ee660b8e97 # initialize rs2
blt x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x7, 0x0cd3a9e3990c6e32 # initialize rs1
li x30, 0x7b1473a250d8fcdf # initialize rs2
blt x7, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7b1473a250d8fcdf # initialize rs1
li x30, 0x7b1473a250d8fcdf # initialize rs2
blt x7, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x14, 0xcba8e9c92681617b # initialize rs1
li x31, 0x177b6c2ffc5c7c83 # initialize rs2
blt x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x177b6c2ffc5c7c83 # initialize rs1
li x31, 0x177b6c2ffc5c7c83 # initialize rs2
blt x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x28, 0x0000000000000000 # initialize rs1
li x9, 0x30fa0280e42c527e # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x30fa0280e42c527e # initialize rs1
li x9, 0x30fa0280e42c527e # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x31, 0x0000000000000001 # initialize rs1
li x5, 0x533ff0b9b3145494 # initialize rs2
blt x31, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x533ff0b9b3145494 # initialize rs1
li x5, 0x533ff0b9b3145494 # initialize rs2
blt x31, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x26, 0x0000000000000002 # initialize rs1
li x29, 0x8efac4465cc5b974 # initialize rs2
blt x26, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8efac4465cc5b974 # initialize rs1
li x29, 0x8efac4465cc5b974 # initialize rs2
blt x26, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x22, 0x8000000000000000 # initialize rs1
li x15, 0xde08eb7aaf29dee4 # initialize rs2
blt x22, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xde08eb7aaf29dee4 # initialize rs1
li x15, 0xde08eb7aaf29dee4 # initialize rs2
blt x22, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x18, 0x8000000000000001 # initialize rs1
li x31, 0xaa0ef423f1067b2e # initialize rs2
blt x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xaa0ef423f1067b2e # initialize rs1
li x31, 0xaa0ef423f1067b2e # initialize rs2
blt x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x10, 0x9fd94359ab999746 # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x9fd94359ab999746 # initialize rs1
li x10, 0x9fd94359ab999746 # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x23, 0x043cd8d80f181cf7 # initialize rs2
blt x28, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x043cd8d80f181cf7 # initialize rs1
li x23, 0x043cd8d80f181cf7 # initialize rs2
blt x28, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x25, 0xffffffffffffffff # initialize rs1
li x6, 0xaebc1165e7af3a97 # initialize rs2
blt x25, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xaebc1165e7af3a97 # initialize rs1
li x6, 0xaebc1165e7af3a97 # initialize rs2
blt x25, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x17, 0xfffffffffffffffe # initialize rs1
li x30, 0x4f1cc6606ec33729 # initialize rs2
blt x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x4f1cc6606ec33729 # initialize rs1
li x30, 0x4f1cc6606ec33729 # initialize rs2
blt x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x838cf06ab7f8b5a9 # initialize rs2
blt x28, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x838cf06ab7f8b5a9 # initialize rs1
li x30, 0x838cf06ab7f8b5a9 # initialize rs2
blt x28, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xee701bc4fd5a039c # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xee701bc4fd5a039c # initialize rs1
li x23, 0xee701bc4fd5a039c # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x6, 0x5555555555555555 # initialize rs1
li x22, 0x091c74317fff2bdb # initialize rs2
blt x6, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x091c74317fff2bdb # initialize rs1
li x22, 0x091c74317fff2bdb # initialize rs2
blt x6, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x6, 0xd06cd042cecc9f69 # initialize rs2
blt x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xd06cd042cecc9f69 # initialize rs1
li x6, 0xd06cd042cecc9f69 # initialize rs2
blt x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x8, 0x00000000fffffffe # initialize rs1
li x31, 0xa4c622e14b1a73cd # initialize rs2
blt x8, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xa4c622e14b1a73cd # initialize rs1
li x31, 0xa4c622e14b1a73cd # initialize rs2
blt x8, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x19, 0x0000000100000000 # initialize rs1
li x25, 0x978079404fa9b3e0 # initialize rs2
blt x19, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x978079404fa9b3e0 # initialize rs1
li x25, 0x978079404fa9b3e0 # initialize rs2
blt x19, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x2, 0x0000000100000001 # initialize rs1
li x18, 0x9b501f1e8a076cf2 # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x9b501f1e8a076cf2 # initialize rs1
li x18, 0x9b501f1e8a076cf2 # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x17, 0x9d0372fcea24effc # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
blt x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
blt x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x5, 0xfd7a9678ed28efb4 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
blt x5, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
blt x5, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x26, 0x63faaa9dc0c7f87d # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
blt x26, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
blt x26, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x5, 0x06f46580ad87da73 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
blt x5, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000000 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
blt x5, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x1, 0x9fd82f9db9909944 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
blt x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
blt x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x31, 0xe5cbc7e7b5559c9e # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
blt x31, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
blt x31, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x30, 0x7f0bfb93eafee85e # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
blt x30, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
blt x30, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x29, 0x247e84f6a616c62a # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xffffffffffffffff # initialize rs1
li x31, 0xffffffffffffffff # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x22, 0xe34331736a9ffb7b # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x2, 0xcac6183f9215b01a # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x12, 0xa773999d60b82034 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x12, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x12, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x24, 0xb8412294b0d47bbb # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
blt x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5555555555555555 # initialize rs1
li x22, 0x5555555555555555 # initialize rs2
blt x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x15, 0x629dd0cb8015ef80 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
blt x15, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
blt x15, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x17, 0xfdd838e8c6e1e62a # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
blt x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
blt x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x2, 0x6d3b4253f895d592 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x28, 0xca34bd9d6d547e76 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
blt x28, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
blt x28, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x0000000000000000 # initialize rs1
li x23, 0x0000000000000000 # initialize rs2
blt x12, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x23, 0x0000000000000000 # initialize rs2
blt x12, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x31, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x12, 0x0000000000000000 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
blt x12, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
blt x12, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x8, 0x0000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
blt x8, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x21, 0x8000000000000000 # initialize rs2
blt x8, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x14, 0x0000000000000000 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
blt x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
blt x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x19, 0x0000000000000000 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
blt x19, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
blt x19, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x31, 0x0000000000000000 # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
blt x31, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
blt x31, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x20, 0x0000000000000000 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
blt x20, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xffffffffffffffff # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
blt x20, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x3, 0x0000000000000000 # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
blt x3, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffffffffffe # initialize rs1
li x21, 0xfffffffffffffffe # initialize rs2
blt x3, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x31, 0x0000000000000000 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
blt x31, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
blt x31, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000000000000 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x16, 0x0000000000000000 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
blt x16, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5555555555555555 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
blt x16, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x2, 0x0000000000000000 # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
blt x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000ffffffff # initialize rs1
li x29, 0x00000000ffffffff # initialize rs2
blt x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x9, 0x0000000000000000 # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
blt x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
blt x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x7, 0x0000000000000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
blt x7, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000000 # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
blt x7, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x11, 0x0000000000000000 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x25, 0x0000000000000001 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x14, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
blt x14, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000001 # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
blt x14, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x29, 0x0000000000000001 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
blt x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
blt x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x14, 0x0000000000000001 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x14, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x14, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x16, 0x0000000000000001 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
blt x16, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
blt x16, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x18, 0x0000000000000001 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
blt x18, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
blt x18, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x26, 0x0000000000000001 # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
blt x26, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffffffffffe # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
blt x26, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x30, 0x0000000000000001 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
blt x30, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
blt x30, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x23, 0x0000000000000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x14, 0x0000000000000001 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x0000000000000001 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x28, 0x0000000000000001 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5555555555555555 # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x22, 0x0000000000000001 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
blt x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000ffffffff # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
blt x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x23, 0x0000000000000001 # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
blt x23, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000fffffffe # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
blt x23, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x18, 0x0000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
blt x18, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
blt x18, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x10, 0x0000000000000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
blt x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
blt x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x5, 0x0000000000000002 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
blt x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
blt x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x18, 0x0000000000000002 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
blt x18, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
blt x18, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x23, 0x0000000000000002 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
blt x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000002 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
blt x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x5, 0x0000000000000002 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
blt x5, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
blt x5, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x17, 0x0000000000000002 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
blt x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000001 # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
blt x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x31, 0x0000000000000002 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x6, 0x0000000000000002 # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
blt x6, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
blt x6, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x13, 0x0000000000000002 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x20, 0x0000000000000002 # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
blt x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xfffffffffffffffe # initialize rs1
li x8, 0xfffffffffffffffe # initialize rs2
blt x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x31, 0x0000000000000002 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
blt x31, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
blt x31, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x0000000000000002 # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x7, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x7, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x29, 0x0000000000000002 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
blt x29, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5555555555555555 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
blt x29, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x12, 0x0000000000000002 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
blt x12, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
blt x12, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x10, 0x0000000000000002 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
blt x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
blt x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x31, 0x0000000000000002 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
blt x31, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
blt x31, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x31, 0x0000000000000002 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
blt x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
blt x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x13, 0x8000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
blt x13, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
blt x13, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x25, 0x8000000000000000 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
blt x25, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
blt x25, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x14, 0x8000000000000000 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
blt x14, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000002 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
blt x14, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x31, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
blt x31, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
blt x31, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x25, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
blt x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
blt x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x13, 0x8000000000000000 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
blt x13, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
blt x13, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x19, 0x8000000000000000 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffffffffffe # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x26, 0x8000000000000000 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
blt x26, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffffffffffff # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
blt x26, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x11, 0x8000000000000000 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x19, 0x8000000000000000 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x8000000000000000 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x3, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x3, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x26, 0x8000000000000000 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
blt x26, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
blt x26, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x26, 0x8000000000000000 # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
blt x26, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
blt x26, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x15, 0x8000000000000000 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
blt x15, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
blt x15, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x31, 0x8000000000000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
blt x31, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
blt x31, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x12, 0x8000000000000000 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
blt x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
blt x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x12, 0x8000000000000001 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
blt x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
blt x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x6, 0x8000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
blt x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000001 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
blt x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x13, 0x8000000000000001 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
blt x13, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
blt x13, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x7, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x9, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
blt x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
blt x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x31, 0x8000000000000001 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
blt x31, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
blt x31, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x18, 0x8000000000000001 # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
blt x18, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffffffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
blt x18, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x8, 0x8000000000000001 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
blt x8, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffffffffffff # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
blt x8, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x27, 0x8000000000000001 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
blt x27, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xfffffffffffffffe # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
blt x27, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x11, 0x8000000000000001 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
blt x11, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
blt x11, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x8000000000000001 # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x11, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x11, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x1, 0x8000000000000001 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x16, 0x8000000000000001 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
blt x16, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000000ffffffff # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
blt x16, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x22, 0x8000000000000001 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
blt x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
blt x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x16, 0x8000000000000001 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
blt x16, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000100000000 # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
blt x16, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x6, 0x8000000000000001 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
blt x6, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
blt x6, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x28, 0x7fffffffffffffff # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x1, 0x7fffffffffffffff # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
blt x1, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000001 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
blt x1, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x18, 0x7fffffffffffffff # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
blt x18, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
blt x18, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x14, 0x7fffffffffffffff # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
blt x14, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000000 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
blt x14, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x8, 0x7fffffffffffffff # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
blt x8, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
blt x8, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x9, 0x7fffffffffffffff # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
blt x9, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffffffffffff # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
blt x9, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x9, 0x7fffffffffffffff # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
blt x9, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
blt x9, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffffffffffff # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x11, 0x7fffffffffffffff # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
blt x11, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
blt x11, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x1, 0x7fffffffffffffff # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
blt x1, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
blt x1, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x7fffffffffffffff # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x9, 0x7fffffffffffffff # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
blt x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5555555555555555 # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
blt x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x14, 0x7fffffffffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
blt x14, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000ffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
blt x14, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x10, 0x7fffffffffffffff # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
blt x10, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000fffffffe # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
blt x10, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x24, 0x7fffffffffffffff # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
blt x24, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000100000000 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
blt x24, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x12, 0x7fffffffffffffff # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
blt x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000100000001 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
blt x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x24, 0x7ffffffffffffffe # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
blt x24, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000000 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
blt x24, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x31, 0x7ffffffffffffffe # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
blt x31, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
blt x31, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x21, 0x7ffffffffffffffe # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
blt x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
blt x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x22, 0x7ffffffffffffffe # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
blt x22, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000000 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
blt x22, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x31, 0x7ffffffffffffffe # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
blt x31, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8000000000000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
blt x31, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x10, 0x7ffffffffffffffe # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
blt x10, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffffffffffff # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
blt x10, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x3, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
blt x3, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7ffffffffffffffe # initialize rs2
blt x3, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x1, 0x7ffffffffffffffe # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
blt x1, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffffffffffff # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
blt x1, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x30, 0x7ffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
blt x30, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
blt x30, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x27, 0x7ffffffffffffffe # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x7ffffffffffffffe # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x30, 0x7ffffffffffffffe # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
blt x30, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
blt x30, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x16, 0x7ffffffffffffffe # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
blt x16, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000000ffffffff # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
blt x16, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x17, 0x7ffffffffffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
blt x17, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000fffffffe # initialize rs1
li x11, 0x00000000fffffffe # initialize rs2
blt x17, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x11, 0x7ffffffffffffffe # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
blt x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000000 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
blt x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x19, 0x7ffffffffffffffe # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
blt x19, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
blt x19, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x6, 0xffffffffffffffff # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
blt x6, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000000 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
blt x6, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x9, 0xffffffffffffffff # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000001 # initialize rs1
li x22, 0x0000000000000001 # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x28, 0xffffffffffffffff # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
blt x28, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
blt x28, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x2, 0xffffffffffffffff # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
blt x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x29, 0xffffffffffffffff # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
blt x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000001 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
blt x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x27, 0xffffffffffffffff # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
blt x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7fffffffffffffff # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
blt x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x16, 0xffffffffffffffff # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
blt x16, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7ffffffffffffffe # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
blt x16, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x18, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x18, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x18, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x1, 0xffffffffffffffff # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x14, 0xffffffffffffffff # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x25, 0xffffffffffffffff # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x18, 0xffffffffffffffff # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
blt x18, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5555555555555555 # initialize rs1
li x30, 0x5555555555555555 # initialize rs2
blt x18, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x18, 0xffffffffffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
blt x18, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000ffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
blt x18, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x2, 0xffffffffffffffff # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000fffffffe # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
blt x2, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x17, 0xffffffffffffffff # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
blt x17, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000000 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
blt x17, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x6, 0xffffffffffffffff # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
blt x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
blt x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x23, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
blt x23, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000000 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
blt x23, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x15, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000000000001 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x8, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
blt x8, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000002 # initialize rs1
li x25, 0x0000000000000002 # initialize rs2
blt x8, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x17, 0xfffffffffffffffe # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
blt x17, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000000 # initialize rs1
li x11, 0x8000000000000000 # initialize rs2
blt x17, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x9, 0xfffffffffffffffe # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
blt x9, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000001 # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
blt x9, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x8, 0xfffffffffffffffe # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
blt x8, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
blt x8, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x30, 0xfffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
blt x30, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
blt x30, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x16, 0xfffffffffffffffe # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
blt x16, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x21, 0xffffffffffffffff # initialize rs2
blt x16, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x5, 0xfffffffffffffffe # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
blt x5, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xfffffffffffffffe # initialize rs1
li x28, 0xfffffffffffffffe # initialize rs2
blt x5, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x28, 0xfffffffffffffffe # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
blt x28, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
blt x28, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0xfffffffffffffffe # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x26, 0xfffffffffffffffe # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x8, 0xfffffffffffffffe # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
blt x8, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
blt x8, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x6, 0xfffffffffffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
blt x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000fffffffe # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
blt x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x1, 0xfffffffffffffffe # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
blt x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x23, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
blt x23, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
blt x23, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
blt x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
blt x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
blt x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
blt x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
blt x16, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
blt x16, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
blt x20, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffffffffffff # initialize rs1
li x17, 0x7fffffffffffffff # initialize rs2
blt x20, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
blt x15, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffffffffffe # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
blt x15, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
blt x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffffffffffff # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
blt x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
blt x21, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffffffffffe # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
blt x21, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
blt x3, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5555555555555555 # initialize rs1
li x20, 0x5555555555555555 # initialize rs2
blt x3, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
blt x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
blt x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000fffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
blt x22, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
blt x22, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
blt x26, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
blt x26, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
blt x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000001 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
blt x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
blt x22, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000002 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
blt x22, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
blt x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000000 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
blt x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
blt x15, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7fffffffffffffff # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
blt x15, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
blt x24, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
blt x24, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
blt x26, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffffffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
blt x26, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
blt x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
blt x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x17, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x17, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
blt x31, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
blt x31, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
blt x29, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000fffffffe # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
blt x29, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
blt x27, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
blt x27, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
blt x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
blt x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x9, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
blt x9, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
blt x9, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x27, 0x5555555555555555 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
blt x27, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
blt x27, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x28, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
blt x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000002 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
blt x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x9, 0x5555555555555555 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
blt x9, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
blt x9, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x3, 0x5555555555555555 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
blt x3, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000001 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
blt x3, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x2, 0x5555555555555555 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
blt x2, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
blt x2, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x8, 0x5555555555555555 # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
blt x8, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
blt x8, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x6, 0x5555555555555555 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x6, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x6, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x20, 0x5555555555555555 # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
blt x20, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xfffffffffffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
blt x20, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x13, 0x5555555555555555 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
blt x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
blt x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x5555555555555555 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x22, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x22, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x17, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
blt x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
blt x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x11, 0x5555555555555555 # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
blt x11, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000ffffffff # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
blt x11, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x19, 0x5555555555555555 # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
blt x19, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000fffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
blt x19, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x22, 0x5555555555555555 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
blt x22, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
blt x22, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x20, 0x5555555555555555 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
blt x20, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
blt x20, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x17, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
blt x17, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
blt x17, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x23, 0x00000000ffffffff # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
blt x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000001 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
blt x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x20, 0x00000000ffffffff # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
blt x20, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
blt x20, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x20, 0x00000000ffffffff # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
blt x20, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
blt x20, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x27, 0x00000000ffffffff # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
blt x27, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
blt x27, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x11, 0x00000000ffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
blt x11, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
blt x11, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x16, 0x00000000ffffffff # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
blt x16, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
blt x16, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
blt x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x25, 0x00000000ffffffff # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
blt x25, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffffffffffe # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
blt x25, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x10, 0x00000000ffffffff # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
blt x10, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
blt x10, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x00000000ffffffff # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x18, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x18, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x26, 0x00000000ffffffff # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
blt x26, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
blt x26, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x19, 0x00000000ffffffff # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
blt x19, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000ffffffff # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
blt x19, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x30, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
blt x30, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000fffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
blt x30, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x7, 0x00000000ffffffff # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
blt x7, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
blt x7, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x17, 0x00000000ffffffff # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
blt x17, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
blt x17, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x9, 0x00000000fffffffe # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
blt x9, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000000 # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
blt x9, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x5, 0x00000000fffffffe # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
blt x5, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x23, 0x0000000000000001 # initialize rs2
blt x5, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x9, 0x00000000fffffffe # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
blt x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
blt x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x19, 0x00000000fffffffe # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000000 # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x30, 0x00000000fffffffe # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
blt x30, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x8000000000000001 # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
blt x30, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x28, 0x00000000fffffffe # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
blt x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7fffffffffffffff # initialize rs1
li x31, 0x7fffffffffffffff # initialize rs2
blt x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0x00000000fffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
blt x22, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7ffffffffffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
blt x22, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x25, 0x00000000fffffffe # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
blt x25, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
blt x25, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x23, 0x00000000fffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
blt x23, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffffffffffe # initialize rs1
li x27, 0xfffffffffffffffe # initialize rs2
blt x23, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x13, 0x00000000fffffffe # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
blt x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
blt x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x00000000fffffffe # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x2, 0x00000000fffffffe # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
blt x2, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5555555555555555 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
blt x2, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x8, 0x00000000fffffffe # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
blt x8, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
blt x8, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x1, 0x00000000fffffffe # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
blt x1, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000fffffffe # initialize rs1
li x9, 0x00000000fffffffe # initialize rs2
blt x1, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x6, 0x00000000fffffffe # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
blt x6, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000000 # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
blt x6, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x28, 0x00000000fffffffe # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
blt x28, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
blt x28, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x26, 0x0000000100000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
blt x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000000 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
blt x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x24, 0x0000000100000000 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
blt x24, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
blt x24, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x20, 0x0000000100000000 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
blt x20, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x26, 0x0000000000000002 # initialize rs2
blt x20, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x23, 0x0000000100000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000000 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
blt x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x23, 0x0000000100000000 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
blt x23, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
blt x23, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000100000000 # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
blt x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffffffffffff # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
blt x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x14, 0x0000000100000000 # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
blt x14, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffffffffffe # initialize rs1
li x12, 0x7ffffffffffffffe # initialize rs2
blt x14, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x22, 0x0000000100000000 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
blt x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xffffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
blt x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
blt x6, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
blt x6, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x2, 0x0000000100000000 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x5bbc887763ae86f2 # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x29, 0x0000000100000000 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x31, 0x0000000100000000 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
blt x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
blt x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x17, 0x0000000100000000 # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
blt x17, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
blt x17, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x3, 0x0000000100000000 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
blt x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
blt x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x21, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
blt x21, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000000 # initialize rs2
blt x21, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x15, 0x0000000100000000 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x0000000100000001 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
blt x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x10, 0x0000000100000001 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
blt x10, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000000 # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
blt x10, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x10, 0x0000000100000001 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
blt x10, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000001 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
blt x10, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x5, 0x0000000100000001 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
blt x5, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000002 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
blt x5, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x2, 0x0000000100000001 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
blt x2, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000000 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
blt x2, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x28, 0x0000000100000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
blt x28, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000001 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
blt x28, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x26, 0x0000000100000001 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
blt x26, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7fffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
blt x26, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000100000001 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
blt x5, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
blt x5, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x6, 0x0000000100000001 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
blt x6, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffffffffffff # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
blt x6, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x28, 0x0000000100000001 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
blt x28, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
blt x28, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x14, 0x0000000100000001 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
blt x14, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x0000000100000001 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x19, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
blt x19, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x2, 0x0000000100000001 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x2, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5555555555555555 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
blt x2, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x11, 0x0000000100000001 # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
blt x11, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000ffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
blt x11, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x12, 0x0000000100000001 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
blt x12, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
blt x12, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x11, 0x0000000100000001 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
blt x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000000 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
blt x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x31, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
blt x31, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
blt x31, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x36680603500f90bf # initialize rs1
li x0, 0x4fd9ffc3962f9f7a # initialize rs2
blt x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x4fd9ffc3962f9f7a # initialize rs1
li x0, 0x4fd9ffc3962f9f7a # initialize rs2
blt x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x91042d18a2ef332d # initialize rs1
li x1, 0xa2ee3d7300b621a0 # initialize rs2
blt x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xa2ee3d7300b621a0 # initialize rs1
li x1, 0xa2ee3d7300b621a0 # initialize rs2
blt x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x28040ee8e2be7356 # initialize rs1
li x2, 0xaaf2ae75c596f29e # initialize rs2
blt x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaf2ae75c596f29e # initialize rs1
li x2, 0xaaf2ae75c596f29e # initialize rs2
blt x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x2aa72fc15fd5dc39 # initialize rs1
li x3, 0x674e6cacab396fa0 # initialize rs2
blt x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x674e6cacab396fa0 # initialize rs1
li x3, 0x674e6cacab396fa0 # initialize rs2
blt x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x67589e584077235f # initialize rs1
li x4, 0xb4a05bdafa65307e # initialize rs2
blt x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xb4a05bdafa65307e # initialize rs1
li x4, 0xb4a05bdafa65307e # initialize rs2
blt x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x266f62a3e176d39d # initialize rs1
li x5, 0xac9f6688d3707c77 # initialize rs2
blt x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xac9f6688d3707c77 # initialize rs1
li x5, 0xac9f6688d3707c77 # initialize rs2
blt x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x2ee9ed39e71ac5bd # initialize rs1
li x6, 0x9fbbec6b6b2d9403 # initialize rs2
blt x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x9fbbec6b6b2d9403 # initialize rs1
li x6, 0x9fbbec6b6b2d9403 # initialize rs2
blt x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1581e037ad390f86 # initialize rs1
li x7, 0x7eb38c118bea5ffb # initialize rs2
blt x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7eb38c118bea5ffb # initialize rs1
li x7, 0x7eb38c118bea5ffb # initialize rs2
blt x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xa65b905d5008846a # initialize rs1
li x8, 0x6f90c8d9d0e792cb # initialize rs2
blt x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x6f90c8d9d0e792cb # initialize rs1
li x8, 0x6f90c8d9d0e792cb # initialize rs2
blt x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x1e8be44fa44b3257 # initialize rs1
li x9, 0xe00cdfad936de780 # initialize rs2
blt x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xe00cdfad936de780 # initialize rs1
li x9, 0xe00cdfad936de780 # initialize rs2
blt x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xb6ee44ff64b813dd # initialize rs1
li x10, 0xd8785eb35e3ceca8 # initialize rs2
blt x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xd8785eb35e3ceca8 # initialize rs1
li x10, 0xd8785eb35e3ceca8 # initialize rs2
blt x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x3289027acd640ac4 # initialize rs1
li x11, 0x98cb7dfe88f95bb5 # initialize rs2
blt x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x98cb7dfe88f95bb5 # initialize rs1
li x11, 0x98cb7dfe88f95bb5 # initialize rs2
blt x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xecffda9c34fd2089 # initialize rs1
li x12, 0x05eb6571b862d371 # initialize rs2
blt x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x05eb6571b862d371 # initialize rs1
li x12, 0x05eb6571b862d371 # initialize rs2
blt x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xe434e69a15764c1f # initialize rs1
li x13, 0x6b8bc88565b90090 # initialize rs2
blt x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x6b8bc88565b90090 # initialize rs1
li x13, 0x6b8bc88565b90090 # initialize rs2
blt x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xe668ec65b74faae9 # initialize rs1
li x14, 0x845a9f3c30f211a4 # initialize rs2
blt x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x845a9f3c30f211a4 # initialize rs1
li x14, 0x845a9f3c30f211a4 # initialize rs2
blt x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xe2bb22266c565c33 # initialize rs1
li x15, 0x306e62baa75ad0d9 # initialize rs2
blt x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x306e62baa75ad0d9 # initialize rs1
li x15, 0x306e62baa75ad0d9 # initialize rs2
blt x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xa153464c1978c6cc # initialize rs1
li x16, 0xbb52bce0dbd9c051 # initialize rs2
blt x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xbb52bce0dbd9c051 # initialize rs1
li x16, 0xbb52bce0dbd9c051 # initialize rs2
blt x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x7e663c063afe87b6 # initialize rs1
li x17, 0xc8276b733504e2e1 # initialize rs2
blt x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xc8276b733504e2e1 # initialize rs1
li x17, 0xc8276b733504e2e1 # initialize rs2
blt x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x87c714a46c8a1476 # initialize rs1
li x18, 0xb31588e905ff4004 # initialize rs2
blt x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xb31588e905ff4004 # initialize rs1
li x18, 0xb31588e905ff4004 # initialize rs2
blt x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x28d767e9a33577fc # initialize rs1
li x19, 0x04961bbdecb19fa8 # initialize rs2
blt x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x04961bbdecb19fa8 # initialize rs1
li x19, 0x04961bbdecb19fa8 # initialize rs2
blt x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x54bc0052c436cd1b # initialize rs1
li x20, 0xc3645670b0f74dd0 # initialize rs2
blt x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xc3645670b0f74dd0 # initialize rs1
li x20, 0xc3645670b0f74dd0 # initialize rs2
blt x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x77f8c1f5876c86f7 # initialize rs1
li x21, 0xa9c777374399d971 # initialize rs2
blt x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xa9c777374399d971 # initialize rs1
li x21, 0xa9c777374399d971 # initialize rs2
blt x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x3999f3f59a34bee7 # initialize rs1
li x22, 0xf7f4a47198c44f04 # initialize rs2
blt x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xf7f4a47198c44f04 # initialize rs1
li x22, 0xf7f4a47198c44f04 # initialize rs2
blt x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x543a6ce10b57a8e3 # initialize rs1
li x23, 0xebbb2799a3b1f049 # initialize rs2
blt x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xebbb2799a3b1f049 # initialize rs1
li x23, 0xebbb2799a3b1f049 # initialize rs2
blt x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x393f069cdec358cd # initialize rs1
li x24, 0xe5b5371f7cd7cf4e # initialize rs2
blt x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xe5b5371f7cd7cf4e # initialize rs1
li x24, 0xe5b5371f7cd7cf4e # initialize rs2
blt x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x66eae64402f534c8 # initialize rs1
li x25, 0x52f77ff89c2b0050 # initialize rs2
blt x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x52f77ff89c2b0050 # initialize rs1
li x25, 0x52f77ff89c2b0050 # initialize rs2
blt x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xae2ca43f217b0a9c # initialize rs1
li x26, 0xe9230827801953dd # initialize rs2
blt x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe9230827801953dd # initialize rs1
li x26, 0xe9230827801953dd # initialize rs2
blt x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xcb578ed92d436c8c # initialize rs1
li x27, 0xcb3a2d0a6664fc5e # initialize rs2
blt x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xcb3a2d0a6664fc5e # initialize rs1
li x27, 0xcb3a2d0a6664fc5e # initialize rs2
blt x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x0ae8ebb00dfff5bd # initialize rs1
li x28, 0x43e0a5d53f935aa8 # initialize rs2
blt x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x43e0a5d53f935aa8 # initialize rs1
li x28, 0x43e0a5d53f935aa8 # initialize rs2
blt x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x53f667a181ad7d20 # initialize rs1
li x29, 0xee883c09e48d548e # initialize rs2
blt x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xee883c09e48d548e # initialize rs1
li x29, 0xee883c09e48d548e # initialize rs2
blt x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x1610a57e600f12db # initialize rs1
li x30, 0x3b57d498582d9914 # initialize rs2
blt x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x3b57d498582d9914 # initialize rs1
li x30, 0x3b57d498582d9914 # initialize rs2
blt x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x1e0a855aa2aa6e34 # initialize rs1
li x31, 0x778fa112db61044d # initialize rs2
blt x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x778fa112db61044d # initialize rs1
li x31, 0x778fa112db61044d # initialize rs2
blt x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: blt x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x7, x25 # perform first operation
blt x23, x16, arbitraryLabel133
nop
arbitraryLabel133:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x26, x27 # perform first operation
blt x5, x1, arbitraryLabel134
nop
arbitraryLabel134:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x25, x27, x9 # perform first operation
blt x21, x7, arbitraryLabel135
nop
arbitraryLabel135:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x3, x15 # perform first operation
blt x2, x25, arbitraryLabel136
nop
arbitraryLabel136:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x27, x24 # perform first operation
blt x8, x13, arbitraryLabel137
nop
arbitraryLabel137:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x14, x31 # perform first operation
blt x7, x6, arbitraryLabel138
nop
arbitraryLabel138:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-slli.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xf13a5d149023a4bb # initialize rs1
slli x14, x0, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xff1c20826c4bdac7 # initialize rs1
slli x31, x1, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x67e43f6a914ded87 # initialize rs1
slli x6, x2, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xb2a7ce35a0e9d4fb # initialize rs1
slli x29, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4e1cdd1e8baf74a8 # initialize rs1
slli x8, x4, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdb822e80368a0e70 # initialize rs1
slli x13, x5, 6 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x40a982b15994780c # initialize rs1
slli x9, x6, 16 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb278b556e0659dec # initialize rs1
slli x10, x7, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x93be91f04f89e52c # initialize rs1
slli x13, x8, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x6e7440df280755c9 # initialize rs1
slli x17, x9, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x240bca27be36c4a9 # initialize rs1
slli x28, x10, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xd50bf4fa4313c028 # initialize rs1
slli x9, x11, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x7ac60d06823b27dc # initialize rs1
slli x19, x12, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa8de93f4df44d8c9 # initialize rs1
slli x25, x13, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x3d641141d6294065 # initialize rs1
slli x1, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xbbe328384af70017 # initialize rs1
slli x25, x15, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xf226f6c48facd6a4 # initialize rs1
slli x30, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xf694d1adf6284619 # initialize rs1
slli x7, x17, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x036dc63a5eb32d8a # initialize rs1
slli x27, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x793ba1046389db85 # initialize rs1
slli x6, x19, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x7b8afad6747f9a6c # initialize rs1
slli x11, x20, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x08b861897677ef71 # initialize rs1
slli x19, x21, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x730cb58b8853c509 # initialize rs1
slli x2, x22, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x4636c0107dd4d99c # initialize rs1
slli x30, x23, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xbf2181afc5b458c4 # initialize rs1
slli x15, x24, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xa8c998d1986ae52f # initialize rs1
slli x9, x25, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x0f28a723a94277a7 # initialize rs1
slli x29, x26, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x8f8c67fa07e85404 # initialize rs1
slli x25, x27, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xcc27a01bc515b9f2 # initialize rs1
slli x7, x28, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xd9ad33bf3e2dd0d7 # initialize rs1
slli x7, x29, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x97bbffd747694273 # initialize rs1
slli x18, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x67526cac1e167a1c # initialize rs1
slli x6, x31, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 248)

# Testcase cp_rd (Test destination rd = x0)
li x3, 0x178f02374f421b4a # initialize rs1
slli x0, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x28, 0x9dca073461c99d50 # initialize rs1
slli x1, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x24, 0x40dbb7f1fe211206 # initialize rs1
slli x2, x24, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x7, 0x1eb96b2a0aa126bc # initialize rs1
slli x3, x7, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x3, 0x5102b64b57c8d21b # initialize rs1
slli x4, x3, 37 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x8, 0xf1c556f3d94d66f3 # initialize rs1
slli x5, x8, 10 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x26, 0x8b19460afba5d655 # initialize rs1
slli x6, x26, 44 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0xe661298be0d45d91 # initialize rs1
slli x7, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x17, 0xa352c835f57fde5c # initialize rs1
slli x8, x17, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x10, 0xf3ef8397e452e1dd # initialize rs1
slli x9, x10, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x16, 0xc00dc8018ea86e5b # initialize rs1
slli x10, x16, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x18, 0x906aa68af6dd9c51 # initialize rs1
slli x11, x18, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x14, 0x52cf44a92edd69d2 # initialize rs1
slli x12, x14, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x30, 0xdd8447c3a8a1a262 # initialize rs1
slli x13, x30, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x10, 0x3bfe830ec9c05e53 # initialize rs1
slli x14, x10, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x7, 0x81f89c8b5a540c32 # initialize rs1
slli x15, x7, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x22, 0x625e9cf787e2ce60 # initialize rs1
slli x16, x22, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x13, 0x8050b78b9a8ab1b2 # initialize rs1
slli x17, x13, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x30, 0x077d35a5f90b9420 # initialize rs1
slli x18, x30, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x6, 0x91a785da90772429 # initialize rs1
slli x19, x6, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x15, 0xd9679db1ad5655c1 # initialize rs1
slli x20, x15, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x9, 0xc465e507e305b00f # initialize rs1
slli x21, x9, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x7, 0x7e6422748ddc6549 # initialize rs1
slli x22, x7, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x2, 0xbcf2ef3f7f630bdf # initialize rs1
slli x23, x2, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x24, 0xa4bfe68d23b338e1 # initialize rs1
slli x24, x24, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0x81c60fd3a5ab7676 # initialize rs1
slli x25, x7, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x31, 0xc40ba6c55f898dca # initialize rs1
slli x26, x31, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x16, 0x2db90cf23de89de0 # initialize rs1
slli x27, x16, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x31, 0xd74d4b6cc92e0572 # initialize rs1
slli x28, x31, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x26, 0xa0cabe4edfb1db34 # initialize rs1
slli x29, x26, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0xcb9cd81fe191234f # initialize rs1
slli x30, x11, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0xc3f5bdbfacf634e1 # initialize rs1
slli x31, x13, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x19, 0x0000000000000000 # initialize rs1
slli x9, x19, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x3, 0x0000000000000001 # initialize rs1
slli x11, x3, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x7, 0x0000000000000002 # initialize rs1
slli x23, x7, 50 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x23, 0x8000000000000000 # initialize rs1
slli x21, x23, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x17, 0x8000000000000001 # initialize rs1
slli x2, x17, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x27, 0x7fffffffffffffff # initialize rs1
slli x26, x27, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x27, 0x7ffffffffffffffe # initialize rs1
slli x16, x27, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x22, 0xffffffffffffffff # initialize rs1
slli x27, x22, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x24, 0xfffffffffffffffe # initialize rs1
slli x3, x24, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x2, 0x5bbc887763ae86f2 # initialize rs1
slli x21, x2, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
slli x31, x12, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x28, 0x5555555555555555 # initialize rs1
slli x20, x28, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x8, 0x00000000ffffffff # initialize rs1
slli x26, x8, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x26, 0x00000000fffffffe # initialize rs1
slli x29, x26, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x27, 0x0000000100000000 # initialize rs1
slli x1, x27, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x12, 0x0000000100000001 # initialize rs1
slli x20, x12, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x5c00ca18829588b4 # initialize rs1
slli x0, x0, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xe5012c567722478b # initialize rs1
slli x1, x1, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x80008a1a053a4f36 # initialize rs1
slli x2, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xec141f5bfe6bb0b4 # initialize rs1
slli x3, x3, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x22ada0ff9310269c # initialize rs1
slli x4, x4, 33 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe6d8016080fd2c11 # initialize rs1
slli x5, x5, 18 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x205b13a2253d2f43 # initialize rs1
slli x6, x6, 16 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x73b6f7f56ba2e72d # initialize rs1
slli x7, x7, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x1509db2c81fb5d7c # initialize rs1
slli x8, x8, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x42aa5f95791fa9ac # initialize rs1
slli x9, x9, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x2f919f6657d787d0 # initialize rs1
slli x10, x10, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x1246bb5cedcb52e8 # initialize rs1
slli x11, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x5401dd99d1172ae4 # initialize rs1
slli x12, x12, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb04b804d9ec226c2 # initialize rs1
slli x13, x13, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xb5edd1fbaf8b368a # initialize rs1
slli x14, x14, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xed98d89f204b0375 # initialize rs1
slli x15, x15, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x994802d61e2fec08 # initialize rs1
slli x16, x16, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x3e50488194351950 # initialize rs1
slli x17, x17, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xfc28ca6c19ef5f9b # initialize rs1
slli x18, x18, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x6f817ff8c378d575 # initialize rs1
slli x19, x19, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x6d1637d3a9e107fa # initialize rs1
slli x20, x20, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x2b1eb951c31f3551 # initialize rs1
slli x21, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x06b46405b9c104d6 # initialize rs1
slli x22, x22, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x6fd6a6442c6e0097 # initialize rs1
slli x23, x23, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x26d503138b8406c9 # initialize rs1
slli x24, x24, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x3a07c36324f1e70f # initialize rs1
slli x25, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xd393a00e23b68f25 # initialize rs1
slli x26, x26, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xf1a178ce593e4955 # initialize rs1
slli x27, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x119cd6f2a5088472 # initialize rs1
slli x28, x28, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x8b13a201ec636f56 # initialize rs1
slli x29, x29, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x7e8ee8217cd5db0a # initialize rs1
slli x30, x30, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xf5209ee2a8ff7fd4 # initialize rs1
slli x31, x31, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm (Test bit = 0)
li x20, 0x0e0df9aac25747f7 # initialize rs1
slli x2, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 896)

# Testcase cp_uimm (Test bit = 1)
li x5, 0x8369447ea8c96a02 # initialize rs1
slli x14, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 904)

# Testcase cp_uimm (Test bit = 2)
li x24, 0x15f09d17bd01beca # initialize rs1
slli x10, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 912)

# Testcase cp_uimm (Test bit = 3)
li x25, 0xf267492a3d530580 # initialize rs1
slli x26, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 920)

# Testcase cp_uimm (Test bit = 4)
li x2, 0x53e6958998ffd9d7 # initialize rs1
slli x9, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 928)

# Testcase cp_uimm (Test bit = 5)
li x24, 0xe294ed199e7e2404 # initialize rs1
slli x28, x24, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 936)

# Testcase cp_uimm (Test bit = 6)
li x16, 0x1659423d795ab8e4 # initialize rs1
slli x22, x16, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 944)

# Testcase cp_uimm (Test bit = 7)
li x11, 0x06ce8777b7dc2f17 # initialize rs1
slli x8, x11, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cp_uimm (Test bit = 8)
li x16, 0x5cdc78fb63ce311f # initialize rs1
slli x7, x16, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 960)

# Testcase cp_uimm (Test bit = 9)
li x12, 0x84404148b4ed98c5 # initialize rs1
slli x13, x12, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 968)

# Testcase cp_uimm (Test bit = 10)
li x25, 0xb2e214226f3f9dd4 # initialize rs1
slli x26, x25, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 976)

# Testcase cp_uimm (Test bit = 11)
li x12, 0x6ae9ecb65c58cf6f # initialize rs1
slli x28, x12, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 984)

# Testcase cp_uimm (Test bit = 12)
li x27, 0xdf6bb91a3754c796 # initialize rs1
slli x20, x27, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 992)

# Testcase cp_uimm (Test bit = 13)
li x10, 0xa115182c3b5a4426 # initialize rs1
slli x16, x10, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1000)

# Testcase cp_uimm (Test bit = 14)
li x7, 0xd2efddfd769378a5 # initialize rs1
slli x16, x7, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1008)

# Testcase cp_uimm (Test bit = 15)
li x10, 0xbdd276a8eb49f031 # initialize rs1
slli x16, x10, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1016)

# Testcase cp_uimm (Test bit = 16)
li x6, 0x0713492125a17cae # initialize rs1
slli x5, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1024)

# Testcase cp_uimm (Test bit = 17)
li x20, 0x8e88665e0daff7bf # initialize rs1
slli x5, x20, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1032)

# Testcase cp_uimm (Test bit = 18)
li x8, 0x85e92365b4fda442 # initialize rs1
slli x16, x8, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cp_uimm (Test bit = 19)
li x18, 0xa60f41815d07956e # initialize rs1
slli x8, x18, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1048)

# Testcase cp_uimm (Test bit = 20)
li x2, 0xc35cbd5dac4c53de # initialize rs1
slli x6, x2, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1056)

# Testcase cp_uimm (Test bit = 21)
li x12, 0x26d00644ff0af99a # initialize rs1
slli x25, x12, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1064)

# Testcase cp_uimm (Test bit = 22)
li x5, 0x2f25f5fd6bd1d5a2 # initialize rs1
slli x16, x5, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1072)

# Testcase cp_uimm (Test bit = 23)
li x12, 0xf352723596ea3f19 # initialize rs1
slli x26, x12, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1080)

# Testcase cp_uimm (Test bit = 24)
li x28, 0x34209ffde4542ea6 # initialize rs1
slli x30, x28, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1088)

# Testcase cp_uimm (Test bit = 25)
li x3, 0x4b60a262b5933ec8 # initialize rs1
slli x20, x3, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1096)

# Testcase cp_uimm (Test bit = 26)
li x10, 0xc760219c7d0087ca # initialize rs1
slli x26, x10, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1104)

# Testcase cp_uimm (Test bit = 27)
li x14, 0x27b02d9d65c43723 # initialize rs1
slli x29, x14, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1112)

# Testcase cp_uimm (Test bit = 28)
li x7, 0x7c9c18d0e6bcd50b # initialize rs1
slli x25, x7, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1120)

# Testcase cp_uimm (Test bit = 29)
li x13, 0x16525a901e125aa0 # initialize rs1
slli x20, x13, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1128)

# Testcase cp_uimm (Test bit = 30)
li x15, 0x5dfc9edba60e448b # initialize rs1
slli x23, x15, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1136)

# Testcase cp_uimm (Test bit = 31)
li x3, 0x205f9ba4986340bd # initialize rs1
slli x14, x3, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1144)

# Testcase cp_uimm (Test bit = 32)
li x15, 0x938444380d69f1be # initialize rs1
slli x16, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1152)

# Testcase cp_uimm (Test bit = 33)
li x26, 0xfcb488fd28c1e851 # initialize rs1
slli x24, x26, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1160)

# Testcase cp_uimm (Test bit = 34)
li x3, 0x3d0808db3961bbe2 # initialize rs1
slli x9, x3, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1168)

# Testcase cp_uimm (Test bit = 35)
li x30, 0x75646950b3d82044 # initialize rs1
slli x23, x30, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1176)

# Testcase cp_uimm (Test bit = 36)
li x16, 0x9943208690bee5a8 # initialize rs1
slli x22, x16, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1184)

# Testcase cp_uimm (Test bit = 37)
li x24, 0xe05ad07ce65a0fb4 # initialize rs1
slli x13, x24, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1192)

# Testcase cp_uimm (Test bit = 38)
li x6, 0xbba49b7c799ecea3 # initialize rs1
slli x17, x6, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1200)

# Testcase cp_uimm (Test bit = 39)
li x28, 0xd7f9732cb89b9f8a # initialize rs1
slli x10, x28, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1208)

# Testcase cp_uimm (Test bit = 40)
li x15, 0x9559f4064706a79c # initialize rs1
slli x24, x15, 40 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1216)

# Testcase cp_uimm (Test bit = 41)
li x1, 0xad29c4757b075990 # initialize rs1
slli x13, x1, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1224)

# Testcase cp_uimm (Test bit = 42)
li x3, 0xdf84368b59d641f7 # initialize rs1
slli x12, x3, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cp_uimm (Test bit = 43)
li x17, 0x15137450c8da536f # initialize rs1
slli x3, x17, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1240)

# Testcase cp_uimm (Test bit = 44)
li x6, 0xf878025bc48cf214 # initialize rs1
slli x5, x6, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1248)

# Testcase cp_uimm (Test bit = 45)
li x12, 0x8af9389eec6ff01f # initialize rs1
slli x2, x12, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1256)

# Testcase cp_uimm (Test bit = 46)
li x13, 0xf178cc978538f64f # initialize rs1
slli x23, x13, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1264)

# Testcase cp_uimm (Test bit = 47)
li x7, 0x4cafeb808ccad9ef # initialize rs1
slli x31, x7, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1272)

# Testcase cp_uimm (Test bit = 48)
li x29, 0x6f60990077b6bbcf # initialize rs1
slli x23, x29, 48 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1280)

# Testcase cp_uimm (Test bit = 49)
li x10, 0xb3daf23e098bb7ed # initialize rs1
slli x30, x10, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1288)

# Testcase cp_uimm (Test bit = 50)
li x31, 0xc35acf3e4864f257 # initialize rs1
slli x1, x31, 50 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1296)

# Testcase cp_uimm (Test bit = 51)
li x27, 0xd3b99666d8a64e58 # initialize rs1
slli x12, x27, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1304)

# Testcase cp_uimm (Test bit = 52)
li x8, 0x0594ac4721bb80de # initialize rs1
slli x17, x8, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1312)

# Testcase cp_uimm (Test bit = 53)
li x15, 0x2021338f79fbeb6d # initialize rs1
slli x31, x15, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1320)

# Testcase cp_uimm (Test bit = 54)
li x27, 0x2501d8184d2d24ca # initialize rs1
slli x3, x27, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1328)

# Testcase cp_uimm (Test bit = 55)
li x16, 0xf6c4a754741d92c7 # initialize rs1
slli x20, x16, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1336)

# Testcase cp_uimm (Test bit = 56)
li x8, 0x1d473717ef917850 # initialize rs1
slli x3, x8, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1344)

# Testcase cp_uimm (Test bit = 57)
li x12, 0x10b7a3fde58abfb3 # initialize rs1
slli x17, x12, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1352)

# Testcase cp_uimm (Test bit = 58)
li x31, 0x10448b933a3af43e # initialize rs1
slli x3, x31, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1360)

# Testcase cp_uimm (Test bit = 59)
li x13, 0x7b11077690745c85 # initialize rs1
slli x23, x13, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1368)

# Testcase cp_uimm (Test bit = 60)
li x11, 0x48edee810cdd386a # initialize rs1
slli x18, x11, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1376)

# Testcase cp_uimm (Test bit = 61)
li x15, 0x88933eb9a47f9eaf # initialize rs1
slli x7, x15, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1384)

# Testcase cp_uimm (Test bit = 62)
li x15, 0x2ec47805608c2217 # initialize rs1
slli x8, x15, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1392)

# Testcase cp_uimm (Test bit = 63)
li x22, 0xf56fc86bf0bc5ec8 # initialize rs1
slli x8, x22, 63 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1400)

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x22, x19 # perform first operation
slli x23, x7, 55 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x8, x14, x7 # perform first operation
slli x21, x22, 51 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x16, x28 # perform first operation
slli x17, x2, 17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x12, x13, x31 # perform first operation
slli x31, x12, 23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x26, x15 # perform first operation
slli x22, x23, 26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x6, x2 # perform first operation
slli x2, x9, 1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x21, x26, x8 # perform first operation
slli x21, x29, 47 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x13, x6 # perform first operation
slli x22, x29, 21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x24, x8 # perform first operation
slli x22, x6, 15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x26, x22, x31 # perform first operation
slli x22, x19, 35 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x13, x28, x2 # perform first operation
slli x2, x26, 46 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x19, x17, x9 # perform first operation
slli x31, x22, 23 # perform second (triggering) operation

#.EQU SIGSIZE,1408


// ******************
// Tests from: WALLY-COV-sraiw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x212ec0c26b3e424d # initialize rs1
sraiw x13, x0, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x82dc257fc8c73e9c # initialize rs1
sraiw x23, x1, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xf916860917a8f777 # initialize rs1
sraiw x14, x2, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x4effd5ccded9ecb4 # initialize rs1
sraiw x26, x3, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4222b5a7e5363bfb # initialize rs1
sraiw x30, x4, 27 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe56c25182c417957 # initialize rs1
sraiw x6, x5, 15 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0xa4a9bf9c5db046b7 # initialize rs1
sraiw x24, x6, 27 # perform operation
RVTEST_SIGUPD(x7, x0, x24, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x5c411323cbf6ae89 # initialize rs1
sraiw x8, x7, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x7cfbb16c56f95bdd # initialize rs1
sraiw x6, x8, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x0d9a229dd4952b0a # initialize rs1
sraiw x24, x9, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x065a09dc0831e20a # initialize rs1
sraiw x12, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xe435d63fb648362e # initialize rs1
sraiw x22, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x13bd36807214f260 # initialize rs1
sraiw x22, x12, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xba785ccffee07a41 # initialize rs1
sraiw x24, x13, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xf7b737a4602a314c # initialize rs1
sraiw x22, x14, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xd520650f4df6ee2c # initialize rs1
sraiw x29, x15, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x1661435b59af5667 # initialize rs1
sraiw x1, x16, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xebc1894f0d12cebb # initialize rs1
sraiw x11, x17, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x8658f6ccf28dc6a8 # initialize rs1
sraiw x22, x18, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x747b34c2e9fe02a2 # initialize rs1
sraiw x15, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x11eb401e8d16fafc # initialize rs1
sraiw x25, x20, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x7b3d775b9496efd6 # initialize rs1
sraiw x22, x21, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x37b493e6493f3cf4 # initialize rs1
sraiw x15, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x5f15c0c108e2ab35 # initialize rs1
sraiw x2, x23, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x3c46183fb3330dfe # initialize rs1
sraiw x14, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xe9cd652caa2f7dbd # initialize rs1
sraiw x18, x25, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x52526cb79cdc307e # initialize rs1
sraiw x18, x26, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x3e0ff9adbebc64e1 # initialize rs1
sraiw x12, x27, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x3bbced9310836ebb # initialize rs1
sraiw x6, x28, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x22b59b47faf71881 # initialize rs1
sraiw x10, x29, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x7343b1ba56295394 # initialize rs1
sraiw x28, x30, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xa05e9dab4e3f2a73 # initialize rs1
sraiw x21, x31, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 248)

# Testcase cp_rd (Test destination rd = x0)
li x28, 0x2beb53ded6c118ad # initialize rs1
sraiw x0, x28, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x21, 0x84c11429a5b52a31 # initialize rs1
sraiw x1, x21, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x11, 0xe09786c390f86cbf # initialize rs1
sraiw x2, x11, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x25, 0x49438908715aab39 # initialize rs1
sraiw x3, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xf6a537a8f9002209 # initialize rs1
sraiw x4, x15, 22 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0x01b130a970fb9b2f # initialize rs1
sraiw x5, x27, 28 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x20, 0x406f796503465648 # initialize rs1
sraiw x6, x20, 31 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0xf5953b62e8d6c523 # initialize rs1
sraiw x7, x10, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x22, 0xc9d42a7186a0f77e # initialize rs1
sraiw x8, x22, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x24, 0xa396591b5f977614 # initialize rs1
sraiw x9, x24, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0xfb956b734c90d4a0 # initialize rs1
sraiw x10, x31, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x3, 0x3e41f96ad0035f20 # initialize rs1
sraiw x11, x3, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x3, 0xe0d78e99c14504a9 # initialize rs1
sraiw x12, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x19, 0x7e60d6a7e7021d68 # initialize rs1
sraiw x13, x19, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x2, 0x1612b0f8ce27eb4a # initialize rs1
sraiw x14, x2, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x7, 0xb2a4145fb61f2279 # initialize rs1
sraiw x15, x7, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x2, 0x01159137d11b5540 # initialize rs1
sraiw x16, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x10, 0x769537b92d18cbb3 # initialize rs1
sraiw x17, x10, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x9, 0xc4820cdbbe3d977f # initialize rs1
sraiw x18, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x2, 0x14f7b3ab6f6fd0e4 # initialize rs1
sraiw x19, x2, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x18, 0x463a05a4698088b1 # initialize rs1
sraiw x20, x18, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x10, 0x4d97dc5a65dd0e40 # initialize rs1
sraiw x21, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x29, 0x4e4733831d5c7f5b # initialize rs1
sraiw x22, x29, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x8, 0x301e750901c68a72 # initialize rs1
sraiw x23, x8, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x26, 0x7e4df0abcd6dd174 # initialize rs1
sraiw x24, x26, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x5, 0x0524137540be03eb # initialize rs1
sraiw x25, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x12, 0xe18f4d4283175c79 # initialize rs1
sraiw x26, x12, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x13, 0xaeefb845ff04e4d4 # initialize rs1
sraiw x27, x13, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x13, 0x43cd2e1e59375b2e # initialize rs1
sraiw x28, x13, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x3, 0x8743bcd83b7a5a7c # initialize rs1
sraiw x29, x3, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x24, 0x1063600990d968d6 # initialize rs1
sraiw x30, x24, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x23, 0xb3f1f2e1c7e03cbf # initialize rs1
sraiw x31, x23, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x7, 0x0000000000000000 # initialize rs1
sraiw x10, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x11, 0x0000000000000001 # initialize rs1
sraiw x24, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x25, 0x0000000000000002 # initialize rs1
sraiw x19, x25, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x1, 0x8000000000000000 # initialize rs1
sraiw x2, x1, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x2, 0x8000000000000001 # initialize rs1
sraiw x31, x2, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x13, 0x7fffffffffffffff # initialize rs1
sraiw x27, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x23, 0x7ffffffffffffffe # initialize rs1
sraiw x7, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x16, 0xffffffffffffffff # initialize rs1
sraiw x3, x16, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x12, 0xfffffffffffffffe # initialize rs1
sraiw x3, x12, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x27, 0x5bbc887763ae86f2 # initialize rs1
sraiw x13, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
sraiw x15, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x7, 0x5555555555555555 # initialize rs1
sraiw x5, x7, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0x00000000ffffffff # initialize rs1
sraiw x30, x9, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
sraiw x1, x11, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x12, 0x0000000100000000 # initialize rs1
sraiw x18, x12, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x8, 0x0000000100000001 # initialize rs1
sraiw x14, x8, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x41b41fd01f61adac # initialize rs1
sraiw x0, x0, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x26b8b3ade7123c4a # initialize rs1
sraiw x1, x1, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x7c45d8c480eed68e # initialize rs1
sraiw x2, x2, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xd4c6311bb8e7ec9b # initialize rs1
sraiw x3, x3, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xdf70c3ed28ce4cd3 # initialize rs1
sraiw x4, x4, 21 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x24135747f1691ed9 # initialize rs1
sraiw x5, x5, 4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xaffe3ca753d1977d # initialize rs1
sraiw x6, x6, 11 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x99042029482d25cb # initialize rs1
sraiw x7, x7, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x859d5e9e96d52fa6 # initialize rs1
sraiw x8, x8, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc7cdb76d30d32eb8 # initialize rs1
sraiw x9, x9, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x284c6b75e2eb915e # initialize rs1
sraiw x10, x10, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x672aee5a51b399c7 # initialize rs1
sraiw x11, x11, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xb253269c3bd5d543 # initialize rs1
sraiw x12, x12, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x498e7b1f512b4711 # initialize rs1
sraiw x13, x13, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xc3bd3081ca35c245 # initialize rs1
sraiw x14, x14, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xf9fdb8d629673773 # initialize rs1
sraiw x15, x15, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x48dc2057f89dfdfe # initialize rs1
sraiw x16, x16, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xd61120a3081c66c2 # initialize rs1
sraiw x17, x17, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x5c7d0910f49768a6 # initialize rs1
sraiw x18, x18, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x873763817a00d625 # initialize rs1
sraiw x19, x19, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x51c24eae9f620ca3 # initialize rs1
sraiw x20, x20, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x9a05df06561d2479 # initialize rs1
sraiw x21, x21, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xdf3e9fd8352b33d5 # initialize rs1
sraiw x22, x22, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x9a8faf18e2c7cb9a # initialize rs1
sraiw x23, x23, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x1c0a210555a01b4d # initialize rs1
sraiw x24, x24, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x6909fae2bb969838 # initialize rs1
sraiw x25, x25, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xdbc16d2e055049bb # initialize rs1
sraiw x26, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xbedd8b4682e7d1fe # initialize rs1
sraiw x27, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xcb19c2d0a64116a8 # initialize rs1
sraiw x28, x28, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x3efd73835ffc2eaf # initialize rs1
sraiw x29, x29, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x2aa6859b5da5df65 # initialize rs1
sraiw x30, x30, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xb3251626eb58b498 # initialize rs1
sraiw x31, x31, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm_5 (Test bit = 0)
li x19, 0x35af3d0cb28b039e # initialize rs1
sraiw x31, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 896)

# Testcase cp_uimm_5 (Test bit = 1)
li x13, 0xa76e5aa7eca0513a # initialize rs1
sraiw x10, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 904)

# Testcase cp_uimm_5 (Test bit = 2)
li x7, 0x6f8fc1c508811898 # initialize rs1
sraiw x27, x7, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 912)

# Testcase cp_uimm_5 (Test bit = 3)
li x7, 0xa3ac38260548976c # initialize rs1
sraiw x14, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 920)

# Testcase cp_uimm_5 (Test bit = 4)
li x13, 0xd7ee04eec5f57bf5 # initialize rs1
sraiw x20, x13, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 928)

# Testcase cp_uimm_5 (Test bit = 5)
li x6, 0x995f5a13d2ae5fa0 # initialize rs1
sraiw x14, x6, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 936)

# Testcase cp_uimm_5 (Test bit = 6)
li x16, 0xc4cc3f4f46330d03 # initialize rs1
sraiw x20, x16, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 944)

# Testcase cp_uimm_5 (Test bit = 7)
li x2, 0xdb471e63f879d938 # initialize rs1
sraiw x29, x2, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 952)

# Testcase cp_uimm_5 (Test bit = 8)
li x24, 0x683b125e8839a58a # initialize rs1
sraiw x29, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 960)

# Testcase cp_uimm_5 (Test bit = 9)
li x30, 0xeb332c2e8fc81f5d # initialize rs1
sraiw x7, x30, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 968)

# Testcase cp_uimm_5 (Test bit = 10)
li x7, 0xbf517bd2eb046177 # initialize rs1
sraiw x14, x7, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 976)

# Testcase cp_uimm_5 (Test bit = 11)
li x18, 0x73c7fb24c73029d5 # initialize rs1
sraiw x15, x18, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 984)

# Testcase cp_uimm_5 (Test bit = 12)
li x22, 0x9a98337e30f92c45 # initialize rs1
sraiw x19, x22, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 992)

# Testcase cp_uimm_5 (Test bit = 13)
li x9, 0x9602114cbbad2c3d # initialize rs1
sraiw x7, x9, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1000)

# Testcase cp_uimm_5 (Test bit = 14)
li x13, 0xbbf5024ddd2f3797 # initialize rs1
sraiw x12, x13, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1008)

# Testcase cp_uimm_5 (Test bit = 15)
li x9, 0x085e5de7845896d2 # initialize rs1
sraiw x21, x9, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1016)

# Testcase cp_uimm_5 (Test bit = 16)
li x3, 0x46a7d84331f9ee5d # initialize rs1
sraiw x31, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1024)

# Testcase cp_uimm_5 (Test bit = 17)
li x22, 0xa8cb606bd61a472c # initialize rs1
sraiw x31, x22, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1032)

# Testcase cp_uimm_5 (Test bit = 18)
li x7, 0x80beaa634cd8f20e # initialize rs1
sraiw x3, x7, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1040)

# Testcase cp_uimm_5 (Test bit = 19)
li x1, 0x4913a45b6fcdfdb1 # initialize rs1
sraiw x20, x1, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1048)

# Testcase cp_uimm_5 (Test bit = 20)
li x12, 0x097c0263bbaec3ae # initialize rs1
sraiw x8, x12, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1056)

# Testcase cp_uimm_5 (Test bit = 21)
li x17, 0xe6e73e968125b3b2 # initialize rs1
sraiw x12, x17, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1064)

# Testcase cp_uimm_5 (Test bit = 22)
li x30, 0x739ed6b75f792edf # initialize rs1
sraiw x23, x30, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1072)

# Testcase cp_uimm_5 (Test bit = 23)
li x18, 0xbeabe9b351e19d8a # initialize rs1
sraiw x27, x18, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1080)

# Testcase cp_uimm_5 (Test bit = 24)
li x28, 0x3c5b500e1f9a4611 # initialize rs1
sraiw x2, x28, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1088)

# Testcase cp_uimm_5 (Test bit = 25)
li x10, 0x66cf8e607d7ed572 # initialize rs1
sraiw x5, x10, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1096)

# Testcase cp_uimm_5 (Test bit = 26)
li x7, 0xd94bc42f7977f5c5 # initialize rs1
sraiw x8, x7, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1104)

# Testcase cp_uimm_5 (Test bit = 27)
li x13, 0x8d0b2d86fa7685c1 # initialize rs1
sraiw x24, x13, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1112)

# Testcase cp_uimm_5 (Test bit = 28)
li x2, 0x58330d0ebc40cff8 # initialize rs1
sraiw x31, x2, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1120)

# Testcase cp_uimm_5 (Test bit = 29)
li x28, 0xa8314d918b2578d5 # initialize rs1
sraiw x6, x28, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1128)

# Testcase cp_uimm_5 (Test bit = 30)
li x11, 0x29a77b508a016284 # initialize rs1
sraiw x22, x11, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1136)

# Testcase cp_uimm_5 (Test bit = 31)
li x13, 0xee85a8402bd0c13f # initialize rs1
sraiw x22, x13, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1144)

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x3, x23 # perform first operation
sraiw x9, x20, 19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x23, x11 # perform first operation
sraiw x10, x12, 15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x22, x15 # perform first operation
sraiw x20, x31, 23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x12, x7 # perform first operation
sraiw x17, x17, 22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x1, x22, x15 # perform first operation
sraiw x15, x11, 25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x22, x21 # perform first operation
sraiw x22, x17, 31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x6, x27 # perform first operation
sraiw x12, x26, 11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x26, x27 # perform first operation
sraiw x7, x1, 1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x13, x2 # perform first operation
sraiw x16, x25, 21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x14, x29 # perform first operation
sraiw x14, x16, 30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x31, x22 # perform first operation
sraiw x22, x6, 3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x5, x29 # perform first operation
sraiw x9, x24, 6 # perform second (triggering) operation

#.EQU SIGSIZE,1152


// ******************
// Tests from: WALLY-COV-jalr.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
la x1, 1f # jump destination address
addi x1, x1, 1023 # add immediate to lower part of rs1
jalr x19, x1, -1023 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
la x2, 1f # jump destination address
addi x2, x2, 1849 # add immediate to lower part of rs1
jalr x29, x2, -1849 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
la x3, 1f # jump destination address
addi x3, x3, 92 # add immediate to lower part of rs1
jalr x15, x3, -92 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
la x4, 1f # jump destination address
addi x4, x4, 1844 # add immediate to lower part of rs1
jalr x26, x4, -1844 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
la x5, 1f # jump destination address
addi x5, x5, -1401 # add immediate to lower part of rs1
jalr x4, x5, 1401 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
la x6, 1f # jump destination address
addi x6, x6, -369 # add immediate to lower part of rs1
jalr x5, x6, 369 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
la x7, 1f # jump destination address
addi x7, x7, -1867 # add immediate to lower part of rs1
jalr x9, x7, 1867 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
la x8, 1f # jump destination address
addi x8, x8, 1695 # add immediate to lower part of rs1
jalr x10, x8, -1695 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
la x9, 1f # jump destination address
addi x9, x9, 91 # add immediate to lower part of rs1
jalr x15, x9, -91 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
la x10, 1f # jump destination address
addi x10, x10, -10 # add immediate to lower part of rs1
jalr x29, x10, 10 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
la x11, 1f # jump destination address
addi x11, x11, -1004 # add immediate to lower part of rs1
jalr x14, x11, 1004 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
la x12, 1f # jump destination address
addi x12, x12, 832 # add immediate to lower part of rs1
jalr x29, x12, -832 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
la x13, 1f # jump destination address
addi x13, x13, -1498 # add immediate to lower part of rs1
jalr x1, x13, 1498 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
la x14, 1f # jump destination address
addi x14, x14, -1832 # add immediate to lower part of rs1
jalr x25, x14, 1832 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
la x15, 1f # jump destination address
addi x15, x15, -545 # add immediate to lower part of rs1
jalr x19, x15, 545 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
la x16, 1f # jump destination address
addi x16, x16, 442 # add immediate to lower part of rs1
jalr x23, x16, -442 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
la x17, 1f # jump destination address
addi x17, x17, -1526 # add immediate to lower part of rs1
jalr x15, x17, 1526 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
la x18, 1f # jump destination address
addi x18, x18, -183 # add immediate to lower part of rs1
jalr x27, x18, 183 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
la x19, 1f # jump destination address
addi x19, x19, -1308 # add immediate to lower part of rs1
jalr x11, x19, 1308 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
la x20, 1f # jump destination address
addi x20, x20, 1804 # add immediate to lower part of rs1
jalr x2, x20, -1804 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
la x21, 1f # jump destination address
addi x21, x21, -1241 # add immediate to lower part of rs1
jalr x14, x21, 1241 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
la x22, 1f # jump destination address
addi x22, x22, -1173 # add immediate to lower part of rs1
jalr x30, x22, 1173 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
la x23, 1f # jump destination address
addi x23, x23, 1973 # add immediate to lower part of rs1
jalr x16, x23, -1973 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
la x24, 1f # jump destination address
addi x24, x24, -1718 # add immediate to lower part of rs1
jalr x29, x24, 1718 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
la x25, 1f # jump destination address
addi x25, x25, -1208 # add immediate to lower part of rs1
jalr x15, x25, 1208 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
la x26, 1f # jump destination address
addi x26, x26, 299 # add immediate to lower part of rs1
jalr x1, x26, -299 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
la x27, 1f # jump destination address
addi x27, x27, 260 # add immediate to lower part of rs1
jalr x7, x27, -260 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
la x28, 1f # jump destination address
addi x28, x28, -312 # add immediate to lower part of rs1
jalr x7, x28, 312 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
la x29, 1f # jump destination address
addi x29, x29, 1477 # add immediate to lower part of rs1
jalr x14, x29, -1477 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
la x30, 1f # jump destination address
addi x30, x30, 1841 # add immediate to lower part of rs1
jalr x10, x30, -1841 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
la x31, 1f # jump destination address
addi x31, x31, -602 # add immediate to lower part of rs1
jalr x22, x31, 602 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x0)
la x1, 1f # jump destination address
addi x1, x1, 889 # add immediate to lower part of rs1
jalr x0, x1, -889 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x1)
la x7, 1f # jump destination address
addi x7, x7, 1555 # add immediate to lower part of rs1
jalr x1, x7, -1555 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x2)
la x21, 1f # jump destination address
addi x21, x21, -1582 # add immediate to lower part of rs1
jalr x2, x21, 1582 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x3)
la x10, 1f # jump destination address
addi x10, x10, 174 # add immediate to lower part of rs1
jalr x3, x10, -174 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
la x3, 1f # jump destination address
addi x3, x3, 1899 # add immediate to lower part of rs1
jalr x4, x3, -1899 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
la x27, 1f # jump destination address
addi x27, x27, -376 # add immediate to lower part of rs1
jalr x5, x27, 376 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
la x27, 1f # jump destination address
addi x27, x27, -817 # add immediate to lower part of rs1
jalr x6, x27, 817 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
la x18, 1f # jump destination address
addi x18, x18, 798 # add immediate to lower part of rs1
jalr x7, x18, -798 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x8)
la x22, 1f # jump destination address
addi x22, x22, 1418 # add immediate to lower part of rs1
jalr x8, x22, -1418 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x9)
la x21, 1f # jump destination address
addi x21, x21, 444 # add immediate to lower part of rs1
jalr x9, x21, -444 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x10)
la x30, 1f # jump destination address
addi x30, x30, -603 # add immediate to lower part of rs1
jalr x10, x30, 603 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x11)
la x30, 1f # jump destination address
addi x30, x30, -380 # add immediate to lower part of rs1
jalr x11, x30, 380 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x12)
la x21, 1f # jump destination address
addi x21, x21, -1789 # add immediate to lower part of rs1
jalr x12, x21, 1789 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x13)
la x3, 1f # jump destination address
addi x3, x3, -850 # add immediate to lower part of rs1
jalr x13, x3, 850 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x14)
la x15, 1f # jump destination address
addi x15, x15, 650 # add immediate to lower part of rs1
jalr x14, x15, -650 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x15)
la x11, 1f # jump destination address
addi x11, x11, 816 # add immediate to lower part of rs1
jalr x15, x11, -816 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x16)
la x13, 1f # jump destination address
addi x13, x13, -1619 # add immediate to lower part of rs1
jalr x16, x13, 1619 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x17)
la x10, 1f # jump destination address
addi x10, x10, -1711 # add immediate to lower part of rs1
jalr x17, x10, 1711 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x18)
la x11, 1f # jump destination address
addi x11, x11, 1738 # add immediate to lower part of rs1
jalr x18, x11, -1738 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x19)
la x14, 1f # jump destination address
addi x14, x14, 270 # add immediate to lower part of rs1
jalr x19, x14, -270 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x20)
la x14, 1f # jump destination address
addi x14, x14, 1555 # add immediate to lower part of rs1
jalr x20, x14, -1555 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x21)
la x21, 1f # jump destination address
addi x21, x21, 1960 # add immediate to lower part of rs1
jalr x21, x21, -1960 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x22)
la x10, 1f # jump destination address
addi x10, x10, 11 # add immediate to lower part of rs1
jalr x22, x10, -11 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x23)
la x24, 1f # jump destination address
addi x24, x24, 1949 # add immediate to lower part of rs1
jalr x23, x24, -1949 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x24)
la x18, 1f # jump destination address
addi x18, x18, -1107 # add immediate to lower part of rs1
jalr x24, x18, 1107 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x25)
la x1, 1f # jump destination address
addi x1, x1, -158 # add immediate to lower part of rs1
jalr x25, x1, 158 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x26)
la x11, 1f # jump destination address
addi x11, x11, -767 # add immediate to lower part of rs1
jalr x26, x11, 767 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x27)
la x21, 1f # jump destination address
addi x21, x21, -209 # add immediate to lower part of rs1
jalr x27, x21, 209 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x28)
la x9, 1f # jump destination address
addi x9, x9, -663 # add immediate to lower part of rs1
jalr x28, x9, 663 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x29)
la x19, 1f # jump destination address
addi x19, x19, -1388 # add immediate to lower part of rs1
jalr x29, x19, 1388 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x30)
la x2, 1f # jump destination address
addi x2, x2, 1437 # add immediate to lower part of rs1
jalr x30, x2, -1437 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x31)
la x6, 1f # jump destination address
addi x6, x6, 928 # add immediate to lower part of rs1
jalr x31, x6, -928 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
la x1, 1f # jump destination address
addi x1, x1, -1056 # add immediate to lower part of rs1
jalr x1, x1, 1056 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
la x2, 1f # jump destination address
addi x2, x2, -49 # add immediate to lower part of rs1
jalr x2, x2, 49 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
la x3, 1f # jump destination address
addi x3, x3, 1131 # add immediate to lower part of rs1
jalr x3, x3, -1131 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
la x4, 1f # jump destination address
addi x4, x4, -1859 # add immediate to lower part of rs1
jalr x4, x4, 1859 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
la x5, 1f # jump destination address
addi x5, x5, 828 # add immediate to lower part of rs1
jalr x5, x5, -828 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
la x6, 1f # jump destination address
addi x6, x6, -1148 # add immediate to lower part of rs1
jalr x6, x6, 1148 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
la x7, 1f # jump destination address
addi x7, x7, 738 # add immediate to lower part of rs1
jalr x7, x7, -738 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
la x8, 1f # jump destination address
addi x8, x8, -127 # add immediate to lower part of rs1
jalr x8, x8, 127 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
la x9, 1f # jump destination address
addi x9, x9, 1335 # add immediate to lower part of rs1
jalr x9, x9, -1335 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
la x10, 1f # jump destination address
addi x10, x10, -72 # add immediate to lower part of rs1
jalr x10, x10, 72 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
la x11, 1f # jump destination address
addi x11, x11, -1074 # add immediate to lower part of rs1
jalr x11, x11, 1074 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
la x12, 1f # jump destination address
addi x12, x12, -844 # add immediate to lower part of rs1
jalr x12, x12, 844 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
la x13, 1f # jump destination address
addi x13, x13, -810 # add immediate to lower part of rs1
jalr x13, x13, 810 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
la x14, 1f # jump destination address
addi x14, x14, 1585 # add immediate to lower part of rs1
jalr x14, x14, -1585 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
la x15, 1f # jump destination address
addi x15, x15, -596 # add immediate to lower part of rs1
jalr x15, x15, 596 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
la x16, 1f # jump destination address
addi x16, x16, -1339 # add immediate to lower part of rs1
jalr x16, x16, 1339 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
la x17, 1f # jump destination address
addi x17, x17, -1629 # add immediate to lower part of rs1
jalr x17, x17, 1629 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
la x18, 1f # jump destination address
addi x18, x18, 1317 # add immediate to lower part of rs1
jalr x18, x18, -1317 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
la x19, 1f # jump destination address
addi x19, x19, 578 # add immediate to lower part of rs1
jalr x19, x19, -578 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
la x20, 1f # jump destination address
addi x20, x20, -1019 # add immediate to lower part of rs1
jalr x20, x20, 1019 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
la x21, 1f # jump destination address
addi x21, x21, 1250 # add immediate to lower part of rs1
jalr x21, x21, -1250 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
la x22, 1f # jump destination address
addi x22, x22, 540 # add immediate to lower part of rs1
jalr x22, x22, -540 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
la x23, 1f # jump destination address
addi x23, x23, 1760 # add immediate to lower part of rs1
jalr x23, x23, -1760 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
la x24, 1f # jump destination address
addi x24, x24, -350 # add immediate to lower part of rs1
jalr x24, x24, 350 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
la x25, 1f # jump destination address
addi x25, x25, -1299 # add immediate to lower part of rs1
jalr x25, x25, 1299 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
la x26, 1f # jump destination address
addi x26, x26, -108 # add immediate to lower part of rs1
jalr x26, x26, 108 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
la x27, 1f # jump destination address
addi x27, x27, -1398 # add immediate to lower part of rs1
jalr x27, x27, 1398 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
la x28, 1f # jump destination address
addi x28, x28, -188 # add immediate to lower part of rs1
jalr x28, x28, 188 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
la x29, 1f # jump destination address
addi x29, x29, -818 # add immediate to lower part of rs1
jalr x29, x29, 818 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
la x30, 1f # jump destination address
addi x30, x30, -1694 # add immediate to lower part of rs1
jalr x30, x30, 1694 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
la x31, 1f # jump destination address
addi x31, x31, -1705 # add immediate to lower part of rs1
jalr x31, x31, 1705 # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward jalr target: jump past backward jalr
2: la x1, 1b # backward jalr target
jalr x1 # backward jalr
3: nop # done with sequence

# Testcase cp_offset_lsbs
la x3, jalrlsb1 # load address of label
jalr x1, x3, 1 # jump to label + 1, extra plus 1 should be discarded
nop # something to skip over
jalrlsb1: 
la x3, jalrlsb2 # load address of label
addi x3, x3, 3 # add 3 to address
jalr x1, x3, -2 # jump to label + 1, extra plus 1 should be discarded
nop # something to skip over
jalrlsb2: 

# Testcase cp_imm_corners jalr 1 bin
la x7, 1f
addi x7, x7, -1 # sub immediate from rs1 to counter offset
jalr x13, x7, 1 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 2 bin
la x17, 1f
addi x17, x17, -2 # sub immediate from rs1 to counter offset
jalr x16, x17, 2 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 3 bin
la x20, 1f
addi x20, x20, -3 # sub immediate from rs1 to counter offset
jalr x21, x20, 3 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 4 bin
la x2, 1f
addi x2, x2, -4 # sub immediate from rs1 to counter offset
jalr x18, x2, 4 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 8 bin
la x21, 1f
addi x21, x21, -8 # sub immediate from rs1 to counter offset
jalr x14, x21, 8 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 16 bin
la x11, 1f
addi x11, x11, -16 # sub immediate from rs1 to counter offset
jalr x8, x11, 16 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 32 bin
la x23, 1f
addi x23, x23, -32 # sub immediate from rs1 to counter offset
jalr x11, x23, 32 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 64 bin
la x12, 1f
addi x12, x12, -64 # sub immediate from rs1 to counter offset
jalr x16, x12, 64 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 128 bin
la x21, 1f
addi x21, x21, -128 # sub immediate from rs1 to counter offset
jalr x27, x21, 128 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 256 bin
la x24, 1f
addi x24, x24, -256 # sub immediate from rs1 to counter offset
jalr x14, x24, 256 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 512 bin
la x19, 1f
addi x19, x19, -512 # sub immediate from rs1 to counter offset
jalr x30, x19, 512 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1023 bin
la x23, 1f
addi x23, x23, -1023 # sub immediate from rs1 to counter offset
jalr x14, x23, 1023 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1024 bin
la x26, 1f
addi x26, x26, -1024 # sub immediate from rs1 to counter offset
jalr x23, x26, 1024 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1795 bin
la x28, 1f
addi x28, x28, -1795 # sub immediate from rs1 to counter offset
jalr x22, x28, 1795 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 2047 bin
la x6, 1f
addi x6, x6, -2047 # sub immediate from rs1 to counter offset
jalr x8, x6, 2047 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2048 bin
la x2, 1f
addi x2, x2, 2047 # increment rs1 by 2047 
addi x2, x2, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
jalr x12, x2, -2048 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2047 bin
la x11, 1f
addi x11, x11, 2047 # sub immediate from rs1 to counter offset
jalr x12, x11, -2047 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2 bin
la x29, 1f
addi x29, x29, 2 # sub immediate from rs1 to counter offset
jalr x10, x29, -2 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -1 bin
la x9, 1f
addi x9, x9, 1 # sub immediate from rs1 to counter offset
jalr x30, x9, -1 # jump to assigned address to stress immediate
1:

# Testcase cp_gpr/fpr_hazard nohaz test
la x21, arbitraryLabel160
add x16, x12, x17 # perform first operation
jalr x14, x21, 0 # perform second (triggering) operation
arbitraryLabel160:
nop

# Testcase cp_gpr/fpr_hazard nohaz test
la x12, arbitraryLabel161
add x23, x13, x30 # perform first operation
jalr x28, x12, 0 # perform second (triggering) operation
arbitraryLabel161:
nop

# Testcase cp_gpr/fpr_hazard nohaz test
la x13, arbitraryLabel162
add x17, x14, x11 # perform first operation
jalr x7, x13, 0 # perform second (triggering) operation
arbitraryLabel162:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x15, x3, x13 # perform first operation
la x15, arbitraryLabel163
jalr x3, x15, 0 # perform second (triggering) operation
arbitraryLabel163:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x2, x26, x25 # perform first operation
la x2, arbitraryLabel164
jalr x25, x2, 0 # perform second (triggering) operation
arbitraryLabel164:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x28, x31, x30 # perform first operation
la x8, arbitraryLabel165
jalr x15, x8, 0 # perform second (triggering) operation
arbitraryLabel165:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x16, arbitraryLabel166
add x1, x8, x20 # perform first operation
jalr x1, x16, 0 # perform second (triggering) operation
arbitraryLabel166:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x31, arbitraryLabel167
add x26, x28, x24 # perform first operation
jalr x26, x31, 0 # perform second (triggering) operation
arbitraryLabel167:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x23, arbitraryLabel168
add x25, x18, x29 # perform first operation
jalr x25, x23, 0 # perform second (triggering) operation
arbitraryLabel168:
nop

# Testcase cp_gpr/fpr_hazard war test
la x23, arbitraryLabel169
add x28, x6, x11 # perform first operation
jalr x6, x23, 0 # perform second (triggering) operation
arbitraryLabel169:
nop

# Testcase cp_gpr/fpr_hazard war test
la x26, arbitraryLabel170
add x7, x16, x5 # perform first operation
jalr x5, x26, 0 # perform second (triggering) operation
arbitraryLabel170:
nop

# Testcase cp_gpr/fpr_hazard war test
la x6, arbitraryLabel171
add x19, x18, x10 # perform first operation
jalr x7, x6, 0 # perform second (triggering) operation
arbitraryLabel171:
nop

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x3, 0x9740c30ae7acc05a # initialize rs2
la x1, scratch # base address 
addi x1, x1, -7 # sub immediate from rs1 to counter offset
sd x3, 7 (x1) # store value to put something in memory
lw x14, 7(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x17, 0x9d6acbef387bf694 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1489 # sub immediate from rs1 to counter offset
sd x17, -1489 (x2) # store value to put something in memory
lw x12, -1489(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x16, 0x2b94186ed35a1758 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -87 # sub immediate from rs1 to counter offset
sd x16, 87 (x3) # store value to put something in memory
lw x15, 87(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0x37b71a2d20043fe3 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 128 # sub immediate from rs1 to counter offset
sd x5, -128 (x4) # store value to put something in memory
lw x8, -128(x4) # perform operation
RVTEST_SIGUPD(x6, x0, x8, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
li x27, 0x9445d89dd834b53d # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1427 # sub immediate from rs1 to counter offset
sd x27, -1427 (x5) # store value to put something in memory
lw x30, -1427(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x30, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x9, 0xe3792d7c0fc19171 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -993 # sub immediate from rs1 to counter offset
sd x9, 993 (x6) # store value to put something in memory
lw x25, 993(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x25, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x282c9b1e68e462c1 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1273 # sub immediate from rs1 to counter offset
sd x11, 1273 (x7) # store value to put something in memory
lw x18, 1273(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x13, 0x8560cc341ee6f284 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 776 # sub immediate from rs1 to counter offset
sd x13, -776 (x8) # store value to put something in memory
lw x15, -776(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x15, 0xdc5e2ceddd5ac250 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 997 # sub immediate from rs1 to counter offset
sd x15, -997 (x9) # store value to put something in memory
lw x30, -997(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x5, 0x841cf5a14a09c1b7 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1279 # sub immediate from rs1 to counter offset
sd x5, -1279 (x10) # store value to put something in memory
lw x23, -1279(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x7, 0x45e0d097af1f4d1d # initialize rs2
la x11, scratch # base address 
addi x11, x11, 392 # sub immediate from rs1 to counter offset
sd x7, -392 (x11) # store value to put something in memory
lw x1, -392(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x20, 0xe6c34577cb85706e # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1016 # sub immediate from rs1 to counter offset
sd x20, -1016 (x12) # store value to put something in memory
lw x23, -1016(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x31, 0x9903ea828bb08310 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1392 # sub immediate from rs1 to counter offset
sd x31, 1392 (x13) # store value to put something in memory
lw x1, 1392(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x9, 0x7a2368d114e923fa # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1734 # sub immediate from rs1 to counter offset
sd x9, 1734 (x14) # store value to put something in memory
lw x30, 1734(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x31, 0x42ff7839e324174d # initialize rs2
la x15, scratch # base address 
addi x15, x15, -321 # sub immediate from rs1 to counter offset
sd x31, 321 (x15) # store value to put something in memory
lw x16, 321(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x9, 0x1e9327bbd227df63 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1832 # sub immediate from rs1 to counter offset
sd x9, 1832 (x16) # store value to put something in memory
lw x13, 1832(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x10, 0x25a5f84ce20706d1 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -582 # sub immediate from rs1 to counter offset
sd x10, 582 (x17) # store value to put something in memory
lw x26, 582(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x24, 0xc02cc92fe5a8b5c1 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1163 # sub immediate from rs1 to counter offset
sd x24, 1163 (x18) # store value to put something in memory
lw x17, 1163(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x9, 0x0d290030c87028db # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1532 # sub immediate from rs1 to counter offset
sd x9, 1532 (x19) # store value to put something in memory
lw x24, 1532(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x28, 0x2b9f7a13aab9c548 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1849 # sub immediate from rs1 to counter offset
sd x28, 1849 (x20) # store value to put something in memory
lw x14, 1849(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x24, 0xc5947466c44ece2b # initialize rs2
la x21, scratch # base address 
addi x21, x21, -78 # sub immediate from rs1 to counter offset
sd x24, 78 (x21) # store value to put something in memory
lw x23, 78(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x19, 0xd457601602f7e037 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 2019 # sub immediate from rs1 to counter offset
sd x19, -2019 (x22) # store value to put something in memory
lw x3, -2019(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x30, 0x6c9ab7b99d007a5d # initialize rs2
la x23, scratch # base address 
addi x23, x23, -855 # sub immediate from rs1 to counter offset
sd x30, 855 (x23) # store value to put something in memory
lw x31, 855(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x9, 0xbbbf32cdad23e9a5 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1736 # sub immediate from rs1 to counter offset
sd x9, 1736 (x24) # store value to put something in memory
lw x20, 1736(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x30, 0xd6f576eb3a590d55 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -179 # sub immediate from rs1 to counter offset
sd x30, 179 (x25) # store value to put something in memory
lw x2, 179(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x25, 0x5404c6a25e25947b # initialize rs2
la x26, scratch # base address 
addi x26, x26, -381 # sub immediate from rs1 to counter offset
sd x25, 381 (x26) # store value to put something in memory
lw x10, 381(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x7, 0xa3d07dbfe73097fb # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1105 # sub immediate from rs1 to counter offset
sd x7, 1105 (x27) # store value to put something in memory
lw x23, 1105(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x25, 0x7c020d937d3de90d # initialize rs2
la x28, scratch # base address 
addi x28, x28, 203 # sub immediate from rs1 to counter offset
sd x25, -203 (x28) # store value to put something in memory
lw x31, -203(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x11, 0xa6dcf2fa1f712887 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1848 # sub immediate from rs1 to counter offset
sd x11, 1848 (x29) # store value to put something in memory
lw x28, 1848(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x10, 0x800b0fb11c2f48e3 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 880 # sub immediate from rs1 to counter offset
sd x10, -880 (x30) # store value to put something in memory
lw x17, -880(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x16, 0x3131b987aab4731e # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1564 # sub immediate from rs1 to counter offset
sd x16, -1564 (x31) # store value to put something in memory
lw x14, -1564(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 240)

# Testcase cp_rd (Test destination rd = x0)
li x15, 0x92ed7a5cec83bd48 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -695 # sub immediate from rs1 to counter offset
sd x15, 695 (x1) # store value to put something in memory
lw x0, 695(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x15, 0x4b4efe47110ad27b # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1906 # sub immediate from rs1 to counter offset
sd x15, -1906 (x18) # store value to put something in memory
lw x1, -1906(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x28, 0xd79952bd19168ce6 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 970 # sub immediate from rs1 to counter offset
sd x28, -970 (x31) # store value to put something in memory
lw x2, -970(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x12, 0xf7aabf1d5e1cac78 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -58 # sub immediate from rs1 to counter offset
sd x12, 58 (x1) # store value to put something in memory
lw x3, 58(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0x6bfc6bbe1cde72c2 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1620 # sub immediate from rs1 to counter offset
sd x27, -1620 (x17) # store value to put something in memory
lw x4, -1620(x17) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x43d9de0f2f6130a3 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -386 # sub immediate from rs1 to counter offset
sd x23, 386 (x16) # store value to put something in memory
lw x5, 386(x16) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x18, 0x55b7fce3932753d7 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1953 # sub immediate from rs1 to counter offset
sd x18, -1953 (x12) # store value to put something in memory
lw x6, -1953(x12) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x21, 0x72d672e75b265a14 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -306 # sub immediate from rs1 to counter offset
sd x21, 306 (x14) # store value to put something in memory
lw x7, 306(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x21, 0xdfc31d96b22f9bce # initialize rs2
la x19, scratch # base address 
addi x19, x19, 947 # sub immediate from rs1 to counter offset
sd x21, -947 (x19) # store value to put something in memory
lw x8, -947(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x18, 0xe50b53f589d08a43 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1428 # sub immediate from rs1 to counter offset
sd x18, 1428 (x3) # store value to put something in memory
lw x9, 1428(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x1, 0x315ee7e218c6d6dc # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1462 # sub immediate from rs1 to counter offset
sd x1, -1462 (x26) # store value to put something in memory
lw x10, -1462(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x23, 0x5c28c5f2c99d8afc # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1734 # sub immediate from rs1 to counter offset
sd x23, 1734 (x29) # store value to put something in memory
lw x11, 1734(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x22, 0x0cb20976a129c2eb # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1842 # sub immediate from rs1 to counter offset
sd x22, -1842 (x16) # store value to put something in memory
lw x12, -1842(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x31, 0xa87770638926a0a8 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1136 # sub immediate from rs1 to counter offset
sd x31, 1136 (x15) # store value to put something in memory
lw x13, 1136(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x18, 0xaf3eacc3c6868d5a # initialize rs2
la x7, scratch # base address 
addi x7, x7, -758 # sub immediate from rs1 to counter offset
sd x18, 758 (x7) # store value to put something in memory
lw x14, 758(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x3, 0x60793a0bf2f6ea43 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1193 # sub immediate from rs1 to counter offset
sd x3, 1193 (x14) # store value to put something in memory
lw x15, 1193(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x30, 0x2807a176cf224a6a # initialize rs2
la x9, scratch # base address 
addi x9, x9, 24 # sub immediate from rs1 to counter offset
sd x30, -24 (x9) # store value to put something in memory
lw x16, -24(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x5, 0x7e1afbea8dd1163d # initialize rs2
la x28, scratch # base address 
addi x28, x28, -2040 # sub immediate from rs1 to counter offset
sd x5, 2040 (x28) # store value to put something in memory
lw x17, 2040(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x30, 0xdbb3392393a3d221 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 880 # sub immediate from rs1 to counter offset
sd x30, -880 (x2) # store value to put something in memory
lw x18, -880(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x1, 0x51619a6670969468 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 789 # sub immediate from rs1 to counter offset
sd x1, -789 (x26) # store value to put something in memory
lw x19, -789(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x9, 0x56be26ac480f0a22 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -535 # sub immediate from rs1 to counter offset
sd x9, 535 (x17) # store value to put something in memory
lw x20, 535(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x16, 0xba5ee393849ebaf9 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1143 # sub immediate from rs1 to counter offset
sd x16, 1143 (x27) # store value to put something in memory
lw x21, 1143(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x30, 0xa8b6599f1693bfeb # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1569 # sub immediate from rs1 to counter offset
sd x30, -1569 (x28) # store value to put something in memory
lw x22, -1569(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x26, 0xe53d3c00400f61f4 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1702 # sub immediate from rs1 to counter offset
sd x26, -1702 (x15) # store value to put something in memory
lw x23, -1702(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0x8e267fb2966d5cbc # initialize rs2
la x1, scratch # base address 
addi x1, x1, -368 # sub immediate from rs1 to counter offset
sd x14, 368 (x1) # store value to put something in memory
lw x24, 368(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x24, 0x88c7a02b51c73673 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 841 # sub immediate from rs1 to counter offset
sd x24, -841 (x26) # store value to put something in memory
lw x25, -841(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x25, 0x2e68ebb1d0d4b3ed # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1946 # sub immediate from rs1 to counter offset
sd x25, -1946 (x21) # store value to put something in memory
lw x26, -1946(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x31, 0xe7be869c42c12f63 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1399 # sub immediate from rs1 to counter offset
sd x31, 1399 (x29) # store value to put something in memory
lw x27, 1399(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x24, 0x64d88445b33f5bc7 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -308 # sub immediate from rs1 to counter offset
sd x24, 308 (x21) # store value to put something in memory
lw x28, 308(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x9, 0xfe98cd532b03c307 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1529 # sub immediate from rs1 to counter offset
sd x9, -1529 (x15) # store value to put something in memory
lw x29, -1529(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x3, 0x7ff6361dc2148bff # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1499 # sub immediate from rs1 to counter offset
sd x3, -1499 (x28) # store value to put something in memory
lw x30, -1499(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x29, 0x75856032ff27cee7 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -248 # sub immediate from rs1 to counter offset
sd x29, 248 (x11) # store value to put something in memory
lw x31, 248(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x26, 0x80926243c2cf4f21 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 44 # sub immediate from rs1 to counter offset
sd x26, -44 (x1) # store value to put something in memory
lw x1, -44(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x1, 0x35e1f473076b0605 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -185 # sub immediate from rs1 to counter offset
sd x1, 185 (x2) # store value to put something in memory
lw x2, 185(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x12, 0x1a1dc2c59dd29aa0 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1049 # sub immediate from rs1 to counter offset
sd x12, 1049 (x3) # store value to put something in memory
lw x3, 1049(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0xbd0a103d663414c2 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1711 # sub immediate from rs1 to counter offset
sd x10, 1711 (x4) # store value to put something in memory
lw x4, 1711(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x13, 0xf75eac5acaa7a1ec # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1464 # sub immediate from rs1 to counter offset
sd x13, 1464 (x5) # store value to put something in memory
lw x5, 1464(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x26, 0x515055d5377ec06c # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1059 # sub immediate from rs1 to counter offset
sd x26, 1059 (x6) # store value to put something in memory
lw x6, 1059(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0xa4c794a3db9731b5 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1129 # sub immediate from rs1 to counter offset
sd x19, 1129 (x7) # store value to put something in memory
lw x7, 1129(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x31, 0xd84b2e0705fa0e81 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -115 # sub immediate from rs1 to counter offset
sd x31, 115 (x8) # store value to put something in memory
lw x8, 115(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x15, 0x157a09f0052a175c # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1303 # sub immediate from rs1 to counter offset
sd x15, -1303 (x9) # store value to put something in memory
lw x9, -1303(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x15, 0xf515523655bc3bc6 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -684 # sub immediate from rs1 to counter offset
sd x15, 684 (x10) # store value to put something in memory
lw x10, 684(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x24, 0x32aa3848ea0e9524 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1005 # sub immediate from rs1 to counter offset
sd x24, -1005 (x11) # store value to put something in memory
lw x11, -1005(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x24, 0x36e6a364ace41ab4 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1034 # sub immediate from rs1 to counter offset
sd x24, -1034 (x12) # store value to put something in memory
lw x12, -1034(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x14, 0x71491e8953467030 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1435 # sub immediate from rs1 to counter offset
sd x14, -1435 (x13) # store value to put something in memory
lw x13, -1435(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x29, 0x746000a016f8848c # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1862 # sub immediate from rs1 to counter offset
sd x29, 1862 (x14) # store value to put something in memory
lw x14, 1862(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x7, 0xb0cfc34a759857d3 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1242 # sub immediate from rs1 to counter offset
sd x7, -1242 (x15) # store value to put something in memory
lw x15, -1242(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x8, 0xd73021605e3b255b # initialize rs2
la x16, scratch # base address 
addi x16, x16, -765 # sub immediate from rs1 to counter offset
sd x8, 765 (x16) # store value to put something in memory
lw x16, 765(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x21, 0xdb6465b83cd6e1f6 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -285 # sub immediate from rs1 to counter offset
sd x21, 285 (x17) # store value to put something in memory
lw x17, 285(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x1, 0x96345914cf39d8a0 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -849 # sub immediate from rs1 to counter offset
sd x1, 849 (x18) # store value to put something in memory
lw x18, 849(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x17, 0xac22a939ceb7fc5a # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1989 # sub immediate from rs1 to counter offset
sd x17, 1989 (x19) # store value to put something in memory
lw x19, 1989(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x29, 0x900d8263d3509ed6 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1821 # sub immediate from rs1 to counter offset
sd x29, -1821 (x20) # store value to put something in memory
lw x20, -1821(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x6, 0x22f841c8c96a7d99 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1535 # sub immediate from rs1 to counter offset
sd x6, 1535 (x21) # store value to put something in memory
lw x21, 1535(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x24, 0xaa4643d0adcc19f8 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1765 # sub immediate from rs1 to counter offset
sd x24, 1765 (x22) # store value to put something in memory
lw x22, 1765(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x3, 0xe2bf8d105f487c1b # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1138 # sub immediate from rs1 to counter offset
sd x3, -1138 (x23) # store value to put something in memory
lw x23, -1138(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x2, 0x8a470c450e7887f8 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 430 # sub immediate from rs1 to counter offset
sd x2, -430 (x24) # store value to put something in memory
lw x24, -430(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x22, 0xdf092d88ad9739b9 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1970 # sub immediate from rs1 to counter offset
sd x22, -1970 (x25) # store value to put something in memory
lw x25, -1970(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x13, 0x23356b72c71ea6c4 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 959 # sub immediate from rs1 to counter offset
sd x13, -959 (x26) # store value to put something in memory
lw x26, -959(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x12, 0x5aacd5975100cd3b # initialize rs2
la x27, scratch # base address 
addi x27, x27, 739 # sub immediate from rs1 to counter offset
sd x12, -739 (x27) # store value to put something in memory
lw x27, -739(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x26, 0xc8bdabbb50b723ee # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1131 # sub immediate from rs1 to counter offset
sd x26, -1131 (x28) # store value to put something in memory
lw x28, -1131(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x6, 0xe7d3533c8b7d7902 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1366 # sub immediate from rs1 to counter offset
sd x6, 1366 (x29) # store value to put something in memory
lw x29, 1366(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x5, 0xd6ccccef5385bddf # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1114 # sub immediate from rs1 to counter offset
sd x5, -1114 (x30) # store value to put something in memory
lw x30, -1114(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x29, 0xd8f4b645fc2e93a8 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 104 # sub immediate from rs1 to counter offset
sd x29, -104 (x31) # store value to put something in memory
lw x31, -104(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x28, 0x815d8a2272850801 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 0 # sub immediate from rs1 to counter offset
sd x28, 0 (x31) # store value to put something in memory
lw x19, 0(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 752)

# Testcase cp_imm_corners
li x18, 0x1b804b15ce5f8a51 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1 # sub immediate from rs1 to counter offset
sd x18, 1 (x28) # store value to put something in memory
lw x16, 1(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 760)

# Testcase cp_imm_corners
li x27, 0xda71fbf9d3e3ee18 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -2 # sub immediate from rs1 to counter offset
sd x27, 2 (x19) # store value to put something in memory
lw x26, 2(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 768)

# Testcase cp_imm_corners
li x27, 0x50c23b561ca04c1e # initialize rs2
la x13, scratch # base address 
addi x13, x13, -3 # sub immediate from rs1 to counter offset
sd x27, 3 (x13) # store value to put something in memory
lw x3, 3(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 776)

# Testcase cp_imm_corners
li x1, 0xa22ee765da06185e # initialize rs2
la x30, scratch # base address 
addi x30, x30, -4 # sub immediate from rs1 to counter offset
sd x1, 4 (x30) # store value to put something in memory
lw x14, 4(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 784)

# Testcase cp_imm_corners
li x23, 0x6e8449fff7487de2 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -8 # sub immediate from rs1 to counter offset
sd x23, 8 (x7) # store value to put something in memory
lw x30, 8(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 792)

# Testcase cp_imm_corners
li x31, 0x6908ee46b36e3cc0 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -16 # sub immediate from rs1 to counter offset
sd x31, 16 (x10) # store value to put something in memory
lw x17, 16(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 800)

# Testcase cp_imm_corners
li x28, 0x9f2c3a543e0ecb34 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -32 # sub immediate from rs1 to counter offset
sd x28, 32 (x3) # store value to put something in memory
lw x5, 32(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 808)

# Testcase cp_imm_corners
li x6, 0x9dcc2a51d96b9aee # initialize rs2
la x10, scratch # base address 
addi x10, x10, -64 # sub immediate from rs1 to counter offset
sd x6, 64 (x10) # store value to put something in memory
lw x7, 64(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 816)

# Testcase cp_imm_corners
li x23, 0xfa303f6f977c9d65 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -128 # sub immediate from rs1 to counter offset
sd x23, 128 (x6) # store value to put something in memory
lw x22, 128(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 824)

# Testcase cp_imm_corners
li x10, 0x25df4c4961b888e8 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -256 # sub immediate from rs1 to counter offset
sd x10, 256 (x19) # store value to put something in memory
lw x23, 256(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cp_imm_corners
li x9, 0xf657dcefd8f4ffa4 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -512 # sub immediate from rs1 to counter offset
sd x9, 512 (x29) # store value to put something in memory
lw x17, 512(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 840)

# Testcase cp_imm_corners
li x9, 0xffb46675b7298423 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1023 # sub immediate from rs1 to counter offset
sd x9, 1023 (x25) # store value to put something in memory
lw x7, 1023(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 848)

# Testcase cp_imm_corners
li x28, 0x9e8d3c82965fbf06 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1024 # sub immediate from rs1 to counter offset
sd x28, 1024 (x15) # store value to put something in memory
lw x25, 1024(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 856)

# Testcase cp_imm_corners
li x29, 0x7e7eaf10fcbcfcec # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1795 # sub immediate from rs1 to counter offset
sd x29, 1795 (x9) # store value to put something in memory
lw x12, 1795(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 864)

# Testcase cp_imm_corners
li x2, 0x783925ef5de1c494 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -2047 # sub immediate from rs1 to counter offset
sd x2, 2047 (x22) # store value to put something in memory
lw x16, 2047(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 872)

# Testcase cp_imm_corners
li x28, 0xb5663bf363a67efb # initialize rs2
la x19, scratch # base address 
addi x19, x19, 2047 # increment rs1 by 2047 
addi x19, x19, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x28, -2048 (x19) # store value to put something in memory
lw x9, -2048(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 880)

# Testcase cp_imm_corners
li x27, 0x1c954e78c670f951 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 2047 # sub immediate from rs1 to counter offset
sd x27, -2047 (x18) # store value to put something in memory
lw x20, -2047(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 888)

# Testcase cp_imm_corners
li x11, 0xd87e8a85e1ea3b9e # initialize rs2
la x13, scratch # base address 
addi x13, x13, 2 # sub immediate from rs1 to counter offset
sd x11, -2 (x13) # store value to put something in memory
lw x21, -2(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 896)

# Testcase cp_imm_corners
li x24, 0x6991603e97e07589 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1 # sub immediate from rs1 to counter offset
sd x24, -1 (x30) # store value to put something in memory
lw x28, -1(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x14, scratch
addi x14, x14, 1165
add x22, x1, x11 # perform first operation
lw x3, -1165(x14) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x17, scratch
addi x17, x17, 1381
add x26, x29, x15 # perform first operation
lw x24, -1381(x17) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x3, scratch
addi x3, x3, -1046
add x21, x11, x6 # perform first operation
lw x22, 1046(x3) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x25, scratch
addi x25, x25, -1069
add x25, x25, x0 # perform first operation
lw x30, 1069(x25) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x12, scratch
addi x12, x12, -187
add x12, x12, x0 # perform first operation
lw x15, 187(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x24, scratch
addi x24, x24, -439
add x24, x24, x0 # perform first operation
lw x28, 439(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x30, scratch
addi x30, x30, -1459
add x24, x5, x29 # perform first operation
lw x24, 1459(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x2, scratch
addi x2, x2, -151
add x24, x6, x8 # perform first operation
lw x24, 151(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x10, scratch
addi x10, x10, 460
add x25, x16, x7 # perform first operation
lw x25, -460(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x23, scratch
addi x23, x23, 1548
add x7, x8, x2 # perform first operation
lw x8, -1548(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x5, scratch
addi x5, x5, 1212
add x21, x3, x23 # perform first operation
lw x23, -1212(x5) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x13, scratch
addi x13, x13, 1792
add x19, x26, x23 # perform first operation
lw x17, -1792(x13) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-or.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x4f873aea818f60b4 # initialize rs1
li x18, 0xb828146d0aa04088 # initialize rs2
or x17, x0, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x9ec9fd4b4d3a2556 # initialize rs1
li x19, 0xba83fc789407f724 # initialize rs2
or x15, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x5058b865e7700fe2 # initialize rs1
li x11, 0x111cfbe90ea90643 # initialize rs2
or x30, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xe5aeef952aa82edf # initialize rs1
li x11, 0x13b949f76617155a # initialize rs2
or x17, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x47bf5b80b0950927 # initialize rs1
li x19, 0xe3f6b699f4245e90 # initialize rs2
or x24, x4, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xf5ce19c8496e9747 # initialize rs1
li x14, 0x34b0b5d6a2388f7a # initialize rs2
or x19, x5, x14 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xba06e15f8a097f28 # initialize rs1
li x4, 0x7ed7ea9546d1efc2 # initialize rs2
or x9, x6, x4 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xeeadbd28a58c25bd # initialize rs1
li x24, 0xa5554ad0f368637f # initialize rs2
or x3, x7, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x1be1c32e2e029141 # initialize rs1
li x25, 0x375dd76fc58f7a9c # initialize rs2
or x27, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x209b146052550d77 # initialize rs1
li x29, 0x3a8c5089d10d0538 # initialize rs2
or x7, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x6989610138fa217f # initialize rs1
li x29, 0x53deec644dc75f86 # initialize rs2
or x9, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x164b6fc0227b2279 # initialize rs1
li x25, 0x9f3c994e36a26912 # initialize rs2
or x18, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xb6e7129c7d85ea90 # initialize rs1
li x13, 0xd984be428b248759 # initialize rs2
or x30, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x836dc1c3ec9d367f # initialize rs1
li x27, 0x21ce46ec5902dd99 # initialize rs2
or x6, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x3b47485fba1afeda # initialize rs1
li x15, 0x445c7f7dc588c8af # initialize rs2
or x9, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x2fad6de2af1505c2 # initialize rs1
li x19, 0x3ea2090cbda8c58c # initialize rs2
or x27, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x82d9aa0ad4b0711d # initialize rs1
li x18, 0x999adfb6284b2faa # initialize rs2
or x5, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x09257605e5c4ee64 # initialize rs1
li x2, 0x12681997cd2d16f0 # initialize rs2
or x3, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x2550b994d0833ded # initialize rs1
li x24, 0xb36930fa94b453d3 # initialize rs2
or x3, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xc24defabf9659f02 # initialize rs1
li x28, 0xb3509fc2c83ca7c4 # initialize rs2
or x16, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xdb12bf3e55df18b9 # initialize rs1
li x21, 0x287b4d7667c056f2 # initialize rs2
or x5, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xbe04c1e61ca38b16 # initialize rs1
li x18, 0xdffaff59c9e5ed02 # initialize rs2
or x29, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x65e6eb66e6848cae # initialize rs1
li x15, 0x16c888bbf1ea1029 # initialize rs2
or x29, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x94eb352d785dd828 # initialize rs1
li x28, 0x16ace8b74bbcc1e9 # initialize rs2
or x2, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xe695a36b8a89fe4f # initialize rs1
li x31, 0xedab051d4744cca3 # initialize rs2
or x29, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x93a48601dad92e98 # initialize rs1
li x2, 0x094be85b32fb4c4b # initialize rs2
or x17, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xec0b2e5f01d37e7c # initialize rs1
li x2, 0xdcc2b597f886e04b # initialize rs2
or x13, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe5b6ed9d3d212c66 # initialize rs1
li x21, 0xe80711efb4525429 # initialize rs2
or x25, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x9abe2e1b316a40d7 # initialize rs1
li x24, 0xdab0baecfa7ab857 # initialize rs2
or x6, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x672946a36ecfb661 # initialize rs1
li x26, 0x77cae87679f7c26a # initialize rs2
or x5, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe21028492dded47b # initialize rs1
li x1, 0x27c0b3c5aff64dc6 # initialize rs2
or x16, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x26059a499755faf1 # initialize rs1
li x25, 0x9086bcae4898d26e # initialize rs2
or x3, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x5, 0x90dcaf8b739de088 # initialize rs1
li x0, 0x3c457ab3ec619c8f # initialize rs2
or x3, x5, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x7, 0x4a65070e4a944d60 # initialize rs1
li x1, 0xa5d4edb85288897f # initialize rs2
or x28, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x13, 0x806e6504fbeef007 # initialize rs1
li x2, 0x553821e7fc50724e # initialize rs2
or x28, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x12, 0xb2c6a2f9b9d2196c # initialize rs1
li x3, 0xbbc12b40ecd664b4 # initialize rs2
or x27, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x1, 0x2962d9394865d39a # initialize rs1
li x4, 0x3e378bd5052add0d # initialize rs2
or x11, x1, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x19, 0x2df699e126235975 # initialize rs1
li x5, 0x4bceed5edc283c20 # initialize rs2
or x31, x19, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x3f51b129070fafe8 # initialize rs1
li x6, 0x246c201154772424 # initialize rs2
or x16, x4, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x16, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x15, 0x0582821ebba698ec # initialize rs1
li x7, 0xe28c7e0f22bf27f4 # initialize rs2
or x12, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x26, 0x1e1401c2c2bf2afd # initialize rs1
li x8, 0x6db3db9b25ab03fd # initialize rs2
or x9, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x25, 0x49d7d2b0b1c2ad5e # initialize rs1
li x9, 0x62e7cf4d5c636135 # initialize rs2
or x5, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x19, 0xa13a00976c0b5978 # initialize rs1
li x10, 0x1a27d9ee6b1038ec # initialize rs2
or x15, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x12, 0xb07afe650c69f836 # initialize rs1
li x11, 0xbdd68f6a5f4a3e81 # initialize rs2
or x27, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x16, 0xce8f86b4578c3ff4 # initialize rs1
li x12, 0x4a8960c166373e33 # initialize rs2
or x17, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x28, 0xf640c41740f5c44f # initialize rs1
li x13, 0x9ceb1d08c65ea68e # initialize rs2
or x27, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x30, 0x21a85c355d2d4b96 # initialize rs1
li x14, 0x9e25300840bc3709 # initialize rs2
or x17, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x1, 0x27ba7a6b4c6c8eda # initialize rs1
li x15, 0xd9c90de7745ba7bf # initialize rs2
or x22, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x7, 0x7cadfd2f45a59119 # initialize rs1
li x16, 0xe2e9c3764f9dc749 # initialize rs2
or x1, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x3, 0xdabbdeed878015d3 # initialize rs1
li x17, 0xd45233de2fcab903 # initialize rs2
or x7, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x20, 0x6588339388a08d6c # initialize rs1
li x18, 0x438813f727059ad5 # initialize rs2
or x14, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x1, 0xe6a0a576f300c75a # initialize rs1
li x19, 0x609d0d398755160d # initialize rs2
or x31, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x28, 0x3f346cfd02c33215 # initialize rs1
li x20, 0xae0b4a43825b5738 # initialize rs2
or x29, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x12, 0x13e7f960b7cda1c0 # initialize rs1
li x21, 0x2b4a5411e019339f # initialize rs2
or x28, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x24, 0x02d2df961a0c33b2 # initialize rs1
li x22, 0xd461d2e8f5f66dbb # initialize rs2
or x5, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x24, 0xde7f4dab9e8dbdba # initialize rs1
li x23, 0x3d0ab4a900f20e2b # initialize rs2
or x13, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x13, 0x2f42101e8989a28a # initialize rs1
li x24, 0x8a618aa5136bae7d # initialize rs2
or x7, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x10, 0x67a8ce8fc5888ee7 # initialize rs1
li x25, 0xfa60eaf83bca5804 # initialize rs2
or x17, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x31, 0xeb99ae351cf21b30 # initialize rs1
li x26, 0x2ceac2525f482761 # initialize rs2
or x16, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x26, 0x04a9d6f985dd7790 # initialize rs1
li x27, 0x73dd5b2e19d7d626 # initialize rs2
or x29, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x18, 0xa20f17414abac4f2 # initialize rs1
li x28, 0x4eece338f557ebc3 # initialize rs2
or x25, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x23, 0x575bfc6976712361 # initialize rs1
li x29, 0x47a4752e0af69cdc # initialize rs2
or x8, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x2, 0x6c73bc0778551c85 # initialize rs1
li x30, 0xeaac6daeed55f629 # initialize rs2
or x8, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x29, 0x3c1b688c2370f3a3 # initialize rs1
li x31, 0x51faab505a3a07c3 # initialize rs2
or x13, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 504)

# Testcase cp_rd (Test destination rd = x0)
li x17, 0x53180c8f2554d23f # initialize rs1
li x21, 0xecbba3016de0f2ab # initialize rs2
or x0, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x6, 0xb46f1ef1ad18224e # initialize rs1
li x27, 0xcdf6d59143e97913 # initialize rs2
or x1, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x20, 0x128dad87e0fbac85 # initialize rs1
li x11, 0x06f6c46cdda1865a # initialize rs2
or x2, x20, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x22, 0x6717f83c49ad82ae # initialize rs1
li x7, 0x366c951e7cd827b1 # initialize rs2
or x3, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0x05e4855ad611f61b # initialize rs1
li x13, 0x850369361ad62bf0 # initialize rs2
or x4, x25, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x24, 0x33a3c1fa46e6fca6 # initialize rs1
li x11, 0x9e9d3612b9999d75 # initialize rs2
or x5, x24, x11 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0x5c3bdd00ab6be6f1 # initialize rs1
li x9, 0x262afa47b119d7c0 # initialize rs2
or x6, x15, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0x259cac67b274429f # initialize rs1
li x14, 0xa35453a939d211ab # initialize rs2
or x7, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x26, 0x26356581d4224bb0 # initialize rs1
li x19, 0x03902ebaf8ef5385 # initialize rs2
or x8, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x7, 0x36d60a450e584118 # initialize rs1
li x16, 0xbaf6ce9bb416c396 # initialize rs2
or x9, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x11, 0x97c111eb98d0cb4b # initialize rs1
li x10, 0x0d5242bfcaaafb63 # initialize rs2
or x10, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x19, 0x088fd22b324e77b1 # initialize rs1
li x8, 0xac7460c8a9cd2e13 # initialize rs2
or x11, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x31, 0xad48b1cabaf96e19 # initialize rs1
li x21, 0xb3d2351f26479991 # initialize rs2
or x12, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x22, 0x18dbb558a3de41dd # initialize rs1
li x17, 0xe026c23e1c8bd4a6 # initialize rs2
or x13, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x22, 0x65ae3e2c5e130965 # initialize rs1
li x10, 0x1c407021c04a4c0e # initialize rs2
or x14, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0x7101c9ed1abaf3c0 # initialize rs1
li x25, 0xd1756aed43b7899c # initialize rs2
or x15, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x28, 0xd9898453685c92f1 # initialize rs1
li x15, 0xf42c97909bff35e3 # initialize rs2
or x16, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x7, 0xb3fe855f9e979b33 # initialize rs1
li x8, 0x1b0abf4cadbe25ae # initialize rs2
or x17, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x13, 0x6192214132edffa3 # initialize rs1
li x6, 0xfb2d2735c44f3f8e # initialize rs2
or x18, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x15, 0x654a1153b003c926 # initialize rs1
li x6, 0x4ae9c83e46144b8f # initialize rs2
or x19, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x6, 0x49737b0722ea2b90 # initialize rs1
li x2, 0xf8015bd895d4349c # initialize rs2
or x20, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x7, 0x3e09133681c660f4 # initialize rs1
li x12, 0x57b3a21cd6660995 # initialize rs2
or x21, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x26, 0x6cb627447b481f91 # initialize rs1
li x5, 0x4f6b081747209b88 # initialize rs2
or x22, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x28, 0x905e639b0faa4682 # initialize rs1
li x17, 0x7e4819270c514586 # initialize rs2
or x23, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0xb01fc673b33f9dac # initialize rs1
li x13, 0x1857b2e82e98f5ae # initialize rs2
or x24, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x18, 0xe983a60a42905f9f # initialize rs1
li x22, 0x65f220a00e297308 # initialize rs2
or x25, x18, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x26, 0xb901c966774525af # initialize rs1
li x27, 0x431a614eac48734b # initialize rs2
or x26, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x6, 0xdac6a4d14f9da2ed # initialize rs1
li x20, 0xe0b7ce11825a5186 # initialize rs2
or x27, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x24, 0x25e88a45de178bec # initialize rs1
li x30, 0x97136f5faf274201 # initialize rs2
or x28, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x15, 0x032a6a493171e7e9 # initialize rs1
li x3, 0x740c5a8b8fdf08a2 # initialize rs2
or x29, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x29, 0x0128bdbeb3463a23 # initialize rs1
li x9, 0x57f4faed26fb452a # initialize rs2
or x30, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x7, 0x15ad125f4432837c # initialize rs1
li x20, 0x7702945ae8793b3d # initialize rs2
or x31, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x31, 0x0000000000000000 # initialize rs1
li x26, 0x02fd703b20ae9a3a # initialize rs2
or x21, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x18, 0x0000000000000001 # initialize rs1
li x11, 0x64bd1fafa4815749 # initialize rs2
or x17, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x20, 0x0000000000000002 # initialize rs1
li x7, 0x0491d734b500409e # initialize rs2
or x3, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x23, 0x8000000000000000 # initialize rs1
li x2, 0xc9f518fd57669c49 # initialize rs2
or x24, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x20, 0x8000000000000001 # initialize rs1
li x17, 0xf62e83fa180a6947 # initialize rs2
or x10, x20, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x1, 0x7fffffffffffffff # initialize rs1
li x7, 0x10762e9246796f98 # initialize rs2
or x2, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x15, 0x7ffffffffffffffe # initialize rs1
li x8, 0x4bf4bfd89a086616 # initialize rs2
or x19, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x29, 0xffffffffffffffff # initialize rs1
li x26, 0x92e63a494f33ed7e # initialize rs2
or x28, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x11, 0xfffffffffffffffe # initialize rs1
li x21, 0x1448d85fa3c1fa8b # initialize rs2
or x31, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x1d613f42c78bea24 # initialize rs2
or x25, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x410e0f20e8d4bf78 # initialize rs2
or x20, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x29, 0x5555555555555555 # initialize rs1
li x30, 0x1c2c47cf64b22376 # initialize rs2
or x13, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x15, 0x00000000ffffffff # initialize rs1
li x22, 0xa2b327fadd906ba9 # initialize rs2
or x23, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x9, 0x00000000fffffffe # initialize rs1
li x31, 0x5b3224f6d0718c24 # initialize rs2
or x11, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x25, 0x0000000100000000 # initialize rs1
li x17, 0xcefc1256bc0c50c8 # initialize rs2
or x27, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x28, 0x0000000100000001 # initialize rs1
li x12, 0x34f557471f0b5b34 # initialize rs2
or x27, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x6, 0x50f941883f298b99 # initialize rs1
li x25, 0x0000000000000000 # initialize rs2
or x22, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x9, 0x42268445be95d1d7 # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
or x3, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x7, 0x388afd137c55d240 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
or x14, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x28, 0x59c1b77e5a0787a4 # initialize rs1
li x8, 0x8000000000000000 # initialize rs2
or x5, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x7, 0xda645ce19fb11bc4 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
or x17, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x29, 0xdb40aba7aedd924d # initialize rs1
li x3, 0x7fffffffffffffff # initialize rs2
or x30, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x15, 0xa294102f862429e6 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
or x26, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x12, 0xe4a9cd0c42cd15f1 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
or x8, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x31, 0xa59503c65c619d9a # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
or x8, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x21, 0x04e0eb3fb7dee085 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
or x24, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x31, 0x9083d4aca97a389d # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x27, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x1, 0x9fff80675d6e00b7 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
or x8, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x15, 0xa7d66208c57d8292 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
or x9, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x18, 0x78c5f0e3534b1179 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
or x9, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x6, 0xb47416d37d809654 # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
or x23, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x12, 0x5dc73ca8eba0c00f # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
or x26, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
or x3, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x6, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
or x29, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x2, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
or x10, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x26, 0x0000000000000000 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
or x19, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x3, 0x0000000000000000 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
or x16, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000000000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
or x11, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x13, 0x0000000000000000 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
or x17, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x14, 0x0000000000000000 # initialize rs1
li x22, 0xffffffffffffffff # initialize rs2
or x17, x14, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000000000000 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
or x8, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x14, 0x0000000000000000 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
or x9, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x0000000000000000 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x28, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x13, 0x0000000000000000 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
or x7, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x30, 0x0000000000000000 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
or x24, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x16, 0x0000000000000000 # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
or x7, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x15, 0x0000000000000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
or x10, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x15, 0x0000000000000000 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
or x10, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x26, 0x0000000000000001 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
or x16, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x29, 0x0000000000000001 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
or x15, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x31, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
or x7, x31, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x16, 0x0000000000000001 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
or x3, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x30, 0x0000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
or x21, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x11, 0x0000000000000001 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
or x17, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000001 # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
or x21, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x15, 0x0000000000000001 # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
or x6, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000001 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
or x29, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x17, 0x0000000000000001 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
or x10, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x0000000000000001 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x22, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x20, 0x0000000000000001 # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
or x7, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x30, 0x0000000000000001 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
or x7, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x8, 0x0000000000000001 # initialize rs1
li x30, 0x00000000fffffffe # initialize rs2
or x20, x8, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x12, 0x0000000000000001 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
or x21, x12, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x24, 0x0000000000000001 # initialize rs1
li x26, 0x0000000100000001 # initialize rs2
or x29, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x20, 0x0000000000000002 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
or x17, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x8, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
or x27, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x19, 0x0000000000000002 # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
or x16, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x24, 0x0000000000000002 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
or x18, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x31, 0x0000000000000002 # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
or x23, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x15, 0x0000000000000002 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
or x18, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x22, 0x0000000000000002 # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
or x2, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x18, 0x0000000000000002 # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
or x24, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000002 # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
or x11, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x28, 0x0000000000000002 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
or x2, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x0000000000000002 # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x22, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x30, 0x0000000000000002 # initialize rs1
li x14, 0x5555555555555555 # initialize rs2
or x16, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x24, 0x0000000000000002 # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
or x11, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x23, 0x0000000000000002 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
or x26, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x23, 0x0000000000000002 # initialize rs1
li x14, 0x0000000100000000 # initialize rs2
or x15, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x16, 0x0000000000000002 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
or x14, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x28, 0x8000000000000000 # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
or x11, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x23, 0x8000000000000000 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
or x7, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x10, 0x8000000000000000 # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
or x29, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x21, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
or x30, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x29, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000001 # initialize rs2
or x24, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x8, 0x8000000000000000 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
or x24, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x26, 0x8000000000000000 # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
or x2, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x30, 0x8000000000000000 # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
or x5, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x13, 0x8000000000000000 # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
or x18, x13, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x6, 0x8000000000000000 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
or x30, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x8000000000000000 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x16, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x29, 0x8000000000000000 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
or x31, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x8, 0x8000000000000000 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
or x24, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x7, 0x8000000000000000 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
or x10, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x16, 0x8000000000000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
or x1, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x22, 0x8000000000000000 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
or x25, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x31, 0x8000000000000001 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
or x6, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x20, 0x8000000000000001 # initialize rs1
li x3, 0x0000000000000001 # initialize rs2
or x10, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x27, 0x8000000000000001 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
or x7, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x13, 0x8000000000000001 # initialize rs1
li x7, 0x8000000000000000 # initialize rs2
or x19, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x20, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
or x2, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x24, 0x8000000000000001 # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
or x6, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x27, 0x8000000000000001 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
or x2, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x25, 0x8000000000000001 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
or x17, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x24, 0x8000000000000001 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
or x5, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x25, 0x8000000000000001 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
or x19, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x8, 0x8000000000000001 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x19, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x3, 0x8000000000000001 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
or x17, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x1, 0x8000000000000001 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
or x21, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x6, 0x8000000000000001 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
or x28, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x7, 0x8000000000000001 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
or x30, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x2, 0x8000000000000001 # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
or x9, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x15, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
or x25, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x8, 0x7fffffffffffffff # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
or x7, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x14, 0x7fffffffffffffff # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
or x1, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x10, 0x7fffffffffffffff # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
or x15, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x28, 0x7fffffffffffffff # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
or x29, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x1, 0x7fffffffffffffff # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
or x5, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x26, 0x7fffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
or x29, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x14, 0x7fffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
or x11, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x24, 0x7fffffffffffffff # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
or x29, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x17, 0x7fffffffffffffff # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
or x1, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x7fffffffffffffff # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x25, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x12, 0x7fffffffffffffff # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
or x14, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x9, 0x7fffffffffffffff # initialize rs1
li x13, 0x00000000ffffffff # initialize rs2
or x14, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x21, 0x7fffffffffffffff # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
or x9, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x22, 0x7fffffffffffffff # initialize rs1
li x9, 0x0000000100000000 # initialize rs2
or x15, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x27, 0x7fffffffffffffff # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
or x3, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x19, 0x7ffffffffffffffe # initialize rs1
li x13, 0x0000000000000000 # initialize rs2
or x6, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x1, 0x7ffffffffffffffe # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
or x9, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x12, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
or x24, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x16, 0x7ffffffffffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
or x25, x16, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x27, 0x7ffffffffffffffe # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
or x29, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x19, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
or x20, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x21, 0x7ffffffffffffffe # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
or x3, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x1, 0x7ffffffffffffffe # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
or x10, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x1, 0x7ffffffffffffffe # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
or x24, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x15, 0x7ffffffffffffffe # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
or x7, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0x7ffffffffffffffe # initialize rs1
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x30, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x3, 0x7ffffffffffffffe # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
or x11, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x15, 0x7ffffffffffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
or x16, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
or x26, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x8, 0x7ffffffffffffffe # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
or x5, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x25, 0x7ffffffffffffffe # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
or x17, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x1, 0xffffffffffffffff # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
or x28, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x27, 0xffffffffffffffff # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
or x8, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x18, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
or x11, x18, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x16, 0xffffffffffffffff # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
or x30, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x11, 0xffffffffffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
or x21, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x27, 0xffffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
or x22, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x26, 0xffffffffffffffff # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
or x23, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x25, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
or x30, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x23, 0xffffffffffffffff # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
or x9, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x24, 0xffffffffffffffff # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
or x26, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0xffffffffffffffff # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x24, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x19, 0xffffffffffffffff # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
or x28, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x14, 0xffffffffffffffff # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
or x15, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x12, 0xffffffffffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
or x8, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x2, 0xffffffffffffffff # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
or x23, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x10, 0xffffffffffffffff # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
or x5, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x16, 0xfffffffffffffffe # initialize rs1
li x6, 0x0000000000000000 # initialize rs2
or x20, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x31, 0xfffffffffffffffe # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
or x5, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x3, 0xfffffffffffffffe # initialize rs1
li x29, 0x0000000000000002 # initialize rs2
or x8, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x5, 0xfffffffffffffffe # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
or x10, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x12, 0xfffffffffffffffe # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
or x30, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x23, 0xfffffffffffffffe # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
or x31, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x25, 0xfffffffffffffffe # initialize rs1
li x9, 0x7ffffffffffffffe # initialize rs2
or x22, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x20, 0xfffffffffffffffe # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
or x5, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x20, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
or x29, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x31, 0xfffffffffffffffe # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
or x30, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0xfffffffffffffffe # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x24, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x24, 0xfffffffffffffffe # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
or x7, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
or x12, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x15, 0xfffffffffffffffe # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
or x11, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x17, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000100000000 # initialize rs2
or x20, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x22, 0xfffffffffffffffe # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
or x1, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x22, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000000 # initialize rs2
or x23, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
or x5, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
or x7, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
or x21, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
or x30, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
or x16, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
or x10, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
or x28, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
or x3, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
or x20, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x30, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
or x25, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
or x28, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x00000000fffffffe # initialize rs2
or x11, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
or x25, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
or x8, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
or x15, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
or x20, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
or x2, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
or x20, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
or x14, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
or x29, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
or x11, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xffffffffffffffff # initialize rs2
or x14, x20, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
or x27, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
or x11, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x9, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x5555555555555555 # initialize rs2
or x24, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
or x7, x1, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
or x2, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
or x19, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
or x29, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x28, 0x5555555555555555 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
or x15, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x14, 0x5555555555555555 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
or x9, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x31, 0x5555555555555555 # initialize rs1
li x17, 0x0000000000000002 # initialize rs2
or x21, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x16, 0x5555555555555555 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
or x30, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x22, 0x5555555555555555 # initialize rs1
li x21, 0x8000000000000001 # initialize rs2
or x16, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x1, 0x5555555555555555 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
or x30, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x14, 0x5555555555555555 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
or x21, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x23, 0x5555555555555555 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
or x3, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x19, 0x5555555555555555 # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
or x18, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x26, 0x5555555555555555 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
or x19, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x5555555555555555 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x26, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x3, 0x5555555555555555 # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
or x11, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x24, 0x5555555555555555 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
or x1, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x6, 0x5555555555555555 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
or x15, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x25, 0x5555555555555555 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
or x18, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x18, 0x5555555555555555 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
or x13, x18, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x31, 0x00000000ffffffff # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
or x19, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x6, 0x00000000ffffffff # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
or x12, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x6, 0x00000000ffffffff # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
or x17, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x21, 0x00000000ffffffff # initialize rs1
li x3, 0x8000000000000000 # initialize rs2
or x6, x21, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x6, 0x00000000ffffffff # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
or x30, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x27, 0x00000000ffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
or x19, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x6, 0x00000000ffffffff # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
or x9, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x1, 0x00000000ffffffff # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
or x20, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x19, 0x00000000ffffffff # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
or x27, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x3, 0x00000000ffffffff # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
or x15, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x00000000ffffffff # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x9, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x30, 0x00000000ffffffff # initialize rs1
li x6, 0x5555555555555555 # initialize rs2
or x29, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x16, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
or x2, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x27, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
or x21, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x16, 0x00000000ffffffff # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
or x8, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x17, 0x00000000ffffffff # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
or x23, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x25, 0x00000000fffffffe # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
or x27, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x30, 0x00000000fffffffe # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
or x3, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x1, 0x00000000fffffffe # initialize rs1
li x14, 0x0000000000000002 # initialize rs2
or x15, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x19, 0x00000000fffffffe # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
or x22, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x30, 0x00000000fffffffe # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
or x26, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x21, 0x00000000fffffffe # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
or x2, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x15, 0x00000000fffffffe # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
or x17, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x25, 0x00000000fffffffe # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
or x24, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x17, 0x00000000fffffffe # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
or x30, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x20, 0x00000000fffffffe # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
or x21, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0x00000000fffffffe # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x27, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x12, 0x00000000fffffffe # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
or x28, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x11, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
or x9, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x28, 0x00000000fffffffe # initialize rs2
or x17, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x16, 0x00000000fffffffe # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
or x9, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x20, 0x00000000fffffffe # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
or x3, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x19, 0x0000000100000000 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
or x26, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x8, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000001 # initialize rs2
or x17, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x8, 0x0000000100000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
or x12, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x30, 0x0000000100000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
or x28, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x31, 0x0000000100000000 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
or x9, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x3, 0x0000000100000000 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
or x19, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x2, 0x7ffffffffffffffe # initialize rs2
or x27, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x10, 0x0000000100000000 # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
or x17, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x7, 0x0000000100000000 # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
or x20, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x7, 0x0000000100000000 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
or x13, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x0000000100000000 # initialize rs1
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x30, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x20, 0x0000000100000000 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
or x2, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x13, 0x0000000100000000 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
or x6, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x31, 0x0000000100000000 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
or x16, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x20, 0x0000000100000000 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
or x7, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x28, 0x0000000100000000 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
or x1, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x27, 0x0000000100000001 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
or x7, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x8, 0x0000000100000001 # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
or x14, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x3, 0x0000000100000001 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
or x12, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x27, 0x0000000100000001 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
or x9, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x5, 0x0000000100000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
or x13, x5, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000100000001 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
or x30, x8, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x1, 0x0000000100000001 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
or x13, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x20, 0x0000000100000001 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
or x5, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000100000001 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
or x24, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000100000001 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
or x3, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x0000000100000001 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
or x2, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x5, 0x0000000100000001 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
or x20, x5, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x8, 0x0000000100000001 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
or x25, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x30, 0x0000000100000001 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
or x27, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x2, 0x0000000100000001 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
or x7, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x3, 0x0000000100000001 # initialize rs1
li x20, 0x0000000100000001 # initialize rs2
or x27, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x2606a6cd09c388ba # initialize rs1
li x0, 0xe42252768fb2fc67 # initialize rs2
or x25, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x7203db67a61b85bb # initialize rs1
li x1, 0x42d1322169ff6595 # initialize rs2
or x26, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xc255c6bc6fea8de9 # initialize rs1
li x2, 0xd2c3ac1ad492f5a1 # initialize rs2
or x12, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xdb7915f395287a32 # initialize rs1
li x3, 0x98f951086440e608 # initialize rs2
or x11, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xcf48b89fe9a4dca4 # initialize rs1
li x4, 0xbdbd58c82e6729e4 # initialize rs2
or x12, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8e7355f84a7b8a99 # initialize rs1
li x5, 0xb2d6d5a5298218a6 # initialize rs2
or x9, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x9, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf8ac8cea93876278 # initialize rs1
li x6, 0x15fbbfb140d882f5 # initialize rs2
or x21, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x21, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x7120790792706483 # initialize rs1
li x7, 0xdef7afb389024d09 # initialize rs2
or x3, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x59bf89dfa200648b # initialize rs1
li x8, 0x5bb27d552346b547 # initialize rs2
or x30, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xcf5f4f5887963ee2 # initialize rs1
li x9, 0x54bdd8b7fbe0d2b1 # initialize rs2
or x2, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xaaaa5018fc5c5cdf # initialize rs1
li x10, 0x49165a1386383791 # initialize rs2
or x25, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x26bbd2cf928b11a2 # initialize rs1
li x11, 0xf0b76a7a138446df # initialize rs2
or x24, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x7349fc67def87b07 # initialize rs1
li x12, 0xdf9b0665f646d831 # initialize rs2
or x18, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x3bc6e3c136843222 # initialize rs1
li x13, 0xca40b2329538819d # initialize rs2
or x28, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xa73c39f14b754ac9 # initialize rs1
li x14, 0x04224c4a4dd6a43a # initialize rs2
or x22, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x0d89cc07d2ab784f # initialize rs1
li x15, 0xb3cba7a77562d7f6 # initialize rs2
or x31, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xac25d786b8bb42eb # initialize rs1
li x16, 0xa31771ead40f9c37 # initialize rs2
or x1, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xaaf9af0d4c5734bb # initialize rs1
li x17, 0xb0ebd9075e36b8dc # initialize rs2
or x26, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x03f1c9a1ae050cfb # initialize rs1
li x18, 0xd3f0bfa78a27be52 # initialize rs2
or x13, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xbdbfcd0a43074eb1 # initialize rs1
li x19, 0xbcdc379e98cb9381 # initialize rs2
or x17, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x448e48ae5f0bfe3f # initialize rs1
li x20, 0xbcf1ae6bb6ab6d53 # initialize rs2
or x12, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xffd3e784fc176be9 # initialize rs1
li x21, 0xd1d9506877b85c7a # initialize rs2
or x23, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x6b6b16f2682faa5c # initialize rs1
li x22, 0xe9ac87a88e4f4617 # initialize rs2
or x20, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xfac1b62e601ae3be # initialize rs1
li x23, 0x3d1b7fea9ffee4b4 # initialize rs2
or x12, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x15759c471991ad8b # initialize rs1
li x24, 0x2b7a3be55d4eb920 # initialize rs2
or x8, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xe44a9975d162face # initialize rs1
li x25, 0xb67e5dbde27d2c6d # initialize rs2
or x27, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xd6f1ed9e7608b9b8 # initialize rs1
li x26, 0x588b81e81ed36bcf # initialize rs2
or x12, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x59f9c85f2659346a # initialize rs1
li x27, 0x999aa499f48b4219 # initialize rs2
or x26, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x64df3348c087af44 # initialize rs1
li x28, 0x3f8035bbe6527068 # initialize rs2
or x22, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x07b46f3a792ac017 # initialize rs1
li x29, 0xdcaa7268ba8178e8 # initialize rs2
or x16, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x472762ce8870da25 # initialize rs1
li x30, 0x5c76f68c23bea1b2 # initialize rs2
or x26, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x3c68867fbc76a3ac # initialize rs1
li x31, 0x9b729216f07c45a7 # initialize rs2
or x15, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x08288d3be653f087 # initialize rs1
li x22, 0x81a671e4853a8018 # initialize rs2
or x0, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x2038e510da2eef23 # initialize rs1
li x1, 0xbb14d06b124bf707 # initialize rs2
or x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xab7fe27a9c894e4e # initialize rs1
li x8, 0xc4423e13c9dff017 # initialize rs2
or x2, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x7a6855fef0055aba # initialize rs1
li x29, 0x09ddaeb13ae53822 # initialize rs2
or x3, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x13de8b57c5ee0c48 # initialize rs1
li x21, 0x5f33ae275aa510e2 # initialize rs2
or x4, x4, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xc5adba2059b1cfab # initialize rs1
li x15, 0x96819e0f264a56a0 # initialize rs2
or x5, x5, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xfd08783df8bf8b9e # initialize rs1
li x26, 0xae9c7193763e4842 # initialize rs2
or x6, x6, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1df2564a089be1f9 # initialize rs1
li x2, 0x53242cfbb0ce7c9a # initialize rs2
or x7, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xf1e0af86163d5498 # initialize rs1
li x21, 0xd88e06a9e7e702af # initialize rs2
or x8, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc93f044b996ef99a # initialize rs1
li x3, 0xf9a3e43c5c22f114 # initialize rs2
or x9, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x5e0f76faae40a3ce # initialize rs1
li x24, 0x45c441f64992efc0 # initialize rs2
or x10, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x1993497d7431f620 # initialize rs1
li x19, 0x242d4f405cd54135 # initialize rs2
or x11, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x0b80358a44f69f0e # initialize rs1
li x25, 0xfb32dd0b3ec694d4 # initialize rs2
or x12, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x2f38627854c5e3ad # initialize rs1
li x30, 0xfcb4cf597ad6e770 # initialize rs2
or x13, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xaefb9641ac089d62 # initialize rs1
li x14, 0xe1fc58f9d401498d # initialize rs2
or x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xd4528239f3dd2d89 # initialize rs1
li x5, 0x0cfe02c4c1123377 # initialize rs2
or x15, x15, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x1408137bc52055ac # initialize rs1
li x7, 0x9dc03471e112820d # initialize rs2
or x16, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xbb380601661b2567 # initialize rs1
li x7, 0x0bf355029d16c8d9 # initialize rs2
or x17, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x54184063825c7dd5 # initialize rs1
li x24, 0x7f4b77cd79254d71 # initialize rs2
or x18, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa78c1a5bfd3d0da9 # initialize rs1
li x2, 0x0045539cb30f6ab0 # initialize rs2
or x19, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x58638b61bf212a7a # initialize rs1
li x16, 0x61b2d07da259ff99 # initialize rs2
or x20, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x851cad2de8d7a19d # initialize rs1
li x1, 0xe196f3e43a291c0d # initialize rs2
or x21, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x97d6fbd57f78f736 # initialize rs1
li x21, 0xf6638c275bb78923 # initialize rs2
or x22, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x612ca7959bfb0ad7 # initialize rs1
li x24, 0x266398e8e8a68cd5 # initialize rs2
or x23, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xa27798e2a3f67005 # initialize rs1
li x16, 0xe9a39981a29c71a3 # initialize rs2
or x24, x24, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x50d1bb10ab51ecfd # initialize rs1
li x29, 0x128af71db0baf8af # initialize rs2
or x25, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x2ed44be48cfcd711 # initialize rs1
li x10, 0x8c3215a8819aa550 # initialize rs2
or x26, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x84c7bc5e9b666cf5 # initialize rs1
li x6, 0xfd7c2baf30e28fdc # initialize rs2
or x27, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xcad51da9a629c390 # initialize rs1
li x26, 0xdf5d03d805f395a6 # initialize rs2
or x28, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x003779401b81fb59 # initialize rs1
li x30, 0x0663051550737c19 # initialize rs2
or x29, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x1568c8380ddbd6d4 # initialize rs1
li x3, 0x1bc34e965df95b80 # initialize rs2
or x30, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xe0bd858414d276fe # initialize rs1
li x29, 0xbc108822ef51a7ca # initialize rs2
or x31, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x22, 0x60b834926185f52f # initialize rs1
li x0, 0x89851af14f017e7c # initialize rs2
or x0, x22, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x21, 0x374eb0707833292a # initialize rs1
li x1, 0x9bf791c7ad763427 # initialize rs2
or x1, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x13, 0x2b7e7495f46c65c2 # initialize rs1
li x2, 0x2ccb192d07a7c5d6 # initialize rs2
or x2, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x24, 0x1699da69bf9e92e9 # initialize rs1
li x3, 0x34a51255be0f1174 # initialize rs2
or x3, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0xf795d77f12a383ee # initialize rs1
li x4, 0x1ccd8094d760d375 # initialize rs2
or x4, x22, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0x410ef7cb79b7c75d # initialize rs1
li x5, 0x74a3dde291a0d95d # initialize rs2
or x5, x17, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0xc372cdccdb767c24 # initialize rs1
li x6, 0xc5c7a154b99b09c0 # initialize rs2
or x6, x17, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x26, 0x91988711962a9a3f # initialize rs1
li x7, 0x32bedede2155bd2c # initialize rs2
or x7, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x24, 0x133015921ec90586 # initialize rs1
li x8, 0x5b61a6f28f6d78d4 # initialize rs2
or x8, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x26, 0x94f345d8d8155e25 # initialize rs1
li x9, 0xfad5cdd5f059a057 # initialize rs2
or x9, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x13, 0x85380a20a83c7e34 # initialize rs1
li x10, 0xe4a17bdcf02d94be # initialize rs2
or x10, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x27, 0xc335b292ef15809e # initialize rs1
li x11, 0x681291e943b12a06 # initialize rs2
or x11, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x30, 0xe8cf20035abf8774 # initialize rs1
li x12, 0x1eb15def17495aa4 # initialize rs2
or x12, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x1, 0xb1403b3e0620c641 # initialize rs1
li x13, 0xe0cde4f154a46979 # initialize rs2
or x13, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x28, 0x30a7be7161d08fad # initialize rs1
li x14, 0x8a7c250a8b3e3e56 # initialize rs2
or x14, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x21, 0x13c9d7abe0cb2be0 # initialize rs1
li x15, 0x78ad7f08b5f894f9 # initialize rs2
or x15, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x11, 0x3de5aea3159a6ab1 # initialize rs1
li x16, 0x335c3a88c673df96 # initialize rs2
or x16, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x13, 0x7141e847fd5aff4d # initialize rs1
li x17, 0xce7cd30b9d476928 # initialize rs2
or x17, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x7, 0x63a0a38a213d3db2 # initialize rs1
li x18, 0x5c0d6a4773fc29f6 # initialize rs2
or x18, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x9, 0x467ce74c5de88dd6 # initialize rs1
li x19, 0xb35ad8cb979cedfd # initialize rs2
or x19, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x19, 0xcb1e713c62054f55 # initialize rs1
li x20, 0xfe795821eedee996 # initialize rs2
or x20, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x3, 0x3754d64001d842ea # initialize rs1
li x21, 0x536fc9c500a95779 # initialize rs2
or x21, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x19, 0xbd7c70e37beae3c9 # initialize rs1
li x22, 0x1fb7f52f9fe67281 # initialize rs2
or x22, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x3, 0xeff134a251e7a0ac # initialize rs1
li x23, 0xe7c11546bb1a4444 # initialize rs2
or x23, x3, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x20, 0x526ff6199e46ddc8 # initialize rs1
li x24, 0x22a92ea76cf02084 # initialize rs2
or x24, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x20, 0xa73bb2dca4162621 # initialize rs1
li x25, 0xaf0e9fc1d6d10cbd # initialize rs2
or x25, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x22, 0xbff3ea229e3b92d7 # initialize rs1
li x26, 0x83b8db0034f4017c # initialize rs2
or x26, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x16, 0x15ba7eb5572e80fe # initialize rs1
li x27, 0xda2d5ad3a7c7f5d8 # initialize rs2
or x27, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x16, 0x17240f3ca8d9f86c # initialize rs1
li x28, 0x17922058c0f3db40 # initialize rs2
or x28, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x25, 0x6136a5623aa81d87 # initialize rs1
li x29, 0x772c73114a001ab5 # initialize rs2
or x29, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x27, 0xae0f1b621da2b917 # initialize rs1
li x30, 0x2020ea4136605b79 # initialize rs2
or x30, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x20, 0xf6370d9801e95bfd # initialize rs1
li x31, 0xd9f46d4ee011975a # initialize rs2
or x31, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x335fb87dda874c3f # initialize rs1
li x0, 0xedc0da443d86fc0f # initialize rs2
or x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x3b561cb47146ffc6 # initialize rs1
li x1, 0x583f502b5c5e3fbe # initialize rs2
or x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0xe90d7a177caec365 # initialize rs1
li x2, 0x4c7ee3a1f6dc1f4a # initialize rs2
or x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xa6edaa25731cd42f # initialize rs1
li x3, 0x161fdb57e7427568 # initialize rs2
or x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x97a8565b9a201a3c # initialize rs1
li x4, 0x738743687d8b59df # initialize rs2
or x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd9ed051c2d630ece # initialize rs1
li x5, 0xdc2e9a3fc13f912d # initialize rs2
or x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x8fcadecd29ed9b8e # initialize rs1
li x6, 0xc28bf7ef21f323e9 # initialize rs2
or x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x82d7a8b6321d2fbf # initialize rs1
li x7, 0x30ed7eb46984051b # initialize rs2
or x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x370ca75f285f6b1d # initialize rs1
li x8, 0x50c5634708cc787a # initialize rs2
or x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xbcc008eb288258e9 # initialize rs1
li x9, 0x607d9b3d0ceb9014 # initialize rs2
or x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x453d6c909d2365ad # initialize rs1
li x10, 0xf457b2393e6a0b23 # initialize rs2
or x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x1e216d74f924a4b4 # initialize rs1
li x11, 0xa64caac8463f7294 # initialize rs2
or x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xa3e631df22b71669 # initialize rs1
li x12, 0xfbeffaa4763b3af3 # initialize rs2
or x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xb9cc83af04a48530 # initialize rs1
li x13, 0x62cb3563745bf8d4 # initialize rs2
or x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xd46795d8557d1095 # initialize rs1
li x14, 0x93ac8df430b677de # initialize rs2
or x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xb68e1acf8d58ec23 # initialize rs1
li x15, 0xef915ba645022ab7 # initialize rs2
or x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x64507530628448c9 # initialize rs1
li x16, 0x8105797f11f662af # initialize rs2
or x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x009ba45637efcafb # initialize rs1
li x17, 0x0b93920000f5c6fa # initialize rs2
or x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x214f596c1054df99 # initialize rs1
li x18, 0xdfcd3cc147e81b75 # initialize rs2
or x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x6f0db0ea3efe29ee # initialize rs1
li x19, 0xbc3daab21f2e2a42 # initialize rs2
or x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x9bdd68880b4d53c8 # initialize rs1
li x20, 0xe57ef4eef80fd670 # initialize rs2
or x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x314a897ca98f85d9 # initialize rs1
li x21, 0xb9fbaf8293b7d2dc # initialize rs2
or x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x748b0e74fb640bc9 # initialize rs1
li x22, 0xc3adcb10a13ce6e7 # initialize rs2
or x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x215f5fca8d483e35 # initialize rs1
li x23, 0x60abb5de89ade1fe # initialize rs2
or x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x5bd89d633aeb2e61 # initialize rs1
li x24, 0x0a24fc78c0e0d9e3 # initialize rs2
or x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x455a93b526315918 # initialize rs1
li x25, 0x90478849ad9712d3 # initialize rs2
or x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xefb62185f5d955ee # initialize rs1
li x26, 0xc08d73a6acf7cd80 # initialize rs2
or x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x8b160337afaa5a17 # initialize rs1
li x27, 0xd3cb6b1393501f32 # initialize rs2
or x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x469ea98e2e28d0a3 # initialize rs1
li x28, 0x4a05073e1806048d # initialize rs2
or x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x22d375d088549c16 # initialize rs1
li x29, 0x929931756c79256b # initialize rs2
or x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xd38dcf85e3b20557 # initialize rs1
li x30, 0x3d8a9e67b9d8118a # initialize rs2
or x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x49484e30058af9c2 # initialize rs1
li x31, 0xed536ebd8c4cc23e # initialize rs2
or x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x26, x24, x18 # perform first operation
or x28, x29, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x15, x18 # perform first operation
or x28, x11, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x30, x9 # perform first operation
or x14, x15, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x19, x26 # perform first operation
or x19, x31, x11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x30, x28 # perform first operation
or x28, x29, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x31, x3 # perform first operation
or x24, x13, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x20, x14 # perform first operation
or x16, x27, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x22, x19 # perform first operation
or x8, x21, x20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x21, x26, x3 # perform first operation
or x21, x7, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x22, x10, x16 # perform first operation
or x10, x26, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x10, x18 # perform first operation
or x18, x6, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x12, x30 # perform first operation
or x1, x18, x9 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-ori.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x5ff53bbab53eb29f # initialize rs1
ori x31, x0, -118 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x8789ecbc02983168 # initialize rs1
ori x29, x1, -1910 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x00c7a22696515377 # initialize rs1
ori x7, x2, -808 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x9f80478706c8164d # initialize rs1
ori x11, x3, 462 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x27b6cfe5d49e78bd # initialize rs1
ori x1, x4, -239 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6f03f467afcaf10a # initialize rs1
ori x29, x5, 1121 # perform operation
RVTEST_SIGUPD(x6, x0, x29, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4b30dcc4b109e098 # initialize rs1
ori x22, x6, -661 # perform operation
RVTEST_SIGUPD(x7, x0, x22, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x68384b70a4ac2098 # initialize rs1
ori x12, x7, -502 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x619777b9e338c278 # initialize rs1
ori x26, x8, 565 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xafd3c877ca663545 # initialize rs1
ori x31, x9, 95 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x8426bbe303e47798 # initialize rs1
ori x17, x10, -1209 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x3ef1e3a153e36ae8 # initialize rs1
ori x24, x11, -951 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xbf4c2b076c95680a # initialize rs1
ori x29, x12, -562 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x5779ee6ced97ee59 # initialize rs1
ori x17, x13, 91 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc0ce3ebd1be1dc4c # initialize rs1
ori x8, x14, -253 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xc8fcc606e6496019 # initialize rs1
ori x20, x15, -1336 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x75cc59e314b8d11f # initialize rs1
ori x25, x16, 1806 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x26c7da0785397d39 # initialize rs1
ori x22, x17, 1918 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x0423c1462e624152 # initialize rs1
ori x15, x18, -529 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xb4ddec663702341b # initialize rs1
ori x22, x19, 1830 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x0e5ee42f19c7dee7 # initialize rs1
ori x14, x20, -836 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x77ff3b4cd18997cb # initialize rs1
ori x9, x21, -824 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x0816440e28fc4f90 # initialize rs1
ori x6, x22, 1546 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xad393ccb51d22fce # initialize rs1
ori x30, x23, -1556 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x52d46e2004d718c6 # initialize rs1
ori x20, x24, 2012 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xa0761bc807316376 # initialize rs1
ori x9, x25, -91 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x3883872df5b1b9ec # initialize rs1
ori x30, x26, 993 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe95f2d833c3df4c1 # initialize rs1
ori x15, x27, -304 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x171b4ccdbafaa18d # initialize rs1
ori x11, x28, 1548 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x4ba0315216f87953 # initialize rs1
ori x14, x29, 961 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x345567b4880e0ec8 # initialize rs1
ori x2, x30, -224 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x613d5c621fcf6feb # initialize rs1
ori x18, x31, -1700 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 248)

# Testcase cp_rd (Test destination rd = x0)
li x7, 0x29b76327898ad503 # initialize rs1
ori x0, x7, 745 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x10, 0xfc287b97474878bb # initialize rs1
ori x1, x10, -162 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x10, 0x47513ba8dbe4af29 # initialize rs1
ori x2, x10, -1879 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x1, 0xd69eb2575eb2cd7e # initialize rs1
ori x3, x1, 1041 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0xfc25b649386ecbd9 # initialize rs1
ori x4, x18, -1358 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x6, 0x54778b0d142c3f1d # initialize rs1
ori x5, x6, -2020 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
li x27, 0xd6d9dac126ba68cb # initialize rs1
ori x6, x27, -243 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0x23210c2325dc46ec # initialize rs1
ori x7, x4, 711 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x4, 0x9fec7fe7963b659d # initialize rs1
ori x8, x4, -561 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x11, 0x6f557f714d5a595a # initialize rs1
ori x9, x11, 110 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x1, 0x852fb77a166568e6 # initialize rs1
ori x10, x1, 52 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x8, 0xd983b73c4547a823 # initialize rs1
ori x11, x8, -1018 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x11, 0xd29126d8494f19dd # initialize rs1
ori x12, x11, -815 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x14, 0x4fb77c3de8ab13a1 # initialize rs1
ori x13, x14, 1695 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x19, 0xfa68eb228e73b66f # initialize rs1
ori x14, x19, -1012 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x23, 0xdc722cef24416530 # initialize rs1
ori x15, x23, 1506 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x3, 0x96ea85fec8c87904 # initialize rs1
ori x16, x3, -1241 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x29, 0x9c36f3801ef88dac # initialize rs1
ori x17, x29, 2000 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x15, 0xe561be0893d5a9eb # initialize rs1
ori x18, x15, 1354 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x30, 0x3779fbd63ae83b03 # initialize rs1
ori x19, x30, -1896 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x24, 0x1485bcae38b59a60 # initialize rs1
ori x20, x24, -1515 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x29, 0xea3c7fb25635d691 # initialize rs1
ori x21, x29, 1060 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x13, 0x057559b99db78f4a # initialize rs1
ori x22, x13, -1963 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x29, 0xff42de035b522be0 # initialize rs1
ori x23, x29, -1776 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x25, 0xf549ef2c13f6993c # initialize rs1
ori x24, x25, 964 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x10, 0x20e0633ba0df4c59 # initialize rs1
ori x25, x10, 1859 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x15, 0x48b744ec8e726643 # initialize rs1
ori x26, x15, -892 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x7, 0x6e2641d8f5cd1559 # initialize rs1
ori x27, x7, 1680 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x1, 0xc743b9d4d813703c # initialize rs1
ori x28, x1, -1809 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x11, 0xc9aed663f2441945 # initialize rs1
ori x29, x11, 1303 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x14, 0xd7d4663c627601d2 # initialize rs1
ori x30, x14, 929 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x17, 0xe5c101402225ac3e # initialize rs1
ori x31, x17, 448 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x23, 0x0000000000000000 # initialize rs1
ori x30, x23, -1693 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x8, 0x0000000000000001 # initialize rs1
ori x21, x8, 1116 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x15, 0x0000000000000002 # initialize rs1
ori x2, x15, -307 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x11, 0x8000000000000000 # initialize rs1
ori x14, x11, -428 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x31, 0x8000000000000001 # initialize rs1
ori x26, x31, 391 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x1, 0x7fffffffffffffff # initialize rs1
ori x9, x1, -811 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x8, 0x7ffffffffffffffe # initialize rs1
ori x26, x8, 2046 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x21, 0xffffffffffffffff # initialize rs1
ori x11, x21, -849 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x15, 0xfffffffffffffffe # initialize rs1
ori x10, x15, -2044 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x8, 0x5bbc887763ae86f2 # initialize rs1
ori x6, x8, 376 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x1, x31, -1237 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x31, 0x5555555555555555 # initialize rs1
ori x30, x31, -584 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x12, 0x00000000ffffffff # initialize rs1
ori x26, x12, 1717 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x4, 0x00000000fffffffe # initialize rs1
ori x16, x4, 52 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x21, 0x0000000100000000 # initialize rs1
ori x14, x21, 1910 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x30, 0x0000000100000001 # initialize rs1
ori x8, x30, -238 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 632)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
ori x19, x15, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 640)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
ori x25, x21, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 648)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
ori x12, x17, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 656)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
ori x27, x29, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 664)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
ori x17, x14, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 672)

# Testcase cr_rs1_imm_corners
li x4, 0x0000000000000000 # initialize rs1
ori x25, x4, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 680)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
ori x6, x25, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 688)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
ori x8, x29, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 696)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
ori x10, x21, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 704)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000000 # initialize rs1
ori x19, x20, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 712)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
ori x9, x12, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 720)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
ori x22, x15, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 728)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
ori x12, x31, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 736)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
ori x7, x17, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 744)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
ori x19, x12, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 752)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000000 # initialize rs1
ori x29, x11, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 760)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000000 # initialize rs1
ori x2, x28, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 768)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000000 # initialize rs1
ori x18, x19, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 776)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000000 # initialize rs1
ori x8, x13, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 784)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
ori x2, x15, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 792)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
ori x3, x1, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 800)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
ori x8, x16, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 808)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000001 # initialize rs1
ori x14, x13, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 816)

# Testcase cr_rs1_imm_corners
li x4, 0x0000000000000001 # initialize rs1
ori x19, x4, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 824)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
ori x27, x1, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 832)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000001 # initialize rs1
ori x17, x11, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 840)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000000000001 # initialize rs1
ori x25, x2, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 848)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
ori x28, x21, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 856)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000001 # initialize rs1
ori x19, x15, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 864)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000001 # initialize rs1
ori x24, x30, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 872)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
ori x9, x19, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 880)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
ori x19, x22, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 888)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
ori x8, x9, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 896)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000001 # initialize rs1
ori x13, x27, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 904)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
ori x13, x21, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 912)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000001 # initialize rs1
ori x8, x3, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 920)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
ori x3, x16, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 928)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000001 # initialize rs1
ori x31, x1, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 936)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000001 # initialize rs1
ori x17, x10, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 944)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
ori x3, x19, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 952)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
ori x8, x12, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 960)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
ori x25, x14, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 968)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
ori x25, x14, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 976)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000002 # initialize rs1
ori x1, x11, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 984)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
ori x11, x15, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 992)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
ori x12, x15, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1000)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000002 # initialize rs1
ori x22, x30, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1008)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
ori x15, x12, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1016)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000002 # initialize rs1
ori x29, x16, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1024)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
ori x24, x14, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1032)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
ori x6, x23, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1040)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000002 # initialize rs1
ori x13, x28, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1048)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000002 # initialize rs1
ori x15, x18, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1056)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000000000002 # initialize rs1
ori x26, x23, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1064)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000002 # initialize rs1
ori x9, x30, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1072)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
ori x30, x14, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 1080)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000002 # initialize rs1
ori x31, x28, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 1088)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
ori x17, x24, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1096)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
ori x10, x22, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1104)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
ori x25, x8, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1112)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
ori x1, x29, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1120)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
ori x27, x12, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1128)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000000 # initialize rs1
ori x3, x17, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1136)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
ori x7, x24, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1144)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000000 # initialize rs1
ori x10, x17, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1152)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
ori x22, x10, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1160)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
ori x26, x12, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1168)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
ori x17, x29, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1176)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
ori x28, x2, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1184)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000000 # initialize rs1
ori x1, x17, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1192)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000000 # initialize rs1
ori x3, x19, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1200)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000000 # initialize rs1
ori x12, x30, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1208)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000000 # initialize rs1
ori x7, x22, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1216)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000000 # initialize rs1
ori x14, x21, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1224)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
ori x4, x1, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1232)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000000 # initialize rs1
ori x29, x18, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1240)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000000 # initialize rs1
ori x26, x15, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1248)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
ori x2, x27, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1256)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
ori x14, x29, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1264)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000000 # initialize rs1
ori x24, x23, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1272)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000001 # initialize rs1
ori x4, x28, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000001 # initialize rs1
ori x14, x19, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1288)

# Testcase cr_rs1_imm_corners
li x11, 0x8000000000000001 # initialize rs1
ori x29, x11, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1296)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000001 # initialize rs1
ori x12, x8, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1304)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
ori x22, x9, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1312)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000001 # initialize rs1
ori x1, x17, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1320)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
ori x28, x30, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1328)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
ori x19, x14, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1336)

# Testcase cr_rs1_imm_corners
li x11, 0x8000000000000001 # initialize rs1
ori x26, x11, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1344)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
ori x22, x7, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1352)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
ori x19, x14, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1360)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
ori x26, x30, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1368)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000001 # initialize rs1
ori x11, x17, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1376)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000001 # initialize rs1
ori x22, x23, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1384)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000001 # initialize rs1
ori x21, x18, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1392)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000001 # initialize rs1
ori x8, x28, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1400)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
ori x21, x14, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1408)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
ori x20, x7, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1416)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
ori x4, x7, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1424)

# Testcase cr_rs1_imm_corners
li x18, 0x8000000000000001 # initialize rs1
ori x2, x18, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1432)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
ori x25, x29, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1440)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffffffffffff # initialize rs1
ori x18, x25, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1448)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
ori x6, x29, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1456)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffffffffffff # initialize rs1
ori x26, x27, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1464)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
ori x20, x1, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1472)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
ori x14, x10, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1480)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
ori x21, x24, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1488)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffffffffffff # initialize rs1
ori x16, x31, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1496)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
ori x13, x7, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1504)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
ori x1, x18, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1512)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
ori x16, x13, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1520)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffffffffffff # initialize rs1
ori x11, x21, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1528)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
ori x30, x3, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 1536)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffffffffffff # initialize rs1
ori x7, x30, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1544)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
ori x8, x24, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1552)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
ori x10, x1, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1560)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffffffffffff # initialize rs1
ori x30, x23, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 1568)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
ori x3, x10, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1576)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
ori x1, x10, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1584)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffffffffffff # initialize rs1
ori x2, x20, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1592)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
ori x15, x2, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1600)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffffffffffe # initialize rs1
ori x19, x6, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1608)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffffffffffe # initialize rs1
ori x6, x2, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1616)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffffffffffe # initialize rs1
ori x1, x7, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1624)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
ori x31, x28, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 1632)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffffffffffe # initialize rs1
ori x1, x10, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1640)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffffffffffe # initialize rs1
ori x1, x14, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1648)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffffffffffe # initialize rs1
ori x17, x29, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1656)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
ori x20, x26, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1664)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffffffffffe # initialize rs1
ori x21, x16, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1672)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
ori x27, x13, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1680)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffffffffffe # initialize rs1
ori x3, x27, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1688)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffffffffffe # initialize rs1
ori x14, x25, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1696)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
ori x13, x24, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1704)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffffffffffe # initialize rs1
ori x12, x3, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1712)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
ori x7, x26, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1720)

# Testcase cr_rs1_imm_corners
li x1, 0x7ffffffffffffffe # initialize rs1
ori x10, x1, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1728)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
ori x18, x26, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1736)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
ori x8, x11, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1744)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
ori x21, x28, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1752)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
ori x27, x9, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1760)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffffffffffff # initialize rs1
ori x14, x8, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1768)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffffffffffff # initialize rs1
ori x9, x19, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1776)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffffffffffff # initialize rs1
ori x2, x8, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1784)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffffffffffff # initialize rs1
ori x11, x29, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1792)
addi x5, x5, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x23, 0xffffffffffffffff # initialize rs1
ori x29, x23, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 0)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffffffffffff # initialize rs1
ori x18, x22, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 8)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffffffffffff # initialize rs1
ori x11, x8, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 16)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffffffffffff # initialize rs1
ori x30, x16, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 24)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
ori x8, x6, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 32)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffffffffffff # initialize rs1
ori x31, x11, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 40)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
ori x14, x9, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 48)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffffffffffff # initialize rs1
ori x20, x26, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 56)

# Testcase cr_rs1_imm_corners
li x4, 0xffffffffffffffff # initialize rs1
ori x8, x4, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 64)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffffffffffff # initialize rs1
ori x18, x9, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 72)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffffffffffff # initialize rs1
ori x4, x31, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 80)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffffffffffff # initialize rs1
ori x23, x26, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 88)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffffffffffff # initialize rs1
ori x29, x21, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 96)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffffffffffff # initialize rs1
ori x28, x7, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 104)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffffffffffff # initialize rs1
ori x28, x12, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 112)

# Testcase cr_rs1_imm_corners
li x1, 0xfffffffffffffffe # initialize rs1
ori x25, x1, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 120)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
ori x16, x24, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 128)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
ori x14, x26, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 136)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
ori x8, x26, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 144)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
ori x24, x12, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 152)

# Testcase cr_rs1_imm_corners
li x9, 0xfffffffffffffffe # initialize rs1
ori x27, x9, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 160)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
ori x2, x12, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 168)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffffffffffe # initialize rs1
ori x13, x14, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 176)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffffffffffe # initialize rs1
ori x7, x10, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 184)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
ori x12, x25, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 192)

# Testcase cr_rs1_imm_corners
li x28, 0xfffffffffffffffe # initialize rs1
ori x21, x28, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 200)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
ori x11, x24, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 208)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
ori x10, x15, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 216)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
ori x26, x27, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 224)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffffffffffe # initialize rs1
ori x1, x19, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 232)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
ori x27, x23, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 240)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffffffffffe # initialize rs1
ori x4, x10, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 248)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
ori x23, x27, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 256)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
ori x22, x16, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 264)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
ori x12, x23, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 272)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
ori x9, x2, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 280)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc887763ae86f2 # initialize rs1
ori x15, x9, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 288)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
ori x11, x21, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 296)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
ori x22, x6, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 304)

# Testcase cr_rs1_imm_corners
li x4, 0x5bbc887763ae86f2 # initialize rs1
ori x7, x4, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 312)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc887763ae86f2 # initialize rs1
ori x15, x30, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 320)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc887763ae86f2 # initialize rs1
ori x9, x30, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 328)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc887763ae86f2 # initialize rs1
ori x23, x9, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 336)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc887763ae86f2 # initialize rs1
ori x17, x8, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 344)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc887763ae86f2 # initialize rs1
ori x22, x31, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 352)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc887763ae86f2 # initialize rs1
ori x21, x29, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 360)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc887763ae86f2 # initialize rs1
ori x24, x29, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 368)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc887763ae86f2 # initialize rs1
ori x29, x8, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 376)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
ori x9, x1, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 384)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
ori x30, x17, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 392)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
ori x12, x1, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 400)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc887763ae86f2 # initialize rs1
ori x23, x13, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 408)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc887763ae86f2 # initialize rs1
ori x19, x31, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 416)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
ori x10, x24, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 424)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
ori x3, x2, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 432)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x27, x30, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 440)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x8, x16, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 448)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x15, x9, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 456)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x4, x14, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 464)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x19, x13, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 472)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x7, x15, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 480)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x25, x8, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 488)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x14, x9, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 496)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x6, x16, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 504)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x19, x6, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 512)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x24, x14, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 520)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x21, x27, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 528)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x25, x15, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 536)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x7, x27, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 544)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x30, x19, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 552)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x20, x26, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 560)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x21, x6, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 568)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x31, x26, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 576)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x9, x20, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 584)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
ori x17, x20, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 592)

# Testcase cr_rs1_imm_corners
li x17, 0x5555555555555555 # initialize rs1
ori x28, x17, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 600)

# Testcase cr_rs1_imm_corners
li x21, 0x5555555555555555 # initialize rs1
ori x4, x21, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 608)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
ori x13, x16, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 616)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
ori x31, x28, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 624)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
ori x14, x8, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 632)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
ori x12, x14, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 640)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
ori x7, x28, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 648)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
ori x26, x31, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 656)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
ori x11, x24, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 664)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
ori x3, x14, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 672)

# Testcase cr_rs1_imm_corners
li x18, 0x5555555555555555 # initialize rs1
ori x19, x18, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 680)

# Testcase cr_rs1_imm_corners
li x2, 0x5555555555555555 # initialize rs1
ori x29, x2, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 688)

# Testcase cr_rs1_imm_corners
li x31, 0x5555555555555555 # initialize rs1
ori x16, x31, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 696)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
ori x18, x22, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 704)

# Testcase cr_rs1_imm_corners
li x3, 0x5555555555555555 # initialize rs1
ori x30, x3, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 712)

# Testcase cr_rs1_imm_corners
li x3, 0x5555555555555555 # initialize rs1
ori x10, x3, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 720)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
ori x9, x27, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 728)

# Testcase cr_rs1_imm_corners
li x24, 0x5555555555555555 # initialize rs1
ori x19, x24, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 736)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
ori x11, x22, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 744)

# Testcase cr_rs1_imm_corners
li x1, 0x5555555555555555 # initialize rs1
ori x25, x1, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 752)

# Testcase cr_rs1_imm_corners
li x4, 0x00000000ffffffff # initialize rs1
ori x18, x4, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 760)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
ori x3, x7, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 768)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
ori x8, x17, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 776)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
ori x11, x24, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 784)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
ori x25, x22, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 792)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000ffffffff # initialize rs1
ori x1, x28, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 800)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
ori x27, x22, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 808)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000ffffffff # initialize rs1
ori x11, x16, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 816)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
ori x25, x1, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 824)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
ori x20, x7, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 832)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000ffffffff # initialize rs1
ori x16, x18, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 840)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
ori x28, x31, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 848)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000ffffffff # initialize rs1
ori x27, x30, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 856)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000ffffffff # initialize rs1
ori x4, x16, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 864)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
ori x16, x7, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 872)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000ffffffff # initialize rs1
ori x18, x26, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 880)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000ffffffff # initialize rs1
ori x18, x23, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 888)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000ffffffff # initialize rs1
ori x16, x21, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 896)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
ori x14, x31, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 904)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
ori x11, x31, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 912)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
ori x18, x12, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 920)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000fffffffe # initialize rs1
ori x11, x24, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 928)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000fffffffe # initialize rs1
ori x3, x15, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 936)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
ori x2, x23, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 944)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000fffffffe # initialize rs1
ori x25, x21, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 952)

# Testcase cr_rs1_imm_corners
li x4, 0x00000000fffffffe # initialize rs1
ori x6, x4, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 960)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
ori x4, x30, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 968)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000fffffffe # initialize rs1
ori x26, x1, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 976)

# Testcase cr_rs1_imm_corners
li x4, 0x00000000fffffffe # initialize rs1
ori x13, x4, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 984)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
ori x27, x19, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 992)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000fffffffe # initialize rs1
ori x9, x3, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1000)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000fffffffe # initialize rs1
ori x29, x2, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1008)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000fffffffe # initialize rs1
ori x24, x25, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1016)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
ori x23, x17, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 1024)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
ori x14, x29, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1032)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000fffffffe # initialize rs1
ori x7, x10, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1040)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
ori x18, x30, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1048)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000fffffffe # initialize rs1
ori x17, x24, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1056)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
ori x13, x12, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1064)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000fffffffe # initialize rs1
ori x27, x26, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1072)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
ori x1, x31, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1080)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
ori x17, x21, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1088)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000000 # initialize rs1
ori x19, x9, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1096)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
ori x9, x2, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1104)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000000 # initialize rs1
ori x20, x15, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1112)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
ori x3, x21, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1120)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
ori x27, x18, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1128)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
ori x10, x14, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1136)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000000 # initialize rs1
ori x18, x19, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1144)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
ori x18, x14, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1152)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000000 # initialize rs1
ori x9, x8, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1160)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
ori x21, x14, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1168)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000000 # initialize rs1
ori x17, x29, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1176)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000000 # initialize rs1
ori x8, x20, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1184)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
ori x15, x24, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1192)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
ori x29, x31, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1200)

# Testcase cr_rs1_imm_corners
li x4, 0x0000000100000000 # initialize rs1
ori x25, x4, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1208)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
ori x11, x18, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1216)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000000 # initialize rs1
ori x16, x9, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1224)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
ori x22, x21, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1232)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
ori x16, x18, 0 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1240)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000001 # initialize rs1
ori x16, x26, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1248)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
ori x16, x22, 2 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1256)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000001 # initialize rs1
ori x4, x28, 3 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1264)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000100000001 # initialize rs1
ori x24, x25, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1272)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000001 # initialize rs1
ori x7, x24, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1280)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000001 # initialize rs1
ori x19, x20, 16 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1288)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000001 # initialize rs1
ori x28, x10, 32 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1296)

# Testcase cr_rs1_imm_corners
li x4, 0x0000000100000001 # initialize rs1
ori x24, x4, 64 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1304)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
ori x24, x30, 128 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1312)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
ori x22, x18, 256 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1320)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
ori x17, x30, 512 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1328)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000001 # initialize rs1
ori x25, x9, 1023 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1336)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
ori x26, x31, 1024 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1344)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000001 # initialize rs1
ori x6, x24, 1795 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1352)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000100000001 # initialize rs1
ori x8, x29, 2047 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1360)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
ori x22, x8, -2048 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1368)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
ori x11, x22, -2047 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1376)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000001 # initialize rs1
ori x26, x30, -2 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1384)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000001 # initialize rs1
ori x4, x27, -1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x36342977e4cc9f60 # initialize rs1
ori x0, x0, 467 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x06a74fd4c3174904 # initialize rs1
ori x1, x1, -1168 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xa27ee1134d9cb3c2 # initialize rs1
ori x2, x2, -57 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x267305ff82a74182 # initialize rs1
ori x3, x3, 1118 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
li x4, 0x7358e5b38949de63 # initialize rs1
ori x4, x4, -814 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd5ac0c6a351c00a2 # initialize rs1
ori x5, x5, -1623 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa0b1f8c267319886 # initialize rs1
ori x6, x6, -683 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x5c7eb92ec3fbc46b # initialize rs1
ori x7, x7, -1011 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xfdfd84f784709c4b # initialize rs1
ori x8, x8, 1212 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x13244ec936be3059 # initialize rs1
ori x9, x9, 1974 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xb94a7267bc459ef4 # initialize rs1
ori x10, x10, 1373 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x13d028a93e1c98d6 # initialize rs1
ori x11, x11, 105 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x8595e4d7379980bd # initialize rs1
ori x12, x12, -1935 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x99add635c701941e # initialize rs1
ori x13, x13, -1784 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x2b33e6b143205e10 # initialize rs1
ori x14, x14, -1708 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x225e3b84531e0e03 # initialize rs1
ori x15, x15, 666 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xbae77cb400b84902 # initialize rs1
ori x16, x16, 1029 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x727bfb10b1c15c60 # initialize rs1
ori x17, x17, 524 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x6f905b0d031656c5 # initialize rs1
ori x18, x18, 1936 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xba2f59a76192d2ac # initialize rs1
ori x19, x19, -705 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x2bfcdd3e0e169333 # initialize rs1
ori x20, x20, 716 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x8ccc447d4b05bfb9 # initialize rs1
ori x21, x21, -81 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x024ba76fb54f978d # initialize rs1
ori x22, x22, 663 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x98054ec344925620 # initialize rs1
ori x23, x23, -640 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x032ae29cb54d119f # initialize rs1
ori x24, x24, 236 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x0cac45ce415fbe75 # initialize rs1
ori x25, x25, -447 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x2fdf453c62d95bf8 # initialize rs1
ori x26, x26, -1742 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x31a07eca5e5373e8 # initialize rs1
ori x27, x27, 680 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x39b4f184233445b0 # initialize rs1
ori x28, x28, 1694 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xd5c9eceddc2ad174 # initialize rs1
ori x29, x29, 1860 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x1b2d9c3ccc512632 # initialize rs1
ori x30, x30, 246 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xd13168d2394cb4ee # initialize rs1
ori x31, x31, 195 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x7, 0x86d9fd19c8958a6f # initialize rs1
ori x6, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1656)

# Testcase cp_imm_corners
li x1, 0x909a6b37285d70c1 # initialize rs1
ori x18, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1664)

# Testcase cp_imm_corners
li x22, 0x5cc776d0c3cb76fd # initialize rs1
ori x11, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1672)

# Testcase cp_imm_corners
li x20, 0xc2e78daa07dfa27c # initialize rs1
ori x17, x20, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1680)

# Testcase cp_imm_corners
li x20, 0x3bec3ad6deca31cc # initialize rs1
ori x8, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1688)

# Testcase cp_imm_corners
li x7, 0xdfe68b153f089425 # initialize rs1
ori x5, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1696)

# Testcase cp_imm_corners
li x18, 0x06c9acba7f90714f # initialize rs1
ori x20, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1704)

# Testcase cp_imm_corners
li x22, 0xca52adf099e4e9bb # initialize rs1
ori x24, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1712)

# Testcase cp_imm_corners
li x19, 0x5f3f783608789ca1 # initialize rs1
ori x26, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1720)

# Testcase cp_imm_corners
li x20, 0xec82d09cd2fba295 # initialize rs1
ori x2, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1728)

# Testcase cp_imm_corners
li x3, 0xafdc11be2bef57e1 # initialize rs1
ori x16, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1736)

# Testcase cp_imm_corners
li x7, 0x37ef7867abf131ac # initialize rs1
ori x26, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1744)

# Testcase cp_imm_corners
li x2, 0x557ae80ab6bdec5e # initialize rs1
ori x21, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1752)

# Testcase cp_imm_corners
li x3, 0xf2cccdd939814467 # initialize rs1
ori x9, x3, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1760)

# Testcase cp_imm_corners
li x10, 0x4dd1845e5c729d24 # initialize rs1
ori x5, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1768)

# Testcase cp_imm_corners
li x16, 0xe25c57b2f3d29db9 # initialize rs1
ori x20, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1776)

# Testcase cp_imm_corners
li x18, 0xdfd5080d950b32d9 # initialize rs1
ori x16, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1784)

# Testcase cp_imm_corners
li x30, 0xfe18dd39f1ea9262 # initialize rs1
ori x18, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x8, 0x92bd9088f04c6cae # initialize rs1
ori x7, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_imm_corners
li x29, 0x0cd981336639ee31 # initialize rs1
ori x23, x29, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x29, x28 # perform first operation
ori x6, x21, 1953 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x28, x25 # perform first operation
ori x8, x19, -309 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x3, x27 # perform first operation
ori x10, x21, 1883 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x3, x21 # perform first operation
ori x5, x5, -928 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x27, x13 # perform first operation
ori x17, x25, 1661 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x6, x10, x16 # perform first operation
ori x16, x17, 529 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x14, x10 # perform first operation
ori x8, x13, -250 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x17, x7, x27 # perform first operation
ori x17, x13, -1307 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x28, x19, x17 # perform first operation
ori x28, x18, -101 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x15, x29 # perform first operation
ori x15, x14, -1091 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x29, x19 # perform first operation
ori x19, x28, -1087 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x26, x25, x14 # perform first operation
ori x22, x30, 1909 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-lh.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x27, 0xe0049a1610ea2baf # initialize rs2
la x1, scratch # base address 
addi x1, x1, 253 # sub immediate from rs1 to counter offset
sd x27, -253 (x1) # store value to put something in memory
lh x26, -253(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x18, 0x438615ea7007acf0 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1817 # sub immediate from rs1 to counter offset
sd x18, 1817 (x2) # store value to put something in memory
lh x30, 1817(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x29, 0xc815bd0485e5f2ee # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1405 # sub immediate from rs1 to counter offset
sd x29, 1405 (x3) # store value to put something in memory
lh x20, 1405(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x8, 0x655b9fe286988642 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1665 # sub immediate from rs1 to counter offset
sd x8, 1665 (x4) # store value to put something in memory
lh x27, 1665(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x27, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0x78c71e93f6f70737 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1471 # sub immediate from rs1 to counter offset
sd x3, 1471 (x5) # store value to put something in memory
lh x8, 1471(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x8, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x11, 0xbb8a638a9dbca35f # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1919 # sub immediate from rs1 to counter offset
sd x11, -1919 (x6) # store value to put something in memory
lh x4, -1919(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x4, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0x5607ff3c4f4d5cb3 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1208 # sub immediate from rs1 to counter offset
sd x19, 1208 (x7) # store value to put something in memory
lh x15, 1208(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x9, 0xd8f3a430a3e495be # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1789 # sub immediate from rs1 to counter offset
sd x9, -1789 (x8) # store value to put something in memory
lh x19, -1789(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x21, 0x8dc3849b8afe98cd # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1755 # sub immediate from rs1 to counter offset
sd x21, -1755 (x9) # store value to put something in memory
lh x24, -1755(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x24, 0x4d8ca38dabab8fd3 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1548 # sub immediate from rs1 to counter offset
sd x24, 1548 (x10) # store value to put something in memory
lh x2, 1548(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x25, 0x5bf064f50f7e3769 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 835 # sub immediate from rs1 to counter offset
sd x25, -835 (x11) # store value to put something in memory
lh x6, -835(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x6, 0xd8c03a26ad9b41e8 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1843 # sub immediate from rs1 to counter offset
sd x6, 1843 (x12) # store value to put something in memory
lh x3, 1843(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x17, 0xf6649a9ef9ed5e85 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -432 # sub immediate from rs1 to counter offset
sd x17, 432 (x13) # store value to put something in memory
lh x11, 432(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x15, 0xfcee463fe556bd70 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1269 # sub immediate from rs1 to counter offset
sd x15, 1269 (x14) # store value to put something in memory
lh x23, 1269(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x26, 0xae942d8c056fe421 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -546 # sub immediate from rs1 to counter offset
sd x26, 546 (x15) # store value to put something in memory
lh x29, 546(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x21, 0xdf853ca52b9546a9 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -987 # sub immediate from rs1 to counter offset
sd x21, 987 (x16) # store value to put something in memory
lh x24, 987(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x6, 0x6de9a2618b985743 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1532 # sub immediate from rs1 to counter offset
sd x6, -1532 (x17) # store value to put something in memory
lh x24, -1532(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x23, 0x93140a4a8711a1ea # initialize rs2
la x18, scratch # base address 
addi x18, x18, -899 # sub immediate from rs1 to counter offset
sd x23, 899 (x18) # store value to put something in memory
lh x29, 899(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x29, 0xbde0f9e9b9819771 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 53 # sub immediate from rs1 to counter offset
sd x29, -53 (x19) # store value to put something in memory
lh x9, -53(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x22, 0x7c18951bf3927640 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1017 # sub immediate from rs1 to counter offset
sd x22, 1017 (x20) # store value to put something in memory
lh x1, 1017(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x23, 0x5660245fbb31af58 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 423 # sub immediate from rs1 to counter offset
sd x23, -423 (x21) # store value to put something in memory
lh x28, -423(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x9, 0x10e9460e462284dd # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1369 # sub immediate from rs1 to counter offset
sd x9, 1369 (x22) # store value to put something in memory
lh x26, 1369(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x16, 0x2875fe69ab7f8cd3 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 737 # sub immediate from rs1 to counter offset
sd x16, -737 (x23) # store value to put something in memory
lh x19, -737(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x20, 0xc836d6ebb7f979b8 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1434 # sub immediate from rs1 to counter offset
sd x20, -1434 (x24) # store value to put something in memory
lh x10, -1434(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x29, 0xffe21a6f4f937545 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 514 # sub immediate from rs1 to counter offset
sd x29, -514 (x25) # store value to put something in memory
lh x14, -514(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x21, 0xf0778f6e15e29ddd # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1683 # sub immediate from rs1 to counter offset
sd x21, 1683 (x26) # store value to put something in memory
lh x5, 1683(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x5, 0x468f42dc4e881adc # initialize rs2
la x27, scratch # base address 
addi x27, x27, 246 # sub immediate from rs1 to counter offset
sd x5, -246 (x27) # store value to put something in memory
lh x15, -246(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x7, 0x0882d1fa98d25d2e # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1254 # sub immediate from rs1 to counter offset
sd x7, 1254 (x28) # store value to put something in memory
lh x18, 1254(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x6, 0x2bc5ee9cdfb20a74 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -379 # sub immediate from rs1 to counter offset
sd x6, 379 (x29) # store value to put something in memory
lh x18, 379(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x12, 0xd4f7f6db6b48be3e # initialize rs2
la x30, scratch # base address 
addi x30, x30, 772 # sub immediate from rs1 to counter offset
sd x12, -772 (x30) # store value to put something in memory
lh x9, -772(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x14, 0x4627a220068beb7f # initialize rs2
la x31, scratch # base address 
addi x31, x31, -770 # sub immediate from rs1 to counter offset
sd x14, 770 (x31) # store value to put something in memory
lh x27, 770(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 240)

# Testcase cp_rd (Test destination rd = x0)
li x21, 0xac51d96e47bd50b1 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1189 # sub immediate from rs1 to counter offset
sd x21, 1189 (x16) # store value to put something in memory
lh x0, 1189(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x8, 0xf2b25bfd1339a7f7 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -91 # sub immediate from rs1 to counter offset
sd x8, 91 (x16) # store value to put something in memory
lh x1, 91(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x8, 0xa024da4de4db9a09 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -542 # sub immediate from rs1 to counter offset
sd x8, 542 (x2) # store value to put something in memory
lh x2, 542(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x19, 0xa7e0198eb4c940fd # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1091 # sub immediate from rs1 to counter offset
sd x19, 1091 (x11) # store value to put something in memory
lh x3, 1091(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x26, 0xff9116d0e8557e62 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1147 # sub immediate from rs1 to counter offset
sd x26, 1147 (x14) # store value to put something in memory
lh x4, 1147(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0x02b4bec3aceba5ed # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1167 # sub immediate from rs1 to counter offset
sd x3, -1167 (x2) # store value to put something in memory
lh x5, -1167(x2) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0x3580f723992bb4d6 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1735 # sub immediate from rs1 to counter offset
sd x22, 1735 (x13) # store value to put something in memory
lh x6, 1735(x13) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0x9149ca8366f87d59 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1701 # sub immediate from rs1 to counter offset
sd x16, 1701 (x22) # store value to put something in memory
lh x7, 1701(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0x3f74252dc756330b # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1666 # sub immediate from rs1 to counter offset
sd x27, -1666 (x26) # store value to put something in memory
lh x8, -1666(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0x8187663141cedf3a # initialize rs2
la x26, scratch # base address 
addi x26, x26, -858 # sub immediate from rs1 to counter offset
sd x31, 858 (x26) # store value to put something in memory
lh x9, 858(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x20, 0xf63d0e5358813a4e # initialize rs2
la x30, scratch # base address 
addi x30, x30, -553 # sub immediate from rs1 to counter offset
sd x20, 553 (x30) # store value to put something in memory
lh x10, 553(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x21, 0x122d49edd84df1ec # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1065 # sub immediate from rs1 to counter offset
sd x21, -1065 (x10) # store value to put something in memory
lh x11, -1065(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x7, 0x9878a398c69b2dae # initialize rs2
la x10, scratch # base address 
addi x10, x10, -119 # sub immediate from rs1 to counter offset
sd x7, 119 (x10) # store value to put something in memory
lh x12, 119(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x13, 0xe860fc45ba2c7741 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 264 # sub immediate from rs1 to counter offset
sd x13, -264 (x17) # store value to put something in memory
lh x13, -264(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x16, 0xf3ca7680b7df06ef # initialize rs2
la x18, scratch # base address 
addi x18, x18, -534 # sub immediate from rs1 to counter offset
sd x16, 534 (x18) # store value to put something in memory
lh x14, 534(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x16, 0x49b67e1d5dfe3f83 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 865 # sub immediate from rs1 to counter offset
sd x16, -865 (x31) # store value to put something in memory
lh x15, -865(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x6, 0xaaa60b3e31ec94e3 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 540 # sub immediate from rs1 to counter offset
sd x6, -540 (x17) # store value to put something in memory
lh x16, -540(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x1, 0x25277d3d371382a3 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -65 # sub immediate from rs1 to counter offset
sd x1, 65 (x15) # store value to put something in memory
lh x17, 65(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x8, 0x346e47398481deca # initialize rs2
la x11, scratch # base address 
addi x11, x11, -157 # sub immediate from rs1 to counter offset
sd x8, 157 (x11) # store value to put something in memory
lh x18, 157(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x18, 0xd57d6f8ce70ca8b4 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1204 # sub immediate from rs1 to counter offset
sd x18, 1204 (x6) # store value to put something in memory
lh x19, 1204(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x20, 0x37885a1877712092 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 148 # sub immediate from rs1 to counter offset
sd x20, -148 (x5) # store value to put something in memory
lh x20, -148(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x10, 0xc7245428074cb676 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 396 # sub immediate from rs1 to counter offset
sd x10, -396 (x18) # store value to put something in memory
lh x21, -396(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x22, 0xcefed29bb6466343 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1086 # sub immediate from rs1 to counter offset
sd x22, -1086 (x21) # store value to put something in memory
lh x22, -1086(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x11, 0xed4730e608a40dac # initialize rs2
la x5, scratch # base address 
addi x5, x5, 53 # sub immediate from rs1 to counter offset
sd x11, -53 (x5) # store value to put something in memory
lh x23, -53(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x5, 0x0fbc1e0bfd3940ba # initialize rs2
la x2, scratch # base address 
addi x2, x2, -696 # sub immediate from rs1 to counter offset
sd x5, 696 (x2) # store value to put something in memory
lh x24, 696(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x10, 0x286ecd7822459261 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1321 # sub immediate from rs1 to counter offset
sd x10, 1321 (x18) # store value to put something in memory
lh x25, 1321(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x17, 0xbb444aa2c8134e84 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 739 # sub immediate from rs1 to counter offset
sd x17, -739 (x31) # store value to put something in memory
lh x26, -739(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x12, 0xec89fdbecce07819 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1936 # sub immediate from rs1 to counter offset
sd x12, -1936 (x25) # store value to put something in memory
lh x27, -1936(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x5, 0x53117f7e1c888e31 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1881 # sub immediate from rs1 to counter offset
sd x5, -1881 (x10) # store value to put something in memory
lh x28, -1881(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x12, 0x484bdb46d561215a # initialize rs2
la x9, scratch # base address 
addi x9, x9, -974 # sub immediate from rs1 to counter offset
sd x12, 974 (x9) # store value to put something in memory
lh x29, 974(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x16, 0xb439245d73dae43e # initialize rs2
la x19, scratch # base address 
addi x19, x19, -85 # sub immediate from rs1 to counter offset
sd x16, 85 (x19) # store value to put something in memory
lh x30, 85(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x9, 0xf5d32586bbeb824a # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1366 # sub immediate from rs1 to counter offset
sd x9, 1366 (x3) # store value to put something in memory
lh x31, 1366(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x27, 0x1eba9bf3b546657f # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1506 # sub immediate from rs1 to counter offset
sd x27, -1506 (x1) # store value to put something in memory
lh x1, -1506(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x28, 0x3b0b88ff21dfba5f # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1963 # sub immediate from rs1 to counter offset
sd x28, -1963 (x2) # store value to put something in memory
lh x2, -1963(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x11, 0xb4e5046e4ac9a077 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -459 # sub immediate from rs1 to counter offset
sd x11, 459 (x3) # store value to put something in memory
lh x3, 459(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x19, 0xafff64dd6315d813 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -833 # sub immediate from rs1 to counter offset
sd x19, 833 (x4) # store value to put something in memory
lh x4, 833(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x26, 0xdb62fab9fce2c054 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 200 # sub immediate from rs1 to counter offset
sd x26, -200 (x5) # store value to put something in memory
lh x5, -200(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x30, 0x00240fa4aecac380 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 751 # sub immediate from rs1 to counter offset
sd x30, -751 (x6) # store value to put something in memory
lh x6, -751(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0x7c6df4e64eef5e80 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 58 # sub immediate from rs1 to counter offset
sd x27, -58 (x7) # store value to put something in memory
lh x7, -58(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x13, 0x843174fca14a8968 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 208 # sub immediate from rs1 to counter offset
sd x13, -208 (x8) # store value to put something in memory
lh x8, -208(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x17, 0x4963a1c8ef537100 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -258 # sub immediate from rs1 to counter offset
sd x17, 258 (x9) # store value to put something in memory
lh x9, 258(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x26, 0x7c5b509accc28222 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1638 # sub immediate from rs1 to counter offset
sd x26, -1638 (x10) # store value to put something in memory
lh x10, -1638(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x8, 0xe65a4f1709bcdc8b # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1948 # sub immediate from rs1 to counter offset
sd x8, 1948 (x11) # store value to put something in memory
lh x11, 1948(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x1, 0x3e6cbc22d2beb64b # initialize rs2
la x12, scratch # base address 
addi x12, x12, -723 # sub immediate from rs1 to counter offset
sd x1, 723 (x12) # store value to put something in memory
lh x12, 723(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x25, 0x23c3082da2a9e314 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 97 # sub immediate from rs1 to counter offset
sd x25, -97 (x13) # store value to put something in memory
lh x13, -97(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x5cddc0ecead3e18a # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1846 # sub immediate from rs1 to counter offset
sd x14, 1846 (x14) # store value to put something in memory
lh x14, 1846(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x13, 0x0869a8941be2498e # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1552 # sub immediate from rs1 to counter offset
sd x13, 1552 (x15) # store value to put something in memory
lh x15, 1552(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x20, 0x822b195128dbd116 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1476 # sub immediate from rs1 to counter offset
sd x20, 1476 (x16) # store value to put something in memory
lh x16, 1476(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x3e0f1482eaae08a3 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1179 # sub immediate from rs1 to counter offset
sd x17, 1179 (x17) # store value to put something in memory
lh x17, 1179(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x7, 0x62a91c88c602e3a8 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1865 # sub immediate from rs1 to counter offset
sd x7, 1865 (x18) # store value to put something in memory
lh x18, 1865(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x20, 0x70189e589839ddd4 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -255 # sub immediate from rs1 to counter offset
sd x20, 255 (x19) # store value to put something in memory
lh x19, 255(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x16, 0xbed86cfa47ce0ba7 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -891 # sub immediate from rs1 to counter offset
sd x16, 891 (x20) # store value to put something in memory
lh x20, 891(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x22, 0x04103c3cfdb60e83 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1915 # sub immediate from rs1 to counter offset
sd x22, -1915 (x21) # store value to put something in memory
lh x21, -1915(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x31, 0x7776a7ca9dfdd40f # initialize rs2
la x22, scratch # base address 
addi x22, x22, -843 # sub immediate from rs1 to counter offset
sd x31, 843 (x22) # store value to put something in memory
lh x22, 843(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x25, 0x35d8aafb8c741df2 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 457 # sub immediate from rs1 to counter offset
sd x25, -457 (x23) # store value to put something in memory
lh x23, -457(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x6, 0x37347d9b9799c309 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1366 # sub immediate from rs1 to counter offset
sd x6, -1366 (x24) # store value to put something in memory
lh x24, -1366(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x24, 0xe922ad7a52a89683 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1680 # sub immediate from rs1 to counter offset
sd x24, 1680 (x25) # store value to put something in memory
lh x25, 1680(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x29, 0x6ab9141b5517cf75 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -873 # sub immediate from rs1 to counter offset
sd x29, 873 (x26) # store value to put something in memory
lh x26, 873(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x22, 0x98b435a158689bb5 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 406 # sub immediate from rs1 to counter offset
sd x22, -406 (x27) # store value to put something in memory
lh x27, -406(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x31, 0x4154f273b7270841 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 346 # sub immediate from rs1 to counter offset
sd x31, -346 (x28) # store value to put something in memory
lh x28, -346(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x31, 0x34e8d3d468e64632 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 445 # sub immediate from rs1 to counter offset
sd x31, -445 (x29) # store value to put something in memory
lh x29, -445(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x26, 0x31cbac4a6b725888 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1623 # sub immediate from rs1 to counter offset
sd x26, -1623 (x30) # store value to put something in memory
lh x30, -1623(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x24, 0xf76a1b86f45bfffa # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1325 # sub immediate from rs1 to counter offset
sd x24, -1325 (x31) # store value to put something in memory
lh x31, -1325(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x16, 0x3d3a643f204ea351 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 0 # sub immediate from rs1 to counter offset
sd x16, 0 (x9) # store value to put something in memory
lh x28, 0(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 752)

# Testcase cp_imm_corners
li x29, 0xe5eab35324581e54 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1 # sub immediate from rs1 to counter offset
sd x29, 1 (x1) # store value to put something in memory
lh x9, 1(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 760)

# Testcase cp_imm_corners
li x19, 0xe7fbf4a6f5bbcd16 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -2 # sub immediate from rs1 to counter offset
sd x19, 2 (x1) # store value to put something in memory
lh x6, 2(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 768)

# Testcase cp_imm_corners
li x27, 0x1613ed7e5a747705 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -3 # sub immediate from rs1 to counter offset
sd x27, 3 (x18) # store value to put something in memory
lh x10, 3(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 776)

# Testcase cp_imm_corners
li x19, 0x1a177443593588e5 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -4 # sub immediate from rs1 to counter offset
sd x19, 4 (x22) # store value to put something in memory
lh x24, 4(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 784)

# Testcase cp_imm_corners
li x8, 0xdfb7bdde3f1dd831 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -8 # sub immediate from rs1 to counter offset
sd x8, 8 (x23) # store value to put something in memory
lh x13, 8(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cp_imm_corners
li x17, 0x50872689342fce82 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -16 # sub immediate from rs1 to counter offset
sd x17, 16 (x15) # store value to put something in memory
lh x19, 16(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 800)

# Testcase cp_imm_corners
li x24, 0x2117565832d79ed4 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -32 # sub immediate from rs1 to counter offset
sd x24, 32 (x14) # store value to put something in memory
lh x26, 32(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 808)

# Testcase cp_imm_corners
li x5, 0xbafc0f198f18e87a # initialize rs2
la x1, scratch # base address 
addi x1, x1, -64 # sub immediate from rs1 to counter offset
sd x5, 64 (x1) # store value to put something in memory
lh x16, 64(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 816)

# Testcase cp_imm_corners
li x21, 0x5339250b60b379fa # initialize rs2
la x26, scratch # base address 
addi x26, x26, -128 # sub immediate from rs1 to counter offset
sd x21, 128 (x26) # store value to put something in memory
lh x11, 128(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 824)

# Testcase cp_imm_corners
li x11, 0x3b1256f67b4d5ed1 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -256 # sub immediate from rs1 to counter offset
sd x11, 256 (x15) # store value to put something in memory
lh x7, 256(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 832)

# Testcase cp_imm_corners
li x26, 0x6dc9b08e1c1feb30 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -512 # sub immediate from rs1 to counter offset
sd x26, 512 (x16) # store value to put something in memory
lh x30, 512(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 840)

# Testcase cp_imm_corners
li x26, 0xb407d2b7e4449e9e # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1023 # sub immediate from rs1 to counter offset
sd x26, 1023 (x31) # store value to put something in memory
lh x5, 1023(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 848)

# Testcase cp_imm_corners
li x15, 0x371549e831d0716c # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1024 # sub immediate from rs1 to counter offset
sd x15, 1024 (x1) # store value to put something in memory
lh x19, 1024(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 856)

# Testcase cp_imm_corners
li x27, 0x67a8c9e7f306c5bb # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1795 # sub immediate from rs1 to counter offset
sd x27, 1795 (x25) # store value to put something in memory
lh x20, 1795(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 864)

# Testcase cp_imm_corners
li x8, 0xb23e3cebec555da6 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -2047 # sub immediate from rs1 to counter offset
sd x8, 2047 (x27) # store value to put something in memory
lh x6, 2047(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 872)

# Testcase cp_imm_corners
li x20, 0x2942a0bbaa2c60ef # initialize rs2
la x15, scratch # base address 
addi x15, x15, 2047 # increment rs1 by 2047 
addi x15, x15, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x20, -2048 (x15) # store value to put something in memory
lh x24, -2048(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 880)

# Testcase cp_imm_corners
li x18, 0xe97cfbdc202f9fab # initialize rs2
la x30, scratch # base address 
addi x30, x30, 2047 # sub immediate from rs1 to counter offset
sd x18, -2047 (x30) # store value to put something in memory
lh x1, -2047(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 888)

# Testcase cp_imm_corners
li x27, 0xe339efdd8f603dcf # initialize rs2
la x14, scratch # base address 
addi x14, x14, 2 # sub immediate from rs1 to counter offset
sd x27, -2 (x14) # store value to put something in memory
lh x9, -2(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 896)

# Testcase cp_imm_corners
li x13, 0x0aee43f5a5489efc # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1 # sub immediate from rs1 to counter offset
sd x13, -1 (x27) # store value to put something in memory
lh x16, -1(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x30, scratch
addi x30, x30, -728
add x3, x14, x5 # perform first operation
lh x17, 728(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x19, scratch
addi x19, x19, 1986
add x24, x5, x29 # perform first operation
lh x14, -1986(x19) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x16, scratch
addi x16, x16, -195
add x10, x20, x27 # perform first operation
lh x6, 195(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x1, scratch
addi x1, x1, -954
add x1, x1, x0 # perform first operation
lh x26, 954(x1) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x23, scratch
addi x23, x23, -1434
add x23, x23, x0 # perform first operation
lh x28, 1434(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x28, scratch
addi x28, x28, -975
add x28, x28, x0 # perform first operation
lh x2, 975(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x1, scratch
addi x1, x1, 1775
add x2, x25, x8 # perform first operation
lh x2, -1775(x1) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x12, scratch
addi x12, x12, -810
add x2, x20, x17 # perform first operation
lh x2, 810(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x29, scratch
addi x29, x29, 390
add x22, x10, x30 # perform first operation
lh x22, -390(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x11, scratch
addi x11, x11, -1609
add x19, x27, x12 # perform first operation
lh x27, 1609(x11) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x6, scratch
addi x6, x6, -1499
add x7, x12, x30 # perform first operation
lh x30, 1499(x6) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x20, scratch
addi x20, x20, -353
add x25, x27, x13 # perform first operation
lh x26, 353(x20) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-bltu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xfe7e88f707cc1fda # initialize rs1
li x22, 0xb8443149a0ffe85b # initialize rs2
bltu x0, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xb8443149a0ffe85b # initialize rs1
li x22, 0xb8443149a0ffe85b # initialize rs2
bltu x0, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xfd690ebc1c54dce0 # initialize rs1
li x17, 0x7d0bb086d3f2d078 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7d0bb086d3f2d078 # initialize rs1
li x17, 0x7d0bb086d3f2d078 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xdd417afe61d48e13 # initialize rs1
li x25, 0x59331c5877fa3ccb # initialize rs2
bltu x2, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x59331c5877fa3ccb # initialize rs1
li x25, 0x59331c5877fa3ccb # initialize rs2
bltu x2, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xa073c1bee61d7e7b # initialize rs1
li x21, 0xb78ab2d06f19534a # initialize rs2
bltu x3, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xb78ab2d06f19534a # initialize rs1
li x21, 0xb78ab2d06f19534a # initialize rs2
bltu x3, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x30cde239c2ee58f4 # initialize rs1
li x6, 0x87aa60d0b65c84b7 # initialize rs2
bltu x4, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x87aa60d0b65c84b7 # initialize rs1
li x6, 0x87aa60d0b65c84b7 # initialize rs2
bltu x4, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9504670520a614a5 # initialize rs1
li x17, 0x5eb8dd4a3ccb076b # initialize rs2
bltu x5, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5eb8dd4a3ccb076b # initialize rs1
li x17, 0x5eb8dd4a3ccb076b # initialize rs2
bltu x5, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x1f5cdba6a6e304bb # initialize rs1
li x21, 0xc01e2639a69f67cd # initialize rs2
bltu x6, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xc01e2639a69f67cd # initialize rs1
li x21, 0xc01e2639a69f67cd # initialize rs2
bltu x6, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x2091cec83e071fe4 # initialize rs1
li x25, 0x460ac8f9832ead0b # initialize rs2
bltu x7, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x460ac8f9832ead0b # initialize rs1
li x25, 0x460ac8f9832ead0b # initialize rs2
bltu x7, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x7e18d2fb894639b2 # initialize rs1
li x15, 0xf631508cbcf0e168 # initialize rs2
bltu x8, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xf631508cbcf0e168 # initialize rs1
li x15, 0xf631508cbcf0e168 # initialize rs2
bltu x8, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xcbad455f5744c6c6 # initialize rs1
li x31, 0x673f4b080ba66e4c # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x673f4b080ba66e4c # initialize rs1
li x31, 0x673f4b080ba66e4c # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xef4ccc084aff5e7e # initialize rs1
li x25, 0xc976a675f7401f97 # initialize rs2
bltu x10, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xc976a675f7401f97 # initialize rs1
li x25, 0xc976a675f7401f97 # initialize rs2
bltu x10, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xcad151e0a3e0970e # initialize rs1
li x29, 0xee587cfb8f55ed15 # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xee587cfb8f55ed15 # initialize rs1
li x29, 0xee587cfb8f55ed15 # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xb881314a1bf69872 # initialize rs1
li x29, 0xa2b83ef3bf3553fc # initialize rs2
bltu x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xa2b83ef3bf3553fc # initialize rs1
li x29, 0xa2b83ef3bf3553fc # initialize rs2
bltu x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x25db354389026601 # initialize rs1
li x31, 0x59d399eadd61bf52 # initialize rs2
bltu x13, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x59d399eadd61bf52 # initialize rs1
li x31, 0x59d399eadd61bf52 # initialize rs2
bltu x13, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xeadf6029b1885166 # initialize rs1
li x25, 0xf94710e369a32c60 # initialize rs2
bltu x14, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xf94710e369a32c60 # initialize rs1
li x25, 0xf94710e369a32c60 # initialize rs2
bltu x14, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xe179a98adb08d641 # initialize rs1
li x9, 0xe06b9e275341402e # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xe06b9e275341402e # initialize rs1
li x9, 0xe06b9e275341402e # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xda5043d59c3422e5 # initialize rs1
li x15, 0xea3e25ef243d8ee2 # initialize rs2
bltu x16, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xea3e25ef243d8ee2 # initialize rs1
li x15, 0xea3e25ef243d8ee2 # initialize rs2
bltu x16, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xdb5625447274c4ba # initialize rs1
li x1, 0x0ac567e8d1d2aa48 # initialize rs2
bltu x17, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0ac567e8d1d2aa48 # initialize rs1
li x1, 0x0ac567e8d1d2aa48 # initialize rs2
bltu x17, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xc2f4fda6c4bd8f9b # initialize rs1
li x26, 0x00ca0393c611196c # initialize rs2
bltu x18, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00ca0393c611196c # initialize rs1
li x26, 0x00ca0393c611196c # initialize rs2
bltu x18, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe6cad2000faafefe # initialize rs1
li x18, 0x63ebc11088278b4b # initialize rs2
bltu x19, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x63ebc11088278b4b # initialize rs1
li x18, 0x63ebc11088278b4b # initialize rs2
bltu x19, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xa1c7a11f177f6559 # initialize rs1
li x2, 0xff4cb0638f5b39bb # initialize rs2
bltu x20, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xff4cb0638f5b39bb # initialize rs1
li x2, 0xff4cb0638f5b39bb # initialize rs2
bltu x20, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xeaf7bcf630b165d5 # initialize rs1
li x15, 0x3f1f5d494fbdafe2 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x3f1f5d494fbdafe2 # initialize rs1
li x15, 0x3f1f5d494fbdafe2 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xa4cc018fc44e772b # initialize rs1
li x7, 0x7e279ff623d127dc # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7e279ff623d127dc # initialize rs1
li x7, 0x7e279ff623d127dc # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x988d8f83c9f4b612 # initialize rs1
li x5, 0xf98b7042bb311ab8 # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xf98b7042bb311ab8 # initialize rs1
li x5, 0xf98b7042bb311ab8 # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xa2c9f2fdcf6ee9d2 # initialize rs1
li x12, 0x572cc9640d4a1a3d # initialize rs2
bltu x24, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x572cc9640d4a1a3d # initialize rs1
li x12, 0x572cc9640d4a1a3d # initialize rs2
bltu x24, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x907958ea23f0bb6d # initialize rs1
li x3, 0x67eed71ba42c3977 # initialize rs2
bltu x25, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x67eed71ba42c3977 # initialize rs1
li x3, 0x67eed71ba42c3977 # initialize rs2
bltu x25, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x62f6ccba6254e185 # initialize rs1
li x10, 0x27b98f31f38cbdf1 # initialize rs2
bltu x26, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x27b98f31f38cbdf1 # initialize rs1
li x10, 0x27b98f31f38cbdf1 # initialize rs2
bltu x26, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x75f72da4a3345b0b # initialize rs1
li x16, 0xa36574135d0ad835 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xa36574135d0ad835 # initialize rs1
li x16, 0xa36574135d0ad835 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x5c0085d182084098 # initialize rs1
li x27, 0xd3a6cceeda0c8d27 # initialize rs2
bltu x28, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xd3a6cceeda0c8d27 # initialize rs1
li x27, 0xd3a6cceeda0c8d27 # initialize rs2
bltu x28, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x7ed370bb665aaa8f # initialize rs1
li x16, 0x5e256adab77d7b17 # initialize rs2
bltu x29, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5e256adab77d7b17 # initialize rs1
li x16, 0x5e256adab77d7b17 # initialize rs2
bltu x29, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe348c394fb6c9153 # initialize rs1
li x11, 0xc933374a24c3e477 # initialize rs2
bltu x30, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xc933374a24c3e477 # initialize rs1
li x11, 0xc933374a24c3e477 # initialize rs2
bltu x30, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x3640b7ea5f651f74 # initialize rs1
li x11, 0x4c933cb6f8d0a086 # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x4c933cb6f8d0a086 # initialize rs1
li x11, 0x4c933cb6f8d0a086 # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x19, 0xc98f059c68ee9f87 # initialize rs1
li x0, 0x11504f8702007349 # initialize rs2
bltu x19, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x11504f8702007349 # initialize rs1
li x0, 0x11504f8702007349 # initialize rs2
bltu x19, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x15, 0xad1c8002b0d19c42 # initialize rs1
li x1, 0x67f420b2da02f523 # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x67f420b2da02f523 # initialize rs1
li x1, 0x67f420b2da02f523 # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x19, 0x6c26c7ebf3ef8e0f # initialize rs1
li x2, 0xea3642d94a66be60 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xea3642d94a66be60 # initialize rs1
li x2, 0xea3642d94a66be60 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x13, 0xcf854fdc8ffcae68 # initialize rs1
li x3, 0x8fe6d1eb44cf063e # initialize rs2
bltu x13, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8fe6d1eb44cf063e # initialize rs1
li x3, 0x8fe6d1eb44cf063e # initialize rs2
bltu x13, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0x3efdbea69b4d6a15 # initialize rs1
li x4, 0x8f5ad757c5a60bf0 # initialize rs2
bltu x5, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x8f5ad757c5a60bf0 # initialize rs1
li x4, 0x8f5ad757c5a60bf0 # initialize rs2
bltu x5, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
li x15, 0x0e6168705e1dfd12 # initialize rs1
li x5, 0xe5de94e60f92d045 # initialize rs2
bltu x15, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xe5de94e60f92d045 # initialize rs1
li x5, 0xe5de94e60f92d045 # initialize rs2
bltu x15, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0x464db67c0871cfdb # initialize rs1
li x6, 0xaeb318fc6418dc09 # initialize rs2
bltu x5, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xaeb318fc6418dc09 # initialize rs1
li x6, 0xaeb318fc6418dc09 # initialize rs2
bltu x5, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0xed4482e5036ad8cb # initialize rs1
li x7, 0xa84b6c8201a48cf9 # initialize rs2
bltu x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xa84b6c8201a48cf9 # initialize rs1
li x7, 0xa84b6c8201a48cf9 # initialize rs2
bltu x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x18, 0x1a69cf962f9aab4f # initialize rs1
li x8, 0x209d88f88ff7edd6 # initialize rs2
bltu x18, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x209d88f88ff7edd6 # initialize rs1
li x8, 0x209d88f88ff7edd6 # initialize rs2
bltu x18, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x2, 0x5b3c1b9d79b1176e # initialize rs1
li x9, 0xb8ff2c22a81b893c # initialize rs2
bltu x2, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xb8ff2c22a81b893c # initialize rs1
li x9, 0xb8ff2c22a81b893c # initialize rs2
bltu x2, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x1, 0x7f759d3fbc0df101 # initialize rs1
li x10, 0x4f4434886aac5f51 # initialize rs2
bltu x1, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x4f4434886aac5f51 # initialize rs1
li x10, 0x4f4434886aac5f51 # initialize rs2
bltu x1, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x31, 0x301bf722bff91f04 # initialize rs1
li x11, 0xf1fa654941b6959f # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xf1fa654941b6959f # initialize rs1
li x11, 0xf1fa654941b6959f # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x2, 0x241a51c2f8d02035 # initialize rs1
li x12, 0x93008aeefa8df004 # initialize rs2
bltu x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x93008aeefa8df004 # initialize rs1
li x12, 0x93008aeefa8df004 # initialize rs2
bltu x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x31, 0x86f961eaf0cbbfa8 # initialize rs1
li x13, 0x0b31b9329dd2d6be # initialize rs2
bltu x31, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0b31b9329dd2d6be # initialize rs1
li x13, 0x0b31b9329dd2d6be # initialize rs2
bltu x31, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x7, 0xe737476fe6484a8c # initialize rs1
li x14, 0x91c5e4a5573e178d # initialize rs2
bltu x7, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x91c5e4a5573e178d # initialize rs1
li x14, 0x91c5e4a5573e178d # initialize rs2
bltu x7, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x20, 0x71652c91965b8897 # initialize rs1
li x15, 0x06d2403b160c7c88 # initialize rs2
bltu x20, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x06d2403b160c7c88 # initialize rs1
li x15, 0x06d2403b160c7c88 # initialize rs2
bltu x20, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x14, 0x3a72b58f6199ac3f # initialize rs1
li x16, 0x48727d86215849ae # initialize rs2
bltu x14, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x48727d86215849ae # initialize rs1
li x16, 0x48727d86215849ae # initialize rs2
bltu x14, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x18, 0x008ee08e78544525 # initialize rs1
li x17, 0x5a61c3c468324317 # initialize rs2
bltu x18, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5a61c3c468324317 # initialize rs1
li x17, 0x5a61c3c468324317 # initialize rs2
bltu x18, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x26, 0xfdb8ba9bc0b375b7 # initialize rs1
li x18, 0xdef6fe6190a2a928 # initialize rs2
bltu x26, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xdef6fe6190a2a928 # initialize rs1
li x18, 0xdef6fe6190a2a928 # initialize rs2
bltu x26, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x9, 0x01a1c078e5db7535 # initialize rs1
li x19, 0xd1c2117d913350f5 # initialize rs2
bltu x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xd1c2117d913350f5 # initialize rs1
li x19, 0xd1c2117d913350f5 # initialize rs2
bltu x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x25, 0xe1a92813b247d708 # initialize rs1
li x20, 0xa447b224ef752572 # initialize rs2
bltu x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xa447b224ef752572 # initialize rs1
li x20, 0xa447b224ef752572 # initialize rs2
bltu x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x30, 0xbb56c3aec07cab89 # initialize rs1
li x21, 0xa89e8ee8b3ddd2e2 # initialize rs2
bltu x30, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xa89e8ee8b3ddd2e2 # initialize rs1
li x21, 0xa89e8ee8b3ddd2e2 # initialize rs2
bltu x30, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x26, 0xdec7904a40ec6073 # initialize rs1
li x22, 0xd7169a8924959f33 # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xd7169a8924959f33 # initialize rs1
li x22, 0xd7169a8924959f33 # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x16, 0xfa26d95323f09353 # initialize rs1
li x23, 0x82a0ec7ffe9158e0 # initialize rs2
bltu x16, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x82a0ec7ffe9158e0 # initialize rs1
li x23, 0x82a0ec7ffe9158e0 # initialize rs2
bltu x16, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x31, 0x2f02acb4a8d4bcdf # initialize rs1
li x24, 0xd4b06f2bb8ded949 # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xd4b06f2bb8ded949 # initialize rs1
li x24, 0xd4b06f2bb8ded949 # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x16, 0xd71ebe464b2f3ac8 # initialize rs1
li x25, 0xd753e6b98d97a1a2 # initialize rs2
bltu x16, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xd753e6b98d97a1a2 # initialize rs1
li x25, 0xd753e6b98d97a1a2 # initialize rs2
bltu x16, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x25, 0xfe1fc7d7859deeae # initialize rs1
li x26, 0xa1c79cc30bc29a3a # initialize rs2
bltu x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xa1c79cc30bc29a3a # initialize rs1
li x26, 0xa1c79cc30bc29a3a # initialize rs2
bltu x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x19, 0xa5cbf4644cc7cbf9 # initialize rs1
li x27, 0x84cd0e615982fc34 # initialize rs2
bltu x19, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x84cd0e615982fc34 # initialize rs1
li x27, 0x84cd0e615982fc34 # initialize rs2
bltu x19, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x12, 0x7d8b348871ac2509 # initialize rs1
li x28, 0x8f50e45a733ac563 # initialize rs2
bltu x12, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8f50e45a733ac563 # initialize rs1
li x28, 0x8f50e45a733ac563 # initialize rs2
bltu x12, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x1, 0xf28c31ecc236fe3c # initialize rs1
li x29, 0x08e40d1c6a1ba700 # initialize rs2
bltu x1, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x08e40d1c6a1ba700 # initialize rs1
li x29, 0x08e40d1c6a1ba700 # initialize rs2
bltu x1, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x7, 0x62a6431ee4053025 # initialize rs1
li x30, 0x87b3aac74f93cc90 # initialize rs2
bltu x7, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x87b3aac74f93cc90 # initialize rs1
li x30, 0x87b3aac74f93cc90 # initialize rs2
bltu x7, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x7, 0xb81ca80c906c64b4 # initialize rs1
li x31, 0x95a0dfa6687cca40 # initialize rs2
bltu x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x95a0dfa6687cca40 # initialize rs1
li x31, 0x95a0dfa6687cca40 # initialize rs2
bltu x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x0000000000000000 # initialize rs1
li x31, 0x0b243844f25b3cf9 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0b243844f25b3cf9 # initialize rs1
li x31, 0x0b243844f25b3cf9 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x6, 0x0000000000000001 # initialize rs1
li x28, 0x0ff09b9cbc4f3694 # initialize rs2
bltu x6, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0ff09b9cbc4f3694 # initialize rs1
li x28, 0x0ff09b9cbc4f3694 # initialize rs2
bltu x6, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x25, 0x0000000000000002 # initialize rs1
li x7, 0x1d890aba03d5f220 # initialize rs2
bltu x25, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x1d890aba03d5f220 # initialize rs1
li x7, 0x1d890aba03d5f220 # initialize rs2
bltu x25, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x29, 0x8000000000000000 # initialize rs1
li x20, 0x90833184bd412b70 # initialize rs2
bltu x29, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x90833184bd412b70 # initialize rs1
li x20, 0x90833184bd412b70 # initialize rs2
bltu x29, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x24, 0x8000000000000001 # initialize rs1
li x14, 0xbb0c09a842f8cef5 # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xbb0c09a842f8cef5 # initialize rs1
li x14, 0xbb0c09a842f8cef5 # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x27, 0x7fffffffffffffff # initialize rs1
li x25, 0x165e2ef3736133a0 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x165e2ef3736133a0 # initialize rs1
li x25, 0x165e2ef3736133a0 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x24, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7a39de3bf8e8fd7e # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7a39de3bf8e8fd7e # initialize rs1
li x14, 0x7a39de3bf8e8fd7e # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x26, 0xffffffffffffffff # initialize rs1
li x12, 0x522b09169c4e32f8 # initialize rs2
bltu x26, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x522b09169c4e32f8 # initialize rs1
li x12, 0x522b09169c4e32f8 # initialize rs2
bltu x26, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x17, 0xfffffffffffffffe # initialize rs1
li x29, 0x9e8b529b53d713d2 # initialize rs2
bltu x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x9e8b529b53d713d2 # initialize rs1
li x29, 0x9e8b529b53d713d2 # initialize rs2
bltu x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x65e2596f39738904 # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x65e2596f39738904 # initialize rs1
li x12, 0x65e2596f39738904 # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xe7297c648fbe3596 # initialize rs2
bltu x26, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe7297c648fbe3596 # initialize rs1
li x23, 0xe7297c648fbe3596 # initialize rs2
bltu x26, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x7, 0x5555555555555555 # initialize rs1
li x13, 0x2590fa7555b5348e # initialize rs2
bltu x7, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x2590fa7555b5348e # initialize rs1
li x13, 0x2590fa7555b5348e # initialize rs2
bltu x7, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x28, 0x00000000ffffffff # initialize rs1
li x25, 0x2f53be8c6591cab9 # initialize rs2
bltu x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x2f53be8c6591cab9 # initialize rs1
li x25, 0x2f53be8c6591cab9 # initialize rs2
bltu x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x29, 0x00000000fffffffe # initialize rs1
li x1, 0x2a01ff28a945bdfc # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x2a01ff28a945bdfc # initialize rs1
li x1, 0x2a01ff28a945bdfc # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x19, 0x0000000100000000 # initialize rs1
li x2, 0xa4590da9e8029223 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xa4590da9e8029223 # initialize rs1
li x2, 0xa4590da9e8029223 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x23, 0x0000000100000001 # initialize rs1
li x5, 0x2b447b9b9b96b4ee # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x2b447b9b9b96b4ee # initialize rs1
li x5, 0x2b447b9b9b96b4ee # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x14, 0x669072ab3e976f5f # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
bltu x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
bltu x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x14, 0xa33f228eff6e2272 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x14, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x14, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x16, 0x9b4f6f456edfe2ea # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
bltu x16, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0000000000000002 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
bltu x16, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x24, 0x2b50317384f30c6f # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bltu x24, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x8000000000000000 # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
bltu x24, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x26, 0xb77e159e81b04461 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x8000000000000001 # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x29, 0x3a174e68beffb7db # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
bltu x29, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7fffffffffffffff # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
bltu x29, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x18, 0x731a083a5eb07022 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bltu x18, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffffffffffe # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bltu x18, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x31, 0x659c11a634e04927 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x8, 0x7eb6937e9a703b2c # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x18, 0x9cfff97b63d52844 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x16, 0xc03c64798dc7694e # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x16, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x16, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x24, 0xa153459c6a044531 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
bltu x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5555555555555555 # initialize rs1
li x2, 0x5555555555555555 # initialize rs2
bltu x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x17, 0x246fbb13e747934d # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x28, 0xd0581f3b467961c5 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x3, 0x4bd55bfc03fef833 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bltu x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000000 # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
bltu x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x3, 0x472064d1c6754e87 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bltu x3, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000001 # initialize rs1
li x18, 0x0000000100000001 # initialize rs2
bltu x3, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x8, 0x0000000000000000 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000001 # initialize rs1
li x1, 0x0000000000000001 # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x17, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000000000002 # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
bltu x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x19, 0x0000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bltu x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bltu x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x1, 0x0000000000000000 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
bltu x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
bltu x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x13, 0x0000000000000000 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffffffffffff # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x30, 0x0000000000000000 # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bltu x30, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
bltu x30, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x29, 0x0000000000000000 # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
bltu x29, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xffffffffffffffff # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
bltu x29, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x15, 0x0000000000000000 # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bltu x15, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xfffffffffffffffe # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bltu x15, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x8, 0x0000000000000000 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x0000000000000000 # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x22, 0x0000000000000000 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5555555555555555 # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x12, 0x0000000000000000 # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bltu x12, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000ffffffff # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
bltu x12, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x7, 0x0000000000000000 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
bltu x7, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
bltu x7, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x3, 0x0000000000000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x19, 0x0000000000000000 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
bltu x19, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
bltu x19, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x1, 0x0000000000000001 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x0000000000000000 # initialize rs1
li x17, 0x0000000000000000 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x5, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bltu x5, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bltu x5, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x12, 0x0000000000000001 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bltu x12, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
bltu x12, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x6, 0x0000000000000001 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bltu x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x8000000000000000 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
bltu x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x22, 0x0000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x22, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x22, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x19, 0x0000000000000001 # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bltu x19, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffffffffffff # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
bltu x19, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x20, 0x0000000000000001 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
bltu x20, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffffffffffe # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
bltu x20, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x16, 0x0000000000000001 # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bltu x16, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x18, 0xffffffffffffffff # initialize rs2
bltu x16, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x8, 0x0000000000000001 # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffffffffffe # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x29, 0x0000000000000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
bltu x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
bltu x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x0000000000000001 # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x18, 0x0000000000000001 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x18, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x18, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x9, 0x0000000000000001 # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
bltu x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000ffffffff # initialize rs1
li x1, 0x00000000ffffffff # initialize rs2
bltu x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x31, 0x0000000000000001 # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
bltu x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
bltu x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x28, 0x0000000000000001 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x18, 0x0000000000000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000100000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x14, 0x0000000000000002 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bltu x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0000000000000000 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
bltu x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x25, 0x0000000000000002 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
bltu x25, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
bltu x25, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x21, 0x0000000000000002 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000002 # initialize rs1
li x15, 0x0000000000000002 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x20, 0x0000000000000002 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
bltu x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
bltu x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x14, 0x0000000000000002 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x14, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x14, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x22, 0x0000000000000002 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bltu x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7fffffffffffffff # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
bltu x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x29, 0x0000000000000002 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bltu x29, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bltu x29, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x2, 0x0000000000000002 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bltu x2, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bltu x2, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x9, 0x0000000000000002 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x10, 0x0000000000000002 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
bltu x10, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
bltu x10, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x0000000000000002 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x27, 0x0000000000000002 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5555555555555555 # initialize rs1
li x25, 0x5555555555555555 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x6, 0x0000000000000002 # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bltu x6, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000ffffffff # initialize rs1
li x3, 0x00000000ffffffff # initialize rs2
bltu x6, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x7, 0x0000000000000002 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000fffffffe # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x22, 0x0000000000000002 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000100000000 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x17, 0x0000000000000002 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bltu x17, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x14, 0x0000000100000001 # initialize rs2
bltu x17, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x25, 0x8000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bltu x25, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
bltu x25, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x24, 0x8000000000000000 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bltu x24, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x0000000000000001 # initialize rs1
li x29, 0x0000000000000001 # initialize rs2
bltu x24, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x19, 0x8000000000000000 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
bltu x19, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000000000002 # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
bltu x19, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x24, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
bltu x24, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x8000000000000000 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
bltu x24, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x3, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x8000000000000001 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x3, 0x8000000000000000 # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x31, 0x8000000000000000 # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x27, 0x8000000000000000 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x23, 0x8000000000000000 # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffffffffffe # initialize rs1
li x9, 0xfffffffffffffffe # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x13, 0x8000000000000000 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x27, 0x8000000000000000 # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x27, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x27, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x3, 0x8000000000000000 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bltu x3, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5555555555555555 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
bltu x3, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x19, 0x8000000000000000 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bltu x19, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000ffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
bltu x19, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x13, 0x8000000000000000 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
bltu x13, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000fffffffe # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
bltu x13, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x27, 0x8000000000000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
bltu x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
bltu x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x19, 0x8000000000000000 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000001 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x28, 0x8000000000000001 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000000 # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x28, 0x8000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bltu x28, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bltu x28, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x6, 0x8000000000000001 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
bltu x6, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
bltu x6, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x13, 0x8000000000000001 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000000 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
bltu x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
bltu x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x3, 0x8000000000000001 # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bltu x3, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffffffffffff # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bltu x3, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x31, 0x8000000000000001 # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x10, 0x7ffffffffffffffe # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x26, 0x8000000000000001 # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffffffffffff # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x17, 0x8000000000000001 # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
bltu x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffffffffffe # initialize rs1
li x10, 0xfffffffffffffffe # initialize rs2
bltu x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x17, 0x8000000000000001 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x17, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x17, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x8000000000000001 # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x24, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x24, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x12, 0x8000000000000001 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
bltu x12, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5555555555555555 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
bltu x12, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000ffffffff # initialize rs1
li x21, 0x00000000ffffffff # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x11, 0x8000000000000001 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x5, 0x8000000000000001 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bltu x5, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000000 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
bltu x5, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x11, 0x8000000000000001 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000001 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x21, 0x7fffffffffffffff # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
bltu x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
bltu x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x29, 0x7fffffffffffffff # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bltu x29, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000000000001 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
bltu x29, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x10, 0x7fffffffffffffff # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
bltu x10, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000002 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
bltu x10, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x25, 0x7fffffffffffffff # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
bltu x25, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000000 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
bltu x25, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x23, 0x7fffffffffffffff # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bltu x23, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8000000000000001 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
bltu x23, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x25, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bltu x25, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffffffffffff # initialize rs1
li x12, 0x7fffffffffffffff # initialize rs2
bltu x25, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x8, 0x7fffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bltu x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
bltu x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x13, 0x7fffffffffffffff # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
bltu x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffffffffffff # initialize rs1
li x12, 0xffffffffffffffff # initialize rs2
bltu x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x5, 0x7fffffffffffffff # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
bltu x5, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xfffffffffffffffe # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
bltu x5, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x13, 0x7fffffffffffffff # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x28, 0x7fffffffffffffff # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x28, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x28, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x16, 0x7fffffffffffffff # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
bltu x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5555555555555555 # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
bltu x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x25, 0x7fffffffffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bltu x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000ffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
bltu x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x2, 0x7fffffffffffffff # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bltu x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000fffffffe # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
bltu x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x13, 0x7fffffffffffffff # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x27, 0x7fffffffffffffff # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bltu x27, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000100000001 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bltu x27, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x31, 0x7ffffffffffffffe # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bltu x31, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
bltu x31, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x13, 0x7ffffffffffffffe # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bltu x13, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
bltu x13, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x13, 0x7ffffffffffffffe # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
bltu x13, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x0000000000000002 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
bltu x13, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x2, 0x7ffffffffffffffe # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
bltu x2, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8000000000000000 # initialize rs1
li x1, 0x8000000000000000 # initialize rs2
bltu x2, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x19, 0x7ffffffffffffffe # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8000000000000001 # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x5, 0x7ffffffffffffffe # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
bltu x5, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffffffffffff # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
bltu x5, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x15, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bltu x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bltu x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x11, 0x7ffffffffffffffe # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bltu x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffffffffffff # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
bltu x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x28, 0x7ffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bltu x28, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xfffffffffffffffe # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
bltu x28, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x1, 0x7ffffffffffffffe # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bltu x1, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x7ffffffffffffffe # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x15, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x15, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x15, 0x7ffffffffffffffe # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x15, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x15, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x3, 0x7ffffffffffffffe # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
bltu x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000ffffffff # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
bltu x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x23, 0x7ffffffffffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x23, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x23, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x5, 0x7ffffffffffffffe # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bltu x5, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
bltu x5, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x23, 0x7ffffffffffffffe # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000100000001 # initialize rs1
li x9, 0x0000000100000001 # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x20, 0xffffffffffffffff # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bltu x20, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000000 # initialize rs1
li x26, 0x0000000000000000 # initialize rs2
bltu x20, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x22, 0xffffffffffffffff # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x22, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x22, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x8, 0xffffffffffffffff # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bltu x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000002 # initialize rs1
li x30, 0x0000000000000002 # initialize rs2
bltu x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x15, 0xffffffffffffffff # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
bltu x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x8000000000000000 # initialize rs1
li x17, 0x8000000000000000 # initialize rs2
bltu x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x9, 0xffffffffffffffff # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000001 # initialize rs1
li x22, 0x8000000000000001 # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x22, 0xffffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7fffffffffffffff # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x28, 0xffffffffffffffff # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffffffffffe # initialize rs1
li x15, 0x7ffffffffffffffe # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x27, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bltu x27, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffffffffffff # initialize rs1
li x20, 0xffffffffffffffff # initialize rs2
bltu x27, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x22, 0xffffffffffffffff # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bltu x22, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffffffffffe # initialize rs1
li x29, 0xfffffffffffffffe # initialize rs2
bltu x22, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x30, 0xffffffffffffffff # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0xffffffffffffffff # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x8, 0xffffffffffffffff # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
bltu x8, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5555555555555555 # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
bltu x8, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x19, 0xffffffffffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000ffffffff # initialize rs1
li x10, 0x00000000ffffffff # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x19, 0xffffffffffffffff # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x19, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x19, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x29, 0xffffffffffffffff # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
bltu x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
bltu x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x21, 0xffffffffffffffff # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
bltu x21, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0000000100000001 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
bltu x21, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x25, 0xfffffffffffffffe # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
bltu x25, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
bltu x25, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x23, 0xfffffffffffffffe # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000001 # initialize rs1
li x5, 0x0000000000000001 # initialize rs2
bltu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x31, 0xfffffffffffffffe # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
bltu x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000002 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
bltu x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x13, 0xfffffffffffffffe # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
bltu x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000000 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
bltu x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x1, 0xfffffffffffffffe # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bltu x1, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8000000000000001 # initialize rs1
li x3, 0x8000000000000001 # initialize rs2
bltu x1, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x11, 0xfffffffffffffffe # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bltu x11, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffffffffffff # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
bltu x11, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x31, 0xfffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bltu x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffffffffffe # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
bltu x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x27, 0xfffffffffffffffe # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bltu x27, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffffffffffff # initialize rs1
li x29, 0xffffffffffffffff # initialize rs2
bltu x27, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x9, 0xfffffffffffffffe # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
bltu x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xfffffffffffffffe # initialize rs1
li x15, 0xfffffffffffffffe # initialize rs2
bltu x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x31, 0xfffffffffffffffe # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bltu x31, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
bltu x31, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0xfffffffffffffffe # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x22, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x22, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x16, 0xfffffffffffffffe # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
bltu x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x5555555555555555 # initialize rs1
li x26, 0x5555555555555555 # initialize rs2
bltu x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x8, 0xfffffffffffffffe # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bltu x8, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000ffffffff # initialize rs1
li x12, 0x00000000ffffffff # initialize rs2
bltu x8, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x8, 0xfffffffffffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000fffffffe # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
bltu x8, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x31, 0xfffffffffffffffe # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bltu x31, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bltu x31, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x17, 0xfffffffffffffffe # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bltu x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bltu x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bltu x27, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000000 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
bltu x27, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x10, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000001 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
bltu x10, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bltu x20, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000000000002 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
bltu x20, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x9, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
bltu x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
bltu x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x8, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8000000000000001 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
bltu x8, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
bltu x12, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
bltu x12, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bltu x29, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffffffffffe # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
bltu x29, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bltu x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffffffffffff # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
bltu x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x27, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
bltu x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xfffffffffffffffe # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
bltu x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x26, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x5bbc887763ae86f2 # initialize rs2
bltu x26, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
bltu x8, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5555555555555555 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
bltu x8, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
bltu x5, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000ffffffff # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
bltu x5, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
bltu x29, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
bltu x29, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
bltu x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000000 # initialize rs1
li x30, 0x0000000100000000 # initialize rs2
bltu x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bltu x31, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
bltu x31, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0000000000000001 # initialize rs1
li x2, 0x0000000000000001 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000002 # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
bltu x31, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
bltu x6, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x8000000000000000 # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
bltu x6, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
bltu x5, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffffffffffff # initialize rs1
li x7, 0x7fffffffffffffff # initialize rs2
bltu x5, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bltu x3, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffffffffffe # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
bltu x3, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
bltu x24, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xffffffffffffffff # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
bltu x24, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bltu x7, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xfffffffffffffffe # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
bltu x7, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x6, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x6, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bltu x26, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5555555555555555 # initialize rs1
li x9, 0x5555555555555555 # initialize rs2
bltu x26, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000ffffffff # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
bltu x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000000fffffffe # initialize rs1
li x19, 0x00000000fffffffe # initialize rs2
bltu x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x0000000100000000 # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
bltu x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bltu x2, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x0000000100000001 # initialize rs1
li x30, 0x0000000100000001 # initialize rs2
bltu x2, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x12, 0x5555555555555555 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
bltu x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
bltu x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x25, 0x5555555555555555 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bltu x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bltu x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x27, 0x5555555555555555 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000002 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x10, 0x5555555555555555 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bltu x10, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x8000000000000000 # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
bltu x10, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x17, 0x5555555555555555 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bltu x17, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bltu x17, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x12, 0x5555555555555555 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffffffffffff # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x27, 0x5555555555555555 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bltu x27, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffffffffffe # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
bltu x27, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x20, 0x5555555555555555 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bltu x20, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xffffffffffffffff # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
bltu x20, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x7, 0x5555555555555555 # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bltu x7, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xfffffffffffffffe # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
bltu x7, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x3, 0x5555555555555555 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bltu x3, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
bltu x3, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x5555555555555555 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x30, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x30, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x5, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x5, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
bltu x5, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x15, 0x5555555555555555 # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
bltu x15, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000ffffffff # initialize rs1
li x31, 0x00000000ffffffff # initialize rs2
bltu x15, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x9, 0x5555555555555555 # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x31, 0x5555555555555555 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000000 # initialize rs1
li x24, 0x0000000100000000 # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x30, 0x5555555555555555 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
bltu x30, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0000000100000001 # initialize rs1
li x7, 0x0000000100000001 # initialize rs2
bltu x30, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x10, 0x00000000ffffffff # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
bltu x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x0000000000000000 # initialize rs1
li x30, 0x0000000000000000 # initialize rs2
bltu x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x26, 0x00000000ffffffff # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x0000000000000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
bltu x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x8, 0x00000000ffffffff # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
bltu x8, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x0000000000000002 # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
bltu x8, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x13, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bltu x13, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8000000000000000 # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
bltu x13, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x12, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bltu x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x8000000000000001 # initialize rs1
li x19, 0x8000000000000001 # initialize rs2
bltu x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x28, 0x00000000ffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bltu x28, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7fffffffffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
bltu x28, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x30, 0x00000000ffffffff # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
bltu x30, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffffffffffe # initialize rs1
li x13, 0x7ffffffffffffffe # initialize rs2
bltu x30, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x3, 0x00000000ffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xffffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x26, 0x00000000ffffffff # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x30, 0x00000000ffffffff # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x00000000ffffffff # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x7, 0x00000000ffffffff # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
bltu x7, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5555555555555555 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
bltu x7, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x18, 0x00000000ffffffff # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
bltu x18, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000ffffffff # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
bltu x18, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x21, 0x00000000ffffffff # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x21, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x21, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x5, 0x00000000ffffffff # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x5, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x5, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x28, 0x00000000ffffffff # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
bltu x28, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000100000001 # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
bltu x28, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x12, 0x00000000fffffffe # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
bltu x12, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x0000000000000000 # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
bltu x12, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x28, 0x00000000fffffffe # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bltu x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x0000000000000001 # initialize rs1
li x26, 0x0000000000000001 # initialize rs2
bltu x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x18, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x9, 0x0000000000000002 # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x16, 0x00000000fffffffe # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bltu x16, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8000000000000000 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
bltu x16, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x22, 0x00000000fffffffe # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bltu x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x8000000000000001 # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
bltu x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x11, 0x00000000fffffffe # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bltu x11, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffffffffffff # initialize rs1
li x25, 0x7fffffffffffffff # initialize rs2
bltu x11, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x13, 0x00000000fffffffe # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
bltu x13, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffffffffffe # initialize rs1
li x17, 0x7ffffffffffffffe # initialize rs2
bltu x13, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x16, 0x00000000fffffffe # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bltu x16, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffffffffffff # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
bltu x16, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x11, 0x00000000fffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bltu x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffffffffffe # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
bltu x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x13, 0x00000000fffffffe # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
bltu x13, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x00000000fffffffe # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x24, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x24, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x9, 0x00000000fffffffe # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
bltu x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5555555555555555 # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
bltu x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x30, 0x00000000fffffffe # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bltu x30, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000ffffffff # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
bltu x30, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x8, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x8, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000fffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
bltu x8, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x20, 0x00000000fffffffe # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bltu x20, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x0000000100000000 # initialize rs1
li x1, 0x0000000100000000 # initialize rs2
bltu x20, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x6, 0x00000000fffffffe # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bltu x6, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x0000000100000001 # initialize rs1
li x1, 0x0000000100000001 # initialize rs2
bltu x6, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x31, 0x0000000100000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bltu x31, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000000000000 # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
bltu x31, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x25, 0x0000000100000000 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bltu x25, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
bltu x25, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x9, 0x0000000100000000 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bltu x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000002 # initialize rs2
bltu x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x27, 0x0000000100000000 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bltu x27, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8000000000000000 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
bltu x27, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x25, 0x0000000100000000 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bltu x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x8000000000000001 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
bltu x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000100000000 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bltu x8, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffffffffffff # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
bltu x8, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x1, 0x0000000100000000 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bltu x1, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7ffffffffffffffe # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
bltu x1, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x23, 0x0000000100000000 # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x23, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffffffffffff # initialize rs1
li x10, 0xffffffffffffffff # initialize rs2
bltu x23, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000000 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfffffffffffffffe # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
bltu x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x20, 0x0000000100000000 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bltu x20, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
bltu x20, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x0000000100000000 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x26, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x18, 0x0000000100000000 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bltu x18, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5555555555555555 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
bltu x18, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x19, 0x0000000100000000 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bltu x19, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000ffffffff # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
bltu x19, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x24, 0x0000000100000000 # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x24, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000fffffffe # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
bltu x24, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x11, 0x0000000100000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
bltu x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x0000000100000000 # initialize rs1
li x17, 0x0000000100000000 # initialize rs2
bltu x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x17, 0x0000000100000000 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bltu x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0000000100000001 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
bltu x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x23, 0x0000000100000001 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
bltu x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
bltu x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x27, 0x0000000100000001 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x0000000000000001 # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
bltu x27, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x18, 0x0000000100000001 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bltu x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x0000000000000002 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
bltu x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x20, 0x0000000100000001 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
bltu x20, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
bltu x20, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x29, 0x0000000100000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
bltu x29, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8000000000000001 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
bltu x29, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x5, 0x0000000100000001 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
bltu x5, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffffffffffff # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
bltu x5, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x18, 0x0000000100000001 # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
bltu x18, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffffffffffe # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
bltu x18, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x9, 0x0000000100000001 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bltu x9, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffffffffffff # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
bltu x9, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x22, 0x0000000100000001 # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
bltu x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffffffffffe # initialize rs1
li x11, 0xfffffffffffffffe # initialize rs2
bltu x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x3, 0x0000000100000001 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
bltu x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x7, 0x0000000100000001 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
bltu x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x20, 0x0000000100000001 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
bltu x20, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5555555555555555 # initialize rs1
li x13, 0x5555555555555555 # initialize rs2
bltu x20, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x1, 0x0000000100000001 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bltu x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
bltu x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x14, 0x0000000100000001 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bltu x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000fffffffe # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
bltu x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x9, 0x0000000100000001 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x9, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x0000000100000000 # initialize rs1
li x29, 0x0000000100000000 # initialize rs2
bltu x9, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x31, 0x0000000100000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bltu x31, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x0000000100000001 # initialize rs1
li x19, 0x0000000100000001 # initialize rs2
bltu x31, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xb65e30fa56286621 # initialize rs1
li x0, 0x54800bc7fd07a78a # initialize rs2
bltu x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x54800bc7fd07a78a # initialize rs1
li x0, 0x54800bc7fd07a78a # initialize rs2
bltu x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xba5dc4b308a31881 # initialize rs1
li x1, 0xe2d987acdacbc297 # initialize rs2
bltu x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xe2d987acdacbc297 # initialize rs1
li x1, 0xe2d987acdacbc297 # initialize rs2
bltu x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xcb1e4e1c0d0b7c04 # initialize rs1
li x2, 0xabb5f943821a9ad0 # initialize rs2
bltu x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xabb5f943821a9ad0 # initialize rs1
li x2, 0xabb5f943821a9ad0 # initialize rs2
bltu x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x6d585f827f60efd3 # initialize rs1
li x3, 0x9faeceebec79effb # initialize rs2
bltu x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x9faeceebec79effb # initialize rs1
li x3, 0x9faeceebec79effb # initialize rs2
bltu x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x41c0b41445b36768 # initialize rs1
li x4, 0x609a013d06d48f18 # initialize rs2
bltu x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x609a013d06d48f18 # initialize rs1
li x4, 0x609a013d06d48f18 # initialize rs2
bltu x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9d21764241acc305 # initialize rs1
li x5, 0x68c4e9019cd18d04 # initialize rs2
bltu x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x68c4e9019cd18d04 # initialize rs1
li x5, 0x68c4e9019cd18d04 # initialize rs2
bltu x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x311a80e91b7f1f59 # initialize rs1
li x6, 0xc42615f06235a191 # initialize rs2
bltu x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xc42615f06235a191 # initialize rs1
li x6, 0xc42615f06235a191 # initialize rs2
bltu x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd60f2556914ad263 # initialize rs1
li x7, 0x19c0293d096f4651 # initialize rs2
bltu x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x19c0293d096f4651 # initialize rs1
li x7, 0x19c0293d096f4651 # initialize rs2
bltu x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x0671e86dcfc471d7 # initialize rs1
li x8, 0x4dbfec560069e009 # initialize rs2
bltu x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x4dbfec560069e009 # initialize rs1
li x8, 0x4dbfec560069e009 # initialize rs2
bltu x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x9d5ab37884965a52 # initialize rs1
li x9, 0x62e0a81a21d54791 # initialize rs2
bltu x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x62e0a81a21d54791 # initialize rs1
li x9, 0x62e0a81a21d54791 # initialize rs2
bltu x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xb44c37cb6e0fddca # initialize rs1
li x10, 0x9a0ed94fc8881226 # initialize rs2
bltu x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x9a0ed94fc8881226 # initialize rs1
li x10, 0x9a0ed94fc8881226 # initialize rs2
bltu x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xa434a9eb5d2ea32c # initialize rs1
li x11, 0x6884d14f66ef038e # initialize rs2
bltu x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x6884d14f66ef038e # initialize rs1
li x11, 0x6884d14f66ef038e # initialize rs2
bltu x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x9e9483cef3492361 # initialize rs1
li x12, 0x3c9ab00a02ba49b6 # initialize rs2
bltu x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x3c9ab00a02ba49b6 # initialize rs1
li x12, 0x3c9ab00a02ba49b6 # initialize rs2
bltu x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x2c279ef20de682a6 # initialize rs1
li x13, 0x65051d41f0024f1d # initialize rs2
bltu x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x65051d41f0024f1d # initialize rs1
li x13, 0x65051d41f0024f1d # initialize rs2
bltu x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x94933d6ca4945ac7 # initialize rs1
li x14, 0x73344b12b4df3549 # initialize rs2
bltu x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x73344b12b4df3549 # initialize rs1
li x14, 0x73344b12b4df3549 # initialize rs2
bltu x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x6b2d92ac96cea404 # initialize rs1
li x15, 0x6790cfe3072e4d47 # initialize rs2
bltu x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x6790cfe3072e4d47 # initialize rs1
li x15, 0x6790cfe3072e4d47 # initialize rs2
bltu x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xaa75fefdf592f2f1 # initialize rs1
li x16, 0x7d8a671334bbb770 # initialize rs2
bltu x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7d8a671334bbb770 # initialize rs1
li x16, 0x7d8a671334bbb770 # initialize rs2
bltu x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xfe4e7839740f7ab8 # initialize rs1
li x17, 0x48961de8163f8b99 # initialize rs2
bltu x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x48961de8163f8b99 # initialize rs1
li x17, 0x48961de8163f8b99 # initialize rs2
bltu x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x9691aac99f22031a # initialize rs1
li x18, 0xa937fef9fe99b499 # initialize rs2
bltu x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xa937fef9fe99b499 # initialize rs1
li x18, 0xa937fef9fe99b499 # initialize rs2
bltu x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x8409fa68d48c83b6 # initialize rs1
li x19, 0x2612641a9868afd6 # initialize rs2
bltu x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2612641a9868afd6 # initialize rs1
li x19, 0x2612641a9868afd6 # initialize rs2
bltu x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x43e6578857973f93 # initialize rs1
li x20, 0x6deb06033e1a9527 # initialize rs2
bltu x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x6deb06033e1a9527 # initialize rs1
li x20, 0x6deb06033e1a9527 # initialize rs2
bltu x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x19e58e50dd491842 # initialize rs1
li x21, 0x75ffd9d26361d85c # initialize rs2
bltu x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x75ffd9d26361d85c # initialize rs1
li x21, 0x75ffd9d26361d85c # initialize rs2
bltu x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xa7598e6deca2df9d # initialize rs1
li x22, 0xf6dd8d98d4cc75bb # initialize rs2
bltu x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xf6dd8d98d4cc75bb # initialize rs1
li x22, 0xf6dd8d98d4cc75bb # initialize rs2
bltu x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x256454f900b6fd4d # initialize rs1
li x23, 0xdd4238dd5ee60b18 # initialize rs2
bltu x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xdd4238dd5ee60b18 # initialize rs1
li x23, 0xdd4238dd5ee60b18 # initialize rs2
bltu x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x4c7e5e875de18ad7 # initialize rs1
li x24, 0xc4bc982c0a6fd9db # initialize rs2
bltu x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xc4bc982c0a6fd9db # initialize rs1
li x24, 0xc4bc982c0a6fd9db # initialize rs2
bltu x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x66ad86d716547b04 # initialize rs1
li x25, 0x5047e3eb90eeda4b # initialize rs2
bltu x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5047e3eb90eeda4b # initialize rs1
li x25, 0x5047e3eb90eeda4b # initialize rs2
bltu x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x0926ff88c844c6c4 # initialize rs1
li x26, 0x2ead7e092f65c58e # initialize rs2
bltu x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x2ead7e092f65c58e # initialize rs1
li x26, 0x2ead7e092f65c58e # initialize rs2
bltu x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x0d58d15168c47e06 # initialize rs1
li x27, 0xb200e47d38c1d265 # initialize rs2
bltu x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xb200e47d38c1d265 # initialize rs1
li x27, 0xb200e47d38c1d265 # initialize rs2
bltu x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x60dd5ba59975f52f # initialize rs1
li x28, 0xbe5cc884004b0da2 # initialize rs2
bltu x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xbe5cc884004b0da2 # initialize rs1
li x28, 0xbe5cc884004b0da2 # initialize rs2
bltu x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x3f32e188576ccbc9 # initialize rs1
li x29, 0x59b4d4b10e78c46a # initialize rs2
bltu x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x59b4d4b10e78c46a # initialize rs1
li x29, 0x59b4d4b10e78c46a # initialize rs2
bltu x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x1594f06ac1155fc6 # initialize rs1
li x30, 0x0057d7f132f9329b # initialize rs2
bltu x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0057d7f132f9329b # initialize rs1
li x30, 0x0057d7f132f9329b # initialize rs2
bltu x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x8447d7855b51367b # initialize rs1
li x31, 0xcd5a17d8b43b8f8f # initialize rs2
bltu x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xcd5a17d8b43b8f8f # initialize rs1
li x31, 0xcd5a17d8b43b8f8f # initialize rs2
bltu x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bltu x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x25, x23 # perform first operation
bltu x3, x6, arbitraryLabel139
nop
arbitraryLabel139:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x5, x16 # perform first operation
bltu x9, x23, arbitraryLabel140
nop
arbitraryLabel140:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x30, x5, x31 # perform first operation
bltu x2, x11, arbitraryLabel141
nop
arbitraryLabel141:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x20, x30 # perform first operation
bltu x16, x28, arbitraryLabel142
nop
arbitraryLabel142:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x15, x18, x25 # perform first operation
bltu x13, x15, arbitraryLabel143
nop
arbitraryLabel143:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x20, x25, x15 # perform first operation
bltu x3, x9, arbitraryLabel144
nop
arbitraryLabel144:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-sd.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x23, 0x71d2419621165f07 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 31 # sub immediate from rs1 to counter offset
sd x23, -31(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x25, 0xc656cd98a27f0808 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1989 # sub immediate from rs1 to counter offset
sd x25, -1989(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x7, 0xd95f3907f1cbee15 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -836 # sub immediate from rs1 to counter offset
sd x7, 836(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x13, 0xbfff27cbc039ccda # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1232 # sub immediate from rs1 to counter offset
sd x13, -1232(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0xd9e9463fabc5da1c # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1633 # sub immediate from rs1 to counter offset
sd x11, 1633(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0x6ad42667164ced27 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 81 # sub immediate from rs1 to counter offset
sd x14, -81(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0x128eafa024285243 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -836 # sub immediate from rs1 to counter offset
sd x19, 836(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x20, 0xc92a671916ff159f # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1314 # sub immediate from rs1 to counter offset
sd x20, 1314(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x27, 0xe7e652268e5b38d5 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 238 # sub immediate from rs1 to counter offset
sd x27, -238(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x24, 0x60f13d21a4b723fd # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1513 # sub immediate from rs1 to counter offset
sd x24, 1513(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x2, 0x711b7adbdfdf625c # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1072 # sub immediate from rs1 to counter offset
sd x2, -1072(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x13, 0x58f31d510f712c2c # initialize rs2
la x12, scratch # base address 
addi x12, x12, 292 # sub immediate from rs1 to counter offset
sd x13, -292(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x10, 0x034b6214b688ca64 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -336 # sub immediate from rs1 to counter offset
sd x10, 336(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x10, 0x2e271593ecb4f886 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1216 # sub immediate from rs1 to counter offset
sd x10, 1216(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x29, 0x889cf0f7eca01215 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 690 # sub immediate from rs1 to counter offset
sd x29, -690(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x18, 0xc9c02322bd3dd5b1 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1135 # sub immediate from rs1 to counter offset
sd x18, -1135(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x28, 0x818c26731b9bad62 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 817 # sub immediate from rs1 to counter offset
sd x28, -817(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x30, 0xa038a554505fbc44 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 600 # sub immediate from rs1 to counter offset
sd x30, -600(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x2, 0x35db2f9a8fcbe6bb # initialize rs2
la x19, scratch # base address 
addi x19, x19, 874 # sub immediate from rs1 to counter offset
sd x2, -874(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x17, 0xca4a1f1c78bfe037 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1213 # sub immediate from rs1 to counter offset
sd x17, 1213(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x25, 0xb18d1cd649012d66 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -875 # sub immediate from rs1 to counter offset
sd x25, 875(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x7, 0x505f3912d7213edc # initialize rs2
la x22, scratch # base address 
addi x22, x22, 56 # sub immediate from rs1 to counter offset
sd x7, -56(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x30, 0xc53dc9ad5431ee53 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1540 # sub immediate from rs1 to counter offset
sd x30, -1540(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x5, 0x70fbe8e3a9cfebf5 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1058 # sub immediate from rs1 to counter offset
sd x5, -1058(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x14, 0x5cd5b1a99934e73e # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1389 # sub immediate from rs1 to counter offset
sd x14, -1389(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x11, 0x180529d85a8696b8 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1657 # sub immediate from rs1 to counter offset
sd x11, -1657(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x22, 0x468d67343ecb4fd4 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -593 # sub immediate from rs1 to counter offset
sd x22, 593(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x29, 0xdf3670f078d1644c # initialize rs2
la x28, scratch # base address 
addi x28, x28, 588 # sub immediate from rs1 to counter offset
sd x29, -588(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x18, 0x604acb95a6e82436 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 445 # sub immediate from rs1 to counter offset
sd x18, -445(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x3, 0x104463f3ac2175fb # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1302 # sub immediate from rs1 to counter offset
sd x3, 1302(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x11, 0xae3d933de139cc72 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -2044 # sub immediate from rs1 to counter offset
sd x11, 2044(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0xc3a926f2f42295ab # initialize rs2
la x29, scratch # base address 
addi x29, x29, -583 # sub immediate from rs1 to counter offset
sd x0, 583(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x281cae4e4ae1d8a7 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 571 # sub immediate from rs1 to counter offset
sd x1, -571(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0x0f84822c1c362b51 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 656 # sub immediate from rs1 to counter offset
sd x2, -656(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0xff700ca9426b61f3 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1518 # sub immediate from rs1 to counter offset
sd x3, 1518(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xa1e53afb28ee8cd9 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -173 # sub immediate from rs1 to counter offset
sd x4, 173(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x89268d98f1590771 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1063 # sub immediate from rs1 to counter offset
sd x5, -1063(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x5be5c52b48b7b864 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1529 # sub immediate from rs1 to counter offset
sd x6, 1529(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x010c6d85419bf68e # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1650 # sub immediate from rs1 to counter offset
sd x7, 1650(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0x0966b11edd800ee2 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1794 # sub immediate from rs1 to counter offset
sd x8, -1794(x20) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0x2a3aeb87db11a280 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -213 # sub immediate from rs1 to counter offset
sd x9, 213(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0x6a422dfe8f5d6470 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -657 # sub immediate from rs1 to counter offset
sd x10, 657(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0x73bafb3f2d8bdf5b # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1191 # sub immediate from rs1 to counter offset
sd x11, 1191(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0x82a64244b6070dda # initialize rs2
la x6, scratch # base address 
addi x6, x6, -173 # sub immediate from rs1 to counter offset
sd x12, 173(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0x68047ecd7ef057bf # initialize rs2
la x9, scratch # base address 
addi x9, x9, -239 # sub immediate from rs1 to counter offset
sd x13, 239(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0x168b01905a17db00 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -554 # sub immediate from rs1 to counter offset
sd x14, 554(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0xcd366b995a136f3c # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1001 # sub immediate from rs1 to counter offset
sd x15, -1001(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0x26779f6711f7e301 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1586 # sub immediate from rs1 to counter offset
sd x16, -1586(x24) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0x0db85fca3e9cedd4 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1023 # sub immediate from rs1 to counter offset
sd x17, 1023(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0xd0fc4e211593d38b # initialize rs2
la x23, scratch # base address 
addi x23, x23, 331 # sub immediate from rs1 to counter offset
sd x18, -331(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0x6f6a9f9671be3cbc # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1101 # sub immediate from rs1 to counter offset
sd x19, 1101(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0x3d24ade06ae961e5 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1660 # sub immediate from rs1 to counter offset
sd x20, -1660(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0x30e846621ca61efc # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1049 # sub immediate from rs1 to counter offset
sd x21, 1049(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x08fae2df947d9cee # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1678 # sub immediate from rs1 to counter offset
sd x22, -1678(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x21461e08b12fbb4f # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1237 # sub immediate from rs1 to counter offset
sd x23, -1237(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0x2c06fb6ef63c4b2d # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1071 # sub immediate from rs1 to counter offset
sd x24, 1071(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x68f3d78a053905c9 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1645 # sub immediate from rs1 to counter offset
sd x25, 1645(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0x5e6f075e2f362b6c # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1403 # sub immediate from rs1 to counter offset
sd x26, -1403(x22) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x279f8efda8246bfb # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1992 # sub immediate from rs1 to counter offset
sd x27, -1992(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0x7985634010494fe2 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -437 # sub immediate from rs1 to counter offset
sd x28, 437(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0xbb96639a0815f7b5 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1578 # sub immediate from rs1 to counter offset
sd x29, 1578(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0x3996569fb4d7a905 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 28 # sub immediate from rs1 to counter offset
sd x30, -28(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0x01bd2daaa1ba565a # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1459 # sub immediate from rs1 to counter offset
sd x31, 1459(x23) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x22, 0x0000000000000000 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -560 # sub immediate from rs1 to counter offset
sd x22, 560(x12) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x26, 0x0000000000000001 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1869 # sub immediate from rs1 to counter offset
sd x26, 1869(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x14, 0x0000000000000002 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 35 # sub immediate from rs1 to counter offset
sd x14, -35(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x27, 0x8000000000000000 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -361 # sub immediate from rs1 to counter offset
sd x27, 361(x30) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x5, 0x8000000000000001 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1323 # sub immediate from rs1 to counter offset
sd x5, -1323(x31) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x12, 0x7fffffffffffffff # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1099 # sub immediate from rs1 to counter offset
sd x12, 1099(x22) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x8, 0x7ffffffffffffffe # initialize rs2
la x6, scratch # base address 
addi x6, x6, -343 # sub immediate from rs1 to counter offset
sd x8, 343(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x5, 0xffffffffffffffff # initialize rs2
la x29, scratch # base address 
addi x29, x29, -67 # sub immediate from rs1 to counter offset
sd x5, 67(x29) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x5, 0xfffffffffffffffe # initialize rs2
la x27, scratch # base address 
addi x27, x27, -507 # sub immediate from rs1 to counter offset
sd x5, 507(x27) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x17, 0x5bbc887763ae86f2 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -661 # sub immediate from rs1 to counter offset
sd x17, 661(x28) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
la x24, scratch # base address 
addi x24, x24, 790 # sub immediate from rs1 to counter offset
sd x30, -790(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x30, 0x5555555555555555 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -637 # sub immediate from rs1 to counter offset
sd x30, 637(x29) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x23, 0x00000000ffffffff # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1321 # sub immediate from rs1 to counter offset
sd x23, -1321(x20) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x5, 0x00000000fffffffe # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1818 # sub immediate from rs1 to counter offset
sd x5, 1818(x21) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x21, 0x0000000100000000 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1669 # sub immediate from rs1 to counter offset
sd x21, -1669(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x20, 0x0000000100000001 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1508 # sub immediate from rs1 to counter offset
sd x20, 1508(x31) # perform operation 

# Testcase cp_imm_corners
li x31, 0x9aa4f6003a380a3d # initialize rs2
la x25, scratch # base address 
addi x25, x25, 0 # sub immediate from rs1 to counter offset
sd x31, 0(x25) # perform operation 

# Testcase cp_imm_corners
li x31, 0xcdf675c47c35e0f0 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1 # sub immediate from rs1 to counter offset
sd x31, 1(x25) # perform operation 

# Testcase cp_imm_corners
li x28, 0xfb91edffe7c38df0 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -2 # sub immediate from rs1 to counter offset
sd x28, 2(x6) # perform operation 

# Testcase cp_imm_corners
li x27, 0xe1e8cd89dd86cf8d # initialize rs2
la x18, scratch # base address 
addi x18, x18, -3 # sub immediate from rs1 to counter offset
sd x27, 3(x18) # perform operation 

# Testcase cp_imm_corners
li x18, 0xfa41ca50f85c7dc7 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -4 # sub immediate from rs1 to counter offset
sd x18, 4(x31) # perform operation 

# Testcase cp_imm_corners
li x10, 0xa27f41523bb7a71a # initialize rs2
la x28, scratch # base address 
addi x28, x28, -8 # sub immediate from rs1 to counter offset
sd x10, 8(x28) # perform operation 

# Testcase cp_imm_corners
li x1, 0x71262324b8704fef # initialize rs2
la x9, scratch # base address 
addi x9, x9, -16 # sub immediate from rs1 to counter offset
sd x1, 16(x9) # perform operation 

# Testcase cp_imm_corners
li x29, 0xde6404d7e8736b56 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -32 # sub immediate from rs1 to counter offset
sd x29, 32(x21) # perform operation 

# Testcase cp_imm_corners
li x16, 0xec9f513e6a0f93c4 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -64 # sub immediate from rs1 to counter offset
sd x16, 64(x17) # perform operation 

# Testcase cp_imm_corners
li x25, 0x5ac22c1b205c9b64 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -128 # sub immediate from rs1 to counter offset
sd x25, 128(x17) # perform operation 

# Testcase cp_imm_corners
li x26, 0xfcabd317529989b4 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -256 # sub immediate from rs1 to counter offset
sd x26, 256(x9) # perform operation 

# Testcase cp_imm_corners
li x27, 0x8949aa6ab503ba94 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -512 # sub immediate from rs1 to counter offset
sd x27, 512(x23) # perform operation 

# Testcase cp_imm_corners
li x11, 0x3ef659ef65986783 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1023 # sub immediate from rs1 to counter offset
sd x11, 1023(x29) # perform operation 

# Testcase cp_imm_corners
li x25, 0x216c007475b2478f # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1024 # sub immediate from rs1 to counter offset
sd x25, 1024(x13) # perform operation 

# Testcase cp_imm_corners
li x29, 0x6d9a36bb13d7cbff # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1795 # sub immediate from rs1 to counter offset
sd x29, 1795(x6) # perform operation 

# Testcase cp_imm_corners
li x18, 0xe0740ace01755abb # initialize rs2
la x28, scratch # base address 
addi x28, x28, -2047 # sub immediate from rs1 to counter offset
sd x18, 2047(x28) # perform operation 

# Testcase cp_imm_corners
li x2, 0x9ea7844ce1ef8780 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 2047 # increment rs1 by 2047 
addi x17, x17, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x2, -2048(x17) # perform operation 

# Testcase cp_imm_corners
li x14, 0x02fae5cfb147dcf8 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 2047 # sub immediate from rs1 to counter offset
sd x14, -2047(x3) # perform operation 

# Testcase cp_imm_corners
li x30, 0x998611599809e1f6 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 2 # sub immediate from rs1 to counter offset
sd x30, -2(x22) # perform operation 

# Testcase cp_imm_corners
li x29, 0x6a52ec83fc73c5c6 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1 # sub immediate from rs1 to counter offset
sd x29, -1(x11) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x23, scratch
addi x23, x23, -1274
add x18, x17, x9 # perform first operation
sd x29, 1274(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x28, scratch
addi x28, x28, 93
add x25, x8, x13 # perform first operation
sd x1, -93(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x1, scratch
addi x1, x1, -302
add x13, x9, x31 # perform first operation
sd x22, 302(x1) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x31, scratch
addi x31, x31, 683
add x31, x31, x0 # perform first operation
sd x10, -683(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x31, scratch
addi x31, x31, -897
add x19, x19, x0 # perform first operation
sd x17, 897(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x10, scratch
addi x10, x10, 573
add x30, x30, x0 # perform first operation
sd x14, -573(x10) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lbu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x6, 0x6b56cdb81642956c # initialize rs2
la x1, scratch # base address 
addi x1, x1, -7 # sub immediate from rs1 to counter offset
sd x6, 7 (x1) # store value to put something in memory
lbu x23, 7(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x29, 0x06d94280da6e1d8f # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1071 # sub immediate from rs1 to counter offset
sd x29, -1071 (x2) # store value to put something in memory
lbu x27, -1071(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x6, 0x44e366fdcba020e3 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 811 # sub immediate from rs1 to counter offset
sd x6, -811 (x3) # store value to put something in memory
lbu x17, -811(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 16)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x14, 0x7a12f355f4ed2c7e # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1981 # sub immediate from rs1 to counter offset
sd x14, -1981 (x4) # store value to put something in memory
lbu x13, -1981(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x13, 24)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x12, 0x1b00851abbb268b7 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -842 # sub immediate from rs1 to counter offset
sd x12, 842 (x5) # store value to put something in memory
lbu x18, 842(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x18, 32)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0x5ed85afea80ac2b7 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1003 # sub immediate from rs1 to counter offset
sd x23, 1003 (x6) # store value to put something in memory
lbu x14, 1003(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x14, 40)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0x8d6f1465ea69fdfa # initialize rs2
la x7, scratch # base address 
addi x7, x7, 953 # sub immediate from rs1 to counter offset
sd x6, -953 (x7) # store value to put something in memory
lbu x16, -953(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 48)

# Testcase cp_rs1 (Test source rs1 = x8)
li x7, 0x8d627f68bc49445c # initialize rs2
la x8, scratch # base address 
addi x8, x8, 498 # sub immediate from rs1 to counter offset
sd x7, -498 (x8) # store value to put something in memory
lbu x13, -498(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 56)

# Testcase cp_rs1 (Test source rs1 = x9)
li x29, 0x371a879ca9f4d42e # initialize rs2
la x9, scratch # base address 
addi x9, x9, 251 # sub immediate from rs1 to counter offset
sd x29, -251 (x9) # store value to put something in memory
lbu x21, -251(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 64)

# Testcase cp_rs1 (Test source rs1 = x10)
li x21, 0xa87ea16dc17b82cb # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1374 # sub immediate from rs1 to counter offset
sd x21, 1374 (x10) # store value to put something in memory
lbu x31, 1374(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 72)

# Testcase cp_rs1 (Test source rs1 = x11)
li x30, 0xb1b8c7a9a565c786 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1882 # sub immediate from rs1 to counter offset
sd x30, -1882 (x11) # store value to put something in memory
lbu x26, -1882(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 80)

# Testcase cp_rs1 (Test source rs1 = x12)
li x22, 0xdf2301ef44b0d51c # initialize rs2
la x12, scratch # base address 
addi x12, x12, 457 # sub immediate from rs1 to counter offset
sd x22, -457 (x12) # store value to put something in memory
lbu x15, -457(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 88)

# Testcase cp_rs1 (Test source rs1 = x13)
li x17, 0x17907af8eef6dbfb # initialize rs2
la x13, scratch # base address 
addi x13, x13, 157 # sub immediate from rs1 to counter offset
sd x17, -157 (x13) # store value to put something in memory
lbu x3, -157(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x14)
li x11, 0x5d3d9bf83b750cc3 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 254 # sub immediate from rs1 to counter offset
sd x11, -254 (x14) # store value to put something in memory
lbu x6, -254(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 104)

# Testcase cp_rs1 (Test source rs1 = x15)
li x3, 0xc5abb0d57b82d87d # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1427 # sub immediate from rs1 to counter offset
sd x3, -1427 (x15) # store value to put something in memory
lbu x5, -1427(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 112)

# Testcase cp_rs1 (Test source rs1 = x16)
li x9, 0xda9baf4d7bb61d07 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1524 # sub immediate from rs1 to counter offset
sd x9, 1524 (x16) # store value to put something in memory
lbu x19, 1524(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 120)

# Testcase cp_rs1 (Test source rs1 = x17)
li x20, 0xd842662bf063e5e4 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 43 # sub immediate from rs1 to counter offset
sd x20, -43 (x17) # store value to put something in memory
lbu x12, -43(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 128)

# Testcase cp_rs1 (Test source rs1 = x18)
li x8, 0x1a24df6b30ed9610 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -954 # sub immediate from rs1 to counter offset
sd x8, 954 (x18) # store value to put something in memory
lbu x10, 954(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 136)

# Testcase cp_rs1 (Test source rs1 = x19)
li x5, 0x88a4a7d5b92e4dcb # initialize rs2
la x19, scratch # base address 
addi x19, x19, -649 # sub immediate from rs1 to counter offset
sd x5, 649 (x19) # store value to put something in memory
lbu x25, 649(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 144)

# Testcase cp_rs1 (Test source rs1 = x20)
li x12, 0x1d154682314a908d # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1645 # sub immediate from rs1 to counter offset
sd x12, 1645 (x20) # store value to put something in memory
lbu x27, 1645(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 152)

# Testcase cp_rs1 (Test source rs1 = x21)
li x12, 0x158aeac31ea700cb # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1393 # sub immediate from rs1 to counter offset
sd x12, 1393 (x21) # store value to put something in memory
lbu x11, 1393(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs1 (Test source rs1 = x22)
li x24, 0xd4e45071338f8090 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -969 # sub immediate from rs1 to counter offset
sd x24, 969 (x22) # store value to put something in memory
lbu x8, 969(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 168)

# Testcase cp_rs1 (Test source rs1 = x23)
li x7, 0xd116735910a9d6af # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1462 # sub immediate from rs1 to counter offset
sd x7, 1462 (x23) # store value to put something in memory
lbu x14, 1462(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 176)

# Testcase cp_rs1 (Test source rs1 = x24)
li x26, 0x9c6cfa085c40bb2a # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1228 # sub immediate from rs1 to counter offset
sd x26, -1228 (x24) # store value to put something in memory
lbu x22, -1228(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cp_rs1 (Test source rs1 = x25)
li x16, 0x1d956a43a8a45834 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -18 # sub immediate from rs1 to counter offset
sd x16, 18 (x25) # store value to put something in memory
lbu x12, 18(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 192)

# Testcase cp_rs1 (Test source rs1 = x26)
li x7, 0x8dbc75855c1ba231 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -545 # sub immediate from rs1 to counter offset
sd x7, 545 (x26) # store value to put something in memory
lbu x9, 545(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 200)

# Testcase cp_rs1 (Test source rs1 = x27)
li x3, 0x5fdfd7fe5d55c0d8 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 210 # sub immediate from rs1 to counter offset
sd x3, -210 (x27) # store value to put something in memory
lbu x21, -210(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rs1 (Test source rs1 = x28)
li x31, 0x170fa072abb1b6dd # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1595 # sub immediate from rs1 to counter offset
sd x31, -1595 (x28) # store value to put something in memory
lbu x2, -1595(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 216)

# Testcase cp_rs1 (Test source rs1 = x29)
li x2, 0x9a4df2f546da2f03 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1441 # sub immediate from rs1 to counter offset
sd x2, 1441 (x29) # store value to put something in memory
lbu x21, 1441(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 224)

# Testcase cp_rs1 (Test source rs1 = x30)
li x20, 0x069eb1ca39dcd77c # initialize rs2
la x30, scratch # base address 
addi x30, x30, -886 # sub immediate from rs1 to counter offset
sd x20, 886 (x30) # store value to put something in memory
lbu x26, 886(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rs1 (Test source rs1 = x31)
li x19, 0x64ceba98ed6a9d5c # initialize rs2
la x31, scratch # base address 
addi x31, x31, -225 # sub immediate from rs1 to counter offset
sd x19, 225 (x31) # store value to put something in memory
lbu x6, 225(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 240)

# Testcase cp_rd (Test destination rd = x0)
li x27, 0x26e3912277508df5 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -531 # sub immediate from rs1 to counter offset
sd x27, 531 (x26) # store value to put something in memory
lbu x0, 531(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 248)

# Testcase cp_rd (Test destination rd = x1)
li x20, 0x9b3531ed3c5fc3f6 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1273 # sub immediate from rs1 to counter offset
sd x20, 1273 (x5) # store value to put something in memory
lbu x1, 1273(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 256)

# Testcase cp_rd (Test destination rd = x2)
li x15, 0xdc517b020b3609a5 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1824 # sub immediate from rs1 to counter offset
sd x15, 1824 (x5) # store value to put something in memory
lbu x2, 1824(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x25, 0x5e77c9721bcd85f4 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1714 # sub immediate from rs1 to counter offset
sd x25, 1714 (x30) # store value to put something in memory
lbu x3, 1714(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 272)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x27, 0x27c169d00b8879ce # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1167 # sub immediate from rs1 to counter offset
sd x27, 1167 (x14) # store value to put something in memory
lbu x4, 1167(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 280)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0x974408de24595641 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 624 # sub immediate from rs1 to counter offset
sd x28, -624 (x23) # store value to put something in memory
lbu x5, -624(x23) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 288)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0x1823fb8369b470d0 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1128 # sub immediate from rs1 to counter offset
sd x31, 1128 (x25) # store value to put something in memory
lbu x6, 1128(x25) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 296)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0x0e82546a2df7c5ae # initialize rs2
la x15, scratch # base address 
addi x15, x15, -9 # sub immediate from rs1 to counter offset
sd x27, 9 (x15) # store value to put something in memory
lbu x7, 9(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 304)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0x4b381d3c9b4763b9 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1316 # sub immediate from rs1 to counter offset
sd x31, -1316 (x3) # store value to put something in memory
lbu x8, -1316(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cp_rd (Test destination rd = x9)
li x15, 0x4f3f9e227919610c # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1675 # sub immediate from rs1 to counter offset
sd x15, 1675 (x3) # store value to put something in memory
lbu x9, 1675(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 320)

# Testcase cp_rd (Test destination rd = x10)
li x16, 0xfb5dfba89c527abd # initialize rs2
la x3, scratch # base address 
addi x3, x3, 777 # sub immediate from rs1 to counter offset
sd x16, -777 (x3) # store value to put something in memory
lbu x10, -777(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rd (Test destination rd = x11)
li x20, 0xa084704b851c3a5b # initialize rs2
la x5, scratch # base address 
addi x5, x5, -911 # sub immediate from rs1 to counter offset
sd x20, 911 (x5) # store value to put something in memory
lbu x11, 911(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 336)

# Testcase cp_rd (Test destination rd = x12)
li x11, 0x889e8cbae3c97f74 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1808 # sub immediate from rs1 to counter offset
sd x11, -1808 (x18) # store value to put something in memory
lbu x12, -1808(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 344)

# Testcase cp_rd (Test destination rd = x13)
li x23, 0xa361ba9647eb8517 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 751 # sub immediate from rs1 to counter offset
sd x23, -751 (x24) # store value to put something in memory
lbu x13, -751(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 352)

# Testcase cp_rd (Test destination rd = x14)
li x21, 0x6147cd7d7b69b5a3 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 529 # sub immediate from rs1 to counter offset
sd x21, -529 (x24) # store value to put something in memory
lbu x14, -529(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cp_rd (Test destination rd = x15)
li x29, 0xf80399b071825773 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -578 # sub immediate from rs1 to counter offset
sd x29, 578 (x11) # store value to put something in memory
lbu x15, 578(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 368)

# Testcase cp_rd (Test destination rd = x16)
li x20, 0xd7ca4e5dd2da4ded # initialize rs2
la x10, scratch # base address 
addi x10, x10, -809 # sub immediate from rs1 to counter offset
sd x20, 809 (x10) # store value to put something in memory
lbu x16, 809(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_rd (Test destination rd = x17)
li x10, 0x90d09a466e05f0db # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1986 # sub immediate from rs1 to counter offset
sd x10, 1986 (x16) # store value to put something in memory
lbu x17, 1986(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cp_rd (Test destination rd = x18)
li x6, 0x9cc967d8f098c1ba # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2018 # sub immediate from rs1 to counter offset
sd x6, -2018 (x1) # store value to put something in memory
lbu x18, -2018(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rd (Test destination rd = x19)
li x10, 0xd034e78df52cbee3 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -2007 # sub immediate from rs1 to counter offset
sd x10, 2007 (x20) # store value to put something in memory
lbu x19, 2007(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rd (Test destination rd = x20)
li x10, 0xb4ac2ae35894a2d5 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 289 # sub immediate from rs1 to counter offset
sd x10, -289 (x23) # store value to put something in memory
lbu x20, -289(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 408)

# Testcase cp_rd (Test destination rd = x21)
li x1, 0xa8caa1f27c4396d8 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1431 # sub immediate from rs1 to counter offset
sd x1, -1431 (x17) # store value to put something in memory
lbu x21, -1431(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rd (Test destination rd = x22)
li x6, 0xf53adcd038c30cab # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1163 # sub immediate from rs1 to counter offset
sd x6, -1163 (x28) # store value to put something in memory
lbu x22, -1163(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cp_rd (Test destination rd = x23)
li x20, 0x47c04086918ecbe4 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1415 # sub immediate from rs1 to counter offset
sd x20, -1415 (x23) # store value to put something in memory
lbu x23, -1415(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 432)

# Testcase cp_rd (Test destination rd = x24)
li x21, 0xa16b7a6ee4547e06 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -347 # sub immediate from rs1 to counter offset
sd x21, 347 (x9) # store value to put something in memory
lbu x24, 347(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 440)

# Testcase cp_rd (Test destination rd = x25)
li x9, 0x71f35c6b9cdf9496 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -389 # sub immediate from rs1 to counter offset
sd x9, 389 (x11) # store value to put something in memory
lbu x25, 389(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 448)

# Testcase cp_rd (Test destination rd = x26)
li x1, 0x52f628dffb547229 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -134 # sub immediate from rs1 to counter offset
sd x1, 134 (x24) # store value to put something in memory
lbu x26, 134(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_rd (Test destination rd = x27)
li x7, 0x8c25f6c4aeac14a6 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -685 # sub immediate from rs1 to counter offset
sd x7, 685 (x30) # store value to put something in memory
lbu x27, 685(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rd (Test destination rd = x28)
li x28, 0xbb868b14a93b78c4 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -215 # sub immediate from rs1 to counter offset
sd x28, 215 (x20) # store value to put something in memory
lbu x28, 215(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0x7b7df6e46ef50822 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1311 # sub immediate from rs1 to counter offset
sd x17, -1311 (x24) # store value to put something in memory
lbu x29, -1311(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0x962f3ffb0e3177c1 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1730 # sub immediate from rs1 to counter offset
sd x11, 1730 (x5) # store value to put something in memory
lbu x30, 1730(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 488)

# Testcase cp_rd (Test destination rd = x31)
li x17, 0xa17b69cc60dd7d36 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -781 # sub immediate from rs1 to counter offset
sd x17, 781 (x13) # store value to put something in memory
lbu x31, 781(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x24, 0xcd20518acc203557 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1227 # sub immediate from rs1 to counter offset
sd x24, 1227 (x1) # store value to put something in memory
lbu x1, 1227(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x26, 0x7bde63a62680a5de # initialize rs2
la x2, scratch # base address 
addi x2, x2, -592 # sub immediate from rs1 to counter offset
sd x26, 592 (x2) # store value to put something in memory
lbu x2, 592(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x13, 0x02c486399fbb9069 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 308 # sub immediate from rs1 to counter offset
sd x13, -308 (x3) # store value to put something in memory
lbu x3, -308(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x30, 0xc384fbec50de60df # initialize rs2
la x4, scratch # base address 
addi x4, x4, -600 # sub immediate from rs1 to counter offset
sd x30, 600 (x4) # store value to put something in memory
lbu x4, 600(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0x4273477dce5c6d95 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1434 # sub immediate from rs1 to counter offset
sd x27, -1434 (x5) # store value to put something in memory
lbu x5, -1434(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x82df9135c8a087fa # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1627 # sub immediate from rs1 to counter offset
sd x4, -1627 (x6) # store value to put something in memory
lbu x6, -1627(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0x5b1b550007250ddd # initialize rs2
la x7, scratch # base address 
addi x7, x7, -519 # sub immediate from rs1 to counter offset
sd x22, 519 (x7) # store value to put something in memory
lbu x7, 519(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x1, 0xfb98cfa6e13bdde3 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1435 # sub immediate from rs1 to counter offset
sd x1, -1435 (x8) # store value to put something in memory
lbu x8, -1435(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x20, 0xe291347c065c07d0 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 73 # sub immediate from rs1 to counter offset
sd x20, -73 (x9) # store value to put something in memory
lbu x9, -73(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x9, 0xdc0657550d0b0955 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1630 # sub immediate from rs1 to counter offset
sd x9, -1630 (x10) # store value to put something in memory
lbu x10, -1630(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x15, 0x51dd742caff86b79 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1138 # sub immediate from rs1 to counter offset
sd x15, -1138 (x11) # store value to put something in memory
lbu x11, -1138(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x15, 0x53d465f4fadb1655 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1465 # sub immediate from rs1 to counter offset
sd x15, -1465 (x12) # store value to put something in memory
lbu x12, -1465(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x25, 0x2286e93098a49407 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -783 # sub immediate from rs1 to counter offset
sd x25, 783 (x13) # store value to put something in memory
lbu x13, 783(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x12, 0x8d62255dd337ef2b # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1378 # sub immediate from rs1 to counter offset
sd x12, 1378 (x14) # store value to put something in memory
lbu x14, 1378(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x9, 0xba287c9a09140c72 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1922 # sub immediate from rs1 to counter offset
sd x9, -1922 (x15) # store value to put something in memory
lbu x15, -1922(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x12, 0x1fe7ea6dfd803ebc # initialize rs2
la x16, scratch # base address 
addi x16, x16, 161 # sub immediate from rs1 to counter offset
sd x12, -161 (x16) # store value to put something in memory
lbu x16, -161(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x062a682568c45891 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1140 # sub immediate from rs1 to counter offset
sd x17, -1140 (x17) # store value to put something in memory
lbu x17, -1140(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x25, 0xa8b2213f266ce64c # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1905 # sub immediate from rs1 to counter offset
sd x25, 1905 (x18) # store value to put something in memory
lbu x18, 1905(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x24, 0x648c7b4a995d395e # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1792 # sub immediate from rs1 to counter offset
sd x24, -1792 (x19) # store value to put something in memory
lbu x19, -1792(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x7, 0x2b6eab157caa6348 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 114 # sub immediate from rs1 to counter offset
sd x7, -114 (x20) # store value to put something in memory
lbu x20, -114(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x31, 0x665f4664dc131bb3 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -228 # sub immediate from rs1 to counter offset
sd x31, 228 (x21) # store value to put something in memory
lbu x21, 228(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x1, 0x87a6bd6f5151d4fa # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1971 # sub immediate from rs1 to counter offset
sd x1, 1971 (x22) # store value to put something in memory
lbu x22, 1971(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x6, 0x5b55593a27c0c7b3 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -785 # sub immediate from rs1 to counter offset
sd x6, 785 (x23) # store value to put something in memory
lbu x23, 785(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x2, 0x24cca77c44bcf5ee # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1933 # sub immediate from rs1 to counter offset
sd x2, 1933 (x24) # store value to put something in memory
lbu x24, 1933(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x16, 0xc88b4c2d8cb6ee6f # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1316 # sub immediate from rs1 to counter offset
sd x16, -1316 (x25) # store value to put something in memory
lbu x25, -1316(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x3, 0xf7b60c6fb675fa6d # initialize rs2
la x26, scratch # base address 
addi x26, x26, -194 # sub immediate from rs1 to counter offset
sd x3, 194 (x26) # store value to put something in memory
lbu x26, 194(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x29, 0x453797b1d21973a3 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1920 # sub immediate from rs1 to counter offset
sd x29, 1920 (x27) # store value to put something in memory
lbu x27, 1920(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x18, 0x41e0ae4adab67388 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 652 # sub immediate from rs1 to counter offset
sd x18, -652 (x28) # store value to put something in memory
lbu x28, -652(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x15, 0x3b579c88b57a64b8 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1432 # sub immediate from rs1 to counter offset
sd x15, 1432 (x29) # store value to put something in memory
lbu x29, 1432(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x27, 0x43e0aab0f61cfd6c # initialize rs2
la x30, scratch # base address 
addi x30, x30, 580 # sub immediate from rs1 to counter offset
sd x27, -580 (x30) # store value to put something in memory
lbu x30, -580(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x6, 0x6a42a371837964a3 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1905 # sub immediate from rs1 to counter offset
sd x6, 1905 (x31) # store value to put something in memory
lbu x31, 1905(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 744)

# Testcase cp_imm_corners
li x7, 0x2af16c84a7a1baa7 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 0 # sub immediate from rs1 to counter offset
sd x7, 0 (x24) # store value to put something in memory
lbu x16, 0(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 752)

# Testcase cp_imm_corners
li x11, 0xc45521854a8a32be # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1 # sub immediate from rs1 to counter offset
sd x11, 1 (x22) # store value to put something in memory
lbu x13, 1(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 760)

# Testcase cp_imm_corners
li x12, 0x8b9773f59225afaf # initialize rs2
la x31, scratch # base address 
addi x31, x31, -2 # sub immediate from rs1 to counter offset
sd x12, 2 (x31) # store value to put something in memory
lbu x22, 2(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 768)

# Testcase cp_imm_corners
li x28, 0x78e0c5df38356d9b # initialize rs2
la x16, scratch # base address 
addi x16, x16, -3 # sub immediate from rs1 to counter offset
sd x28, 3 (x16) # store value to put something in memory
lbu x23, 3(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 776)

# Testcase cp_imm_corners
li x21, 0x2ba7b43a29bd0c2e # initialize rs2
la x24, scratch # base address 
addi x24, x24, -4 # sub immediate from rs1 to counter offset
sd x21, 4 (x24) # store value to put something in memory
lbu x8, 4(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 784)

# Testcase cp_imm_corners
li x15, 0x749190a2dead2df3 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -8 # sub immediate from rs1 to counter offset
sd x15, 8 (x8) # store value to put something in memory
lbu x1, 8(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 792)

# Testcase cp_imm_corners
li x6, 0x91d6cb0c03bb4048 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -16 # sub immediate from rs1 to counter offset
sd x6, 16 (x3) # store value to put something in memory
lbu x13, 16(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 800)

# Testcase cp_imm_corners
li x12, 0x77cac8185f3ee6a5 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -32 # sub immediate from rs1 to counter offset
sd x12, 32 (x5) # store value to put something in memory
lbu x13, 32(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 808)

# Testcase cp_imm_corners
li x5, 0xb1f3f79733a9314f # initialize rs2
la x31, scratch # base address 
addi x31, x31, -64 # sub immediate from rs1 to counter offset
sd x5, 64 (x31) # store value to put something in memory
lbu x30, 64(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 816)

# Testcase cp_imm_corners
li x8, 0x21b634dab52c7e3b # initialize rs2
la x11, scratch # base address 
addi x11, x11, -128 # sub immediate from rs1 to counter offset
sd x8, 128 (x11) # store value to put something in memory
lbu x16, 128(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 824)

# Testcase cp_imm_corners
li x16, 0x28712afea8e75502 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -256 # sub immediate from rs1 to counter offset
sd x16, 256 (x2) # store value to put something in memory
lbu x24, 256(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cp_imm_corners
li x3, 0xcc3786df9e021370 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -512 # sub immediate from rs1 to counter offset
sd x3, 512 (x12) # store value to put something in memory
lbu x17, 512(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 840)

# Testcase cp_imm_corners
li x26, 0xb614fc5a009343d8 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1023 # sub immediate from rs1 to counter offset
sd x26, 1023 (x18) # store value to put something in memory
lbu x28, 1023(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 848)

# Testcase cp_imm_corners
li x2, 0x91d66541fea1d920 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1024 # sub immediate from rs1 to counter offset
sd x2, 1024 (x5) # store value to put something in memory
lbu x1, 1024(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 856)

# Testcase cp_imm_corners
li x29, 0xb8d3ec288e05212c # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1795 # sub immediate from rs1 to counter offset
sd x29, 1795 (x7) # store value to put something in memory
lbu x3, 1795(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 864)

# Testcase cp_imm_corners
li x25, 0x876dc21037c4a9b2 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -2047 # sub immediate from rs1 to counter offset
sd x25, 2047 (x20) # store value to put something in memory
lbu x31, 2047(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 872)

# Testcase cp_imm_corners
li x27, 0x55aeb1f7b7813ade # initialize rs2
la x18, scratch # base address 
addi x18, x18, 2047 # increment rs1 by 2047 
addi x18, x18, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sd x27, -2048 (x18) # store value to put something in memory
lbu x7, -2048(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 880)

# Testcase cp_imm_corners
li x7, 0xc48b458bc6c8a1bf # initialize rs2
la x10, scratch # base address 
addi x10, x10, 2047 # sub immediate from rs1 to counter offset
sd x7, -2047 (x10) # store value to put something in memory
lbu x17, -2047(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 888)

# Testcase cp_imm_corners
li x7, 0xbeb77691ff477a60 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 2 # sub immediate from rs1 to counter offset
sd x7, -2 (x26) # store value to put something in memory
lbu x23, -2(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 896)

# Testcase cp_imm_corners
li x30, 0x385f4ea64b17ecfe # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1 # sub immediate from rs1 to counter offset
sd x30, -1 (x13) # store value to put something in memory
lbu x17, -1(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 904)

# Testcase cp_gpr/fpr_hazard nohaz test
la x21, scratch
addi x21, x21, 847
add x29, x11, x26 # perform first operation
lbu x5, -847(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x24, scratch
addi x24, x24, -815
add x15, x12, x19 # perform first operation
lbu x8, 815(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x6, scratch
addi x6, x6, -1211
add x15, x1, x9 # perform first operation
lbu x7, 1211(x6) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x23, scratch
addi x23, x23, -216
add x23, x23, x0 # perform first operation
lbu x24, 216(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x20, scratch
addi x20, x20, 833
add x20, x20, x0 # perform first operation
lbu x17, -833(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x2, scratch
addi x2, x2, 1353
add x2, x2, x0 # perform first operation
lbu x29, -1353(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x7, scratch
addi x7, x7, -1269
add x23, x18, x10 # perform first operation
lbu x23, 1269(x7) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x19, scratch
addi x19, x19, 609
add x16, x5, x7 # perform first operation
lbu x16, -609(x19) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x24, scratch
addi x24, x24, 1234
add x16, x28, x3 # perform first operation
lbu x16, -1234(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x29, scratch
addi x29, x29, -553
add x19, x5, x12 # perform first operation
lbu x5, 553(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x18, scratch
addi x18, x18, -1556
add x1, x17, x26 # perform first operation
lbu x26, 1556(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x20, scratch
addi x20, x20, 1246
add x9, x8, x15 # perform first operation
lbu x30, -1246(x20) # perform second (triggering) operation

#.EQU SIGSIZE,912


// ******************
// Tests from: WALLY-COV-slti.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x44a9d45828dbc361 # initialize rs1
slti x23, x0, 432 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x3e610675ab098ecc # initialize rs1
slti x31, x1, -936 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x7d3a8d8596cf037b # initialize rs1
slti x26, x2, 1275 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x8dfac0c77eb5c1f9 # initialize rs1
slti x28, x3, 1029 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5c0fce27c281f2d4 # initialize rs1
slti x23, x4, 277 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xfc6adb9de0df2041 # initialize rs1
slti x1, x5, -1781 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe170ff2ace15066d # initialize rs1
slti x10, x6, 3 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xe94468cac247db4b # initialize rs1
slti x19, x7, -577 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x750303df2f2792b4 # initialize rs1
slti x12, x8, 1959 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x00d587d2097533c6 # initialize rs1
slti x29, x9, -577 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xc87a88f1c64eea3c # initialize rs1
slti x21, x10, 1516 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xdf7b4303ca0eb1cb # initialize rs1
slti x2, x11, 1743 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x0b09094528408bf1 # initialize rs1
slti x19, x12, -1701 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xbd34de2eedaea5e6 # initialize rs1
slti x20, x13, -1459 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x34e1b05ad3c47c17 # initialize rs1
slti x12, x14, 800 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xe8abfd9d9617f090 # initialize rs1
slti x23, x15, -920 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x7f52da8fb5302d87 # initialize rs1
slti x1, x16, -1897 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xd1652a6b2bbe6979 # initialize rs1
slti x25, x17, -967 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xaa20e1c348057d49 # initialize rs1
slti x25, x18, 897 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x547e7647fee42c19 # initialize rs1
slti x3, x19, 1207 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xccacb07f2ce50f00 # initialize rs1
slti x11, x20, -767 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xbe354411df56467f # initialize rs1
slti x28, x21, -1935 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x99da516e5f2c408f # initialize rs1
slti x23, x22, 1568 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x70088d584d4fa752 # initialize rs1
slti x1, x23, -465 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x6fd6e7ffc7d7a309 # initialize rs1
slti x28, x24, 420 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x3b9cb1e42c35dd24 # initialize rs1
slti x2, x25, 553 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x7b67ab2bc76ac463 # initialize rs1
slti x13, x26, -224 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xc16397717d646b1c # initialize rs1
slti x22, x27, 668 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x6e28b18929a976e8 # initialize rs1
slti x13, x28, -1128 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xfd6965635fe44f59 # initialize rs1
slti x30, x29, 142 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xa1a2e3a843b86e50 # initialize rs1
slti x12, x30, 1952 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x9c94ced4da0c3186 # initialize rs1
slti x6, x31, 443 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 248)

# Testcase cp_rd (Test destination rd = x0)
li x22, 0xec7b82ffff1bb6e4 # initialize rs1
slti x0, x22, 1025 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x26, 0xac76447d5d5d4ee7 # initialize rs1
slti x1, x26, -1931 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x24, 0x4ed3e3e49fd8e5fc # initialize rs1
slti x2, x24, 222 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x15, 0x501bd907a90c8f50 # initialize rs1
slti x3, x15, -1191 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x11, 0x255dac2be83f03e7 # initialize rs1
slti x4, x11, 1251 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x13, 0xd5fcbbe261518234 # initialize rs1
slti x5, x13, 979 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x2, 0x95a94e89d3a29c49 # initialize rs1
slti x6, x2, -592 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0xf984fd8b06821579 # initialize rs1
slti x7, x12, -425 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x25, 0x449ef69280ed39db # initialize rs1
slti x8, x25, 357 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0x794de13bb71102fc # initialize rs1
slti x9, x31, -1803 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x18, 0xc40c1c1774bb8a42 # initialize rs1
slti x10, x18, 645 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x20, 0xc510388b836a3a75 # initialize rs1
slti x11, x20, -1099 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x25, 0x330ddab8a15f32b7 # initialize rs1
slti x12, x25, 497 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x8, 0xcf496a1fdc38319e # initialize rs1
slti x13, x8, 1996 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x7, 0x4a5e8ea5b6ae5b39 # initialize rs1
slti x14, x7, -867 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x10, 0xc78d8f612b9536a1 # initialize rs1
slti x15, x10, 1825 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x18, 0xe8985bef5881562b # initialize rs1
slti x16, x18, -302 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x29, 0x4c744347afcdfa3a # initialize rs1
slti x17, x29, -1223 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x10, 0xc40462bf9418ddc0 # initialize rs1
slti x18, x10, -1983 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x18, 0x7240067294d8973d # initialize rs1
slti x19, x18, -310 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x11, 0x0b151d80f4c9c52e # initialize rs1
slti x20, x11, 1587 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x17, 0xd641dba9ea083a1f # initialize rs1
slti x21, x17, 782 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x14, 0xb0b84ad4c4bd5d8b # initialize rs1
slti x22, x14, 819 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x15, 0xbf47244c224664b8 # initialize rs1
slti x23, x15, -2022 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x25, 0xdaf6a808f4458034 # initialize rs1
slti x24, x25, 1122 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x27, 0xc940810b4f9160d5 # initialize rs1
slti x25, x27, -106 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x6, 0x8bed85b579d8b005 # initialize rs1
slti x26, x6, 1214 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x16, 0x3637dd7132acd4ba # initialize rs1
slti x27, x16, -2004 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x6, 0xdaba69d67176d29f # initialize rs1
slti x28, x6, -122 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x22, 0xd0244ce48316dde5 # initialize rs1
slti x29, x22, 920 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x17, 0x5efbf5d6cc3f3815 # initialize rs1
slti x30, x17, -1837 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x24, 0x88e77ac9a7e174e8 # initialize rs1
slti x31, x24, -1299 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x29, 0x0000000000000000 # initialize rs1
slti x15, x29, -879 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x20, 0x0000000000000001 # initialize rs1
slti x12, x20, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x16, 0x0000000000000002 # initialize rs1
slti x23, x16, 1871 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x12, 0x8000000000000000 # initialize rs1
slti x20, x12, 358 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x19, 0x8000000000000001 # initialize rs1
slti x21, x19, -390 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x15, 0x7fffffffffffffff # initialize rs1
slti x2, x15, 233 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x27, 0x7ffffffffffffffe # initialize rs1
slti x24, x27, -861 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x2, 0xffffffffffffffff # initialize rs1
slti x17, x2, -1353 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x26, 0xfffffffffffffffe # initialize rs1
slti x8, x26, -1034 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x7, 0x5bbc887763ae86f2 # initialize rs1
slti x26, x7, -981 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x1, x11, 1145 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x5, 0x5555555555555555 # initialize rs1
slti x14, x5, -1752 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x15, 0x00000000ffffffff # initialize rs1
slti x19, x15, 1856 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x11, 0x00000000fffffffe # initialize rs1
slti x16, x11, 1097 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x29, 0x0000000100000000 # initialize rs1
slti x8, x29, 1679 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x6, 0x0000000100000001 # initialize rs1
slti x2, x6, -177 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 632)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000000 # initialize rs1
slti x21, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 640)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000000 # initialize rs1
slti x27, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 648)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000000 # initialize rs1
slti x16, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 656)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000000 # initialize rs1
slti x27, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 664)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000000000000 # initialize rs1
slti x12, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 672)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
slti x21, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
slti x21, x9, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 688)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
slti x19, x21, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 696)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
slti x12, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 704)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
slti x31, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 712)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
slti x21, x30, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 720)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
slti x23, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 728)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000000 # initialize rs1
slti x18, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 736)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
slti x2, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 744)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000000 # initialize rs1
slti x2, x11, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 752)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
slti x8, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 760)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000000 # initialize rs1
slti x2, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 768)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
slti x25, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 776)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000000 # initialize rs1
slti x30, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 784)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000000 # initialize rs1
slti x6, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 792)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
slti x28, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 800)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000001 # initialize rs1
slti x2, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 808)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000001 # initialize rs1
slti x11, x7, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 816)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000001 # initialize rs1
slti x25, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 824)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
slti x16, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 832)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
slti x28, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 840)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000000000001 # initialize rs1
slti x5, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 848)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000001 # initialize rs1
slti x28, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 856)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000001 # initialize rs1
slti x19, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 864)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000001 # initialize rs1
slti x30, x26, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 872)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
slti x13, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 880)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
slti x2, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 888)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000001 # initialize rs1
slti x18, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 896)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000001 # initialize rs1
slti x8, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 904)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000001 # initialize rs1
slti x12, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 912)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
slti x27, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 920)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
slti x20, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 928)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
slti x19, x16, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 936)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000001 # initialize rs1
slti x19, x6, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 944)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000001 # initialize rs1
slti x20, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 952)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
slti x22, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 960)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
slti x23, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 968)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
slti x10, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 976)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
slti x5, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 984)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000002 # initialize rs1
slti x29, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 992)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000002 # initialize rs1
slti x22, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1000)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000002 # initialize rs1
slti x19, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1008)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
slti x30, x26, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1016)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000002 # initialize rs1
slti x28, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1024)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
slti x9, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1032)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000002 # initialize rs1
slti x2, x26, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1040)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000002 # initialize rs1
slti x13, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1048)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000002 # initialize rs1
slti x24, x7, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1056)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
slti x12, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1064)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000002 # initialize rs1
slti x28, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1072)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000002 # initialize rs1
slti x16, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1080)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000002 # initialize rs1
slti x21, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1088)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
slti x11, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1096)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000002 # initialize rs1
slti x17, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1104)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000002 # initialize rs1
slti x14, x5, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1112)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
slti x5, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1120)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000000 # initialize rs1
slti x22, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1128)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
slti x9, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1136)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000000 # initialize rs1
slti x2, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1144)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
slti x11, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1152)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
slti x18, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1160)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
slti x22, x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1168)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000000 # initialize rs1
slti x9, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1176)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
slti x10, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1184)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000000 # initialize rs1
slti x25, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1192)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000000 # initialize rs1
slti x30, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1200)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
slti x1, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1208)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000000 # initialize rs1
slti x18, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1216)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000000 # initialize rs1
slti x17, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1224)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
slti x12, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
slti x11, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1240)

# Testcase cr_rs1_imm_corners
li x2, 0x8000000000000000 # initialize rs1
slti x19, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1248)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000000 # initialize rs1
slti x26, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1256)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000000 # initialize rs1
slti x5, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1264)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000000 # initialize rs1
slti x7, x16, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1272)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
slti x2, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1280)

# Testcase cr_rs1_imm_corners
li x28, 0x8000000000000001 # initialize rs1
slti x3, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1288)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000001 # initialize rs1
slti x1, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1296)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
slti x1, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1304)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000001 # initialize rs1
slti x15, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1312)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
slti x3, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1320)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000001 # initialize rs1
slti x18, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1328)

# Testcase cr_rs1_imm_corners
li x11, 0x8000000000000001 # initialize rs1
slti x29, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1336)

# Testcase cr_rs1_imm_corners
li x17, 0x8000000000000001 # initialize rs1
slti x24, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1344)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000001 # initialize rs1
slti x14, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1352)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
slti x15, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1360)

# Testcase cr_rs1_imm_corners
li x26, 0x8000000000000001 # initialize rs1
slti x8, x26, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1368)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000001 # initialize rs1
slti x26, x3, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1376)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
slti x20, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1384)

# Testcase cr_rs1_imm_corners
li x15, 0x8000000000000001 # initialize rs1
slti x13, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1392)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000001 # initialize rs1
slti x3, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1400)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000001 # initialize rs1
slti x30, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1408)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
slti x16, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1416)

# Testcase cr_rs1_imm_corners
li x8, 0x8000000000000001 # initialize rs1
slti x9, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1424)

# Testcase cr_rs1_imm_corners
li x10, 0x8000000000000001 # initialize rs1
slti x22, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1432)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
slti x6, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1440)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
slti x12, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1448)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
slti x20, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1456)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffffffffffff # initialize rs1
slti x19, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1464)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffffffffffff # initialize rs1
slti x13, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1472)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffffffffffff # initialize rs1
slti x14, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1480)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
slti x26, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1488)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
slti x22, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1496)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
slti x25, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1504)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
slti x16, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1512)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffffffffffff # initialize rs1
slti x16, x30, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1520)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffffffffffff # initialize rs1
slti x28, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1528)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffffffffffff # initialize rs1
slti x7, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1536)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffffffffffff # initialize rs1
slti x3, x14, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1544)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffffffffffff # initialize rs1
slti x20, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1552)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
slti x16, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1560)

# Testcase cr_rs1_imm_corners
li x28, 0x7fffffffffffffff # initialize rs1
slti x19, x28, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1568)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
slti x18, x10, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1576)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffffffffffff # initialize rs1
slti x14, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1584)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
slti x7, x18, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1592)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
slti x15, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1600)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffffffffffe # initialize rs1
slti x6, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1608)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
slti x23, x20, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1616)

# Testcase cr_rs1_imm_corners
li x18, 0x7ffffffffffffffe # initialize rs1
slti x21, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1624)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffffffffffe # initialize rs1
slti x5, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1632)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
slti x20, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1640)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffffffffffe # initialize rs1
slti x7, x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1648)

# Testcase cr_rs1_imm_corners
li x31, 0x7ffffffffffffffe # initialize rs1
slti x11, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1656)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffffffffffe # initialize rs1
slti x21, x8, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1664)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffffffffffe # initialize rs1
slti x24, x12, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1672)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffffffffffe # initialize rs1
slti x8, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1680)

# Testcase cr_rs1_imm_corners
li x21, 0x7ffffffffffffffe # initialize rs1
slti x31, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1688)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffffffffffe # initialize rs1
slti x21, x20, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
slti x20, x24, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1704)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffffffffffe # initialize rs1
slti x1, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1712)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffffffffffe # initialize rs1
slti x25, x9, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1720)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffffffffffe # initialize rs1
slti x2, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1728)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
slti x28, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1736)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffffffffffe # initialize rs1
slti x7, x13, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1744)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffffffffffe # initialize rs1
slti x5, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1752)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffffffffffff # initialize rs1
slti x21, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1760)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffffffffffff # initialize rs1
slti x8, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1768)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffffffffffff # initialize rs1
slti x11, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1776)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffffffffffff # initialize rs1
slti x19, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1784)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
slti x27, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x24, 0xffffffffffffffff # initialize rs1
slti x18, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 0)

# Testcase cr_rs1_imm_corners
li x15, 0xffffffffffffffff # initialize rs1
slti x23, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 8)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
slti x13, x1, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 16)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
slti x27, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 24)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffffffffffff # initialize rs1
slti x7, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 32)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffffffffffff # initialize rs1
slti x10, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 40)

# Testcase cr_rs1_imm_corners
li x23, 0xffffffffffffffff # initialize rs1
slti x3, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 48)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffffffffffff # initialize rs1
slti x22, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 56)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffffffffffff # initialize rs1
slti x6, x11, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 64)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffffffffffff # initialize rs1
slti x2, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffffffffffff # initialize rs1
slti x28, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 80)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffffffffffff # initialize rs1
slti x23, x19, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 88)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
slti x6, x10, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 96)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffffffffffff # initialize rs1
slti x14, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 104)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
slti x10, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 112)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffffffffffe # initialize rs1
slti x27, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 120)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffffffffffe # initialize rs1
slti x20, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 128)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffffffffffe # initialize rs1
slti x25, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 136)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
slti x27, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 144)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
slti x30, x16, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 152)

# Testcase cr_rs1_imm_corners
li x29, 0xfffffffffffffffe # initialize rs1
slti x2, x29, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 160)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
slti x24, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 168)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
slti x12, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffffffffffe # initialize rs1
slti x5, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 184)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffffffffffe # initialize rs1
slti x8, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 192)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
slti x14, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 200)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
slti x31, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 208)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
slti x19, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 216)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffffffffffe # initialize rs1
slti x11, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 224)

# Testcase cr_rs1_imm_corners
li x18, 0xfffffffffffffffe # initialize rs1
slti x8, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 232)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffffffffffe # initialize rs1
slti x30, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 240)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffffffffffe # initialize rs1
slti x8, x14, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 248)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffffffffffe # initialize rs1
slti x5, x10, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 256)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
slti x15, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 264)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffffffffffe # initialize rs1
slti x9, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 272)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc887763ae86f2 # initialize rs1
slti x17, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 280)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
slti x14, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 288)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
slti x17, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 296)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc887763ae86f2 # initialize rs1
slti x5, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 304)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc887763ae86f2 # initialize rs1
slti x19, x29, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 312)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc887763ae86f2 # initialize rs1
slti x30, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 320)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
slti x17, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 328)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc887763ae86f2 # initialize rs1
slti x31, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 336)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc887763ae86f2 # initialize rs1
slti x23, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 344)

# Testcase cr_rs1_imm_corners
li x27, 0x5bbc887763ae86f2 # initialize rs1
slti x14, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
slti x18, x1, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 360)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc887763ae86f2 # initialize rs1
slti x17, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 368)

# Testcase cr_rs1_imm_corners
li x5, 0x5bbc887763ae86f2 # initialize rs1
slti x13, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 376)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc887763ae86f2 # initialize rs1
slti x27, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 384)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc887763ae86f2 # initialize rs1
slti x15, x8, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 392)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc887763ae86f2 # initialize rs1
slti x14, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 400)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc887763ae86f2 # initialize rs1
slti x12, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 408)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc887763ae86f2 # initialize rs1
slti x24, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 416)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
slti x5, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 424)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
slti x17, x6, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 432)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x20, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 440)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x16, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 448)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x3, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 456)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x20, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 464)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x30, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 472)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x2, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 480)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x12, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 488)

# Testcase cr_rs1_imm_corners
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x30, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x5, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 504)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x6, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 512)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x12, x17, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 520)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x18, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 528)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x16, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 536)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x30, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 544)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x23, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 552)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x21, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 560)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x2, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 568)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x15, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 576)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x9, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaaaaaaaaaa # initialize rs1
slti x14, x29, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 592)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
slti x3, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 600)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
slti x28, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 608)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
slti x9, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 616)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
slti x30, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 624)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
slti x19, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 632)

# Testcase cr_rs1_imm_corners
li x20, 0x5555555555555555 # initialize rs1
slti x10, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 640)

# Testcase cr_rs1_imm_corners
li x17, 0x5555555555555555 # initialize rs1
slti x19, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 648)

# Testcase cr_rs1_imm_corners
li x6, 0x5555555555555555 # initialize rs1
slti x20, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cr_rs1_imm_corners
li x29, 0x5555555555555555 # initialize rs1
slti x19, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cr_rs1_imm_corners
li x1, 0x5555555555555555 # initialize rs1
slti x29, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 672)

# Testcase cr_rs1_imm_corners
li x28, 0x5555555555555555 # initialize rs1
slti x23, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 680)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
slti x17, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 688)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
slti x29, x9, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 696)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
slti x28, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 704)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
slti x14, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 712)

# Testcase cr_rs1_imm_corners
li x21, 0x5555555555555555 # initialize rs1
slti x25, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 720)

# Testcase cr_rs1_imm_corners
li x21, 0x5555555555555555 # initialize rs1
slti x7, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 728)

# Testcase cr_rs1_imm_corners
li x27, 0x5555555555555555 # initialize rs1
slti x6, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 736)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
slti x2, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 744)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
slti x17, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 752)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000ffffffff # initialize rs1
slti x29, x10, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 760)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000ffffffff # initialize rs1
slti x23, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 768)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
slti x21, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 776)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000ffffffff # initialize rs1
slti x29, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 784)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000ffffffff # initialize rs1
slti x7, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 792)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
slti x17, x15, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 800)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
slti x13, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 808)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000ffffffff # initialize rs1
slti x20, x5, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 816)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000ffffffff # initialize rs1
slti x12, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 824)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
slti x25, x24, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 832)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000ffffffff # initialize rs1
slti x17, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 840)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000ffffffff # initialize rs1
slti x17, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 848)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000ffffffff # initialize rs1
slti x31, x14, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 856)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000ffffffff # initialize rs1
slti x13, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000ffffffff # initialize rs1
slti x1, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 872)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000ffffffff # initialize rs1
slti x22, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 880)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
slti x23, x1, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 888)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000ffffffff # initialize rs1
slti x21, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 896)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000ffffffff # initialize rs1
slti x2, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000ffffffff # initialize rs1
slti x14, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 912)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000fffffffe # initialize rs1
slti x6, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 920)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
slti x5, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 928)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
slti x20, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 936)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000fffffffe # initialize rs1
slti x15, x8, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 944)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000fffffffe # initialize rs1
slti x3, x14, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 952)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
slti x1, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 960)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000fffffffe # initialize rs1
slti x11, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 968)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000fffffffe # initialize rs1
slti x12, x28, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 976)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000fffffffe # initialize rs1
slti x27, x6, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 984)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000fffffffe # initialize rs1
slti x30, x23, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 992)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000fffffffe # initialize rs1
slti x13, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1000)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
slti x1, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1008)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000fffffffe # initialize rs1
slti x25, x15, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1016)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000fffffffe # initialize rs1
slti x29, x2, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1024)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000fffffffe # initialize rs1
slti x31, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1032)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000fffffffe # initialize rs1
slti x17, x18, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1040)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
slti x31, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1048)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000fffffffe # initialize rs1
slti x13, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1056)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000fffffffe # initialize rs1
slti x8, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1064)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
slti x5, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1072)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000100000000 # initialize rs1
slti x27, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1080)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
slti x15, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1088)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
slti x18, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1096)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
slti x8, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1104)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000000 # initialize rs1
slti x25, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1112)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000100000000 # initialize rs1
slti x10, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1120)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
slti x27, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1128)

# Testcase cr_rs1_imm_corners
li x1, 0x0000000100000000 # initialize rs1
slti x28, x1, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1136)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
slti x17, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1144)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000000 # initialize rs1
slti x18, x26, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1152)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
slti x19, x2, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1160)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000000 # initialize rs1
slti x3, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1168)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000000 # initialize rs1
slti x28, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1176)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
slti x5, x14, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1184)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000100000000 # initialize rs1
slti x15, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1192)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000000 # initialize rs1
slti x5, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1200)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000000 # initialize rs1
slti x25, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1208)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000000 # initialize rs1
slti x30, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
slti x15, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1224)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000000 # initialize rs1
slti x16, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1232)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000001 # initialize rs1
slti x13, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1240)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000100000001 # initialize rs1
slti x8, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1248)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
slti x7, x31, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1256)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
slti x31, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1264)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000100000001 # initialize rs1
slti x25, x10, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1272)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
slti x27, x15, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1280)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
slti x7, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1288)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
slti x31, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1296)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000001 # initialize rs1
slti x13, x28, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1304)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
slti x9, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1312)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000001 # initialize rs1
slti x25, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1320)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
slti x3, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1328)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000001 # initialize rs1
slti x25, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1336)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000001 # initialize rs1
slti x9, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1344)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
slti x23, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1352)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000001 # initialize rs1
slti x17, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1360)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
slti x26, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000001 # initialize rs1
slti x8, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1376)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000001 # initialize rs1
slti x18, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000100000001 # initialize rs1
slti x15, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xd4c86a81cc7e190f # initialize rs1
slti x0, x0, 695 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x8557049a2ac1d821 # initialize rs1
slti x1, x1, 1885 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xc29db1b7924c5777 # initialize rs1
slti x2, x2, -1529 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x008dc759ad5baa0f # initialize rs1
slti x3, x3, 170 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0b3d1a11b1193360 # initialize rs1
slti x4, x4, -1459 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x7720126793c10a52 # initialize rs1
slti x5, x5, 1568 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x29d02b5f82d8c8d7 # initialize rs1
slti x6, x6, 899 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x86282137bd5120d9 # initialize rs1
slti x7, x7, -1298 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x9dc87a88c3e939da # initialize rs1
slti x8, x8, 1935 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x7f61954908ef21ef # initialize rs1
slti x9, x9, -1499 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xbc8d489f505417e9 # initialize rs1
slti x10, x10, -146 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xe111941bcb4b2218 # initialize rs1
slti x11, x11, 324 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x2c7650b1385baae5 # initialize rs1
slti x12, x12, 614 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xaa91b11ffd930721 # initialize rs1
slti x13, x13, 1390 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x3d2ef46934e0fcad # initialize rs1
slti x14, x14, 1719 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xbbe984b5d5410237 # initialize rs1
slti x15, x15, -1894 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xc54dc5f981457884 # initialize rs1
slti x16, x16, 1960 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xfabae76cce93dd27 # initialize rs1
slti x17, x17, -787 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xede493eca9ccf563 # initialize rs1
slti x18, x18, 619 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x1ab25027d5ef41a7 # initialize rs1
slti x19, x19, 1910 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x126c970113e80170 # initialize rs1
slti x20, x20, -1588 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xc7237c6a5cc432c7 # initialize rs1
slti x21, x21, 1691 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x8a403762d6fbcb4b # initialize rs1
slti x22, x22, -859 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x7cf40581c5de74e9 # initialize rs1
slti x23, x23, 1163 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x612016a1ddf7e1fb # initialize rs1
slti x24, x24, 815 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xdf8f4bf53cdc967a # initialize rs1
slti x25, x25, -1592 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3301ef591ba18f61 # initialize rs1
slti x26, x26, 1826 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x1eeffae96ae108c0 # initialize rs1
slti x27, x27, 1510 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x50d333f336117520 # initialize rs1
slti x28, x28, -967 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xf063b86d6ad68017 # initialize rs1
slti x29, x29, 1433 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xb0062ed58c7f9bac # initialize rs1
slti x30, x30, -1859 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x87f0e9bdf8f7dbd7 # initialize rs1
slti x31, x31, 1857 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x22, 0xef3f3b9ddb971ebb # initialize rs1
slti x9, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1656)

# Testcase cp_imm_corners
li x9, 0xf9fa3ab5f15b7740 # initialize rs1
slti x8, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1664)

# Testcase cp_imm_corners
li x31, 0xf3d0cf70aecd202c # initialize rs1
slti x16, x31, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1672)

# Testcase cp_imm_corners
li x21, 0x8e1475990bb70d2d # initialize rs1
slti x27, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1680)

# Testcase cp_imm_corners
li x11, 0x7b6a414c5849be23 # initialize rs1
slti x1, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1688)

# Testcase cp_imm_corners
li x1, 0xb4fb9be6efd22b46 # initialize rs1
slti x23, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1696)

# Testcase cp_imm_corners
li x11, 0x13580a661776f79c # initialize rs1
slti x6, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1704)

# Testcase cp_imm_corners
li x21, 0x2b94968e28fac2d5 # initialize rs1
slti x5, x21, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1712)

# Testcase cp_imm_corners
li x1, 0x7a5a9c3e3ba77543 # initialize rs1
slti x12, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1720)

# Testcase cp_imm_corners
li x29, 0x97170cce5a5593c6 # initialize rs1
slti x20, x29, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1728)

# Testcase cp_imm_corners
li x29, 0x2ec0a55b510bc947 # initialize rs1
slti x21, x29, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1736)

# Testcase cp_imm_corners
li x15, 0x193a6c16e08205bb # initialize rs1
slti x5, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1744)

# Testcase cp_imm_corners
li x26, 0x45e8092372bb3dc4 # initialize rs1
slti x14, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1752)

# Testcase cp_imm_corners
li x9, 0xa7efdd81af23733f # initialize rs1
slti x21, x9, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1760)

# Testcase cp_imm_corners
li x7, 0x9f68064b3a92116a # initialize rs1
slti x8, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1768)

# Testcase cp_imm_corners
li x7, 0xc4f8fe68dc5479ea # initialize rs1
slti x13, x7, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1776)

# Testcase cp_imm_corners
li x31, 0x69787c80b089dd6e # initialize rs1
slti x13, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1784)

# Testcase cp_imm_corners
li x18, 0x6dc2e0ede72275c2 # initialize rs1
slti x9, x18, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x19, 0xb3bf30d9b5738211 # initialize rs1
slti x22, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 0)

# Testcase cp_imm_corners
li x28, 0xb5c0a9f89ec9ec3a # initialize rs1
slti x14, x28, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x21, x23 # perform first operation
slti x29, x8, 526 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x25, x15, x13 # perform first operation
slti x8, x21, 272 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x27, x14 # perform first operation
slti x18, x1, 1615 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x11, x9 # perform first operation
slti x2, x31, 921 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x25, x2 # perform first operation
slti x2, x9, -86 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x8, x30 # perform first operation
slti x30, x22, -1369 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x17, x29 # perform first operation
slti x16, x30, 96 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x14, x25, x13 # perform first operation
slti x14, x23, -1831 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x9, x5, x6 # perform first operation
slti x9, x21, 692 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x7, x18, x12 # perform first operation
slti x18, x20, 229 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x8, x24 # perform first operation
slti x24, x21, 696 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x19, x20, x31 # perform first operation
slti x9, x11, -61 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-sraw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xff1b82b9684d7683 # initialize rs1
li x16, 0xf1d41c889ebebacf # initialize rs2
sraw x23, x0, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x4e452c1af4f4572b # initialize rs1
li x9, 0x4b9a1fb85edd70da # initialize rs2
sraw x13, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x72c3de325bbc8169 # initialize rs1
li x9, 0xa9957dc84fe65e68 # initialize rs2
sraw x12, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xc9c2ee5812622e7f # initialize rs1
li x11, 0x8f13ad3c6000cb15 # initialize rs2
sraw x10, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x43f1b45ec9f90b2c # initialize rs1
li x19, 0x4a1ebefdf11943bd # initialize rs2
sraw x27, x4, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8ca34bd6aa4f9db0 # initialize rs1
li x12, 0xaaf78be0db6500f3 # initialize rs2
sraw x17, x5, x12 # perform operation
RVTEST_SIGUPD(x6, x0, x17, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xdfb90359576c88b3 # initialize rs1
li x24, 0x61fb29f10d2d35b2 # initialize rs2
sraw x9, x6, x24 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa04f5f2741beda4b # initialize rs1
li x3, 0x1c2107f096d8ad29 # initialize rs2
sraw x27, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x9a15025b5b73dbb1 # initialize rs1
li x14, 0xdc3b3ad746157aff # initialize rs2
sraw x7, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x97f9796552d8e632 # initialize rs1
li x8, 0xf0907997f2f8ae1a # initialize rs2
sraw x10, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xcdaabfa6dc05a3df # initialize rs1
li x12, 0x91a4cbab7fb00753 # initialize rs2
sraw x14, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x658d934d27efc5eb # initialize rs1
li x27, 0xe4e3bae4ad6393fd # initialize rs2
sraw x13, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x1a3aee25186cade7 # initialize rs1
li x26, 0x3885c1abeb4f05a6 # initialize rs2
sraw x29, x12, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa852fe89d06dc0e7 # initialize rs1
li x5, 0x8c0ebdba33ee001a # initialize rs2
sraw x17, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x01abce2177fa51ad # initialize rs1
li x11, 0x8e804cde476ff17f # initialize rs2
sraw x8, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x8be9b2933700b32a # initialize rs1
li x29, 0x1ad772e76f928444 # initialize rs2
sraw x25, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xb3aac4bfe9e36919 # initialize rs1
li x19, 0xbe632b0fd0076cc9 # initialize rs2
sraw x11, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x420a78689fd8f404 # initialize rs1
li x29, 0x88d10ef83f0043c0 # initialize rs2
sraw x7, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xda127866c4c74f76 # initialize rs1
li x10, 0xbbb682c26820932a # initialize rs2
sraw x21, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x15d6558bd6cfc25e # initialize rs1
li x20, 0x45a4ae9d47364657 # initialize rs2
sraw x1, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xadadf34111afb249 # initialize rs1
li x27, 0x04b902ba61cbf2b1 # initialize rs2
sraw x29, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xdc77663258438811 # initialize rs1
li x25, 0xc9ab43dccc3d5be3 # initialize rs2
sraw x24, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x7c3fd1e4d36ce872 # initialize rs1
li x3, 0x40197ec9d98c93da # initialize rs2
sraw x16, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xab6f80e41b895435 # initialize rs1
li x24, 0x5ca6dbb7d46a9c57 # initialize rs2
sraw x21, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x6790604d620c29c6 # initialize rs1
li x21, 0xefa16419a0763033 # initialize rs2
sraw x18, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xa13cea18d3b7e09d # initialize rs1
li x19, 0x923a6c09748e97a2 # initialize rs2
sraw x14, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x0873ed2abcfe1120 # initialize rs1
li x19, 0x52e91531894234db # initialize rs2
sraw x10, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe4762ae1f59a8800 # initialize rs1
li x20, 0x2761fcf74e619c67 # initialize rs2
sraw x1, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xc92fe56c24673511 # initialize rs1
li x31, 0xf01923a331a3b537 # initialize rs2
sraw x5, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x05433d6993463f6b # initialize rs1
li x24, 0xef263fc1adfdd1f7 # initialize rs2
sraw x14, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xf43ae6d0cca3b170 # initialize rs1
li x2, 0x4727303c3c7aba98 # initialize rs2
sraw x24, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xe8dfcd9018b4a7af # initialize rs1
li x8, 0x5ae4ee040145c21e # initialize rs2
sraw x11, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x14, 0x1ae9af77de0ee2c1 # initialize rs1
li x0, 0x53d0d24edc6de6bd # initialize rs2
sraw x21, x14, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x6, 0x0b328464315b69d3 # initialize rs1
li x1, 0x1238cf8823848b61 # initialize rs2
sraw x30, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x3, 0x860b5a0d02295d9b # initialize rs1
li x2, 0xfcefc43522696ed7 # initialize rs2
sraw x11, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x8, 0x795f8b1791d481ca # initialize rs1
li x3, 0x642e634c3a675dea # initialize rs2
sraw x6, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x31, 0x0c9de40cfaac5777 # initialize rs1
li x4, 0x6f898ba2eeaad385 # initialize rs2
sraw x23, x31, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0x02a951a11a466cf4 # initialize rs1
li x5, 0xb98eb123c59a9bcf # initialize rs2
sraw x8, x22, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x8, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x6668ac5e8587cc50 # initialize rs1
li x6, 0x3ea30960b3e4db41 # initialize rs2
sraw x25, x4, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x25, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0xcfb8f280bb63f0d2 # initialize rs1
li x7, 0x80035787043488a9 # initialize rs2
sraw x31, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x15, 0x9c35c16f3902454e # initialize rs1
li x8, 0x971b887f225e5d1f # initialize rs2
sraw x28, x15, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x26, 0x0ce451971518f423 # initialize rs1
li x9, 0xf49f2aa2d8feb00c # initialize rs2
sraw x20, x26, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x27, 0xb6487ba9397e746c # initialize rs1
li x10, 0xe3a0d82fcd241b85 # initialize rs2
sraw x3, x27, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x30, 0xc39dad7aca84158f # initialize rs1
li x11, 0xf76549ae5ca9bfe5 # initialize rs2
sraw x18, x30, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x14, 0x1a15b4ff7b30049c # initialize rs1
li x12, 0x93b909f9df505a29 # initialize rs2
sraw x25, x14, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x30, 0x212a91fbbd403d9d # initialize rs1
li x13, 0xa86b49d95282c134 # initialize rs2
sraw x9, x30, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x7, 0x40abe83e85194f1b # initialize rs1
li x14, 0x7c102d3aea3a114c # initialize rs2
sraw x24, x7, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x22, 0x12816981d6504bdf # initialize rs1
li x15, 0xb7d621f811a641fe # initialize rs2
sraw x11, x22, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x28, 0xc955370dfeb1e3a6 # initialize rs1
li x16, 0x62a5781fb9f11b1c # initialize rs2
sraw x7, x28, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x22, 0x27888f7c7171cc32 # initialize rs1
li x17, 0xdae572608bb28ec0 # initialize rs2
sraw x13, x22, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x27, 0x44488ca6b22bb842 # initialize rs1
li x18, 0x7ad312c97a484075 # initialize rs2
sraw x17, x27, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x11, 0x44fb3c6e5e647844 # initialize rs1
li x19, 0xdbe6c03f3856e1ea # initialize rs2
sraw x22, x11, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x15, 0x7dd1ae4e1f4bfd82 # initialize rs1
li x20, 0xa7648616592a60bd # initialize rs2
sraw x25, x15, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x26, 0xff09fb9e2a2ff599 # initialize rs1
li x21, 0xa5a69d603c4c08d4 # initialize rs2
sraw x14, x26, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x10, 0x158d55d68f48f055 # initialize rs1
li x22, 0x1dbf1535bb765270 # initialize rs2
sraw x2, x10, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x27, 0xe72df9695c6358a7 # initialize rs1
li x23, 0x4107c442d397e5d4 # initialize rs2
sraw x12, x27, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x31, 0x1d47004b658151a5 # initialize rs1
li x24, 0xa6066d18f50a8b6b # initialize rs2
sraw x14, x31, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x19, 0x304d00df7a26b052 # initialize rs1
li x25, 0xecf3d8ed17e0b3f6 # initialize rs2
sraw x8, x19, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x8, 0xc7e92dd63cfaa023 # initialize rs1
li x26, 0xf62b8a979d761d48 # initialize rs2
sraw x3, x8, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x30, 0xedd7ef2fab35dac6 # initialize rs1
li x27, 0x7c291009e1170fb3 # initialize rs2
sraw x3, x30, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x16, 0xd3acc9121db3d710 # initialize rs1
li x28, 0x36b368a7f64f41d4 # initialize rs2
sraw x23, x16, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x17, 0x459c34ecf9d32868 # initialize rs1
li x29, 0x9ee0af80106191dc # initialize rs2
sraw x11, x17, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x3, 0x795535a211c9823d # initialize rs1
li x30, 0x9ecae5d32dfc59d6 # initialize rs2
sraw x23, x3, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x3, 0x7e95f530b5956d05 # initialize rs1
li x31, 0xcf06c6419ca667c9 # initialize rs2
sraw x7, x3, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 504)

# Testcase cp_rd (Test destination rd = x0)
li x23, 0x098ff948df4c16f9 # initialize rs1
li x24, 0xaac1130be653fd3f # initialize rs2
sraw x0, x23, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x7, 0x2e83e579fa9ae659 # initialize rs1
li x22, 0xfc933e468de9715b # initialize rs2
sraw x1, x7, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x1, 0xb705713372e514a1 # initialize rs1
li x14, 0x43889e9d67f6a90c # initialize rs2
sraw x2, x1, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x24, 0xe1325f0395d95120 # initialize rs1
li x28, 0x1846346e522a1741 # initialize rs2
sraw x3, x24, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
li x31, 0x08c56d1218e26918 # initialize rs1
li x30, 0x19ffb98e4005953b # initialize rs2
sraw x4, x31, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0xc4c192c0f70d5fc8 # initialize rs1
li x24, 0x9e203485ff733d2e # initialize rs2
sraw x5, x28, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x25, 0xc6b4a815d4a5166f # initialize rs1
li x14, 0x35b91196e8172eb0 # initialize rs2
sraw x6, x25, x14 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0xd699706068dfdf26 # initialize rs1
li x26, 0x89d7d8c0eb256cd8 # initialize rs2
sraw x7, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x3, 0xf785019d2a07a5fc # initialize rs1
li x7, 0xe1d466cee96848b7 # initialize rs2
sraw x8, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x06670c3e300a7d23 # initialize rs1
li x25, 0x71d9ec8f591ce304 # initialize rs2
sraw x9, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x12, 0x6cf46c7ad4123af4 # initialize rs1
li x6, 0x4b2665bf548cf6cf # initialize rs2
sraw x10, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x31, 0xd96d43875c210064 # initialize rs1
li x17, 0x6be61422563f2b97 # initialize rs2
sraw x11, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x21, 0x530ca385620e35b5 # initialize rs1
li x31, 0x4263e9b658bc0714 # initialize rs2
sraw x12, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x8, 0x4511c567831d499a # initialize rs1
li x17, 0x0521dd6f9286efbc # initialize rs2
sraw x13, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x21, 0xed38dcf1e35a5627 # initialize rs1
li x5, 0x4d38f019df978795 # initialize rs2
sraw x14, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x1, 0x890714b7876c1363 # initialize rs1
li x23, 0x0fd2a556d779f77c # initialize rs2
sraw x15, x1, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x31, 0x3bbccd382f9b7c9e # initialize rs1
li x20, 0x10eb49e77e05520d # initialize rs2
sraw x16, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x27, 0x2b69523b262165d2 # initialize rs1
li x19, 0xa81a7adb9ad7fa57 # initialize rs2
sraw x17, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x23, 0x818251054a958069 # initialize rs1
li x18, 0x73f05415ccf9b629 # initialize rs2
sraw x18, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x5, 0x9b845a4bb764f110 # initialize rs1
li x3, 0x84ca42caa0c56fe7 # initialize rs2
sraw x19, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x27, 0x64a0705fa49d4653 # initialize rs1
li x22, 0xe561f4aa26b14747 # initialize rs2
sraw x20, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x18, 0x28a913823e472ea3 # initialize rs1
li x23, 0x8ee04f101b566a4b # initialize rs2
sraw x21, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x1, 0x0e69bf4e8b413fdf # initialize rs1
li x10, 0x364e9fcd94807224 # initialize rs2
sraw x22, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x12, 0x9ae003de9dee7d83 # initialize rs1
li x7, 0x5b66bb9693ba57a2 # initialize rs2
sraw x23, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x25, 0x6ae785c36eb5eb70 # initialize rs1
li x29, 0xdb676056178c5904 # initialize rs2
sraw x24, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0xe117d2b3508a0e75 # initialize rs1
li x17, 0x038653d24666c148 # initialize rs2
sraw x25, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x30, 0x275f4421f58849d9 # initialize rs1
li x15, 0x5a1f44df071a723e # initialize rs2
sraw x26, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x29, 0x14cc8906543072e3 # initialize rs1
li x31, 0x50ea69723df05854 # initialize rs2
sraw x27, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x25, 0xc69e412be24806e6 # initialize rs1
li x16, 0xc403d44d3f55433c # initialize rs2
sraw x28, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x16, 0x7baf0a1d0adf2f14 # initialize rs1
li x26, 0x938a0a84646257be # initialize rs2
sraw x29, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x3, 0x6a6b7b1161c6324c # initialize rs1
li x22, 0x61d0130ecddb754d # initialize rs2
sraw x30, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x31, 0xd736ed37fdf21f62 # initialize rs1
li x6, 0x516e59fc56b54eb0 # initialize rs2
sraw x31, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x5, 0x0000000000000000 # initialize rs1
li x2, 0xf754d1302882d759 # initialize rs2
sraw x18, x5, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x14, 0x0000000000000001 # initialize rs1
li x5, 0x82e82506b7a8716d # initialize rs2
sraw x24, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x21, 0x0000000000000002 # initialize rs1
li x2, 0x352c06b1f8e7f921 # initialize rs2
sraw x25, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x27, 0x8000000000000000 # initialize rs1
li x25, 0x560b0e909e49554e # initialize rs2
sraw x6, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x5, 0x8000000000000001 # initialize rs1
li x16, 0x5410481b0552f70c # initialize rs2
sraw x25, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x27, 0x7fffffffffffffff # initialize rs1
li x23, 0xbab825502ba371e0 # initialize rs2
sraw x21, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x27, 0x7ffffffffffffffe # initialize rs1
li x15, 0x4e9ea0e4a726aae4 # initialize rs2
sraw x14, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x9, 0xffffffffffffffff # initialize rs1
li x1, 0x3e67fc1f8627faf1 # initialize rs2
sraw x19, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x12, 0xfffffffffffffffe # initialize rs1
li x29, 0xe9279271f4c437c3 # initialize rs2
sraw x31, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0x487c3e46d5d2097b # initialize rs2
sraw x20, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0x8698b5af95ba981a # initialize rs2
sraw x1, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x15, 0x5555555555555555 # initialize rs1
li x14, 0xf4d1f30e7781c16b # initialize rs2
sraw x31, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x8, 0x00000000ffffffff # initialize rs1
li x24, 0x52d64c699470a4a7 # initialize rs2
sraw x23, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x12, 0x00000000fffffffe # initialize rs1
li x7, 0xbaee37fc4808bb5e # initialize rs2
sraw x3, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x30, 0x0000000100000000 # initialize rs1
li x15, 0xab6dc3b2bfe5e2aa # initialize rs2
sraw x13, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x2, 0x0000000100000001 # initialize rs1
li x12, 0x813d76ced1480e15 # initialize rs2
sraw x26, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x1, 0x44c42d17afff07ad # initialize rs1
li x12, 0x0000000000000000 # initialize rs2
sraw x14, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x7, 0x132e95db88b1019b # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
sraw x2, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x14, 0x43ecdd720238a99d # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sraw x31, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x30, 0xcf3e9ff272016574 # initialize rs1
li x16, 0x8000000000000000 # initialize rs2
sraw x27, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x24, 0x13ac399d72e27c2f # initialize rs1
li x28, 0x8000000000000001 # initialize rs2
sraw x25, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x18, 0x4aa3392c09f5c102 # initialize rs1
li x8, 0x7fffffffffffffff # initialize rs2
sraw x27, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x25, 0x58c4880dad5584c7 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
sraw x22, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x29, 0x89f12dda00edb370 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
sraw x26, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x2, 0xab17cbf3f1bdb498 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
sraw x28, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x1, 0x58420ecc3524bcb0 # initialize rs1
li x12, 0x5bbc887763ae86f2 # initialize rs2
sraw x2, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x22, 0x1f176ada0a10f900 # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x15, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x12, 0x8132d9224821ccc0 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
sraw x27, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x2, 0x7087aefcfb772d6b # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
sraw x28, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x25, 0xadc54b664dc37c70 # initialize rs1
li x27, 0x00000000fffffffe # initialize rs2
sraw x28, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x26, 0x480fca173233bade # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
sraw x13, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x30, 0x4cae2b8d1ace9325 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
sraw x27, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x29, 0x0000000000000000 # initialize rs1
li x1, 0x0000000000000000 # initialize rs2
sraw x18, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x17, 0x0000000000000000 # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
sraw x21, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x12, 0x0000000000000000 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
sraw x16, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x22, 0x0000000000000000 # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
sraw x10, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x21, 0x0000000000000000 # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
sraw x10, x21, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x13, 0x0000000000000000 # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
sraw x31, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x1, 0x0000000000000000 # initialize rs1
li x14, 0x7ffffffffffffffe # initialize rs2
sraw x21, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x24, 0xffffffffffffffff # initialize rs2
sraw x26, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x14, 0x0000000000000000 # initialize rs1
li x30, 0xfffffffffffffffe # initialize rs2
sraw x8, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x13, 0x0000000000000000 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sraw x9, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x0000000000000000 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x26, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x11, 0x0000000000000000 # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
sraw x7, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x17, 0x0000000000000000 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sraw x22, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x23, 0x0000000000000000 # initialize rs1
li x8, 0x00000000fffffffe # initialize rs2
sraw x11, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x9, 0x0000000000000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sraw x11, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x28, 0x0000000000000000 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
sraw x12, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x2, 0x0000000000000001 # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sraw x27, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x17, 0x0000000000000001 # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
sraw x5, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x31, 0x0000000000000001 # initialize rs1
li x13, 0x0000000000000002 # initialize rs2
sraw x1, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x18, 0x0000000000000001 # initialize rs1
li x30, 0x8000000000000000 # initialize rs2
sraw x15, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x15, 0x0000000000000001 # initialize rs1
li x31, 0x8000000000000001 # initialize rs2
sraw x14, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x1, 0x0000000000000001 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
sraw x21, x1, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x5, 0x0000000000000001 # initialize rs1
li x1, 0x7ffffffffffffffe # initialize rs2
sraw x11, x5, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x27, 0x0000000000000001 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
sraw x30, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x29, 0x0000000000000001 # initialize rs1
li x22, 0xfffffffffffffffe # initialize rs2
sraw x5, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x11, 0x0000000000000001 # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
sraw x15, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x0000000000000001 # initialize rs1
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x26, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x14, 0x0000000000000001 # initialize rs1
li x31, 0x5555555555555555 # initialize rs2
sraw x28, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x24, 0x0000000000000001 # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
sraw x23, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x9, 0x0000000000000001 # initialize rs1
li x29, 0x00000000fffffffe # initialize rs2
sraw x16, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x13, 0x0000000000000001 # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
sraw x27, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x27, 0x0000000000000001 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
sraw x1, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x1, 0x0000000000000002 # initialize rs1
li x20, 0x0000000000000000 # initialize rs2
sraw x12, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x27, 0x0000000000000002 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
sraw x9, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x8, 0x0000000000000002 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
sraw x2, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x11, 0x0000000000000002 # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sraw x6, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x12, 0x0000000000000002 # initialize rs1
li x14, 0x8000000000000001 # initialize rs2
sraw x31, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x28, 0x0000000000000002 # initialize rs1
li x18, 0x7fffffffffffffff # initialize rs2
sraw x9, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x15, 0x0000000000000002 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
sraw x25, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x29, 0x0000000000000002 # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
sraw x20, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000000000002 # initialize rs1
li x19, 0xfffffffffffffffe # initialize rs2
sraw x26, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x7, 0x0000000000000002 # initialize rs1
li x20, 0x5bbc887763ae86f2 # initialize rs2
sraw x16, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0x0000000000000002 # initialize rs1
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x24, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x5, 0x0000000000000002 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sraw x8, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x7, 0x0000000000000002 # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
sraw x2, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x7, 0x0000000000000002 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
sraw x11, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x27, 0x0000000000000002 # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
sraw x28, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x6, 0x0000000000000002 # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
sraw x16, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x31, 0x8000000000000000 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
sraw x22, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x30, 0x8000000000000000 # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sraw x21, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x19, 0x8000000000000000 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
sraw x7, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x11, 0x8000000000000000 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
sraw x28, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x29, 0x8000000000000000 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
sraw x5, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x26, 0x8000000000000000 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
sraw x9, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x16, 0x8000000000000000 # initialize rs1
li x25, 0x7ffffffffffffffe # initialize rs2
sraw x1, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x22, 0x8000000000000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
sraw x27, x22, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x3, 0x8000000000000000 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
sraw x2, x3, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x7, 0x8000000000000000 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sraw x6, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x8000000000000000 # initialize rs1
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x22, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x23, 0x8000000000000000 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
sraw x24, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x16, 0x8000000000000000 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
sraw x2, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x7, 0x8000000000000000 # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
sraw x9, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x29, 0x8000000000000000 # initialize rs1
li x7, 0x0000000100000000 # initialize rs2
sraw x22, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x6, 0x8000000000000000 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
sraw x1, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x6, 0x8000000000000001 # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
sraw x3, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x13, 0x8000000000000001 # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
sraw x26, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x21, 0x8000000000000001 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
sraw x10, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x8, 0x8000000000000001 # initialize rs1
li x31, 0x8000000000000000 # initialize rs2
sraw x16, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x15, 0x8000000000000001 # initialize rs1
li x6, 0x8000000000000001 # initialize rs2
sraw x3, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x27, 0x8000000000000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sraw x15, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x5, 0x8000000000000001 # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sraw x25, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x30, 0x8000000000000001 # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
sraw x6, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x12, 0x8000000000000001 # initialize rs1
li x17, 0xfffffffffffffffe # initialize rs2
sraw x10, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x15, 0x8000000000000001 # initialize rs1
li x6, 0x5bbc887763ae86f2 # initialize rs2
sraw x18, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x8000000000000001 # initialize rs1
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x3, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x29, 0x8000000000000001 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
sraw x30, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x19, 0x8000000000000001 # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
sraw x13, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x5, 0x8000000000000001 # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sraw x19, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x6, 0x8000000000000001 # initialize rs1
li x18, 0x0000000100000000 # initialize rs2
sraw x5, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x9, 0x8000000000000001 # initialize rs1
li x25, 0x0000000100000001 # initialize rs2
sraw x5, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x10, 0x7fffffffffffffff # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
sraw x5, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x31, 0x7fffffffffffffff # initialize rs1
li x12, 0x0000000000000001 # initialize rs2
sraw x13, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x2, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sraw x25, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x18, 0x7fffffffffffffff # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sraw x15, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x23, 0x7fffffffffffffff # initialize rs1
li x15, 0x8000000000000001 # initialize rs2
sraw x13, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x19, 0x7fffffffffffffff # initialize rs1
li x27, 0x7fffffffffffffff # initialize rs2
sraw x7, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x17, 0x7fffffffffffffff # initialize rs1
li x20, 0x7ffffffffffffffe # initialize rs2
sraw x27, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
li x9, 0xffffffffffffffff # initialize rs2
sraw x10, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x16, 0x7fffffffffffffff # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sraw x27, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x7, 0x7fffffffffffffff # initialize rs1
li x14, 0x5bbc887763ae86f2 # initialize rs2
sraw x15, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x6, 0x7fffffffffffffff # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x24, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x10, 0x7fffffffffffffff # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
sraw x21, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x2, 0x7fffffffffffffff # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
sraw x26, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x11, 0x7fffffffffffffff # initialize rs1
li x12, 0x00000000fffffffe # initialize rs2
sraw x16, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x24, 0x7fffffffffffffff # initialize rs1
li x11, 0x0000000100000000 # initialize rs2
sraw x27, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x11, 0x7fffffffffffffff # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sraw x26, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x9, 0x7ffffffffffffffe # initialize rs1
li x29, 0x0000000000000000 # initialize rs2
sraw x5, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x12, 0x7ffffffffffffffe # initialize rs1
li x25, 0x0000000000000001 # initialize rs2
sraw x2, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x6, 0x7ffffffffffffffe # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
sraw x5, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x10, 0x7ffffffffffffffe # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
sraw x5, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x16, 0x7ffffffffffffffe # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sraw x6, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x1, 0x7ffffffffffffffe # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
sraw x28, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x1, 0x7ffffffffffffffe # initialize rs1
li x31, 0x7ffffffffffffffe # initialize rs2
sraw x27, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x30, 0x7ffffffffffffffe # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
sraw x21, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x31, 0x7ffffffffffffffe # initialize rs1
li x24, 0xfffffffffffffffe # initialize rs2
sraw x19, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x17, 0x7ffffffffffffffe # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
sraw x25, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0x7ffffffffffffffe # initialize rs1
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x8, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x8, 0x7ffffffffffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
sraw x22, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x15, 0x7ffffffffffffffe # initialize rs1
li x18, 0x00000000ffffffff # initialize rs2
sraw x5, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x6, 0x7ffffffffffffffe # initialize rs1
li x5, 0x00000000fffffffe # initialize rs2
sraw x26, x6, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x21, 0x7ffffffffffffffe # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
sraw x13, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x15, 0x7ffffffffffffffe # initialize rs1
li x17, 0x0000000100000001 # initialize rs2
sraw x7, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x20, 0xffffffffffffffff # initialize rs1
li x10, 0x0000000000000000 # initialize rs2
sraw x28, x20, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x30, 0xffffffffffffffff # initialize rs1
li x6, 0x0000000000000001 # initialize rs2
sraw x21, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x15, 0xffffffffffffffff # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
sraw x25, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x3, 0xffffffffffffffff # initialize rs1
li x14, 0x8000000000000000 # initialize rs2
sraw x21, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x3, 0xffffffffffffffff # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sraw x16, x3, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x5, 0xffffffffffffffff # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
sraw x18, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0xffffffffffffffff # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
sraw x12, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x20, 0xffffffffffffffff # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
sraw x23, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x19, 0xffffffffffffffff # initialize rs1
li x23, 0xfffffffffffffffe # initialize rs2
sraw x22, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x11, 0xffffffffffffffff # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sraw x23, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0xffffffffffffffff # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x28, x3, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x21, 0xffffffffffffffff # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
sraw x3, x21, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x3, 0xffffffffffffffff # initialize rs1
li x2, 0x00000000ffffffff # initialize rs2
sraw x1, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x5, 0xffffffffffffffff # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
sraw x25, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x15, 0xffffffffffffffff # initialize rs1
li x10, 0x0000000100000000 # initialize rs2
sraw x26, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x23, 0xffffffffffffffff # initialize rs1
li x29, 0x0000000100000001 # initialize rs2
sraw x25, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x5, 0xfffffffffffffffe # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
sraw x7, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x25, 0xfffffffffffffffe # initialize rs1
li x14, 0x0000000000000001 # initialize rs2
sraw x29, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x20, 0xfffffffffffffffe # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
sraw x28, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x1, 0xfffffffffffffffe # initialize rs1
li x9, 0x8000000000000000 # initialize rs2
sraw x13, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x11, 0xfffffffffffffffe # initialize rs1
li x12, 0x8000000000000001 # initialize rs2
sraw x5, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x19, 0xfffffffffffffffe # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
sraw x9, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x22, 0xfffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
sraw x1, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x21, 0xfffffffffffffffe # initialize rs1
li x13, 0xffffffffffffffff # initialize rs2
sraw x17, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x2, 0xfffffffffffffffe # initialize rs1
li x6, 0xfffffffffffffffe # initialize rs2
sraw x8, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x11, 0xfffffffffffffffe # initialize rs1
li x29, 0x5bbc887763ae86f2 # initialize rs2
sraw x21, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x14, 0xfffffffffffffffe # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x3, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x8, 0xfffffffffffffffe # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
sraw x29, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x1, 0xfffffffffffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
sraw x2, x1, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x7, 0xfffffffffffffffe # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
sraw x15, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x27, 0xfffffffffffffffe # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
sraw x2, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x30, 0xfffffffffffffffe # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
sraw x9, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x5, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
sraw x26, x5, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x28, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
sraw x20, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x19, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000000000002 # initialize rs2
sraw x21, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x6, 0x8000000000000000 # initialize rs2
sraw x9, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x26, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x8000000000000001 # initialize rs2
sraw x6, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x31, 0x5bbc887763ae86f2 # initialize rs1
li x9, 0x7fffffffffffffff # initialize rs2
sraw x15, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x17, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
sraw x10, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x23, 0x5bbc887763ae86f2 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
sraw x3, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sraw x28, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x3, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
sraw x12, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x16, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x21, 0x5555555555555555 # initialize rs2
sraw x22, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
sraw x16, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x14, 0x00000000fffffffe # initialize rs2
sraw x9, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x10, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
sraw x27, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x12, 0x5bbc887763ae86f2 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
sraw x14, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x0000000000000000 # initialize rs2
sraw x29, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x0000000000000001 # initialize rs2
sraw x28, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x0000000000000002 # initialize rs2
sraw x19, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x24, 0x8000000000000000 # initialize rs2
sraw x20, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x2, 0x8000000000000001 # initialize rs2
sraw x17, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x7fffffffffffffff # initialize rs2
sraw x26, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
sraw x2, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
sraw x13, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0xfffffffffffffffe # initialize rs2
sraw x22, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x5bbc887763ae86f2 # initialize rs2
sraw x27, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x9, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x5, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sraw x13, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x27, 0x00000000ffffffff # initialize rs2
sraw x7, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
sraw x1, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
sraw x30, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
sraw x6, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x27, 0x5555555555555555 # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
sraw x12, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x12, 0x5555555555555555 # initialize rs1
li x30, 0x0000000000000001 # initialize rs2
sraw x24, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x26, 0x5555555555555555 # initialize rs1
li x2, 0x0000000000000002 # initialize rs2
sraw x25, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x19, 0x5555555555555555 # initialize rs1
li x28, 0x8000000000000000 # initialize rs2
sraw x24, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x2, 0x5555555555555555 # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
sraw x13, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x23, 0x5555555555555555 # initialize rs1
li x19, 0x7fffffffffffffff # initialize rs2
sraw x18, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x3, 0x5555555555555555 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
sraw x2, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x16, 0x5555555555555555 # initialize rs1
li x26, 0xffffffffffffffff # initialize rs2
sraw x11, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x14, 0x5555555555555555 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
sraw x17, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x25, 0x5555555555555555 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
sraw x26, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x3, 0x5555555555555555 # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x2, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x13, 0x5555555555555555 # initialize rs1
li x28, 0x5555555555555555 # initialize rs2
sraw x25, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x21, 0x5555555555555555 # initialize rs1
li x28, 0x00000000ffffffff # initialize rs2
sraw x24, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x28, 0x5555555555555555 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
sraw x11, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x15, 0x5555555555555555 # initialize rs1
li x23, 0x0000000100000000 # initialize rs2
sraw x11, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x19, 0x5555555555555555 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
sraw x29, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x22, 0x00000000ffffffff # initialize rs1
li x3, 0x0000000000000000 # initialize rs2
sraw x27, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x1, 0x00000000ffffffff # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
sraw x25, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x11, 0x00000000ffffffff # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
sraw x25, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x18, 0x00000000ffffffff # initialize rs1
li x19, 0x8000000000000000 # initialize rs2
sraw x8, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x1, 0x00000000ffffffff # initialize rs1
li x29, 0x8000000000000001 # initialize rs2
sraw x11, x1, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x16, 0x00000000ffffffff # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sraw x27, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x12, 0x00000000ffffffff # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
sraw x16, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x26, 0x00000000ffffffff # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
sraw x28, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x31, 0x00000000ffffffff # initialize rs1
li x20, 0xfffffffffffffffe # initialize rs2
sraw x7, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x1, 0x00000000ffffffff # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
sraw x8, x1, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x17, 0x00000000ffffffff # initialize rs1
li x23, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x27, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x22, 0x00000000ffffffff # initialize rs1
li x23, 0x5555555555555555 # initialize rs2
sraw x27, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x1, 0x00000000ffffffff # initialize rs1
li x26, 0x00000000ffffffff # initialize rs2
sraw x9, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x18, 0x00000000ffffffff # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
sraw x17, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x23, 0x00000000ffffffff # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
sraw x27, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x15, 0x00000000ffffffff # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
sraw x11, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x17, 0x00000000fffffffe # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
sraw x5, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x10, 0x00000000fffffffe # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
sraw x16, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x5, 0x00000000fffffffe # initialize rs1
li x6, 0x0000000000000002 # initialize rs2
sraw x16, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x14, 0x00000000fffffffe # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
sraw x7, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x9, 0x00000000fffffffe # initialize rs1
li x8, 0x8000000000000001 # initialize rs2
sraw x30, x9, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x25, 0x00000000fffffffe # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
sraw x20, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x17, 0x00000000fffffffe # initialize rs1
li x23, 0x7ffffffffffffffe # initialize rs2
sraw x14, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x27, 0x00000000fffffffe # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
sraw x15, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x27, 0x00000000fffffffe # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
sraw x23, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x23, 0x00000000fffffffe # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
sraw x10, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x00000000fffffffe # initialize rs1
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x20, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x8, 0x00000000fffffffe # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
sraw x28, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x9, 0x00000000fffffffe # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
sraw x18, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x7, 0x00000000fffffffe # initialize rs1
li x6, 0x00000000fffffffe # initialize rs2
sraw x29, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x20, 0x00000000fffffffe # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
sraw x27, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x23, 0x00000000fffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
sraw x6, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x17, 0x0000000100000000 # initialize rs1
li x9, 0x0000000000000000 # initialize rs2
sraw x11, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x15, 0x0000000100000000 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sraw x13, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x31, 0x0000000100000000 # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
sraw x15, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x11, 0x0000000100000000 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
sraw x12, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x18, 0x0000000100000000 # initialize rs1
li x25, 0x8000000000000001 # initialize rs2
sraw x16, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x5, 0x7fffffffffffffff # initialize rs2
sraw x25, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000000 # initialize rs1
li x21, 0x7ffffffffffffffe # initialize rs2
sraw x29, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x24, 0x0000000100000000 # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
sraw x23, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
sraw x29, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x16, 0x0000000100000000 # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
sraw x13, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x0000000100000000 # initialize rs1
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x3, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x26, 0x0000000100000000 # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
sraw x20, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x10, 0x0000000100000000 # initialize rs1
li x30, 0x00000000ffffffff # initialize rs2
sraw x6, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x23, 0x0000000100000000 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
sraw x3, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x25, 0x0000000100000000 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
sraw x19, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x28, 0x0000000100000000 # initialize rs1
li x11, 0x0000000100000001 # initialize rs2
sraw x5, x28, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x7, 0x0000000100000001 # initialize rs1
li x11, 0x0000000000000000 # initialize rs2
sraw x18, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x8, 0x0000000100000001 # initialize rs1
li x27, 0x0000000000000001 # initialize rs2
sraw x22, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x17, 0x0000000100000001 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
sraw x18, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x17, 0x0000000100000001 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
sraw x10, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x31, 0x0000000100000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
sraw x3, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x29, 0x0000000100000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
sraw x8, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x29, 0x7ffffffffffffffe # initialize rs2
sraw x3, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x25, 0x0000000100000001 # initialize rs1
li x5, 0xffffffffffffffff # initialize rs2
sraw x26, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x15, 0x0000000100000001 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
sraw x7, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x23, 0x0000000100000001 # initialize rs1
li x22, 0x5bbc887763ae86f2 # initialize rs2
sraw x30, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x2, 0x0000000100000001 # initialize rs1
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs2
sraw x25, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x2, 0x0000000100000001 # initialize rs1
li x11, 0x5555555555555555 # initialize rs2
sraw x13, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x14, 0x0000000100000001 # initialize rs1
li x7, 0x00000000ffffffff # initialize rs2
sraw x24, x14, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x22, 0x0000000100000001 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
sraw x27, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x6, 0x0000000100000001 # initialize rs1
li x21, 0x0000000100000000 # initialize rs2
sraw x1, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x6, 0x0000000100000001 # initialize rs1
li x16, 0x0000000100000001 # initialize rs2
sraw x22, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xf7eb20384a1effb4 # initialize rs1
li x0, 0x8e5875737ddeab05 # initialize rs2
sraw x3, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x8bab49d519274414 # initialize rs1
li x1, 0x8e12e84d001ee83d # initialize rs2
sraw x15, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x60bde30be85d5b56 # initialize rs1
li x2, 0xaad757c9ad4dd828 # initialize rs2
sraw x15, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xfebfba016cfca0d2 # initialize rs1
li x3, 0xcc050082066e1de6 # initialize rs2
sraw x14, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x18d00fb1bfe9354d # initialize rs1
li x4, 0x260c34bb1a1c9440 # initialize rs2
sraw x20, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa59320c83ab78705 # initialize rs1
li x5, 0xcf9aecfb12b2fc3c # initialize rs2
sraw x21, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x21, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xd6b44c5aeb5b0638 # initialize rs1
li x6, 0xfbb442403e21d30d # initialize rs2
sraw x16, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x16, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbd37880135b2b457 # initialize rs1
li x7, 0x1a242560ab38fbbf # initialize rs2
sraw x29, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x0cf1b15f84de1402 # initialize rs1
li x8, 0x762f7a818e12020b # initialize rs2
sraw x27, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x14d63129d9639ae2 # initialize rs1
li x9, 0xf156ae54f73b5af4 # initialize rs2
sraw x10, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x03ccb4b33088c7c4 # initialize rs1
li x10, 0x7f2497cd7eadc6a3 # initialize rs2
sraw x24, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x3c043d897a71f729 # initialize rs1
li x11, 0x6760edcf18669d89 # initialize rs2
sraw x29, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xf2c5003edcf57093 # initialize rs1
li x12, 0xfb60e7bdd1bb333d # initialize rs2
sraw x13, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x6418ed136b0dcd77 # initialize rs1
li x13, 0xe1b0d3b6575b3ab8 # initialize rs2
sraw x17, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x5fa2faac9cbfb246 # initialize rs1
li x14, 0xc500a3b33a9ae614 # initialize rs2
sraw x10, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x7139da9b85aa590e # initialize rs1
li x15, 0x84c6572ca0f1b114 # initialize rs2
sraw x23, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x8debca04639f9efc # initialize rs1
li x16, 0x1fdcb99fcbaffc16 # initialize rs2
sraw x27, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xe2f885e2f1750a62 # initialize rs1
li x17, 0x117f2a8264e0ad1e # initialize rs2
sraw x26, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x89ff2f961cab81b5 # initialize rs1
li x18, 0x9d73af812152e491 # initialize rs2
sraw x19, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xe8d8a0fb0198a726 # initialize rs1
li x19, 0xd984b4135babf20b # initialize rs2
sraw x13, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xeac008efe9496b20 # initialize rs1
li x20, 0x1978508dd322cc91 # initialize rs2
sraw x3, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x624939899a0ba965 # initialize rs1
li x21, 0xe53d6de55c6f449a # initialize rs2
sraw x7, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xe8158839728c30d0 # initialize rs1
li x22, 0x0f963b5ecf962167 # initialize rs2
sraw x2, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x3f349cff55fe3ae2 # initialize rs1
li x23, 0xed06394f2f6a3b03 # initialize rs2
sraw x8, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x95801ac79ace77e7 # initialize rs1
li x24, 0x24f5be70ecae5382 # initialize rs2
sraw x10, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x4067d27f7911d263 # initialize rs1
li x25, 0xe140c3b01d61996a # initialize rs2
sraw x2, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x8b3cde67480e9e68 # initialize rs1
li x26, 0x1667d5bf20458e1a # initialize rs2
sraw x9, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x0480e8473a77c139 # initialize rs1
li x27, 0x8d01ffaf831956b0 # initialize rs2
sraw x21, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x4600c5de8e11572c # initialize rs1
li x28, 0xb4114c404d996b44 # initialize rs2
sraw x19, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xbcc6c29d183a846f # initialize rs1
li x29, 0x44ad89efc7de9eab # initialize rs2
sraw x2, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xd3721cc60f8a2870 # initialize rs1
li x30, 0x29f8af83b2f2f809 # initialize rs2
sraw x31, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xd07e9b91506ceb2f # initialize rs1
li x31, 0xb810c0c149c126e6 # initialize rs2
sraw x11, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xc38b043b1a7db77a # initialize rs1
li x20, 0xcd7f1811c8e0f692 # initialize rs2
sraw x0, x0, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xdb7cf1d8be1744fb # initialize rs1
li x9, 0x88497aabea0c3870 # initialize rs2
sraw x1, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xbf93058aad9f1b93 # initialize rs1
li x15, 0xe0c95a637e5ec89d # initialize rs2
sraw x2, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x0dffc26f9aa16cc4 # initialize rs1
li x6, 0xad79a7956482af29 # initialize rs2
sraw x3, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5240128b574fc3e8 # initialize rs1
li x2, 0xc9a5adc73fb32955 # initialize rs2
sraw x4, x4, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x94181d94810c47b0 # initialize rs1
li x27, 0x04c4f766f954eb58 # initialize rs2
sraw x5, x5, x27 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xd2f7af470bae7c3a # initialize rs1
li x11, 0x72a4f45172cd2f9a # initialize rs2
sraw x6, x6, x11 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x4932ab1463c5f27d # initialize rs1
li x25, 0x6c7dbf67090bfdfc # initialize rs2
sraw x7, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xff69a3eeabfa0a79 # initialize rs1
li x14, 0x603c7512e28e66db # initialize rs2
sraw x8, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x29e62e54c0ae9601 # initialize rs1
li x5, 0xe048b03470feb205 # initialize rs2
sraw x9, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x65948e43d219b2a5 # initialize rs1
li x16, 0x7459b240572f03e2 # initialize rs2
sraw x10, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xccae03a9f6f50af1 # initialize rs1
li x26, 0x195cd730fca79207 # initialize rs2
sraw x11, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x07ded17b56e3ce6e # initialize rs1
li x16, 0xd2ffed2babe64e2b # initialize rs2
sraw x12, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x40e03071f4f311b4 # initialize rs1
li x18, 0x407580d749ae7ea3 # initialize rs2
sraw x13, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x4ebbbdfc8daaa2ca # initialize rs1
li x1, 0x94291d827716a9d3 # initialize rs2
sraw x14, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x0c8d1aad947d8175 # initialize rs1
li x15, 0xd6563fb0995f0626 # initialize rs2
sraw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x4e9b473191c794aa # initialize rs1
li x11, 0xefe8cf13cc2c61da # initialize rs2
sraw x16, x16, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x4eca06531dcf0824 # initialize rs1
li x30, 0x5fc89da1b286beae # initialize rs2
sraw x17, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xca048e49469606d8 # initialize rs1
li x30, 0x71bca5235c5915f7 # initialize rs2
sraw x18, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x460033b762bb3c75 # initialize rs1
li x1, 0x9efb52849bfc6166 # initialize rs2
sraw x19, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x49a3881909599be3 # initialize rs1
li x12, 0x8cdfe14dbb4086c3 # initialize rs2
sraw x20, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x49d7334562d55664 # initialize rs1
li x14, 0x16d63a5435a9e592 # initialize rs2
sraw x21, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xbc499399cb581cb9 # initialize rs1
li x9, 0x4e3994f0cecebe09 # initialize rs2
sraw x22, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x2c5d0b869e88cab4 # initialize rs1
li x21, 0x37c87cf27ba33ba7 # initialize rs2
sraw x23, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x622bcb4cc3149ddb # initialize rs1
li x3, 0x459a4604ef85148d # initialize rs2
sraw x24, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x862b632751d1b7d2 # initialize rs1
li x7, 0x7f91a1625374223c # initialize rs2
sraw x25, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x029bdae28d169a29 # initialize rs1
li x31, 0x030ff21bb4f6f3f3 # initialize rs2
sraw x26, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x7df99f5280ed9d22 # initialize rs1
li x29, 0x85eb7ee20ff27c32 # initialize rs2
sraw x27, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xaebca2f247d51d2c # initialize rs1
li x28, 0x3b98efec1887ddc0 # initialize rs2
sraw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xee9fb59119bb8016 # initialize rs1
li x8, 0x3bfabab88c2eedcc # initialize rs2
sraw x29, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x3e5bde0e3d8eac37 # initialize rs1
li x1, 0xf68508d8e201a2e3 # initialize rs2
sraw x30, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x389e48aabb18566d # initialize rs1
li x17, 0x03b50165ee19a4a7 # initialize rs2
sraw x31, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x26, 0x4c8a96c0c84938b3 # initialize rs1
li x0, 0x14a13e9902ede555 # initialize rs2
sraw x0, x26, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x30, 0x5e4a5e616fec9b81 # initialize rs1
li x1, 0xbef80aedd7ea1d86 # initialize rs2
sraw x1, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x30, 0x18946fe995126ffb # initialize rs1
li x2, 0xb468c4ac23414b3f # initialize rs2
sraw x2, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x23, 0x853fafd00dcff8b5 # initialize rs1
li x3, 0xcdb7fb09aa22c20e # initialize rs2
sraw x3, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xc903ede6f43aa505 # initialize rs1
li x4, 0x2ea910c8e8686890 # initialize rs2
sraw x4, x15, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x16, 0x48fd6918c0213f81 # initialize rs1
li x5, 0xdf3c021fded44cdb # initialize rs2
sraw x5, x16, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x20, 0x40fd8dad92a249a9 # initialize rs1
li x6, 0x7eb819f2f10a70d1 # initialize rs2
sraw x6, x20, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x29, 0xe8b1f3921bad5cc4 # initialize rs1
li x7, 0x5775bc0a78e81520 # initialize rs2
sraw x7, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x6, 0x7e329ad9918be4c9 # initialize rs1
li x8, 0x1966fca70418d46e # initialize rs2
sraw x8, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x3, 0x62d6766857ce59fc # initialize rs1
li x9, 0xca2de0d576961389 # initialize rs2
sraw x9, x3, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x28, 0xcbb608a60f1a6b62 # initialize rs1
li x10, 0x007689062e26909c # initialize rs2
sraw x10, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x6, 0x9a3eea06fd0b0f5c # initialize rs1
li x11, 0x5b5a1f28bc1c099b # initialize rs2
sraw x11, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x11, 0xe9ef8197ea0fcc1f # initialize rs1
li x12, 0xfd5368c4b485e556 # initialize rs2
sraw x12, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x15, 0x3715d7a5ac4b5125 # initialize rs1
li x13, 0xe84d1f051392799a # initialize rs2
sraw x13, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x29, 0x8fb608d99fffdd99 # initialize rs1
li x14, 0x23697ee6db72df55 # initialize rs2
sraw x14, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x14, 0x630bc5a4a31be1da # initialize rs1
li x15, 0x55cf6ed985231e6a # initialize rs2
sraw x15, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x14, 0x593e28ce96491ac5 # initialize rs1
li x16, 0xf34c5eed2f8e9bd3 # initialize rs2
sraw x16, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x20, 0x7934c1e2ea59f05a # initialize rs1
li x17, 0x71380f38f709a9ac # initialize rs2
sraw x17, x20, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x11, 0x57cac2acbb6b7e94 # initialize rs1
li x18, 0x7be90edd4035b96b # initialize rs2
sraw x18, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x2, 0xca8c40179a6a0348 # initialize rs1
li x19, 0xaf512437e0e2b33a # initialize rs2
sraw x19, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x7, 0x988276913890f14c # initialize rs1
li x20, 0x73401cdd2d88c987 # initialize rs2
sraw x20, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x20, 0xd7d639fc983dfdbe # initialize rs1
li x21, 0xdb51b9fb7ef37465 # initialize rs2
sraw x21, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x27, 0x36a4739bc3a2cc7c # initialize rs1
li x22, 0x06b56db11eeaebef # initialize rs2
sraw x22, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x7, 0x53a522087738bfd4 # initialize rs1
li x23, 0x30f31b9e57aa5ee8 # initialize rs2
sraw x23, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x25, 0xe14a47c8dec246fd # initialize rs1
li x24, 0x0a5d3da28b303918 # initialize rs2
sraw x24, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x10, 0xb6bfbcb5071564cc # initialize rs1
li x25, 0x0e16f386a451ad34 # initialize rs2
sraw x25, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x25, 0xd60b7f524dce279a # initialize rs1
li x26, 0x9d270e6317b618f3 # initialize rs2
sraw x26, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x2, 0x66863f9f7d67daca # initialize rs1
li x27, 0xee99279e8ffee6a2 # initialize rs2
sraw x27, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x8, 0x3275392648488d91 # initialize rs1
li x28, 0x8a90fcaac4aa57f2 # initialize rs2
sraw x28, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x17, 0x67108c33aaf129ab # initialize rs1
li x29, 0x61a34c70ebcb0f6e # initialize rs2
sraw x29, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x26, 0x958f9d1e3c1c02ce # initialize rs1
li x30, 0x6e992a13690f3134 # initialize rs2
sraw x30, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x7, 0x107865d6cf6566f3 # initialize rs1
li x31, 0x868436e8539da3d1 # initialize rs2
sraw x31, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x2313c6812ca89979 # initialize rs1
li x0, 0xc83bf8b6da7d8867 # initialize rs2
sraw x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x7ee32a8ebf0d26f8 # initialize rs1
li x1, 0x29986fe45807f772 # initialize rs2
sraw x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x4524677e486239a3 # initialize rs1
li x2, 0x5f5fb562499d4ee3 # initialize rs2
sraw x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xcf3f3fd08a4fead4 # initialize rs1
li x3, 0x45f1f8f60f054a49 # initialize rs2
sraw x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x6442328a5d4dc51e # initialize rs1
li x4, 0x4d12c0dd69578c2c # initialize rs2
sraw x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x10de97bea2b3aafb # initialize rs1
li x5, 0x34962e755fa1bd8f # initialize rs2
sraw x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x31573504048ae4c8 # initialize rs1
li x6, 0x44e1e1b6ca099fd0 # initialize rs2
sraw x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb526e2159dea97bc # initialize rs1
li x7, 0x99884774b25dae60 # initialize rs2
sraw x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x3f72ed6cf5bb5c83 # initialize rs1
li x8, 0x68ddddc38a0fe28a # initialize rs2
sraw x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x043219ad0713698e # initialize rs1
li x9, 0xefc6fcc9c33f18b5 # initialize rs2
sraw x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xc46794a063d5d38a # initialize rs1
li x10, 0x6758e1ed182f597b # initialize rs2
sraw x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x0dbc35f18d715b6f # initialize rs1
li x11, 0x97454cec7d92edd2 # initialize rs2
sraw x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x76a777c96aabd212 # initialize rs1
li x12, 0x6af58cc924fbc268 # initialize rs2
sraw x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x24deccd0892dc1ba # initialize rs1
li x13, 0x8502e5884469fe7f # initialize rs2
sraw x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x431e67e1d1608d2f # initialize rs1
li x14, 0xffb50cb3551c85c2 # initialize rs2
sraw x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x852cc44efd0e5194 # initialize rs1
li x15, 0x3e3e668d051a89a1 # initialize rs2
sraw x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x50a890ab7d4ab32d # initialize rs1
li x16, 0x59d93eadeead21ac # initialize rs2
sraw x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x8a1e6944e0a9c267 # initialize rs1
li x17, 0x3d3beeb3bed6fe0d # initialize rs2
sraw x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x387bc77377dc3526 # initialize rs1
li x18, 0xf52f3581ac99dd35 # initialize rs2
sraw x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x9dbd6f939fb3bc55 # initialize rs1
li x19, 0x39cfe656cf6a40dd # initialize rs2
sraw x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xddf477c03f781052 # initialize rs1
li x20, 0x79b9a6bdc1836067 # initialize rs2
sraw x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x71e6735c7d6c318a # initialize rs1
li x21, 0x8670c2576ab71490 # initialize rs2
sraw x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x78f5e9866187e7dd # initialize rs1
li x22, 0xb389f7d00ac46d2d # initialize rs2
sraw x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x07ae80cc2ad5dde4 # initialize rs1
li x23, 0xb6d0b82ff5132bba # initialize rs2
sraw x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x932af252abae0ad3 # initialize rs1
li x24, 0x55b3d92088a8a567 # initialize rs2
sraw x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xe154cc32b97dc426 # initialize rs1
li x25, 0xe06751bf33446387 # initialize rs2
sraw x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x9ec9e7ef26c2e2ef # initialize rs1
li x26, 0xfd26a48d542be3d6 # initialize rs2
sraw x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x93ba0ac56e18875f # initialize rs1
li x27, 0x143e4ba1c1a35602 # initialize rs2
sraw x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x41723a454490f709 # initialize rs1
li x28, 0x3c98c696c7480560 # initialize rs2
sraw x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xb30dcb8fd03518d9 # initialize rs1
li x29, 0x4ebeabbe1c3c0332 # initialize rs2
sraw x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x961f52fc8a38cc60 # initialize rs1
li x30, 0x97991955940a3de5 # initialize rs2
sraw x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xf827c5473b8f989c # initialize rs1
li x31, 0x4265ddee187be257 # initialize rs2
sraw x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x19, x16 # perform first operation
sraw x23, x21, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x1, x22 # perform first operation
sraw x11, x8, x2 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x5, x7, x20 # perform first operation
sraw x23, x2, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x14, x16 # perform first operation
sraw x18, x18, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x8, x20, x27 # perform first operation
sraw x20, x25, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x28, x20 # perform first operation
sraw x20, x6, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x30, x29, x20 # perform first operation
sraw x30, x16, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x6, x26, x19 # perform first operation
sraw x6, x5, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x17, x7, x22 # perform first operation
sraw x17, x20, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x1, x10, x18 # perform first operation
sraw x10, x19, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x29, x28, x26 # perform first operation
sraw x26, x12, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x14, x24 # perform first operation
sraw x9, x1, x5 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-xor.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x00212f2cfe0276db # initialize rs1
li x7, 0x0c3dcbf66a053f6c # initialize rs2
xor x26, x0, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x07d6a88cee1edfc7 # initialize rs1
li x8, 0xe234188ad8873784 # initialize rs2
xor x7, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x0948139b66ec4316 # initialize rs1
li x24, 0xe131acfb64e55a40 # initialize rs2
xor x3, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xcb55003613ff0430 # initialize rs1
li x12, 0xc282ee7b38d79a23 # initialize rs2
xor x20, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x38df620c3c87f3c7 # initialize rs1
li x7, 0xe6c359439dfd5953 # initialize rs2
xor x22, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbb960395e33eead7 # initialize rs1
li x29, 0xc312d7b77f14db33 # initialize rs2
xor x3, x5, x29 # perform operation
RVTEST_SIGUPD(x6, x0, x3, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa7d3b981d3eaa91e # initialize rs1
li x31, 0x97f4932b42848652 # initialize rs2
xor x20, x6, x31 # perform operation
RVTEST_SIGUPD(x7, x0, x20, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xfa3f6b699a8e0f49 # initialize rs1
li x10, 0xf3a8dc834bf93dcc # initialize rs2
xor x1, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x2c9261a9918cc4de # initialize rs1
li x20, 0x8c496eba4c254afb # initialize rs2
xor x11, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xf11349348c5c3610 # initialize rs1
li x31, 0x800bbed8ecb5f18a # initialize rs2
xor x13, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x6d2c607fedcd9678 # initialize rs1
li x2, 0xd32afd1c1c3b0718 # initialize rs2
xor x13, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x90500f39a9307c31 # initialize rs1
li x6, 0xffc42ca1784136f5 # initialize rs2
xor x31, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x3e350e806ab69c79 # initialize rs1
li x28, 0xc7eef6f1b9199854 # initialize rs2
xor x10, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xd75a3a2d3a5a6ebf # initialize rs1
li x14, 0x6b411d9026b672bf # initialize rs2
xor x28, x13, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xabbd6deda8fe7a4e # initialize rs1
li x16, 0xf4a36d1b4f7bf199 # initialize rs2
xor x28, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x4bf76c9512ed2f2c # initialize rs1
li x24, 0xae9e31cd60d16a8d # initialize rs2
xor x19, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xcb25a6d028673ad3 # initialize rs1
li x27, 0x87baddeff6499416 # initialize rs2
xor x14, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x68c52486049a9429 # initialize rs1
li x3, 0xdea0b310b19b6e66 # initialize rs2
xor x29, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xc424e25a0dfedb28 # initialize rs1
li x16, 0xe9d5a06d9d8b7aab # initialize rs2
xor x29, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x75f17aa529de51e4 # initialize rs1
li x16, 0xe6c0f4e5a2421ad3 # initialize rs2
xor x23, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x5f7d445cd36d5df8 # initialize rs1
li x22, 0xa0a35cb7ba675ca9 # initialize rs2
xor x1, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x8c6b2eedf79545dc # initialize rs1
li x29, 0xc9ce53ca9dbf20cd # initialize rs2
xor x2, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xcbe352ff4d96648f # initialize rs1
li x29, 0x79a9dacf85766d2e # initialize rs2
xor x2, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xca9716b95bfa2f85 # initialize rs1
li x5, 0x18a50f49af49edf4 # initialize rs2
xor x11, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xfab98c51043ac155 # initialize rs1
li x14, 0x36d39dc26e49378a # initialize rs2
xor x15, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x0022ce986513ca14 # initialize rs1
li x16, 0xf07d7edc2a3363ae # initialize rs2
xor x11, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9f3d03e074f7f2d3 # initialize rs1
li x1, 0xeb0fc704ac6e3e95 # initialize rs2
xor x11, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x41fc98d5123f3a82 # initialize rs1
li x6, 0xd7d1d98813138e5f # initialize rs2
xor x12, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xd792666d8cb4c6f3 # initialize rs1
li x7, 0x7bfb93b6f895a788 # initialize rs2
xor x22, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x9322e2a5a716bda0 # initialize rs1
li x21, 0x9ff512a7b530bee9 # initialize rs2
xor x8, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe79b0c55bd96f993 # initialize rs1
li x23, 0x2ffe015bc5d0939c # initialize rs2
xor x2, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x57eed54810806444 # initialize rs1
li x26, 0x3e8c2ada897a542d # initialize rs2
xor x22, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 248)

# Testcase cp_rs2 (Test source rs2 = x0)
li x2, 0xaf9737c0133543d0 # initialize rs1
li x0, 0x597585a540534986 # initialize rs2
xor x7, x2, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 256)

# Testcase cp_rs2 (Test source rs2 = x1)
li x7, 0x5f0faa183919dc6e # initialize rs1
li x1, 0x03a4e50e70e2adbb # initialize rs2
xor x29, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 264)

# Testcase cp_rs2 (Test source rs2 = x2)
li x22, 0xc2acdbc1d893e247 # initialize rs1
li x2, 0xadf746e0952516e3 # initialize rs2
xor x11, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 272)

# Testcase cp_rs2 (Test source rs2 = x3)
li x29, 0x4b7f0f404193b871 # initialize rs1
li x3, 0xa1a0129cbdc39387 # initialize rs2
xor x13, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 280)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0x96cb903a3d09b063 # initialize rs1
li x4, 0x1b2867fdd8298acb # initialize rs2
xor x7, x5, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x7, 288)

# Testcase cp_rs2 (Test source rs2 = x5)
li x14, 0x1a639fb15502829c # initialize rs1
li x5, 0x97faa1974f90daff # initialize rs2
xor x19, x14, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 296)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0x488a9e1e9ac3ea01 # initialize rs1
li x6, 0xcba761d1888afced # initialize rs2
xor x31, x13, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x31, 304)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0xd37b9363efa84ccb # initialize rs1
li x7, 0xb74b145062153bd9 # initialize rs2
xor x18, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 312)

# Testcase cp_rs2 (Test source rs2 = x8)
li x22, 0x638361d15c287b60 # initialize rs1
li x8, 0x097330514414172d # initialize rs2
xor x15, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 320)

# Testcase cp_rs2 (Test source rs2 = x9)
li x2, 0x1dfc255ca712af13 # initialize rs1
li x9, 0x0958a86294dabeed # initialize rs2
xor x10, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cp_rs2 (Test source rs2 = x10)
li x14, 0x1e86b813bac4fa44 # initialize rs1
li x10, 0x4cc33f92eb2165d9 # initialize rs2
xor x1, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 336)

# Testcase cp_rs2 (Test source rs2 = x11)
li x12, 0xb6960b24984f73c8 # initialize rs1
li x11, 0xe63315d4b3847086 # initialize rs2
xor x27, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 344)

# Testcase cp_rs2 (Test source rs2 = x12)
li x29, 0x1ac1606dc7ad6180 # initialize rs1
li x12, 0x1665319cd7c2624a # initialize rs2
xor x19, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 352)

# Testcase cp_rs2 (Test source rs2 = x13)
li x24, 0x3dfe3236667c38ed # initialize rs1
li x13, 0xcefc14434ab9845b # initialize rs2
xor x10, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 360)

# Testcase cp_rs2 (Test source rs2 = x14)
li x27, 0x0b3dd1eeac3c7165 # initialize rs1
li x14, 0xbfb5be79ef6693b0 # initialize rs2
xor x1, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 368)

# Testcase cp_rs2 (Test source rs2 = x15)
li x18, 0x574161a1d6f41631 # initialize rs1
li x15, 0xa6a70098f15a0cbc # initialize rs2
xor x1, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 376)

# Testcase cp_rs2 (Test source rs2 = x16)
li x11, 0xbbd649230ed04058 # initialize rs1
li x16, 0x0afd3808d5918c76 # initialize rs2
xor x8, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 384)

# Testcase cp_rs2 (Test source rs2 = x17)
li x23, 0x86166cbb54e76403 # initialize rs1
li x17, 0xcad9f1d1c2ad0e69 # initialize rs2
xor x3, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 392)

# Testcase cp_rs2 (Test source rs2 = x18)
li x12, 0xc00187d6dbad5023 # initialize rs1
li x18, 0x8a86f8956bbb6401 # initialize rs2
xor x22, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 400)

# Testcase cp_rs2 (Test source rs2 = x19)
li x25, 0xac3ebc1e9e3ec513 # initialize rs1
li x19, 0xf98ff58eac67d98d # initialize rs2
xor x18, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 408)

# Testcase cp_rs2 (Test source rs2 = x20)
li x19, 0x039b7757d2ea9694 # initialize rs1
li x20, 0xaa76bf1a91c7c1af # initialize rs2
xor x3, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 416)

# Testcase cp_rs2 (Test source rs2 = x21)
li x9, 0x7208c79fc06598d3 # initialize rs1
li x21, 0x85a5746f5edb15dd # initialize rs2
xor x20, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 424)

# Testcase cp_rs2 (Test source rs2 = x22)
li x24, 0x3e80a172b3bceadf # initialize rs1
li x22, 0x859f2f0cea9f33dd # initialize rs2
xor x12, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 432)

# Testcase cp_rs2 (Test source rs2 = x23)
li x8, 0x1297099cd55dbd50 # initialize rs1
li x23, 0xd4a288b2fe8a7aba # initialize rs2
xor x31, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 440)

# Testcase cp_rs2 (Test source rs2 = x24)
li x29, 0x775f23332fe60821 # initialize rs1
li x24, 0x27abb8f121d4f054 # initialize rs2
xor x13, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 448)

# Testcase cp_rs2 (Test source rs2 = x25)
li x13, 0xcc90698b8eaff2bb # initialize rs1
li x25, 0xd9080ef04164b2a1 # initialize rs2
xor x28, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 456)

# Testcase cp_rs2 (Test source rs2 = x26)
li x24, 0x2ee01fa7bff60af6 # initialize rs1
li x26, 0xcd1b6393bebb299e # initialize rs2
xor x2, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 464)

# Testcase cp_rs2 (Test source rs2 = x27)
li x8, 0xd30dcc0c54b0287f # initialize rs1
li x27, 0xac2d12ca50ac0c99 # initialize rs2
xor x13, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 472)

# Testcase cp_rs2 (Test source rs2 = x28)
li x12, 0x468b274f2ab3ee6b # initialize rs1
li x28, 0xc26604d391fc0980 # initialize rs2
xor x29, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cp_rs2 (Test source rs2 = x29)
li x9, 0x720abdd163361a08 # initialize rs1
li x29, 0x96210961704bef78 # initialize rs2
xor x6, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 488)

# Testcase cp_rs2 (Test source rs2 = x30)
li x10, 0x727aa817a8bcac04 # initialize rs1
li x30, 0x5a9b77b7770b0adf # initialize rs2
xor x23, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 496)

# Testcase cp_rs2 (Test source rs2 = x31)
li x7, 0x6ef7534818a20cfa # initialize rs1
li x31, 0xa0d0c5a05c7eaef1 # initialize rs2
xor x22, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 504)

# Testcase cp_rd (Test destination rd = x0)
li x15, 0x62c71d6012b96005 # initialize rs1
li x16, 0x8bbec0b62a76545a # initialize rs2
xor x0, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 512)

# Testcase cp_rd (Test destination rd = x1)
li x8, 0xc82a83e9200c7ac6 # initialize rs1
li x17, 0xbef92c077c404a95 # initialize rs2
xor x1, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 520)

# Testcase cp_rd (Test destination rd = x2)
li x6, 0x82d6c7d1e94a2538 # initialize rs1
li x14, 0x15b886832ce389dd # initialize rs2
xor x2, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cp_rd (Test destination rd = x3)
li x24, 0x6e5cccec9875ac7c # initialize rs1
li x20, 0x1cee18daab659f78 # initialize rs2
xor x3, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 536)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0x0984caa6c26b1192 # initialize rs1
li x29, 0x72e886ee165ce1d0 # initialize rs2
xor x4, x23, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 544)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x15, 0x6d07b5671b48c60f # initialize rs1
li x29, 0xa49ea91161b7b8fb # initialize rs2
xor x5, x15, x29 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 552)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0x748fa98ab651e577 # initialize rs1
li x26, 0xdd8cdb4eaf020f59 # initialize rs2
xor x6, x27, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 560)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x20, 0x0907c5bd86bc6886 # initialize rs1
li x30, 0x126409cfd9e4c827 # initialize rs2
xor x7, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 568)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0xfa512cf221cbff50 # initialize rs1
li x10, 0x2348ce0d8b39a476 # initialize rs2
xor x8, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 576)

# Testcase cp_rd (Test destination rd = x9)
li x13, 0x6f001bcaca281eea # initialize rs1
li x27, 0x46d9fbbfd7a58f3d # initialize rs2
xor x9, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0x1083fbf73d45fe22 # initialize rs1
li x17, 0xdaa3b522f1a1659d # initialize rs2
xor x10, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 592)

# Testcase cp_rd (Test destination rd = x11)
li x26, 0x5ef5e96d5f9d901c # initialize rs1
li x5, 0x52dbb595cd9ff52a # initialize rs2
xor x11, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 600)

# Testcase cp_rd (Test destination rd = x12)
li x1, 0x6302c6d8b6bbfac3 # initialize rs1
li x26, 0xf11699abebbb04be # initialize rs2
xor x12, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cp_rd (Test destination rd = x13)
li x15, 0x9ab1f48451c05140 # initialize rs1
li x29, 0xcdb0e7b50b1288fa # initialize rs2
xor x13, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cp_rd (Test destination rd = x14)
li x31, 0xbd56682720bd3ff2 # initialize rs1
li x2, 0x9b85bcc2c5f9e7b4 # initialize rs2
xor x14, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 624)

# Testcase cp_rd (Test destination rd = x15)
li x15, 0xc01e10addaacf9e2 # initialize rs1
li x1, 0xd1d20905055e2888 # initialize rs2
xor x15, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cp_rd (Test destination rd = x16)
li x9, 0xb3b991b01b48878e # initialize rs1
li x7, 0xb44a629241447319 # initialize rs2
xor x16, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 640)

# Testcase cp_rd (Test destination rd = x17)
li x2, 0xde99eafb3437e337 # initialize rs1
li x13, 0x3ad29221fd2ceba3 # initialize rs2
xor x17, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 648)

# Testcase cp_rd (Test destination rd = x18)
li x20, 0xa34e9892f18c69e0 # initialize rs1
li x14, 0x69296ea77d508d91 # initialize rs2
xor x18, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 656)

# Testcase cp_rd (Test destination rd = x19)
li x20, 0x182949dee4ada642 # initialize rs1
li x13, 0xa21c65da3b3d5853 # initialize rs2
xor x19, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cp_rd (Test destination rd = x20)
li x6, 0x40f8f1103861726b # initialize rs1
li x17, 0xe3d23fde6db5a7bc # initialize rs2
xor x20, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cp_rd (Test destination rd = x21)
li x5, 0x6b4a930d54351a08 # initialize rs1
li x20, 0x7da8b854a4fcbca9 # initialize rs2
xor x21, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 680)

# Testcase cp_rd (Test destination rd = x22)
li x18, 0x25bfb442ec4707a7 # initialize rs1
li x2, 0xcf8da8dc7c087656 # initialize rs2
xor x22, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 688)

# Testcase cp_rd (Test destination rd = x23)
li x22, 0xf6c905f402487231 # initialize rs1
li x17, 0xfb1f11b0f0872670 # initialize rs2
xor x23, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 696)

# Testcase cp_rd (Test destination rd = x24)
li x30, 0xf06982f079ed3b3d # initialize rs1
li x26, 0xa07a45439fd96326 # initialize rs2
xor x24, x30, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 704)

# Testcase cp_rd (Test destination rd = x25)
li x20, 0xd28974ee1f2aae9a # initialize rs1
li x5, 0x1e76d134411350e7 # initialize rs2
xor x25, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 712)

# Testcase cp_rd (Test destination rd = x26)
li x8, 0x9787ed78350c72da # initialize rs1
li x24, 0x68d828217d2c2dff # initialize rs2
xor x26, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 720)

# Testcase cp_rd (Test destination rd = x27)
li x1, 0x354103a086a4b0d7 # initialize rs1
li x3, 0xf584dfbd6d487cae # initialize rs2
xor x27, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 728)

# Testcase cp_rd (Test destination rd = x28)
li x20, 0x8f48c0f251e2b1de # initialize rs1
li x13, 0xbd3114a56ac117ab # initialize rs2
xor x28, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 736)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0xa04a0da96d005840 # initialize rs1
li x26, 0xf28f0e24fd2cf6e9 # initialize rs2
xor x29, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 744)

# Testcase cp_rd (Test destination rd = x30)
li x10, 0x0ace3504e74a7dff # initialize rs1
li x18, 0x694305698fa73607 # initialize rs2
xor x30, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 752)

# Testcase cp_rd (Test destination rd = x31)
li x17, 0x3a0c61ae44d3b012 # initialize rs1
li x8, 0x982250a68e3f3a17 # initialize rs2
xor x31, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 760)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x5, 0x0000000000000000 # initialize rs1
li x26, 0x310e7351cbee3114 # initialize rs2
xor x28, x5, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 768)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x28, 0x0000000000000001 # initialize rs1
li x24, 0x9b60bf0d9668a773 # initialize rs2
xor x7, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 776)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x27, 0x0000000000000002 # initialize rs1
li x10, 0x0c0b257e5d5e5730 # initialize rs2
xor x29, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 784)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x12, 0x8000000000000000 # initialize rs1
li x31, 0x4b2f1d24a54cce66 # initialize rs2
xor x13, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x18, 0x8000000000000001 # initialize rs1
li x28, 0x5789ae1547f5f726 # initialize rs2
xor x26, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 800)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x8, 0x7fffffffffffffff # initialize rs1
li x19, 0x8cfba97295ad9395 # initialize rs2
xor x6, x8, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 808)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x22, 0x7ffffffffffffffe # initialize rs1
li x19, 0xd3536c9b3e471171 # initialize rs2
xor x12, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 816)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x10, 0xffffffffffffffff # initialize rs1
li x15, 0x41a52268e6e95fb1 # initialize rs2
xor x17, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 824)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x27, 0xfffffffffffffffe # initialize rs1
li x17, 0x56a7fcac9f951b9e # initialize rs2
xor x15, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 832)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x13, 0x5bbc887763ae86f2 # initialize rs1
li x3, 0xabbd1997ae10ee77 # initialize rs2
xor x27, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 840)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x1f717a8c39bf85cc # initialize rs2
xor x6, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 848)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x3, 0x5555555555555555 # initialize rs1
li x27, 0xd9ab7aed72618910 # initialize rs2
xor x24, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 856)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x26, 0x00000000ffffffff # initialize rs1
li x3, 0xb355cc317724bf86 # initialize rs2
xor x7, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 864)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x17, 0x00000000fffffffe # initialize rs1
li x21, 0x4b833ee1449e13a0 # initialize rs2
xor x14, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 872)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x12, 0x0000000100000000 # initialize rs1
li x25, 0x1c54ed9d33bf5216 # initialize rs2
xor x24, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 880)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x24, 0x0000000100000001 # initialize rs1
li x9, 0xc01a49111ca54d1b # initialize rs2
xor x22, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 888)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x22, 0x80d74ed978ed41e5 # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
xor x7, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 896)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x29, 0xa98bd76e23987d7e # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
xor x30, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 904)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x23, 0xd6d5a7ae9f7670c3 # initialize rs1
li x21, 0x0000000000000002 # initialize rs2
xor x24, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 912)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000000)
li x1, 0x88cdd3e47c872f15 # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
xor x8, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 920)

# Testcase cp_rs2_corners (Test source rs2 value = 0x8000000000000001)
li x12, 0xd7029e645c3ec3dc # initialize rs1
li x23, 0x8000000000000001 # initialize rs2
xor x3, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 928)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffffffffffff)
li x18, 0x2b2088dc9d1f548d # initialize rs1
li x14, 0x7fffffffffffffff # initialize rs2
xor x20, x18, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 936)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffffffffffe)
li x24, 0x5b3c0c3f39fe06dd # initialize rs1
li x16, 0x7ffffffffffffffe # initialize rs2
xor x28, x24, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 944)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffffffffffff)
li x12, 0x7bd444283c23f142 # initialize rs1
li x8, 0xffffffffffffffff # initialize rs2
xor x9, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 952)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffffffffffe)
li x24, 0x344e6716434b9006 # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
xor x6, x24, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 960)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc887763ae86f2)
li x22, 0x3f9883c601197c66 # initialize rs1
li x21, 0x5bbc887763ae86f2 # initialize rs2
xor x9, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 968)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaaaaaaaaaa)
li x19, 0x62c20131acb3eb7b # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x23, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 976)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5555555555555555)
li x15, 0x233d3ad8a697d6a5 # initialize rs1
li x27, 0x5555555555555555 # initialize rs2
xor x10, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 984)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x23, 0x8d3d1d001dce04a6 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
xor x15, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 992)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x23, 0xe322d3b04097c52b # initialize rs1
li x7, 0x00000000fffffffe # initialize rs2
xor x30, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1000)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000000)
li x11, 0x2a0e593449b39159 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
xor x29, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1008)

# Testcase cp_rs2_corners (Test source rs2 value = 0x100000001)
li x7, 0x1d841ac4a86188e3 # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
xor x18, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x11, 0x0000000000000000 # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
xor x26, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x15, 0x0000000000000000 # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
xor x3, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x2, 0x0000000000000000 # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
xor x7, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000000)
li x9, 0x0000000000000000 # initialize rs1
li x25, 0x8000000000000000 # initialize rs2
xor x29, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x8000000000000001)
li x31, 0x0000000000000000 # initialize rs1
li x16, 0x8000000000000001 # initialize rs2
xor x20, x31, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffffffffffff)
li x1, 0x0000000000000000 # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
xor x17, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffffffffffe)
li x26, 0x0000000000000000 # initialize rs1
li x3, 0x7ffffffffffffffe # initialize rs2
xor x11, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffffffffffff)
li x11, 0x0000000000000000 # initialize rs1
li x19, 0xffffffffffffffff # initialize rs2
xor x15, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffffffffffe)
li x3, 0x0000000000000000 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
xor x23, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc887763ae86f2)
li x24, 0x0000000000000000 # initialize rs1
li x1, 0x5bbc887763ae86f2 # initialize rs2
xor x25, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaaaaaaaaaa)
li x20, 0x0000000000000000 # initialize rs1
li x16, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x6, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5555555555555555)
li x16, 0x0000000000000000 # initialize rs1
li x19, 0x5555555555555555 # initialize rs2
xor x2, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x29, 0x0000000000000000 # initialize rs1
li x22, 0x00000000ffffffff # initialize rs2
xor x2, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x18, 0x0000000000000000 # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
xor x29, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000000)
li x8, 0x0000000000000000 # initialize rs1
li x3, 0x0000000100000000 # initialize rs2
xor x12, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x100000001)
li x1, 0x0000000000000000 # initialize rs1
li x2, 0x0000000100000001 # initialize rs2
xor x9, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x23, 0x0000000000000001 # initialize rs1
li x18, 0x0000000000000000 # initialize rs2
xor x21, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x2, 0x0000000000000001 # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
xor x6, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x13, 0x0000000000000001 # initialize rs1
li x31, 0x0000000000000002 # initialize rs2
xor x30, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000000)
li x28, 0x0000000000000001 # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
xor x21, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x8000000000000001)
li x6, 0x0000000000000001 # initialize rs1
li x13, 0x8000000000000001 # initialize rs2
xor x27, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffffffffffff)
li x14, 0x0000000000000001 # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
xor x18, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffffffffffe)
li x7, 0x0000000000000001 # initialize rs1
li x18, 0x7ffffffffffffffe # initialize rs2
xor x23, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffffffffffff)
li x19, 0x0000000000000001 # initialize rs1
li x23, 0xffffffffffffffff # initialize rs2
xor x20, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffffffffffe)
li x5, 0x0000000000000001 # initialize rs1
li x7, 0xfffffffffffffffe # initialize rs2
xor x31, x5, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc887763ae86f2)
li x20, 0x0000000000000001 # initialize rs1
li x16, 0x5bbc887763ae86f2 # initialize rs2
xor x17, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaaaaaaaaaa)
li x1, 0x0000000000000001 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x6, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5555555555555555)
li x18, 0x0000000000000001 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
xor x19, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x27, 0x0000000000000001 # initialize rs1
li x6, 0x00000000ffffffff # initialize rs2
xor x18, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x19, 0x0000000000000001 # initialize rs1
li x23, 0x00000000fffffffe # initialize rs2
xor x27, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000000)
li x18, 0x0000000000000001 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
xor x28, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x100000001)
li x9, 0x0000000000000001 # initialize rs1
li x24, 0x0000000100000001 # initialize rs2
xor x14, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x7, 0x0000000000000002 # initialize rs1
li x19, 0x0000000000000000 # initialize rs2
xor x22, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x22, 0x0000000000000002 # initialize rs1
li x17, 0x0000000000000001 # initialize rs2
xor x27, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x27, 0x0000000000000002 # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
xor x26, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000000)
li x16, 0x0000000000000002 # initialize rs1
li x15, 0x8000000000000000 # initialize rs2
xor x5, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x8000000000000001)
li x2, 0x0000000000000002 # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
xor x16, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffffffffffff)
li x9, 0x0000000000000002 # initialize rs1
li x20, 0x7fffffffffffffff # initialize rs2
xor x21, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffffffffffe)
li x30, 0x0000000000000002 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
xor x12, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffffffffffff)
li x5, 0x0000000000000002 # initialize rs1
li x25, 0xffffffffffffffff # initialize rs2
xor x14, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffffffffffe)
li x18, 0x0000000000000002 # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
xor x28, x18, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc887763ae86f2)
li x12, 0x0000000000000002 # initialize rs1
li x17, 0x5bbc887763ae86f2 # initialize rs2
xor x8, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x11, 0x0000000000000002 # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x12, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5555555555555555)
li x11, 0x0000000000000002 # initialize rs1
li x29, 0x5555555555555555 # initialize rs2
xor x23, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x10, 0x0000000000000002 # initialize rs1
li x5, 0x00000000ffffffff # initialize rs2
xor x31, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x28, 0x0000000000000002 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
xor x2, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000000)
li x3, 0x0000000000000002 # initialize rs1
li x8, 0x0000000100000000 # initialize rs2
xor x21, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x100000001)
li x1, 0x0000000000000002 # initialize rs1
li x22, 0x0000000100000001 # initialize rs2
xor x11, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x0)
li x2, 0x8000000000000000 # initialize rs1
li x28, 0x0000000000000000 # initialize rs2
xor x23, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x1)
li x6, 0x8000000000000000 # initialize rs1
li x11, 0x0000000000000001 # initialize rs2
xor x31, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x2)
li x22, 0x8000000000000000 # initialize rs1
li x19, 0x0000000000000002 # initialize rs2
xor x20, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000000)
li x26, 0x8000000000000000 # initialize rs1
li x2, 0x8000000000000000 # initialize rs2
xor x18, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x8000000000000001)
li x2, 0x8000000000000000 # initialize rs1
li x11, 0x8000000000000001 # initialize rs2
xor x26, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7fffffffffffffff)
li x6, 0x8000000000000000 # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
xor x7, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x7ffffffffffffffe)
li x11, 0x8000000000000000 # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
xor x16, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffffffffffff)
li x1, 0x8000000000000000 # initialize rs1
li x11, 0xffffffffffffffff # initialize rs2
xor x8, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffffffffffe)
li x5, 0x8000000000000000 # initialize rs1
li x31, 0xfffffffffffffffe # initialize rs2
xor x26, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5bbc887763ae86f2)
li x31, 0x8000000000000000 # initialize rs1
li x15, 0x5bbc887763ae86f2 # initialize rs2
xor x14, x31, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x24, 0x8000000000000000 # initialize rs1
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x21, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x5555555555555555)
li x29, 0x8000000000000000 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
xor x10, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xffffffff)
li x20, 0x8000000000000000 # initialize rs1
li x14, 0x00000000ffffffff # initialize rs2
xor x23, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0xfffffffe)
li x11, 0x8000000000000000 # initialize rs1
li x26, 0x00000000fffffffe # initialize rs2
xor x29, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000000)
li x14, 0x8000000000000000 # initialize rs1
li x2, 0x0000000100000000 # initialize rs2
xor x27, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000000 rs2 = 0x100000001)
li x30, 0x8000000000000000 # initialize rs1
li x31, 0x0000000100000001 # initialize rs2
xor x23, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x0)
li x9, 0x8000000000000001 # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
xor x13, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x1)
li x26, 0x8000000000000001 # initialize rs1
li x10, 0x0000000000000001 # initialize rs2
xor x12, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x2)
li x1, 0x8000000000000001 # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
xor x2, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000000)
li x9, 0x8000000000000001 # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
xor x16, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x8000000000000001)
li x13, 0x8000000000000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
xor x3, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7fffffffffffffff)
li x17, 0x8000000000000001 # initialize rs1
li x22, 0x7fffffffffffffff # initialize rs2
xor x3, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x7ffffffffffffffe)
li x30, 0x8000000000000001 # initialize rs1
li x19, 0x7ffffffffffffffe # initialize rs2
xor x17, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffffffffffff)
li x8, 0x8000000000000001 # initialize rs1
li x14, 0xffffffffffffffff # initialize rs2
xor x13, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffffffffffe)
li x23, 0x8000000000000001 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
xor x26, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5bbc887763ae86f2)
li x1, 0x8000000000000001 # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
xor x29, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x10, 0x8000000000000001 # initialize rs1
li x3, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x9, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x5555555555555555)
li x10, 0x8000000000000001 # initialize rs1
li x3, 0x5555555555555555 # initialize rs2
xor x5, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xffffffff)
li x20, 0x8000000000000001 # initialize rs1
li x9, 0x00000000ffffffff # initialize rs2
xor x8, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0xfffffffe)
li x25, 0x8000000000000001 # initialize rs1
li x16, 0x00000000fffffffe # initialize rs2
xor x29, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000000)
li x21, 0x8000000000000001 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
xor x24, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x8000000000000001 rs2 = 0x100000001)
li x12, 0x8000000000000001 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
xor x2, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x0)
li x3, 0x7fffffffffffffff # initialize rs1
li x16, 0x0000000000000000 # initialize rs2
xor x2, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x1)
li x8, 0x7fffffffffffffff # initialize rs1
li x24, 0x0000000000000001 # initialize rs2
xor x5, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x2)
li x27, 0x7fffffffffffffff # initialize rs1
li x24, 0x0000000000000002 # initialize rs2
xor x13, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000000)
li x25, 0x7fffffffffffffff # initialize rs1
li x10, 0x8000000000000000 # initialize rs2
xor x28, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x8000000000000001)
li x13, 0x7fffffffffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
xor x19, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7fffffffffffffff)
li x7, 0x7fffffffffffffff # initialize rs1
li x15, 0x7fffffffffffffff # initialize rs2
xor x22, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x7ffffffffffffffe)
li x3, 0x7fffffffffffffff # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
xor x27, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffffffffffff)
li x23, 0x7fffffffffffffff # initialize rs1
li x1, 0xffffffffffffffff # initialize rs2
xor x12, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffffffffffe)
li x9, 0x7fffffffffffffff # initialize rs1
li x12, 0xfffffffffffffffe # initialize rs2
xor x6, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x23, 0x7fffffffffffffff # initialize rs1
li x30, 0x5bbc887763ae86f2 # initialize rs2
xor x7, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x19, 0x7fffffffffffffff # initialize rs1
li x28, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x9, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x5555555555555555)
li x5, 0x7fffffffffffffff # initialize rs1
li x24, 0x5555555555555555 # initialize rs2
xor x25, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xffffffff)
li x30, 0x7fffffffffffffff # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
xor x26, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0xfffffffe)
li x8, 0x7fffffffffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
xor x19, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000000)
li x15, 0x7fffffffffffffff # initialize rs1
li x6, 0x0000000100000000 # initialize rs2
xor x12, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffffffffffff rs2 = 0x100000001)
li x31, 0x7fffffffffffffff # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
xor x25, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x0)
li x22, 0x7ffffffffffffffe # initialize rs1
li x14, 0x0000000000000000 # initialize rs2
xor x5, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x1)
li x30, 0x7ffffffffffffffe # initialize rs1
li x20, 0x0000000000000001 # initialize rs2
xor x31, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x2)
li x7, 0x7ffffffffffffffe # initialize rs1
li x8, 0x0000000000000002 # initialize rs2
xor x22, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 8)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000000)
li x13, 0x7ffffffffffffffe # initialize rs1
li x5, 0x8000000000000000 # initialize rs2
xor x8, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 16)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x8000000000000001)
li x26, 0x7ffffffffffffffe # initialize rs1
li x5, 0x8000000000000001 # initialize rs2
xor x24, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 24)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7fffffffffffffff)
li x23, 0x7ffffffffffffffe # initialize rs1
li x2, 0x7fffffffffffffff # initialize rs2
xor x17, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 32)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x7, 0x7ffffffffffffffe # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
xor x10, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 40)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffffffffffff)
li x30, 0x7ffffffffffffffe # initialize rs1
li x17, 0xffffffffffffffff # initialize rs2
xor x12, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffffffffffe)
li x25, 0x7ffffffffffffffe # initialize rs1
li x5, 0xfffffffffffffffe # initialize rs2
xor x7, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 56)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x28, 0x7ffffffffffffffe # initialize rs1
li x18, 0x5bbc887763ae86f2 # initialize rs2
xor x5, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 64)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x31, 0x7ffffffffffffffe # initialize rs1
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x10, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 72)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x5555555555555555)
li x26, 0x7ffffffffffffffe # initialize rs1
li x7, 0x5555555555555555 # initialize rs2
xor x15, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 80)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xffffffff)
li x25, 0x7ffffffffffffffe # initialize rs1
li x24, 0x00000000ffffffff # initialize rs2
xor x18, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0xfffffffe)
li x25, 0x7ffffffffffffffe # initialize rs1
li x2, 0x00000000fffffffe # initialize rs2
xor x7, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 96)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000000)
li x7, 0x7ffffffffffffffe # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
xor x25, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffffffffffe rs2 = 0x100000001)
li x17, 0x7ffffffffffffffe # initialize rs1
li x21, 0x0000000100000001 # initialize rs2
xor x9, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x0)
li x9, 0xffffffffffffffff # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
xor x24, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x1)
li x29, 0xffffffffffffffff # initialize rs1
li x18, 0x0000000000000001 # initialize rs2
xor x6, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x2)
li x11, 0xffffffffffffffff # initialize rs1
li x7, 0x0000000000000002 # initialize rs2
xor x5, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000000)
li x7, 0xffffffffffffffff # initialize rs1
li x27, 0x8000000000000000 # initialize rs2
xor x21, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x8000000000000001)
li x3, 0xffffffffffffffff # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
xor x11, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7fffffffffffffff)
li x27, 0xffffffffffffffff # initialize rs1
li x24, 0x7fffffffffffffff # initialize rs2
xor x15, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x7ffffffffffffffe)
li x23, 0xffffffffffffffff # initialize rs1
li x24, 0x7ffffffffffffffe # initialize rs2
xor x29, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffffffffffff)
li x11, 0xffffffffffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
xor x27, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffffffffffe)
li x17, 0xffffffffffffffff # initialize rs1
li x14, 0xfffffffffffffffe # initialize rs2
xor x26, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5bbc887763ae86f2)
li x8, 0xffffffffffffffff # initialize rs1
li x5, 0x5bbc887763ae86f2 # initialize rs2
xor x20, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x16, 0xffffffffffffffff # initialize rs1
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x24, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x5555555555555555)
li x29, 0xffffffffffffffff # initialize rs1
li x1, 0x5555555555555555 # initialize rs2
xor x11, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xffffffff)
li x16, 0xffffffffffffffff # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
xor x13, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0xfffffffe)
li x25, 0xffffffffffffffff # initialize rs1
li x17, 0x00000000fffffffe # initialize rs2
xor x3, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000000)
li x7, 0xffffffffffffffff # initialize rs1
li x12, 0x0000000100000000 # initialize rs2
xor x29, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffffffffffff rs2 = 0x100000001)
li x26, 0xffffffffffffffff # initialize rs1
li x5, 0x0000000100000001 # initialize rs2
xor x18, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x0)
li x10, 0xfffffffffffffffe # initialize rs1
li x24, 0x0000000000000000 # initialize rs2
xor x12, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x1)
li x13, 0xfffffffffffffffe # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
xor x30, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x2)
li x24, 0xfffffffffffffffe # initialize rs1
li x27, 0x0000000000000002 # initialize rs2
xor x12, x24, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 264)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000000)
li x10, 0xfffffffffffffffe # initialize rs1
li x12, 0x8000000000000000 # initialize rs2
xor x19, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 272)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x8000000000000001)
li x27, 0xfffffffffffffffe # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
xor x20, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 280)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7fffffffffffffff)
li x14, 0xfffffffffffffffe # initialize rs1
li x6, 0x7fffffffffffffff # initialize rs2
xor x26, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 288)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x7ffffffffffffffe)
li x10, 0xfffffffffffffffe # initialize rs1
li x28, 0x7ffffffffffffffe # initialize rs2
xor x8, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 296)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffffffffffff)
li x15, 0xfffffffffffffffe # initialize rs1
li x2, 0xffffffffffffffff # initialize rs2
xor x5, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 304)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffffffffffe)
li x25, 0xfffffffffffffffe # initialize rs1
li x3, 0xfffffffffffffffe # initialize rs2
xor x13, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 312)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5bbc887763ae86f2)
li x3, 0xfffffffffffffffe # initialize rs1
li x2, 0x5bbc887763ae86f2 # initialize rs2
xor x8, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x13, 0xfffffffffffffffe # initialize rs1
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x6, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 328)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x5555555555555555)
li x3, 0xfffffffffffffffe # initialize rs1
li x5, 0x5555555555555555 # initialize rs2
xor x20, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xffffffff)
li x5, 0xfffffffffffffffe # initialize rs1
li x8, 0x00000000ffffffff # initialize rs2
xor x10, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 344)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0xfffffffe)
li x28, 0xfffffffffffffffe # initialize rs1
li x20, 0x00000000fffffffe # initialize rs2
xor x17, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 352)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000000)
li x15, 0xfffffffffffffffe # initialize rs1
li x20, 0x0000000100000000 # initialize rs2
xor x9, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 360)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffffffffffe rs2 = 0x100000001)
li x7, 0xfffffffffffffffe # initialize rs1
li x10, 0x0000000100000001 # initialize rs2
xor x20, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 368)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x0)
li x20, 0x5bbc887763ae86f2 # initialize rs1
li x8, 0x0000000000000000 # initialize rs2
xor x31, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 376)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x1)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x0000000000000001 # initialize rs2
xor x17, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 384)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x2)
li x2, 0x5bbc887763ae86f2 # initialize rs1
li x5, 0x0000000000000002 # initialize rs2
xor x17, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000000)
li x30, 0x5bbc887763ae86f2 # initialize rs1
li x20, 0x8000000000000000 # initialize rs2
xor x13, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 400)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x8000000000000001)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
xor x11, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 408)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7fffffffffffffff)
li x7, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0x7fffffffffffffff # initialize rs2
xor x8, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 416)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x7ffffffffffffffe)
li x15, 0x5bbc887763ae86f2 # initialize rs1
li x7, 0x7ffffffffffffffe # initialize rs2
xor x24, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 424)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffffffffffff)
li x18, 0x5bbc887763ae86f2 # initialize rs1
li x28, 0xffffffffffffffff # initialize rs2
xor x9, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 432)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffffffffffe)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x18, 0xfffffffffffffffe # initialize rs2
xor x5, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 440)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5bbc887763ae86f2)
li x16, 0x5bbc887763ae86f2 # initialize rs1
li x19, 0x5bbc887763ae86f2 # initialize rs2
xor x5, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 448)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xaaaaaaaaaaaaaaaa)
li x21, 0x5bbc887763ae86f2 # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x6, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 456)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x5555555555555555)
li x6, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
xor x26, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xffffffff)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
xor x2, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 472)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0xfffffffe)
li x29, 0x5bbc887763ae86f2 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
xor x6, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000000)
li x8, 0x5bbc887763ae86f2 # initialize rs1
li x26, 0x0000000100000000 # initialize rs2
xor x16, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc887763ae86f2 rs2 = 0x100000001)
li x25, 0x5bbc887763ae86f2 # initialize rs1
li x15, 0x0000000100000001 # initialize rs2
xor x29, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x0)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x15, 0x0000000000000000 # initialize rs2
xor x16, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x1)
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x21, 0x0000000000000001 # initialize rs2
xor x15, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x2)
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x0000000000000002 # initialize rs2
xor x5, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000000)
li x22, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
xor x21, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x8000000000000001)
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x8000000000000001 # initialize rs2
xor x5, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7fffffffffffffff)
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0x7fffffffffffffff # initialize rs2
xor x18, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x7ffffffffffffffe)
li x20, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x8, 0x7ffffffffffffffe # initialize rs2
xor x21, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffffffffffff)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x30, 0xffffffffffffffff # initialize rs2
xor x8, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffffffffffe)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
xor x13, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5bbc887763ae86f2)
li x7, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x31, 0x5bbc887763ae86f2 # initialize rs2
xor x30, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xaaaaaaaaaaaaaaaa)
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x9, x18, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x5555555555555555)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x17, 0x5555555555555555 # initialize rs2
xor x15, x26, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xffffffff)
li x5, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x16, 0x00000000ffffffff # initialize rs2
xor x10, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0xfffffffe)
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x18, 0x00000000fffffffe # initialize rs2
xor x6, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000000)
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x22, 0x0000000100000000 # initialize rs2
xor x2, x26, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaaaaaaaaaa rs2 = 0x100000001)
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
li x3, 0x0000000100000001 # initialize rs2
xor x17, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x0)
li x3, 0x5555555555555555 # initialize rs1
li x31, 0x0000000000000000 # initialize rs2
xor x30, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x1)
li x25, 0x5555555555555555 # initialize rs1
li x19, 0x0000000000000001 # initialize rs2
xor x24, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x2)
li x28, 0x5555555555555555 # initialize rs1
li x3, 0x0000000000000002 # initialize rs2
xor x16, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000000)
li x21, 0x5555555555555555 # initialize rs1
li x26, 0x8000000000000000 # initialize rs2
xor x20, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x8000000000000001)
li x13, 0x5555555555555555 # initialize rs1
li x30, 0x8000000000000001 # initialize rs2
xor x2, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7fffffffffffffff)
li x21, 0x5555555555555555 # initialize rs1
li x26, 0x7fffffffffffffff # initialize rs2
xor x19, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x7ffffffffffffffe)
li x5, 0x5555555555555555 # initialize rs1
li x11, 0x7ffffffffffffffe # initialize rs2
xor x27, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffffffffffff)
li x6, 0x5555555555555555 # initialize rs1
li x27, 0xffffffffffffffff # initialize rs2
xor x30, x6, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffffffffffe)
li x19, 0x5555555555555555 # initialize rs1
li x25, 0xfffffffffffffffe # initialize rs2
xor x21, x19, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5bbc887763ae86f2)
li x1, 0x5555555555555555 # initialize rs1
li x26, 0x5bbc887763ae86f2 # initialize rs2
xor x25, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xaaaaaaaaaaaaaaaa)
li x12, 0x5555555555555555 # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x10, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x5555555555555555)
li x20, 0x5555555555555555 # initialize rs1
li x15, 0x5555555555555555 # initialize rs2
xor x24, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xffffffff)
li x31, 0x5555555555555555 # initialize rs1
li x17, 0x00000000ffffffff # initialize rs2
xor x28, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0xfffffffe)
li x27, 0x5555555555555555 # initialize rs1
li x15, 0x00000000fffffffe # initialize rs2
xor x6, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000000)
li x14, 0x5555555555555555 # initialize rs1
li x31, 0x0000000100000000 # initialize rs2
xor x15, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5555555555555555 rs2 = 0x100000001)
li x25, 0x5555555555555555 # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
xor x1, x25, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x3, 0x00000000ffffffff # initialize rs1
li x21, 0x0000000000000000 # initialize rs2
xor x9, x3, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x18, 0x00000000ffffffff # initialize rs1
li x28, 0x0000000000000001 # initialize rs2
xor x19, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x23, 0x00000000ffffffff # initialize rs1
li x12, 0x0000000000000002 # initialize rs2
xor x18, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000000)
li x13, 0x00000000ffffffff # initialize rs1
li x22, 0x8000000000000000 # initialize rs2
xor x1, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x8000000000000001)
li x27, 0x00000000ffffffff # initialize rs1
li x1, 0x8000000000000001 # initialize rs2
xor x2, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffffffffffff)
li x10, 0x00000000ffffffff # initialize rs1
li x16, 0x7fffffffffffffff # initialize rs2
xor x1, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffffffffffe)
li x24, 0x00000000ffffffff # initialize rs1
li x22, 0x7ffffffffffffffe # initialize rs2
xor x5, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffffffffffff)
li x9, 0x00000000ffffffff # initialize rs1
li x16, 0xffffffffffffffff # initialize rs2
xor x6, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffffffffffe)
li x26, 0x00000000ffffffff # initialize rs1
li x1, 0xfffffffffffffffe # initialize rs2
xor x18, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc887763ae86f2)
li x28, 0x00000000ffffffff # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
xor x19, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaaaaaaaaaa)
li x22, 0x00000000ffffffff # initialize rs1
li x2, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x30, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5555555555555555)
li x29, 0x00000000ffffffff # initialize rs1
li x8, 0x5555555555555555 # initialize rs2
xor x1, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x7, 0x00000000ffffffff # initialize rs1
li x15, 0x00000000ffffffff # initialize rs2
xor x25, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x25, 0x00000000ffffffff # initialize rs1
li x1, 0x00000000fffffffe # initialize rs2
xor x21, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000000)
li x24, 0x00000000ffffffff # initialize rs1
li x28, 0x0000000100000000 # initialize rs2
xor x7, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x100000001)
li x18, 0x00000000ffffffff # initialize rs1
li x23, 0x0000000100000001 # initialize rs2
xor x27, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x3, 0x00000000fffffffe # initialize rs1
li x2, 0x0000000000000000 # initialize rs2
xor x22, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x30, 0x00000000fffffffe # initialize rs1
li x9, 0x0000000000000001 # initialize rs2
xor x16, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x31, 0x00000000fffffffe # initialize rs1
li x23, 0x0000000000000002 # initialize rs2
xor x17, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000000)
li x16, 0x00000000fffffffe # initialize rs1
li x13, 0x8000000000000000 # initialize rs2
xor x12, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x8000000000000001)
li x17, 0x00000000fffffffe # initialize rs1
li x27, 0x8000000000000001 # initialize rs2
xor x14, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffffffffffff)
li x21, 0x00000000fffffffe # initialize rs1
li x11, 0x7fffffffffffffff # initialize rs2
xor x23, x21, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffffffffffe)
li x23, 0x00000000fffffffe # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
xor x9, x23, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffffffffffff)
li x8, 0x00000000fffffffe # initialize rs1
li x6, 0xffffffffffffffff # initialize rs2
xor x18, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffffffffffe)
li x7, 0x00000000fffffffe # initialize rs1
li x2, 0xfffffffffffffffe # initialize rs2
xor x25, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc887763ae86f2)
li x15, 0x00000000fffffffe # initialize rs1
li x28, 0x5bbc887763ae86f2 # initialize rs2
xor x22, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaaaaaaaaaa)
li x15, 0x00000000fffffffe # initialize rs1
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x21, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5555555555555555)
li x9, 0x00000000fffffffe # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
xor x10, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x5, 0x00000000fffffffe # initialize rs1
li x20, 0x00000000ffffffff # initialize rs2
xor x16, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x22, 0x00000000fffffffe # initialize rs1
li x13, 0x00000000fffffffe # initialize rs2
xor x26, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000000)
li x13, 0x00000000fffffffe # initialize rs1
li x27, 0x0000000100000000 # initialize rs2
xor x7, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x100000001)
li x20, 0x00000000fffffffe # initialize rs1
li x28, 0x0000000100000001 # initialize rs2
xor x18, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x0)
li x17, 0x0000000100000000 # initialize rs1
li x7, 0x0000000000000000 # initialize rs2
xor x31, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x1)
li x12, 0x0000000100000000 # initialize rs1
li x13, 0x0000000000000001 # initialize rs2
xor x19, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x2)
li x27, 0x0000000100000000 # initialize rs1
li x16, 0x0000000000000002 # initialize rs2
xor x2, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000000)
li x9, 0x0000000100000000 # initialize rs1
li x29, 0x8000000000000000 # initialize rs2
xor x26, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x8000000000000001)
li x16, 0x0000000100000000 # initialize rs1
li x10, 0x8000000000000001 # initialize rs2
xor x29, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7fffffffffffffff)
li x12, 0x0000000100000000 # initialize rs1
li x13, 0x7fffffffffffffff # initialize rs2
xor x15, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1056)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x7ffffffffffffffe)
li x2, 0x0000000100000000 # initialize rs1
li x6, 0x7ffffffffffffffe # initialize rs2
xor x23, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1064)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffffffffffff)
li x27, 0x0000000100000000 # initialize rs1
li x15, 0xffffffffffffffff # initialize rs2
xor x17, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffffffffffe)
li x21, 0x0000000100000000 # initialize rs1
li x26, 0xfffffffffffffffe # initialize rs2
xor x24, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1080)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5bbc887763ae86f2)
li x9, 0x0000000100000000 # initialize rs1
li x25, 0x5bbc887763ae86f2 # initialize rs2
xor x10, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1088)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xaaaaaaaaaaaaaaaa)
li x26, 0x0000000100000000 # initialize rs1
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x19, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1096)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x5555555555555555)
li x26, 0x0000000100000000 # initialize rs1
li x16, 0x5555555555555555 # initialize rs2
xor x5, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1104)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xffffffff)
li x9, 0x0000000100000000 # initialize rs1
li x11, 0x00000000ffffffff # initialize rs2
xor x31, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1112)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0xfffffffe)
li x6, 0x0000000100000000 # initialize rs1
li x10, 0x00000000fffffffe # initialize rs2
xor x18, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1120)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000000)
li x2, 0x0000000100000000 # initialize rs1
li x15, 0x0000000100000000 # initialize rs2
xor x10, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1128)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000000 rs2 = 0x100000001)
li x14, 0x0000000100000000 # initialize rs1
li x13, 0x0000000100000001 # initialize rs2
xor x28, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1136)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x0)
li x19, 0x0000000100000001 # initialize rs1
li x27, 0x0000000000000000 # initialize rs2
xor x12, x19, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1144)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x1)
li x13, 0x0000000100000001 # initialize rs1
li x15, 0x0000000000000001 # initialize rs2
xor x1, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1152)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x2)
li x2, 0x0000000100000001 # initialize rs1
li x20, 0x0000000000000002 # initialize rs2
xor x8, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1160)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000000)
li x15, 0x0000000100000001 # initialize rs1
li x18, 0x8000000000000000 # initialize rs2
xor x14, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1168)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x8000000000000001)
li x5, 0x0000000100000001 # initialize rs1
li x18, 0x8000000000000001 # initialize rs2
xor x2, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1176)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7fffffffffffffff)
li x8, 0x0000000100000001 # initialize rs1
li x23, 0x7fffffffffffffff # initialize rs2
xor x5, x8, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1184)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x7ffffffffffffffe)
li x3, 0x0000000100000001 # initialize rs1
li x5, 0x7ffffffffffffffe # initialize rs2
xor x31, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1192)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffffffffffff)
li x25, 0x0000000100000001 # initialize rs1
li x7, 0xffffffffffffffff # initialize rs2
xor x31, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1200)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffffffffffe)
li x24, 0x0000000100000001 # initialize rs1
li x13, 0xfffffffffffffffe # initialize rs2
xor x30, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1208)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5bbc887763ae86f2)
li x6, 0x0000000100000001 # initialize rs1
li x11, 0x5bbc887763ae86f2 # initialize rs2
xor x10, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1216)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xaaaaaaaaaaaaaaaa)
li x23, 0x0000000100000001 # initialize rs1
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs2
xor x16, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1224)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x5555555555555555)
li x16, 0x0000000100000001 # initialize rs1
li x18, 0x5555555555555555 # initialize rs2
xor x7, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1232)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xffffffff)
li x7, 0x0000000100000001 # initialize rs1
li x23, 0x00000000ffffffff # initialize rs2
xor x15, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1240)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0xfffffffe)
li x20, 0x0000000100000001 # initialize rs1
li x22, 0x00000000fffffffe # initialize rs2
xor x15, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1248)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000000)
li x1, 0x0000000100000001 # initialize rs1
li x5, 0x0000000100000000 # initialize rs2
xor x12, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1256)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x100000001 rs2 = 0x100000001)
li x21, 0x0000000100000001 # initialize rs1
li x12, 0x0000000100000001 # initialize rs2
xor x10, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1264)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xc905b8422f95cbd9 # initialize rs1
li x0, 0xbd2bed7a467cfab6 # initialize rs2
xor x22, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x959ce2c756cf0cea # initialize rs1
li x1, 0xc87d248da1f7cb1f # initialize rs2
xor x13, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1280)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xc1c85e78111c86e4 # initialize rs1
li x2, 0xefb6d5d8863eb595 # initialize rs2
xor x19, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1288)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xa0b938f9da105db6 # initialize rs1
li x3, 0x8d527ba99a4554c0 # initialize rs2
xor x14, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1296)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0a3ff6f859588fe2 # initialize rs1
li x4, 0x3e333fdf1ac00f15 # initialize rs2
xor x13, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1304)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x81c875163ada2f34 # initialize rs1
li x5, 0x7d2dac764b48af65 # initialize rs2
xor x29, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x29, 1312)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x82a45b5824596b39 # initialize rs1
li x6, 0x4c4ed90996561257 # initialize rs2
xor x9, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 1320)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x091d438d3d1a1cf4 # initialize rs1
li x7, 0x89482a13a84cff23 # initialize rs2
xor x19, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1328)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x2405a40055b1e60c # initialize rs1
li x8, 0x0b7c3a5ca64a346b # initialize rs2
xor x16, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1336)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xbf270e6556a3744f # initialize rs1
li x9, 0x580b459822241490 # initialize rs2
xor x6, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1344)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x69b02989fda30034 # initialize rs1
li x10, 0x5c918106b722cbfe # initialize rs2
xor x18, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1352)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x86648cfae1cae85c # initialize rs1
li x11, 0xcbc9655faf78e639 # initialize rs2
xor x27, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1360)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x36935af9ef31120e # initialize rs1
li x12, 0x42d88910c412cd0c # initialize rs2
xor x19, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1368)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x235709efa9197092 # initialize rs1
li x13, 0xe12119b1daf45c9d # initialize rs2
xor x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1376)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xe6bf087ea3fd05fa # initialize rs1
li x14, 0x81ae3781086399d1 # initialize rs2
xor x7, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1384)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x9e4885a623ed088f # initialize rs1
li x15, 0xa5fde67115841d1d # initialize rs2
xor x17, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1392)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xc6cc8a1669316ae9 # initialize rs1
li x16, 0xf9c6d5b36835ccaa # initialize rs2
xor x15, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1400)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xa9c5f5b289bbf064 # initialize rs1
li x17, 0x3344488e652ae5d2 # initialize rs2
xor x25, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1408)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xbc123b94e9e0e912 # initialize rs1
li x18, 0x2367b55688ac821d # initialize rs2
xor x20, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1416)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x765c6ab0d9fc6800 # initialize rs1
li x19, 0x826930631a11ed82 # initialize rs2
xor x20, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1424)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x0099e60459b5212b # initialize rs1
li x20, 0xadab8c118629b75c # initialize rs2
xor x29, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1432)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x5e03a2c3e5f0f6a6 # initialize rs1
li x21, 0x1fa8ef1873885bbf # initialize rs2
xor x11, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1440)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x7e80d8f1d01019eb # initialize rs1
li x22, 0xd8e90b37c3acdcc8 # initialize rs2
xor x18, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1448)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xaf56e349996764ff # initialize rs1
li x23, 0x4efb9e7bece0cf3e # initialize rs2
xor x19, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1456)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x8a992b8740d5d6d0 # initialize rs1
li x24, 0x62d149b8e96e8fa6 # initialize rs2
xor x14, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1464)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x3c35aa4253f92a42 # initialize rs1
li x25, 0x1c8869b855aa0765 # initialize rs2
xor x7, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1472)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x23e213273b2c72e6 # initialize rs1
li x26, 0x4015bb9e57fedda1 # initialize rs2
xor x16, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1480)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xd2f5990ba3607445 # initialize rs1
li x27, 0x7f860bb52f71f3f3 # initialize rs2
xor x8, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1488)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xc76963db5767c5b3 # initialize rs1
li x28, 0xec26685aa2e0f767 # initialize rs2
xor x16, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1496)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x95713adfd71caf18 # initialize rs1
li x29, 0x2af2f70b89483e60 # initialize rs2
xor x24, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1504)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xce352bce2239f40b # initialize rs1
li x30, 0xcbd9df286766ee94 # initialize rs2
xor x14, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xcb1e68f6c377cb28 # initialize rs1
li x31, 0x9d1b777f2995e06e # initialize rs2
xor x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xade1a95cb5c4bb14 # initialize rs1
li x2, 0xe8ca2a9f0a11ba96 # initialize rs2
xor x0, x0, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xdf09bde951e78674 # initialize rs1
li x16, 0x62664cbff6e7ac7b # initialize rs2
xor x1, x1, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x4aa0d0c6e62e4443 # initialize rs1
li x3, 0x01415b7a20b7baa2 # initialize rs2
xor x2, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x5deaa00827ab39c3 # initialize rs1
li x7, 0x7ada651077da52c5 # initialize rs2
xor x3, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x220faef27c925002 # initialize rs1
li x31, 0xe52252535361f268 # initialize rs2
xor x4, x4, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x48cea134fdce00ec # initialize rs1
li x23, 0x01c8b4a40aac589e # initialize rs2
xor x5, x5, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xce8b7a2e237a5576 # initialize rs1
li x3, 0x0c6e9a57cbbbae13 # initialize rs2
xor x6, x6, x3 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xcd459d508a14e180 # initialize rs1
li x15, 0x5759f6f373344cc6 # initialize rs2
xor x7, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xc5b95046362549aa # initialize rs1
li x3, 0xb1d74ea99766ab53 # initialize rs2
xor x8, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x5b4b0035da15a15d # initialize rs1
li x20, 0xb79f211db15a8377 # initialize rs2
xor x9, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x670c7e30eccb53e3 # initialize rs1
li x26, 0xd5102596003cf54e # initialize rs2
xor x10, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x04346f054c843986 # initialize rs1
li x5, 0x4309ed5a39c17861 # initialize rs2
xor x11, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x42dca289e46fdb64 # initialize rs1
li x16, 0xa366f66815a775a8 # initialize rs2
xor x12, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xff1b6903baa1c6e4 # initialize rs1
li x16, 0x714a78d6ef7eb4d4 # initialize rs2
xor x13, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xd36df628a8a59423 # initialize rs1
li x27, 0x57217c09dc9bcee6 # initialize rs2
xor x14, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xb1484bbaee6c08a4 # initialize rs1
li x29, 0x8eddfc6a8552b7b4 # initialize rs2
xor x15, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x12d6567451471f9f # initialize rs1
li x22, 0x21dc7e142cc3dc75 # initialize rs2
xor x16, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xaf1a39746b4c803e # initialize rs1
li x3, 0x4f6cf2d8e490c869 # initialize rs2
xor x17, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xb2f4fa19ae85dfe7 # initialize rs1
li x28, 0xd13748211b031764 # initialize rs2
xor x18, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xb90a2b805fadbc42 # initialize rs1
li x7, 0x4e4f9ad9123004c9 # initialize rs2
xor x19, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x44fb28b4e5c115a2 # initialize rs1
li x12, 0x05aefd0eba1588a7 # initialize rs2
xor x20, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x6169f8a008dd8440 # initialize rs1
li x23, 0x2c57c503bd355e73 # initialize rs2
xor x21, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xc812331a8276b3e8 # initialize rs1
li x20, 0x844e5787a19ce754 # initialize rs2
xor x22, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x1464c0c454c746c6 # initialize rs1
li x20, 0x8560d1a1b1a77113 # initialize rs2
xor x23, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x6b6669a070d2471b # initialize rs1
li x15, 0x0defd56f6b29ef24 # initialize rs2
xor x24, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xdb31dd12b38b5f56 # initialize rs1
li x13, 0xa130075bdd106d12 # initialize rs2
xor x25, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3ce77187fd422de3 # initialize rs1
li x21, 0xcbe6e5feaaaafa40 # initialize rs2
xor x26, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x302a3e86a0bdb771 # initialize rs1
li x16, 0x93be44f4841b2744 # initialize rs2
xor x27, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xf1409510abeb1432 # initialize rs1
li x15, 0xd13ccac68de14f54 # initialize rs2
xor x28, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xcbe86d6a88f286cd # initialize rs1
li x13, 0x077259421f31d8b9 # initialize rs2
xor x29, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x38b43b575294fec7 # initialize rs1
li x28, 0xdf44e4bd320f7ccb # initialize rs2
xor x30, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x401ae339b2c491f3 # initialize rs1
li x14, 0x4b88a865cf076d57 # initialize rs2
xor x31, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1776)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x29, 0xd08e400b8ba36658 # initialize rs1
li x0, 0xa4369de176b13209 # initialize rs2
xor x0, x29, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1784)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x6, 0x6359d8b5c66b51cc # initialize rs1
li x1, 0x844a45e3b4af4451 # initialize rs2
xor x1, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x31, 0x4245aba561c16648 # initialize rs1
li x2, 0xade2cea43d06aaa6 # initialize rs2
xor x2, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 0)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x6, 0x0721d81f6a42c8ce # initialize rs1
li x3, 0xeb02314290b41c0c # initialize rs2
xor x3, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0x158ab2312c6e793b # initialize rs1
li x4, 0xd2fb42ed61a881ab # initialize rs2
xor x4, x23, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0xf6d950fec9aa0650 # initialize rs1
li x5, 0x55a7e76777c94041 # initialize rs2
xor x5, x28, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 24)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x28, 0x47144cc3c4684c69 # initialize rs1
li x6, 0xa7fab9b028698b84 # initialize rs2
xor x6, x28, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 32)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0x8e1147e64a97ced8 # initialize rs1
li x7, 0x6bdae920dc1b0a7c # initialize rs2
xor x7, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 40)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x29, 0x6b2bf9b871a11254 # initialize rs1
li x8, 0x348b7624a6aff9b1 # initialize rs2
xor x8, x29, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 48)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x1, 0x2d62888d3da01640 # initialize rs1
li x9, 0x754a847a9eb72dab # initialize rs2
xor x9, x1, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 56)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x17, 0x676989d07795bdbe # initialize rs1
li x10, 0xf0a53b883aa82c10 # initialize rs2
xor x10, x17, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 64)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x4, 0x2237326154cf5a84 # initialize rs1
li x11, 0x103260aa7f6e5a5f # initialize rs2
xor x11, x4, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 72)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x6, 0xed853598eca7d3bd # initialize rs1
li x12, 0xfc92925f67a2b71d # initialize rs2
xor x12, x6, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 80)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x14, 0xab2ca520b75913ca # initialize rs1
li x13, 0xa6ad0c983bcbe269 # initialize rs2
xor x13, x14, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 88)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x30, 0x669ee14d8824c997 # initialize rs1
li x14, 0x975753d2816a4ca4 # initialize rs2
xor x14, x30, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 96)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x10, 0x89c086b65ac58c7c # initialize rs1
li x15, 0xc8a8f75522780344 # initialize rs2
xor x15, x10, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 104)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x16, 0x27fb45b8e6f6dc81 # initialize rs1
li x16, 0x9baaf0567e12c589 # initialize rs2
xor x16, x16, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 112)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x24, 0xac6123c458db7944 # initialize rs1
li x17, 0x7636963abc8656be # initialize rs2
xor x17, x24, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 120)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x7, 0x36d065737d01c248 # initialize rs1
li x18, 0x38926ca5df77df0c # initialize rs2
xor x18, x7, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 128)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x23, 0xa5a397aa88e307a4 # initialize rs1
li x19, 0xd2f82f30cc18bc0b # initialize rs2
xor x19, x23, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 136)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x19, 0x0e453dfe5a1ce3e9 # initialize rs1
li x20, 0x39b0d315acaeff5e # initialize rs2
xor x20, x19, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 144)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x4, 0x853932f00a15aa55 # initialize rs1
li x21, 0x7daee6e3a2657222 # initialize rs2
xor x21, x4, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 152)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x26, 0xe5c7766a5c4fbec5 # initialize rs1
li x22, 0xe3b2c2b960018150 # initialize rs2
xor x22, x26, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 160)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x7, 0x596e7706905dd8b0 # initialize rs1
li x23, 0x6129eb483e1e3065 # initialize rs2
xor x23, x7, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 168)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x10, 0x25546cf563d02f64 # initialize rs1
li x24, 0xb091a7762d7438cc # initialize rs2
xor x24, x10, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 176)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x15, 0xbb708ef41971393c # initialize rs1
li x25, 0x67bce714185e2c20 # initialize rs2
xor x25, x15, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 184)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x10, 0x022637b23a3830a6 # initialize rs1
li x26, 0x6a33c94848dc8e65 # initialize rs2
xor x26, x10, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 192)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x15, 0x47c3011607d04b61 # initialize rs1
li x27, 0x25158f3cf0fb9c72 # initialize rs2
xor x27, x15, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 200)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x13, 0xb9ebaccf79a959e9 # initialize rs1
li x28, 0x5e742be7e119eaf5 # initialize rs2
xor x28, x13, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 208)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x15, 0xd1817225c671f619 # initialize rs1
li x29, 0x43e6450a9853dbe0 # initialize rs2
xor x29, x15, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 216)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x14, 0x3c5f745010e58be7 # initialize rs1
li x30, 0x13537d15c7634b76 # initialize rs2
xor x30, x14, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 224)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x15, 0xf235c00fbb6af1ac # initialize rs1
li x31, 0x610206e47c73cafc # initialize rs2
xor x31, x15, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 232)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x51052c1fbd32e7f9 # initialize rs1
li x0, 0xab7867cddc94d63d # initialize rs2
xor x0, x0, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 240)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x209fe38dcf638571 # initialize rs1
li x1, 0xdb55ccc1b77e9afb # initialize rs2
xor x1, x1, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 248)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x76233f226980b488 # initialize rs1
li x2, 0xbe03e285fc9c6be6 # initialize rs2
xor x2, x2, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 256)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xa652b923bd97df94 # initialize rs1
li x3, 0x500e1edfdbeaa7a7 # initialize rs2
xor x3, x3, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 264)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
li x4, 0xf58eccdcdcd6fd13 # initialize rs1
li x4, 0x06a87e627b2535e3 # initialize rs2
xor x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8b8200a0372a9dbd # initialize rs1
li x5, 0xae38046990089b9a # initialize rs2
xor x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 280)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9d0fd37ae9e789a7 # initialize rs1
li x6, 0x740680b5592cfde0 # initialize rs2
xor x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 288)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8bba81190481c805 # initialize rs1
li x7, 0xeca75ae3eabd5909 # initialize rs2
xor x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 296)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x0b559959eaf4d694 # initialize rs1
li x8, 0x663f7cc7769c1d28 # initialize rs2
xor x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 304)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xa75d6d891417ff48 # initialize rs1
li x9, 0x82285a4ae8445746 # initialize rs2
xor x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 312)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xabeea3ed706a4ccc # initialize rs1
li x10, 0xa4e8b938314a5327 # initialize rs2
xor x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 320)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xb2d2242bfc6fc059 # initialize rs1
li x11, 0x038722be2caedc60 # initialize rs2
xor x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 328)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xdd5be221e472f4a7 # initialize rs1
li x12, 0xd442da965e35a16a # initialize rs2
xor x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 336)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xb68028fab4285df8 # initialize rs1
li x13, 0x3149c448be71076f # initialize rs2
xor x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x02949c6aef7de2ca # initialize rs1
li x14, 0x137c579f3293429c # initialize rs2
xor x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xbce4a20c931cd64c # initialize rs1
li x15, 0x4fa4e957cda37904 # initialize rs2
xor x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 360)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x652d4bba815f0659 # initialize rs1
li x16, 0xc1321834c59dd06e # initialize rs2
xor x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xdeab1bbf8839ca7f # initialize rs1
li x17, 0x88bfa7fc09c8d645 # initialize rs2
xor x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 376)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x031d2bf7730b29b8 # initialize rs1
li x18, 0xb1c9c15fae196e86 # initialize rs2
xor x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 384)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x5d90f3e0c743b2e5 # initialize rs1
li x19, 0xbb533e68fffaccc7 # initialize rs2
xor x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 392)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xa28b3d0ac8dcb455 # initialize rs1
li x20, 0x3d73d158648d66b5 # initialize rs2
xor x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 400)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x3c4cf3bcabc70a42 # initialize rs1
li x21, 0x53d6908add5e2ea1 # initialize rs2
xor x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 408)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x642458e5f6e5d2aa # initialize rs1
li x22, 0x595efa0cd2ddc667 # initialize rs2
xor x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 416)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xc580cfbd3add4635 # initialize rs1
li x23, 0xb89f9c5b6fbdb53c # initialize rs2
xor x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x7bc6a9e7b5b251a4 # initialize rs1
li x24, 0x1ca54ae6afc01165 # initialize rs2
xor x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 432)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xd6c358f132273f2a # initialize rs1
li x25, 0x6be2345be3e44886 # initialize rs2
xor x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xdadb7c95ef440097 # initialize rs1
li x26, 0x91eb6aefc0db500a # initialize rs2
xor x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x759fd6f9932b5427 # initialize rs1
li x27, 0x7da4de5bd4430bf3 # initialize rs2
xor x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xb1135b883069d30b # initialize rs1
li x28, 0xf06eeed5c32e21f6 # initialize rs2
xor x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x39c5923ca9ed3584 # initialize rs1
li x29, 0x51b243eb886fe91f # initialize rs2
xor x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x23a3729daaedb373 # initialize rs1
li x30, 0x5d385395725961f3 # initialize rs2
xor x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xa886816442bbfbf7 # initialize rs1
li x31, 0x25dc97f8868a371a # initialize rs2
xor x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x2, x25 # perform first operation
xor x29, x12, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x27, x26 # perform first operation
xor x19, x10, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x30, x5 # perform first operation
xor x3, x27, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x6, x22, x7 # perform first operation
xor x7, x6, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x8, x31, x9 # perform first operation
xor x26, x6, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x15, x23, x7 # perform first operation
xor x23, x13, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x13, x21, x20 # perform first operation
xor x13, x3, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x14, x24 # perform first operation
xor x7, x22, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x31, x11, x14 # perform first operation
xor x31, x9, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x13, x21, x20 # perform first operation
xor x21, x31, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x28, x29 # perform first operation
xor x29, x18, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x20, x9 # perform first operation
xor x11, x8, x29 # perform second (triggering) operation

#.EQU SIGSIZE,4096


// ******************
// Tests from: WALLY-COV-srli.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xde7e7171be431b2f # initialize rs1
srli x7, x0, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x340cd6ee94f54a11 # initialize rs1
srli x28, x1, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xd0c6cfab7f8ded43 # initialize rs1
srli x3, x2, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x6fd933070ca7ec2a # initialize rs1
srli x28, x3, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x1f848a32a232ddbb # initialize rs1
srli x14, x4, 31 # perform operation
RVTEST_SIGUPD(x6, x0, x14, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
li x5, 0xa6cc9cdf7f8c1d85 # initialize rs1
srli x12, x5, 29 # perform operation
RVTEST_SIGUPD(x6, x0, x12, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4359cfb553d15c25 # initialize rs1
srli x13, x6, 41 # perform operation
RVTEST_SIGUPD(x7, x0, x13, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x04421a03d57727b7 # initialize rs1
srli x10, x7, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x71bb5be5eb365503 # initialize rs1
srli x22, x8, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x9ab3b7271763512d # initialize rs1
srli x18, x9, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xb1be11a0a8040dbf # initialize rs1
srli x11, x10, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xe1c0eb5e87c33a34 # initialize rs1
srli x3, x11, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x8e2b94bbc5c564ef # initialize rs1
srli x7, x12, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xc2f4ecc82ec0d5f0 # initialize rs1
srli x11, x13, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x6ffb114302c519f0 # initialize rs1
srli x20, x14, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x11bd633ae87659e1 # initialize rs1
srli x29, x15, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x6cdf3eff84d507ed # initialize rs1
srli x9, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x6f97c20c6c07397c # initialize rs1
srli x26, x17, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xa0c20bc4d6114df1 # initialize rs1
srli x22, x18, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x7f8a46bb9b0ccc31 # initialize rs1
srli x10, x19, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xbbf82357844b7ba8 # initialize rs1
srli x21, x20, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x8dc78350ce050bb7 # initialize rs1
srli x16, x21, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xa237393a2cbdcac0 # initialize rs1
srli x29, x22, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x6af655b09176e8e1 # initialize rs1
srli x20, x23, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x1cf40e821aa7919d # initialize rs1
srli x22, x24, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xc8af49a099caf5c4 # initialize rs1
srli x21, x25, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xed4dc9b65fe8dbf8 # initialize rs1
srli x23, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe6d60a27ed71c4bf # initialize rs1
srli x31, x27, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xfcc9132cd79d424c # initialize rs1
srli x31, x28, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x10cd04cac370ec37 # initialize rs1
srli x8, x29, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x297628eaa13b2a64 # initialize rs1
srli x21, x30, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x38d62cf502da60b6 # initialize rs1
srli x10, x31, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 248)

# Testcase cp_rd (Test destination rd = x0)
li x6, 0x26a18b22c36a6d75 # initialize rs1
srli x0, x6, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x15, 0xfd4ffa36fff840dc # initialize rs1
srli x1, x15, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x25, 0x26593b12d616e817 # initialize rs1
srli x2, x25, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x9, 0x1c4d2c61bfc849c9 # initialize rs1
srli x3, x9, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0x5aa23f4f4626784e # initialize rs1
srli x4, x23, 23 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0xe2ed87e7e3e0f9d8 # initialize rs1
srli x5, x3, 8 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0xbf0daba285665925 # initialize rs1
srli x6, x24, 2 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0x6f524f2d763f5999 # initialize rs1
srli x7, x22, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0xd05bc32c04fe3868 # initialize rs1
srli x8, x31, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x15, 0xd64ce26d2b31a4ed # initialize rs1
srli x9, x15, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x10, 0xac5a416295515cc4 # initialize rs1
srli x10, x10, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x2, 0xf374167260fe8124 # initialize rs1
srli x11, x2, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x23, 0x19f6cb459d8136a8 # initialize rs1
srli x12, x23, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x8, 0x586e042d330078d5 # initialize rs1
srli x13, x8, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x27, 0xa41b71d9cc6765e0 # initialize rs1
srli x14, x27, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x7, 0x0e1a19f2adeb193a # initialize rs1
srli x15, x7, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x10, 0x84947cb356af2e54 # initialize rs1
srli x16, x10, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x18, 0x915de5fdd3992006 # initialize rs1
srli x17, x18, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x9, 0xcda8c6f96e6bc828 # initialize rs1
srli x18, x9, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x29, 0x9ef375bbdfe3589f # initialize rs1
srli x19, x29, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0xa1e775c3e9518e2b # initialize rs1
srli x20, x1, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x20, 0xbf597636df76e094 # initialize rs1
srli x21, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x8, 0xfded920b3faa2268 # initialize rs1
srli x22, x8, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x31, 0x2bcbe717089e6196 # initialize rs1
srli x23, x31, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x13, 0xc24ea05676de7c06 # initialize rs1
srli x24, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x16, 0xa4844a1eb00cd8ef # initialize rs1
srli x25, x16, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x20, 0x3d2cb1e38485e50b # initialize rs1
srli x26, x20, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x31, 0x4087c257e4afb6a7 # initialize rs1
srli x27, x31, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x22, 0x5b5f35c2cc3bdd41 # initialize rs1
srli x28, x22, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x28, 0x8df5ca1e94fdde8b # initialize rs1
srli x29, x28, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x29, 0xfcc7ff7bafc1ff27 # initialize rs1
srli x30, x29, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0x48bcd737908dab92 # initialize rs1
srli x31, x13, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x7, 0x0000000000000000 # initialize rs1
srli x21, x7, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x5, 0x0000000000000001 # initialize rs1
srli x17, x5, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x9, 0x0000000000000002 # initialize rs1
srli x13, x9, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x5, 0x8000000000000000 # initialize rs1
srli x9, x5, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x25, 0x8000000000000001 # initialize rs1
srli x11, x25, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x26, 0x7fffffffffffffff # initialize rs1
srli x28, x26, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x14, 0x7ffffffffffffffe # initialize rs1
srli x15, x14, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x12, 0xffffffffffffffff # initialize rs1
srli x20, x12, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x19, 0xfffffffffffffffe # initialize rs1
srli x30, x19, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x23, 0x5bbc887763ae86f2 # initialize rs1
srli x8, x23, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x11, 0xaaaaaaaaaaaaaaaa # initialize rs1
srli x29, x11, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x28, 0x5555555555555555 # initialize rs1
srli x22, x28, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x20, 0x00000000ffffffff # initialize rs1
srli x17, x20, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x24, 0x00000000fffffffe # initialize rs1
srli x21, x24, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x30, 0x0000000100000000 # initialize rs1
srli x9, x30, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x28, 0x0000000100000001 # initialize rs1
srli x2, x28, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x735a127e34e6a4a5 # initialize rs1
srli x0, x0, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x3c2e8ffff08e4002 # initialize rs1
srli x1, x1, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 648)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xa3e53349eaef33b1 # initialize rs1
srli x2, x2, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x9a33c34a11dedfbf # initialize rs1
srli x3, x3, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 664)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xd7313d26766f8a8c # initialize rs1
srli x4, x4, 40 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 672)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
li x5, 0x3165c1e5b6716040 # initialize rs1
srli x5, x5, 23 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 680)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xfaa70bfed3073a9b # initialize rs1
srli x6, x6, 35 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 688)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa27753e1fd9210f8 # initialize rs1
srli x7, x7, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 696)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x8602e31fca0a2a05 # initialize rs1
srli x8, x8, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 704)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xe51394ffb7c5eccb # initialize rs1
srli x9, x9, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 712)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x15ffcc3012df7902 # initialize rs1
srli x10, x10, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 720)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x60d7535c56545f6d # initialize rs1
srli x11, x11, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x37fb988200156778 # initialize rs1
srli x12, x12, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x3145bbfc10343d76 # initialize rs1
srli x13, x13, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xf9ed6ca0ea2fede0 # initialize rs1
srli x14, x14, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x3982b143871bfe5b # initialize rs1
srli x15, x15, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 760)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x20c91b19743f03ed # initialize rs1
srli x16, x16, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 768)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x9631fe9816a50e7c # initialize rs1
srli x17, x17, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 776)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x48b286cfa698ef94 # initialize rs1
srli x18, x18, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 784)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x3085119b1a85ddbf # initialize rs1
srli x19, x19, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x66336e6300fe7cb6 # initialize rs1
srli x20, x20, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x8453653b4e926847 # initialize rs1
srli x21, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xa9c81c0ecc55bce8 # initialize rs1
srli x22, x22, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 816)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xd79044d06d6dc0dc # initialize rs1
srli x23, x23, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 824)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xb1d3ad678b394f5b # initialize rs1
srli x24, x24, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xd624eb049d40b4d9 # initialize rs1
srli x25, x25, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 840)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xeab927f4176d66fa # initialize rs1
srli x26, x26, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 848)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x297d8886b1bedbc5 # initialize rs1
srli x27, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 856)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xcfb49b50b297071f # initialize rs1
srli x28, x28, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 864)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x38e1aea2c3a668f8 # initialize rs1
srli x29, x29, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x30f0f8fe022d3862 # initialize rs1
srli x30, x30, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x746b1a0102333a43 # initialize rs1
srli x31, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cp_uimm (Test bit = 0)
li x28, 0x471c0b4fa7095187 # initialize rs1
srli x11, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 896)

# Testcase cp_uimm (Test bit = 1)
li x3, 0xecdb31d06e7478df # initialize rs1
srli x15, x3, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 904)

# Testcase cp_uimm (Test bit = 2)
li x8, 0x0eed46860bc6b08b # initialize rs1
srli x21, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 912)

# Testcase cp_uimm (Test bit = 3)
li x1, 0x8104319b65aeb9f9 # initialize rs1
srli x18, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 920)

# Testcase cp_uimm (Test bit = 4)
li x18, 0xb9fea134e62d7746 # initialize rs1
srli x14, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 928)

# Testcase cp_uimm (Test bit = 5)
li x30, 0xae7f4a29ecf4432d # initialize rs1
srli x21, x30, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 936)

# Testcase cp_uimm (Test bit = 6)
li x1, 0xe41447fdc02f77c1 # initialize rs1
srli x5, x1, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 944)

# Testcase cp_uimm (Test bit = 7)
li x7, 0x1b78857697cb7417 # initialize rs1
srli x13, x7, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 952)

# Testcase cp_uimm (Test bit = 8)
li x20, 0xce05b7611d0c5d03 # initialize rs1
srli x9, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 960)

# Testcase cp_uimm (Test bit = 9)
li x19, 0xec45e58f73d65ca7 # initialize rs1
srli x11, x19, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 968)

# Testcase cp_uimm (Test bit = 10)
li x10, 0xefe9dbd86089cc8b # initialize rs1
srli x21, x10, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 976)

# Testcase cp_uimm (Test bit = 11)
li x2, 0x6258baca93711ea8 # initialize rs1
srli x5, x2, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 984)

# Testcase cp_uimm (Test bit = 12)
li x16, 0xcfd24b9b1f582196 # initialize rs1
srli x24, x16, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 992)

# Testcase cp_uimm (Test bit = 13)
li x3, 0x975990cbd9fafb99 # initialize rs1
srli x24, x3, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1000)

# Testcase cp_uimm (Test bit = 14)
li x13, 0x51577b7ab796746a # initialize rs1
srli x16, x13, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1008)

# Testcase cp_uimm (Test bit = 15)
li x2, 0x152869d972987ef1 # initialize rs1
srli x11, x2, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1016)

# Testcase cp_uimm (Test bit = 16)
li x8, 0x1b81310fbce8d769 # initialize rs1
srli x6, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1024)

# Testcase cp_uimm (Test bit = 17)
li x5, 0xb7f4e0225c159d93 # initialize rs1
srli x19, x5, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1032)

# Testcase cp_uimm (Test bit = 18)
li x30, 0x090f115596bfe034 # initialize rs1
srli x29, x30, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1040)

# Testcase cp_uimm (Test bit = 19)
li x3, 0xcd0d6e5c8c6b8699 # initialize rs1
srli x27, x3, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1048)

# Testcase cp_uimm (Test bit = 20)
li x21, 0xb268b92c3d99719d # initialize rs1
srli x13, x21, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1056)

# Testcase cp_uimm (Test bit = 21)
li x7, 0xf04b1e7c6872aede # initialize rs1
srli x14, x7, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1064)

# Testcase cp_uimm (Test bit = 22)
li x20, 0xe5c654057af0a80b # initialize rs1
srli x26, x20, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1072)

# Testcase cp_uimm (Test bit = 23)
li x6, 0xa2ad6dc87618f54a # initialize rs1
srli x31, x6, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1080)

# Testcase cp_uimm (Test bit = 24)
li x20, 0x8e50d9e7beaba665 # initialize rs1
srli x24, x20, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1088)

# Testcase cp_uimm (Test bit = 25)
li x8, 0xa7c3b8f2f53befd5 # initialize rs1
srli x7, x8, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1096)

# Testcase cp_uimm (Test bit = 26)
li x15, 0xe8d6260b856a0b43 # initialize rs1
srli x5, x15, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1104)

# Testcase cp_uimm (Test bit = 27)
li x29, 0x772c9eb3bbc970af # initialize rs1
srli x11, x29, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1112)

# Testcase cp_uimm (Test bit = 28)
li x1, 0xea351e02defea3bc # initialize rs1
srli x17, x1, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1120)

# Testcase cp_uimm (Test bit = 29)
li x6, 0x96546aff8e6bbaf5 # initialize rs1
srli x16, x6, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1128)

# Testcase cp_uimm (Test bit = 30)
li x29, 0x494de418a669e069 # initialize rs1
srli x18, x29, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cp_uimm (Test bit = 31)
li x20, 0x460e518bc9a16ea5 # initialize rs1
srli x24, x20, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1144)

# Testcase cp_uimm (Test bit = 32)
li x10, 0x9feb47ed023d9cd8 # initialize rs1
srli x24, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1152)

# Testcase cp_uimm (Test bit = 33)
li x12, 0x4f577eac053a5e1e # initialize rs1
srli x11, x12, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1160)

# Testcase cp_uimm (Test bit = 34)
li x14, 0x1da1bac5e7457b5a # initialize rs1
srli x3, x14, 34 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1168)

# Testcase cp_uimm (Test bit = 35)
li x8, 0x0f9fe7c952edb24c # initialize rs1
srli x30, x8, 35 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1176)

# Testcase cp_uimm (Test bit = 36)
li x5, 0xf78559de851b8333 # initialize rs1
srli x21, x5, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1184)

# Testcase cp_uimm (Test bit = 37)
li x25, 0x30c2391c9c59a92c # initialize rs1
srli x16, x25, 37 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1192)

# Testcase cp_uimm (Test bit = 38)
li x9, 0xd389609f8ca96ff1 # initialize rs1
srli x26, x9, 38 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1200)

# Testcase cp_uimm (Test bit = 39)
li x31, 0x4730684963e3b397 # initialize rs1
srli x2, x31, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1208)

# Testcase cp_uimm (Test bit = 40)
li x7, 0x2ed3957961c24ba9 # initialize rs1
srli x19, x7, 40 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1216)

# Testcase cp_uimm (Test bit = 41)
li x31, 0x1bb611c359f54639 # initialize rs1
srli x30, x31, 41 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1224)

# Testcase cp_uimm (Test bit = 42)
li x19, 0x479938e25790c6f5 # initialize rs1
srli x18, x19, 42 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1232)

# Testcase cp_uimm (Test bit = 43)
li x12, 0xd0ac87f9cfbdd9d2 # initialize rs1
srli x20, x12, 43 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1240)

# Testcase cp_uimm (Test bit = 44)
li x19, 0xf404f8354518e5db # initialize rs1
srli x23, x19, 44 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1248)

# Testcase cp_uimm (Test bit = 45)
li x29, 0x96f3c066b7f89257 # initialize rs1
srli x18, x29, 45 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cp_uimm (Test bit = 46)
li x31, 0x6efe037c919125e3 # initialize rs1
srli x1, x31, 46 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1264)

# Testcase cp_uimm (Test bit = 47)
li x2, 0x078ff765763c8220 # initialize rs1
srli x31, x2, 47 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1272)

# Testcase cp_uimm (Test bit = 48)
li x22, 0x3276e38d9d46cd5d # initialize rs1
srli x16, x22, 48 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1280)

# Testcase cp_uimm (Test bit = 49)
li x13, 0x81d823587d531488 # initialize rs1
srli x14, x13, 49 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1288)

# Testcase cp_uimm (Test bit = 50)
li x25, 0x3a669f2106c12ed8 # initialize rs1
srli x6, x25, 50 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1296)

# Testcase cp_uimm (Test bit = 51)
li x29, 0x755c771294f80b9e # initialize rs1
srli x11, x29, 51 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1304)

# Testcase cp_uimm (Test bit = 52)
li x6, 0x3d760fa5e76175fb # initialize rs1
srli x7, x6, 52 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1312)

# Testcase cp_uimm (Test bit = 53)
li x12, 0x77b7861a1d30370d # initialize rs1
srli x22, x12, 53 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1320)

# Testcase cp_uimm (Test bit = 54)
li x7, 0x10e99f21423117e7 # initialize rs1
srli x28, x7, 54 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1328)

# Testcase cp_uimm (Test bit = 55)
li x8, 0x8abe863cd033a382 # initialize rs1
srli x30, x8, 55 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1336)

# Testcase cp_uimm (Test bit = 56)
li x1, 0x9262e88261f53c7a # initialize rs1
srli x5, x1, 56 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1344)

# Testcase cp_uimm (Test bit = 57)
li x29, 0x1f82d37f9a3d94b5 # initialize rs1
srli x31, x29, 57 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cp_uimm (Test bit = 58)
li x26, 0x7289a2ec291af28d # initialize rs1
srli x8, x26, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1360)

# Testcase cp_uimm (Test bit = 59)
li x1, 0xf196bd5368697f63 # initialize rs1
srli x15, x1, 59 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1368)

# Testcase cp_uimm (Test bit = 60)
li x22, 0x0821a8d46b9bee5a # initialize rs1
srli x11, x22, 60 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1376)

# Testcase cp_uimm (Test bit = 61)
li x23, 0x532f27d10a83eacb # initialize rs1
srli x21, x23, 61 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1384)

# Testcase cp_uimm (Test bit = 62)
li x28, 0x0560e0beb7792364 # initialize rs1
srli x2, x28, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1392)

# Testcase cp_uimm (Test bit = 63)
li x14, 0x941e806367585625 # initialize rs1
srli x6, x14, 63 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1400)

# Testcase cp_gpr/fpr_hazard nohaz test
add x31, x21, x3 # perform first operation
srli x17, x7, 1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x23, x12 # perform first operation
srli x11, x19, 52 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x29, x6 # perform first operation
srli x27, x30, 0 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x22, x3 # perform first operation
srli x3, x31, 16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x12, x27, x28 # perform first operation
srli x12, x18, 42 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x10, x17 # perform first operation
srli x17, x16, 26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x21, x8, x17 # perform first operation
srli x21, x2, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x28, x24 # perform first operation
srli x1, x26, 45 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x27, x5, x14 # perform first operation
srli x27, x28, 21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x13, x14 # perform first operation
srli x13, x11, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x23, x8, x31 # perform first operation
srli x31, x22, 34 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x10, x9, x6 # perform first operation
srli x26, x7, 41 # perform second (triggering) operation

#.EQU SIGSIZE,1408


// ******************
// Tests from: WALLY-COV-addi.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x98b7f774be346504 # initialize rs1
addi x6, x0, -412 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x73793cc337bc3f7f # initialize rs1
addi x20, x1, -447 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xfd9c15e041df909a # initialize rs1
addi x21, x2, -1475 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 16)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xfc5637fa5995d426 # initialize rs1
addi x19, x3, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 24)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc07d6f8572b99df5 # initialize rs1
addi x17, x4, 576 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 32)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x77e05b2ed40566bf # initialize rs1
addi x31, x5, 1373 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 40)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x00ad83d3d2075da4 # initialize rs1
addi x24, x6, -1335 # perform operation
RVTEST_SIGUPD(x7, x0, x24, 48)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9f5c786885f51733 # initialize rs1
addi x5, x7, 776 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 56)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x4ed6453954f23847 # initialize rs1
addi x22, x8, -506 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 64)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x1475ee02623ac5d0 # initialize rs1
addi x30, x9, 990 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 72)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xe13acf21e4dde850 # initialize rs1
addi x1, x10, 901 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x8ceb466213a784bf # initialize rs1
addi x12, x11, -1584 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 88)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xa6b913fabe010750 # initialize rs1
addi x23, x12, 1205 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 96)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x232c21453a379aaa # initialize rs1
addi x1, x13, -1182 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 104)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x40a79df00321b880 # initialize rs1
addi x31, x14, -1461 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 112)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xebcf1a22e5a35bd9 # initialize rs1
addi x16, x15, 1461 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 120)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xb836b37e5451f6d0 # initialize rs1
addi x17, x16, -300 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 128)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x2e8d9ad8bfb93d24 # initialize rs1
addi x28, x17, -701 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 136)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x33a3724eb047d466 # initialize rs1
addi x17, x18, 569 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 144)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x784edc0a3ba82a6a # initialize rs1
addi x8, x19, 1981 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 152)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x07092323b4941664 # initialize rs1
addi x6, x20, -1254 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 160)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x36cd2ac9d68b6d68 # initialize rs1
addi x26, x21, 1505 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 168)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x51fa5d807b7e0714 # initialize rs1
addi x13, x22, 1342 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x3d373a31d4d3da31 # initialize rs1
addi x12, x23, -1161 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 184)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xd51f7f1c40f85af0 # initialize rs1
addi x30, x24, 1187 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 192)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x4b069707b2cc0c5d # initialize rs1
addi x13, x25, 308 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 200)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9a8fa9c468e25d7b # initialize rs1
addi x18, x26, 336 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 208)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x04f94fb405d8f259 # initialize rs1
addi x24, x27, 1558 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x61cfed81a7af88f7 # initialize rs1
addi x14, x28, 2006 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 224)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xe8ac7ea69c9e23f1 # initialize rs1
addi x9, x29, -1882 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 232)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x93501545e47b70c2 # initialize rs1
addi x15, x30, -1946 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 240)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xb7d6028963a2ef24 # initialize rs1
addi x20, x31, 78 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 248)

# Testcase cp_rd (Test destination rd = x0)
li x20, 0x73e55a0a4f4f3287 # initialize rs1
addi x0, x20, 652 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x10, 0x0fc887b0baf6bb20 # initialize rs1
addi x1, x10, 504 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 264)

# Testcase cp_rd (Test destination rd = x2)
li x26, 0x06c0d52ab3f56cad # initialize rs1
addi x2, x26, 1787 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 272)

# Testcase cp_rd (Test destination rd = x3)
li x17, 0xcbc7c44d2b4ec435 # initialize rs1
addi x3, x17, 1465 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 280)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0x8af70b96b8c82a74 # initialize rs1
addi x4, x15, -748 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 288)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x8, 0xb50ddce022a66bbb # initialize rs1
addi x5, x8, 845 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 296)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x9, 0x1057615a40581916 # initialize rs1
addi x6, x9, 1393 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 304)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x21, 0xd29ce022e07bd5fb # initialize rs1
addi x7, x21, -1503 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0xf644e341f002e1b7 # initialize rs1
addi x8, x31, -1741 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 320)

# Testcase cp_rd (Test destination rd = x9)
li x30, 0xac96dc48a9eafba5 # initialize rs1
addi x9, x30, 2011 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 328)

# Testcase cp_rd (Test destination rd = x10)
li x1, 0x71d915aa7d1002a7 # initialize rs1
addi x10, x1, -909 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 336)

# Testcase cp_rd (Test destination rd = x11)
li x30, 0x18d5dc36c2bd43d9 # initialize rs1
addi x11, x30, 1558 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_rd (Test destination rd = x12)
li x31, 0x81ef4bf0c6574d63 # initialize rs1
addi x12, x31, -929 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cp_rd (Test destination rd = x13)
li x22, 0x9043e1d0e17c4b2b # initialize rs1
addi x13, x22, 691 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cp_rd (Test destination rd = x14)
li x8, 0xee1e27b46ccdc763 # initialize rs1
addi x14, x8, -814 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cp_rd (Test destination rd = x15)
li x26, 0xb4d5fcb6e89b9759 # initialize rs1
addi x15, x26, -1715 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 376)

# Testcase cp_rd (Test destination rd = x16)
li x3, 0xd58f056dd6f924d6 # initialize rs1
addi x16, x3, -58 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cp_rd (Test destination rd = x17)
li x9, 0x343b13fd8dd3edcb # initialize rs1
addi x17, x9, 1811 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 392)

# Testcase cp_rd (Test destination rd = x18)
li x18, 0xea5ab4b472587249 # initialize rs1
addi x18, x18, 585 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 400)

# Testcase cp_rd (Test destination rd = x19)
li x6, 0x10220b1042a6d6f9 # initialize rs1
addi x19, x6, -1520 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 408)

# Testcase cp_rd (Test destination rd = x20)
li x20, 0x36cd6ee8d39f2127 # initialize rs1
addi x20, x20, -272 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cp_rd (Test destination rd = x21)
li x23, 0x4e331e6b17ccfacd # initialize rs1
addi x21, x23, 786 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 424)

# Testcase cp_rd (Test destination rd = x22)
li x5, 0x829ccb49c017c857 # initialize rs1
addi x22, x5, -436 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 432)

# Testcase cp_rd (Test destination rd = x23)
li x13, 0x7a9b56e84e330244 # initialize rs1
addi x23, x13, -91 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rd (Test destination rd = x24)
li x6, 0x0e420dc25751322a # initialize rs1
addi x24, x6, -1626 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 448)

# Testcase cp_rd (Test destination rd = x25)
li x1, 0x13a1474fcc85cd10 # initialize rs1
addi x25, x1, 101 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 456)

# Testcase cp_rd (Test destination rd = x26)
li x23, 0x2ab8a0a2129200db # initialize rs1
addi x26, x23, -940 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rd (Test destination rd = x27)
li x19, 0xeb1a771621064df2 # initialize rs1
addi x27, x19, -466 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 472)

# Testcase cp_rd (Test destination rd = x28)
li x26, 0x733690f51cc0b6da # initialize rs1
addi x28, x26, -1856 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 480)

# Testcase cp_rd (Test destination rd = x29)
li x21, 0x8f580e1d2d682d86 # initialize rs1
addi x29, x21, 857 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_rd (Test destination rd = x30)
li x26, 0x0401a1271b93f450 # initialize rs1
addi x30, x26, 464 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 496)

# Testcase cp_rd (Test destination rd = x31)
li x26, 0xce0b8990933fc67a # initialize rs1
addi x31, x26, -1783 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 504)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x0000000000000000 # initialize rs1
addi x9, x20, -626 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 512)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x27, 0x0000000000000001 # initialize rs1
addi x10, x27, 529 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 520)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x13, 0x0000000000000002 # initialize rs1
addi x30, x13, -1690 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 528)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000000)
li x27, 0x8000000000000000 # initialize rs1
addi x18, x27, 1830 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 536)

# Testcase cp_rs1_corners (Test source rs1 value = 0x8000000000000001)
li x28, 0x8000000000000001 # initialize rs1
addi x22, x28, 1854 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 544)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffffffffffff)
li x18, 0x7fffffffffffffff # initialize rs1
addi x24, x18, 1290 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 552)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffffffffffe)
li x11, 0x7ffffffffffffffe # initialize rs1
addi x7, x11, -840 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 560)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffffffffffff)
li x1, 0xffffffffffffffff # initialize rs1
addi x15, x1, -655 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 568)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffffffffffe)
li x29, 0xfffffffffffffffe # initialize rs1
addi x18, x29, 1787 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 576)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc887763ae86f2)
li x14, 0x5bbc887763ae86f2 # initialize rs1
addi x6, x14, -688 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 584)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaaaaaaaaaa)
li x1, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x9, x1, 948 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 592)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5555555555555555)
li x26, 0x5555555555555555 # initialize rs1
addi x5, x26, -133 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 600)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x24, 0x00000000ffffffff # initialize rs1
addi x23, x24, 967 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 608)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x12, 0x00000000fffffffe # initialize rs1
addi x21, x12, 1457 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 616)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000000)
li x20, 0x0000000100000000 # initialize rs1
addi x29, x20, -896 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 624)

# Testcase cp_rs1_corners (Test source rs1 value = 0x100000001)
li x12, 0x0000000100000001 # initialize rs1
addi x8, x12, -1343 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 632)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000000 # initialize rs1
addi x2, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 640)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000000 # initialize rs1
addi x8, x24, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 648)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000000 # initialize rs1
addi x8, x15, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 656)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000000000000 # initialize rs1
addi x14, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 664)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000000 # initialize rs1
addi x23, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 672)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
addi x9, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 680)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
addi x28, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 688)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000000000000 # initialize rs1
addi x13, x26, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 696)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000000 # initialize rs1
addi x27, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 704)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000000 # initialize rs1
addi x28, x25, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 712)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
addi x23, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 720)

# Testcase cr_rs1_imm_corners
li x14, 0x0000000000000000 # initialize rs1
addi x11, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000000 # initialize rs1
addi x14, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 736)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000000 # initialize rs1
addi x19, x7, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 744)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000000 # initialize rs1
addi x15, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 752)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000000 # initialize rs1
addi x13, x27, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 760)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000000000000 # initialize rs1
addi x10, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 768)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000000 # initialize rs1
addi x30, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 776)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000000 # initialize rs1
addi x31, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 784)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000000 # initialize rs1
addi x18, x31, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 792)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000001 # initialize rs1
addi x9, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 800)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000001 # initialize rs1
addi x26, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 808)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000001 # initialize rs1
addi x23, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000001 # initialize rs1
addi x10, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 824)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000001 # initialize rs1
addi x25, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 832)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
addi x3, x16, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 840)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
addi x12, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 848)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
addi x17, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 856)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000001 # initialize rs1
addi x6, x30, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 864)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000000000001 # initialize rs1
addi x12, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 872)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000000000001 # initialize rs1
addi x23, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 880)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
addi x14, x20, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 888)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000001 # initialize rs1
addi x22, x28, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 896)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000001 # initialize rs1
addi x11, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 904)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000000000001 # initialize rs1
addi x5, x8, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 912)

# Testcase cr_rs1_imm_corners
li x20, 0x0000000000000001 # initialize rs1
addi x16, x20, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 920)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000000000001 # initialize rs1
addi x31, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 928)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000001 # initialize rs1
addi x5, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 936)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000000000001 # initialize rs1
addi x5, x28, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 944)

# Testcase cr_rs1_imm_corners
li x10, 0x0000000000000001 # initialize rs1
addi x21, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 952)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000002 # initialize rs1
addi x25, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 960)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000002 # initialize rs1
addi x8, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 968)

# Testcase cr_rs1_imm_corners
li x29, 0x0000000000000002 # initialize rs1
addi x7, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 976)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000002 # initialize rs1
addi x21, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 984)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000000000002 # initialize rs1
addi x17, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 992)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000000000002 # initialize rs1
addi x19, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1000)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000000000002 # initialize rs1
addi x28, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1008)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
addi x31, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1016)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000002 # initialize rs1
addi x19, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1024)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000000000002 # initialize rs1
addi x18, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1032)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000000000002 # initialize rs1
addi x24, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1040)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000000000002 # initialize rs1
addi x17, x9, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1048)

# Testcase cr_rs1_imm_corners
li x25, 0x0000000000000002 # initialize rs1
addi x11, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1056)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000000000002 # initialize rs1
addi x31, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000000000002 # initialize rs1
addi x16, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1072)

# Testcase cr_rs1_imm_corners
li x3, 0x0000000000000002 # initialize rs1
addi x28, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1080)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000000000002 # initialize rs1
addi x29, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1088)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000000000002 # initialize rs1
addi x9, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1096)

# Testcase cr_rs1_imm_corners
li x5, 0x0000000000000002 # initialize rs1
addi x27, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1104)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000000000002 # initialize rs1
addi x9, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1112)

# Testcase cr_rs1_imm_corners
li x16, 0x8000000000000000 # initialize rs1
addi x28, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1120)

# Testcase cr_rs1_imm_corners
li x14, 0x8000000000000000 # initialize rs1
addi x8, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1128)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
addi x15, x27, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1136)

# Testcase cr_rs1_imm_corners
li x7, 0x8000000000000000 # initialize rs1
addi x23, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1144)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000000 # initialize rs1
addi x10, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1152)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
addi x13, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1160)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000000 # initialize rs1
addi x26, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1168)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
addi x12, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1176)

# Testcase cr_rs1_imm_corners
li x29, 0x8000000000000000 # initialize rs1
addi x8, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1184)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
addi x14, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1192)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000000 # initialize rs1
addi x7, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1200)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
addi x8, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1208)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
addi x31, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1216)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
addi x12, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1224)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000000 # initialize rs1
addi x23, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1232)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000000 # initialize rs1
addi x10, x31, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1240)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000000 # initialize rs1
addi x28, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1248)

# Testcase cr_rs1_imm_corners
li x6, 0x8000000000000000 # initialize rs1
addi x21, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1256)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000000 # initialize rs1
addi x9, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1264)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000000 # initialize rs1
addi x9, x30, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1272)

# Testcase cr_rs1_imm_corners
li x3, 0x8000000000000001 # initialize rs1
addi x8, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1280)

# Testcase cr_rs1_imm_corners
li x23, 0x8000000000000001 # initialize rs1
addi x1, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1288)

# Testcase cr_rs1_imm_corners
li x11, 0x8000000000000001 # initialize rs1
addi x23, x11, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1296)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
addi x16, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1304)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
addi x14, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1312)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
addi x11, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1320)

# Testcase cr_rs1_imm_corners
li x24, 0x8000000000000001 # initialize rs1
addi x20, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1328)

# Testcase cr_rs1_imm_corners
li x12, 0x8000000000000001 # initialize rs1
addi x2, x12, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1336)

# Testcase cr_rs1_imm_corners
li x20, 0x8000000000000001 # initialize rs1
addi x22, x20, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1344)

# Testcase cr_rs1_imm_corners
li x1, 0x8000000000000001 # initialize rs1
addi x31, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1352)

# Testcase cr_rs1_imm_corners
li x13, 0x8000000000000001 # initialize rs1
addi x20, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1360)

# Testcase cr_rs1_imm_corners
li x5, 0x8000000000000001 # initialize rs1
addi x3, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1368)

# Testcase cr_rs1_imm_corners
li x31, 0x8000000000000001 # initialize rs1
addi x11, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1376)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000001 # initialize rs1
addi x18, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cr_rs1_imm_corners
li x30, 0x8000000000000001 # initialize rs1
addi x14, x30, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1392)

# Testcase cr_rs1_imm_corners
li x27, 0x8000000000000001 # initialize rs1
addi x30, x27, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1400)

# Testcase cr_rs1_imm_corners
li x22, 0x8000000000000001 # initialize rs1
addi x31, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1408)

# Testcase cr_rs1_imm_corners
li x21, 0x8000000000000001 # initialize rs1
addi x5, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1416)

# Testcase cr_rs1_imm_corners
li x19, 0x8000000000000001 # initialize rs1
addi x28, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cr_rs1_imm_corners
li x9, 0x8000000000000001 # initialize rs1
addi x13, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1432)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
addi x18, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1440)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffffffffffff # initialize rs1
addi x30, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1448)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffffffffffff # initialize rs1
addi x24, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1456)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffffffffffff # initialize rs1
addi x2, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1464)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffffffffffff # initialize rs1
addi x29, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1472)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
addi x15, x29, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1480)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffffffffffff # initialize rs1
addi x20, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1488)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffffffffffff # initialize rs1
addi x6, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1496)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffffffffffff # initialize rs1
addi x28, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1504)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffffffffffff # initialize rs1
addi x14, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
addi x21, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1520)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffffffffffff # initialize rs1
addi x6, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1528)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
addi x9, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1536)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffffffffffff # initialize rs1
addi x21, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1544)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffffffffffff # initialize rs1
addi x26, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1552)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffffffffffff # initialize rs1
addi x8, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1560)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffffffffffff # initialize rs1
addi x26, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1568)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffffffffffff # initialize rs1
addi x19, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1576)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffffffffffff # initialize rs1
addi x26, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1584)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffffffffffff # initialize rs1
addi x11, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1592)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffffffffffe # initialize rs1
addi x8, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1600)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffffffffffe # initialize rs1
addi x25, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1608)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffffffffffe # initialize rs1
addi x12, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1616)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffffffffffe # initialize rs1
addi x8, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1624)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
addi x10, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1632)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffffffffffe # initialize rs1
addi x1, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1640)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffffffffffe # initialize rs1
addi x21, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1648)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffffffffffe # initialize rs1
addi x25, x29, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1656)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffffffffffe # initialize rs1
addi x1, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1664)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
addi x7, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1672)

# Testcase cr_rs1_imm_corners
li x22, 0x7ffffffffffffffe # initialize rs1
addi x6, x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1680)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
addi x21, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1688)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffffffffffe # initialize rs1
addi x18, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1696)

# Testcase cr_rs1_imm_corners
li x30, 0x7ffffffffffffffe # initialize rs1
addi x20, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1704)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffffffffffe # initialize rs1
addi x28, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1712)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffffffffffe # initialize rs1
addi x23, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1720)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffffffffffe # initialize rs1
addi x14, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1728)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffffffffffe # initialize rs1
addi x11, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1736)

# Testcase cr_rs1_imm_corners
li x22, 0x7ffffffffffffffe # initialize rs1
addi x3, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1744)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffffffffffe # initialize rs1
addi x23, x11, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1752)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffffffffffff # initialize rs1
addi x11, x10, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1760)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffffffffffff # initialize rs1
addi x20, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1768)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffffffffffff # initialize rs1
addi x2, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1776)

# Testcase cr_rs1_imm_corners
li x15, 0xffffffffffffffff # initialize rs1
addi x28, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1784)

# Testcase cr_rs1_imm_corners
li x25, 0xffffffffffffffff # initialize rs1
addi x16, x25, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cr_rs1_imm_corners
li x23, 0xffffffffffffffff # initialize rs1
addi x13, x23, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 0)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffffffffffff # initialize rs1
addi x25, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 8)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffffffffffff # initialize rs1
addi x8, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 16)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffffffffffff # initialize rs1
addi x11, x14, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 24)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffffffffffff # initialize rs1
addi x12, x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 32)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
addi x31, x2, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 40)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffffffffffff # initialize rs1
addi x12, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffffffffffff # initialize rs1
addi x30, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 56)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffffffffffff # initialize rs1
addi x15, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 64)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffffffffffff # initialize rs1
addi x21, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 72)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffffffffffff # initialize rs1
addi x6, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 80)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffffffffffff # initialize rs1
addi x14, x6, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 88)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffffffffffff # initialize rs1
addi x7, x1, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 96)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffffffffffff # initialize rs1
addi x21, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 104)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffffffffffff # initialize rs1
addi x3, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 112)

# Testcase cr_rs1_imm_corners
li x29, 0xfffffffffffffffe # initialize rs1
addi x15, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 120)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffffffffffe # initialize rs1
addi x6, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 128)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffffffffffe # initialize rs1
addi x3, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cr_rs1_imm_corners
li x28, 0xfffffffffffffffe # initialize rs1
addi x8, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 144)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
addi x25, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 152)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
addi x1, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 160)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffffffffffe # initialize rs1
addi x16, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 168)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffffffffffe # initialize rs1
addi x12, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffffffffffe # initialize rs1
addi x3, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 184)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffffffffffe # initialize rs1
addi x2, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 192)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
addi x8, x31, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 200)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffffffffffe # initialize rs1
addi x13, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 208)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffffffffffe # initialize rs1
addi x24, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffffffffffe # initialize rs1
addi x28, x2, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 224)

# Testcase cr_rs1_imm_corners
li x29, 0xfffffffffffffffe # initialize rs1
addi x28, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 232)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffffffffffe # initialize rs1
addi x3, x12, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 240)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffffffffffe # initialize rs1
addi x28, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 248)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffffffffffe # initialize rs1
addi x9, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 256)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffffffffffe # initialize rs1
addi x3, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 264)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffffffffffe # initialize rs1
addi x19, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 272)

# Testcase cr_rs1_imm_corners
li x17, 0x5bbc887763ae86f2 # initialize rs1
addi x30, x17, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 280)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc887763ae86f2 # initialize rs1
addi x24, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 288)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
addi x21, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 296)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
addi x3, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 304)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
addi x26, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 312)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc887763ae86f2 # initialize rs1
addi x6, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 320)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc887763ae86f2 # initialize rs1
addi x24, x28, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 328)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc887763ae86f2 # initialize rs1
addi x22, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 336)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc887763ae86f2 # initialize rs1
addi x18, x7, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 344)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
addi x3, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 352)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc887763ae86f2 # initialize rs1
addi x25, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 360)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc887763ae86f2 # initialize rs1
addi x9, x25, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 368)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc887763ae86f2 # initialize rs1
addi x29, x6, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 376)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc887763ae86f2 # initialize rs1
addi x22, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 384)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc887763ae86f2 # initialize rs1
addi x23, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc887763ae86f2 # initialize rs1
addi x26, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 400)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc887763ae86f2 # initialize rs1
addi x27, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 408)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc887763ae86f2 # initialize rs1
addi x26, x22, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 416)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc887763ae86f2 # initialize rs1
addi x22, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 424)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc887763ae86f2 # initialize rs1
addi x12, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 432)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x21, x13, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 440)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x5, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 448)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x15, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x20, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 464)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x1, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 472)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x29, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 480)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x29, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x16, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 496)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x8, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 504)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x14, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 512)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x20, x17, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 520)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x31, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 528)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x5, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 536)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x26, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 544)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x24, x8, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 552)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x19, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 560)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x29, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 568)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x31, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 576)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x17, x26, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 584)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaaaaaaaaaa # initialize rs1
addi x2, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 592)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
addi x30, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 600)

# Testcase cr_rs1_imm_corners
li x13, 0x5555555555555555 # initialize rs1
addi x20, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 608)

# Testcase cr_rs1_imm_corners
li x25, 0x5555555555555555 # initialize rs1
addi x3, x25, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 616)

# Testcase cr_rs1_imm_corners
li x22, 0x5555555555555555 # initialize rs1
addi x26, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 624)

# Testcase cr_rs1_imm_corners
li x1, 0x5555555555555555 # initialize rs1
addi x13, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 632)

# Testcase cr_rs1_imm_corners
li x14, 0x5555555555555555 # initialize rs1
addi x15, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 640)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
addi x10, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 648)

# Testcase cr_rs1_imm_corners
li x20, 0x5555555555555555 # initialize rs1
addi x25, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 656)

# Testcase cr_rs1_imm_corners
li x29, 0x5555555555555555 # initialize rs1
addi x15, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 664)

# Testcase cr_rs1_imm_corners
li x20, 0x5555555555555555 # initialize rs1
addi x27, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 672)

# Testcase cr_rs1_imm_corners
li x16, 0x5555555555555555 # initialize rs1
addi x15, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 680)

# Testcase cr_rs1_imm_corners
li x8, 0x5555555555555555 # initialize rs1
addi x13, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 688)

# Testcase cr_rs1_imm_corners
li x26, 0x5555555555555555 # initialize rs1
addi x3, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 696)

# Testcase cr_rs1_imm_corners
li x2, 0x5555555555555555 # initialize rs1
addi x23, x2, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 704)

# Testcase cr_rs1_imm_corners
li x15, 0x5555555555555555 # initialize rs1
addi x28, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 712)

# Testcase cr_rs1_imm_corners
li x11, 0x5555555555555555 # initialize rs1
addi x20, x11, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 720)

# Testcase cr_rs1_imm_corners
li x3, 0x5555555555555555 # initialize rs1
addi x31, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 728)

# Testcase cr_rs1_imm_corners
li x9, 0x5555555555555555 # initialize rs1
addi x23, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 736)

# Testcase cr_rs1_imm_corners
li x30, 0x5555555555555555 # initialize rs1
addi x13, x30, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 744)

# Testcase cr_rs1_imm_corners
li x10, 0x5555555555555555 # initialize rs1
addi x2, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 752)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
addi x26, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 760)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000ffffffff # initialize rs1
addi x19, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 768)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000ffffffff # initialize rs1
addi x5, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 776)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000ffffffff # initialize rs1
addi x5, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 784)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000ffffffff # initialize rs1
addi x19, x25, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000ffffffff # initialize rs1
addi x1, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 800)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000ffffffff # initialize rs1
addi x19, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 808)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000ffffffff # initialize rs1
addi x16, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 816)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000ffffffff # initialize rs1
addi x27, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 824)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000ffffffff # initialize rs1
addi x22, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000ffffffff # initialize rs1
addi x31, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 840)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000ffffffff # initialize rs1
addi x29, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 848)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000ffffffff # initialize rs1
addi x2, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 856)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000ffffffff # initialize rs1
addi x27, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 864)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000ffffffff # initialize rs1
addi x16, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 872)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000ffffffff # initialize rs1
addi x10, x26, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 880)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000ffffffff # initialize rs1
addi x10, x28, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 888)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000ffffffff # initialize rs1
addi x11, x17, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 896)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000ffffffff # initialize rs1
addi x26, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 904)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000ffffffff # initialize rs1
addi x16, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 912)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000fffffffe # initialize rs1
addi x24, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 920)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000fffffffe # initialize rs1
addi x9, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 928)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000fffffffe # initialize rs1
addi x23, x3, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 936)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
addi x6, x19, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 944)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000fffffffe # initialize rs1
addi x7, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 952)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000fffffffe # initialize rs1
addi x9, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 960)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000fffffffe # initialize rs1
addi x5, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 968)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
addi x13, x16, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 976)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000fffffffe # initialize rs1
addi x10, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 984)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
addi x13, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 992)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000fffffffe # initialize rs1
addi x11, x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1000)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000fffffffe # initialize rs1
addi x12, x9, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1008)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000fffffffe # initialize rs1
addi x20, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1016)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000fffffffe # initialize rs1
addi x6, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1024)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000fffffffe # initialize rs1
addi x11, x16, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1032)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
addi x2, x12, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1040)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000fffffffe # initialize rs1
addi x16, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1048)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000fffffffe # initialize rs1
addi x17, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1056)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000fffffffe # initialize rs1
addi x1, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1064)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000fffffffe # initialize rs1
addi x16, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1072)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
addi x25, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1080)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000000 # initialize rs1
addi x20, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1088)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000000 # initialize rs1
addi x15, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1096)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000000 # initialize rs1
addi x22, x31, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1104)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
addi x29, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1112)

# Testcase cr_rs1_imm_corners
li x2, 0x0000000100000000 # initialize rs1
addi x26, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1120)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000000 # initialize rs1
addi x28, x22, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1128)

# Testcase cr_rs1_imm_corners
li x30, 0x0000000100000000 # initialize rs1
addi x20, x30, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1136)

# Testcase cr_rs1_imm_corners
li x16, 0x0000000100000000 # initialize rs1
addi x9, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1144)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000000 # initialize rs1
addi x22, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1152)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
addi x12, x7, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1160)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000000 # initialize rs1
addi x27, x11, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1168)

# Testcase cr_rs1_imm_corners
li x7, 0x0000000100000000 # initialize rs1
addi x22, x7, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1176)

# Testcase cr_rs1_imm_corners
li x18, 0x0000000100000000 # initialize rs1
addi x1, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1184)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000000 # initialize rs1
addi x10, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1192)

# Testcase cr_rs1_imm_corners
li x23, 0x0000000100000000 # initialize rs1
addi x21, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1200)

# Testcase cr_rs1_imm_corners
li x6, 0x0000000100000000 # initialize rs1
addi x3, x6, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1208)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000000 # initialize rs1
addi x16, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1216)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000000 # initialize rs1
addi x29, x26, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1224)

# Testcase cr_rs1_imm_corners
li x24, 0x0000000100000000 # initialize rs1
addi x5, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1232)

# Testcase cr_rs1_imm_corners
li x9, 0x0000000100000001 # initialize rs1
addi x14, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cr_rs1_imm_corners
li x22, 0x0000000100000001 # initialize rs1
addi x25, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1248)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
addi x31, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1256)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
addi x23, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1264)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
addi x30, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1272)

# Testcase cr_rs1_imm_corners
li x13, 0x0000000100000001 # initialize rs1
addi x3, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1280)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
addi x29, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1288)

# Testcase cr_rs1_imm_corners
li x31, 0x0000000100000001 # initialize rs1
addi x6, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1296)

# Testcase cr_rs1_imm_corners
li x17, 0x0000000100000001 # initialize rs1
addi x30, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
addi x26, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1312)

# Testcase cr_rs1_imm_corners
li x11, 0x0000000100000001 # initialize rs1
addi x20, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1320)

# Testcase cr_rs1_imm_corners
li x8, 0x0000000100000001 # initialize rs1
addi x2, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1328)

# Testcase cr_rs1_imm_corners
li x21, 0x0000000100000001 # initialize rs1
addi x28, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1336)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
addi x25, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1344)

# Testcase cr_rs1_imm_corners
li x27, 0x0000000100000001 # initialize rs1
addi x22, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cr_rs1_imm_corners
li x19, 0x0000000100000001 # initialize rs1
addi x10, x19, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1360)

# Testcase cr_rs1_imm_corners
li x12, 0x0000000100000001 # initialize rs1
addi x14, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cr_rs1_imm_corners
li x28, 0x0000000100000001 # initialize rs1
addi x2, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1376)

# Testcase cr_rs1_imm_corners
li x26, 0x0000000100000001 # initialize rs1
addi x11, x26, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1384)

# Testcase cr_rs1_imm_corners
li x15, 0x0000000100000001 # initialize rs1
addi x8, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x1b92f33faca0964c # initialize rs1
addi x0, x0, 100 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xaf64b9d8b7ba32c7 # initialize rs1
addi x1, x1, -1607 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x06517846d36c35e5 # initialize rs1
addi x2, x2, -454 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x44457a0c8100e8c9 # initialize rs1
addi x3, x3, -617 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe10d2ff8a5a80c63 # initialize rs1
addi x4, x4, 1559 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1432)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1e9675773d57e1ab # initialize rs1
addi x5, x5, -1672 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1440)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc67a4a98ce105a65 # initialize rs1
addi x6, x6, 1034 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1448)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb16d3323914130ac # initialize rs1
addi x7, x7, 2006 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1456)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x32cafa8e50413152 # initialize rs1
addi x8, x8, 62 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc93d4ccc6df0b631 # initialize rs1
addi x9, x9, 1277 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1472)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xde3990212c38d160 # initialize rs1
addi x10, x10, 867 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x07694283a8a3e87f # initialize rs1
addi x11, x11, -1841 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1488)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x7496fbd4696d5e77 # initialize rs1
addi x12, x12, -152 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1496)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x708172540efcf564 # initialize rs1
addi x13, x13, 1449 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1504)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x1eef9670d8769501 # initialize rs1
addi x14, x14, -1891 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1512)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x324c35539cecfa05 # initialize rs1
addi x15, x15, 196 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1520)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x4c47d79d5bac52f6 # initialize rs1
addi x16, x16, 1854 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1528)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xc72e178c2a8681d8 # initialize rs1
addi x17, x17, 1240 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1536)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xbb4a204a8ad443fa # initialize rs1
addi x18, x18, -379 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1544)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x306b799043bd66f8 # initialize rs1
addi x19, x19, -933 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1552)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xdfde59e5c61be764 # initialize rs1
addi x20, x20, -1508 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1560)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x1d057f9e5d822109 # initialize rs1
addi x21, x21, -844 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1568)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x62dcf305622f649d # initialize rs1
addi x22, x22, 472 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1576)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x290c63bd93b1ca80 # initialize rs1
addi x23, x23, -1889 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1584)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x88527d7d5c657c3b # initialize rs1
addi x24, x24, -382 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1592)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x9716cb2362a35d19 # initialize rs1
addi x25, x25, 1406 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1600)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x6c579ba4cfb366ef # initialize rs1
addi x26, x26, -1697 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1608)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x2ee360c339205f4e # initialize rs1
addi x27, x27, 2043 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1616)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xf07b77cc08f949f2 # initialize rs1
addi x28, x28, -1928 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1624)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x9ef31a179fa848ff # initialize rs1
addi x29, x29, 1503 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1632)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x9c645e5b03f2c727 # initialize rs1
addi x30, x30, 1345 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1640)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x6422a9c523e0449a # initialize rs1
addi x31, x31, -601 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1648)

# Testcase cp_imm_corners
li x23, 0x64345ea3f3f44a25 # initialize rs1
addi x31, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1656)

# Testcase cp_imm_corners
li x26, 0x06f1d4afca137d85 # initialize rs1
addi x2, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1664)

# Testcase cp_imm_corners
li x16, 0xf232d7028f490f14 # initialize rs1
addi x21, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1672)

# Testcase cp_imm_corners
li x2, 0xe2dd736300869e1a # initialize rs1
addi x7, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1680)

# Testcase cp_imm_corners
li x15, 0x1ba94c5a7069ead4 # initialize rs1
addi x30, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1688)

# Testcase cp_imm_corners
li x12, 0xaf3d776baf98a88a # initialize rs1
addi x16, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1696)

# Testcase cp_imm_corners
li x18, 0x472f6f0de1ba26bd # initialize rs1
addi x29, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1704)

# Testcase cp_imm_corners
li x22, 0x721a3b69a942192b # initialize rs1
addi x23, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1712)

# Testcase cp_imm_corners
li x13, 0xcd2a113e4fc2fd37 # initialize rs1
addi x28, x13, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1720)

# Testcase cp_imm_corners
li x29, 0x020d0629e8665fa5 # initialize rs1
addi x8, x29, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1728)

# Testcase cp_imm_corners
li x31, 0xd37b928b091bee37 # initialize rs1
addi x5, x31, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1736)

# Testcase cp_imm_corners
li x13, 0x7ceef86fa504ee61 # initialize rs1
addi x11, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1744)

# Testcase cp_imm_corners
li x6, 0xeeb1b1a49bebd3e9 # initialize rs1
addi x9, x6, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1752)

# Testcase cp_imm_corners
li x8, 0xdac622cefd323b6a # initialize rs1
addi x20, x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1760)

# Testcase cp_imm_corners
li x23, 0x6b7dd998cb84211f # initialize rs1
addi x24, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1768)

# Testcase cp_imm_corners
li x29, 0x51c6b55be14a82d1 # initialize rs1
addi x8, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1776)

# Testcase cp_imm_corners
li x25, 0x7a090d3f7cb18b68 # initialize rs1
addi x29, x25, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1784)

# Testcase cp_imm_corners
li x19, 0x6aed3fb358ba9abc # initialize rs1
addi x13, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1792)
addi x4, x4, 1800 # increment signature pointer and reset offset

# Testcase cp_imm_corners
li x22, 0x06d3d5d5bff24e27 # initialize rs1
addi x23, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_imm_corners
li x7, 0xbb489c4df7e33c4d # initialize rs1
addi x20, x7, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_gpr/fpr_hazard nohaz test
add x31, x3, x29 # perform first operation
addi x9, x18, 1314 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x26, x16 # perform first operation
addi x8, x22, -2007 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x18, x20 # perform first operation
addi x2, x13, 1682 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x19, x6, x27 # perform first operation
addi x6, x19, -1680 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x8, x25, x3 # perform first operation
addi x3, x29, 1165 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x6, x23, x18 # perform first operation
addi x18, x7, 1165 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x7, x11 # perform first operation
addi x19, x17, 568 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x6, x31 # perform first operation
addi x7, x23, 1740 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x15, x19, x21 # perform first operation
addi x15, x14, 295 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x25, x15, x7 # perform first operation
addi x15, x12, 1012 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x19, x24, x16 # perform first operation
addi x16, x9, 1323 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x16, x2 # perform first operation
addi x6, x3, -348 # perform second (triggering) operation

#.EQU SIGSIZE,3616


// ******************
// Tests from: WALLY-COV-auipc.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
auipc x0, 967612 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 0)

# Testcase cp_rd (Test destination rd = x1)
auipc x1, 657256 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 8)

# Testcase cp_rd (Test destination rd = x2)
auipc x2, 760690 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 16)

# Testcase cp_rd (Test destination rd = x3)
auipc x3, 500586 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 24)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
auipc x4, 928354 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 32)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
auipc x5, 253902 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 40)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
auipc x6, 256281 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 48)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
auipc x7, 856486 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 56)

# Testcase cp_rd (Test destination rd = x8)
auipc x8, 1026925 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 64)

# Testcase cp_rd (Test destination rd = x9)
auipc x9, 408763 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 72)

# Testcase cp_rd (Test destination rd = x10)
auipc x10, 100256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 80)

# Testcase cp_rd (Test destination rd = x11)
auipc x11, 272611 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 88)

# Testcase cp_rd (Test destination rd = x12)
auipc x12, 262810 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 96)

# Testcase cp_rd (Test destination rd = x13)
auipc x13, 524433 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 104)

# Testcase cp_rd (Test destination rd = x14)
auipc x14, 482096 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 112)

# Testcase cp_rd (Test destination rd = x15)
auipc x15, 895692 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 120)

# Testcase cp_rd (Test destination rd = x16)
auipc x16, 14810 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 128)

# Testcase cp_rd (Test destination rd = x17)
auipc x17, 776573 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 136)

# Testcase cp_rd (Test destination rd = x18)
auipc x18, 547962 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 144)

# Testcase cp_rd (Test destination rd = x19)
auipc x19, 324918 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 152)

# Testcase cp_rd (Test destination rd = x20)
auipc x20, 688496 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 160)

# Testcase cp_rd (Test destination rd = x21)
auipc x21, 868419 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 168)

# Testcase cp_rd (Test destination rd = x22)
auipc x22, 1023820 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 176)

# Testcase cp_rd (Test destination rd = x23)
auipc x23, 636431 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 184)

# Testcase cp_rd (Test destination rd = x24)
auipc x24, 42983 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 192)

# Testcase cp_rd (Test destination rd = x25)
auipc x25, 419464 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 200)

# Testcase cp_rd (Test destination rd = x26)
auipc x26, 108438 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 208)

# Testcase cp_rd (Test destination rd = x27)
auipc x27, 464199 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 216)

# Testcase cp_rd (Test destination rd = x28)
auipc x28, 754417 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 224)

# Testcase cp_rd (Test destination rd = x29)
auipc x29, 27323 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 232)

# Testcase cp_rd (Test destination rd = x30)
auipc x30, 438699 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 240)

# Testcase cp_rd (Test destination rd = x31)
auipc x31, 890676 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cp_imm_corners
auipc x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 256)

# Testcase cp_imm_corners
auipc x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 264)

# Testcase cp_imm_corners
auipc x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 272)

# Testcase cp_imm_corners
auipc x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 280)

# Testcase cp_imm_corners
auipc x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 288)

# Testcase cp_imm_corners
auipc x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 296)

# Testcase cp_imm_corners
auipc x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 304)

# Testcase cp_imm_corners
auipc x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 312)

# Testcase cp_imm_corners
auipc x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 320)

# Testcase cp_imm_corners
auipc x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_imm_corners
auipc x29, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 336)

# Testcase cp_imm_corners
auipc x11, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 344)

# Testcase cp_imm_corners
auipc x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 352)

# Testcase cp_imm_corners
auipc x18, 2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 360)

# Testcase cp_imm_corners
auipc x26, 4096 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 368)

# Testcase cp_imm_corners
auipc x30, 8192 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_imm_corners
auipc x5, 16384 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 384)

# Testcase cp_imm_corners
auipc x31, 32768 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 392)

# Testcase cp_imm_corners
auipc x25, 65536 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 400)

# Testcase cp_imm_corners
auipc x18, 131072 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 408)

# Testcase cp_imm_corners
auipc x26, 262144 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 416)

# Testcase cp_imm_corners
auipc x13, 524286 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 424)

# Testcase cp_imm_corners
auipc x14, 524287 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 432)

# Testcase cp_imm_corners
auipc x21, 524288 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 440)

# Testcase cp_imm_corners
auipc x31, 524289 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 448)

# Testcase cp_imm_corners
auipc x28, 1048574 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 456)

# Testcase cp_imm_corners
auipc x12, 1048575 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x14, x27 # perform first operation
auipc x23, 264481 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x20, x7 # perform first operation
auipc x18, 156965 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x9, x11 # perform first operation
auipc x1, 159335 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x19, x25 # perform first operation
auipc x22, 288693 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x11, x31 # perform first operation
auipc x1, 96014 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x27, x2, x7 # perform first operation
auipc x27, 251919 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x13, x19 # perform first operation
auipc x13, 740552 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x13, x25, x16 # perform first operation
auipc x16, 571651 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x30, x17 # perform first operation
auipc x9, 705044 # perform second (triggering) operation

#.EQU SIGSIZE,472
.EQU SIGSIZE,101760 #combined


write_tohost:
    la t1, tohost
    li t0, 1
    sw t0, 0(t1)
    sw zero, 4(t1)

self_loop:
    j self_loop

.data

.align 4
scratch:
    .bss 136

.data 

.section .tohost 
tohost: # write to HTIF
    .dword 0
fromhost:
    .dword 0

.align 4
begin_signature:
    .fill SIGSIZE*8/__riscv_xlen,__riscv_xlen/8,0xdeadbeef
end_signature:

.end

//
// Copyright (C) 2024 Harvey Mudd College & Oklahoma State University, Habib University, UET Lahore
//
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
///////////////////////////////////////////

#include "macros.h"

.section .text.init
.globl rvtest_entry_point

rvtest_entry_point:

# initialize signature pointer
la x4, begin_signature

    

// ******************
// Tests from: WALLY-COV-jal.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
jal x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x1)
jal x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x2)
jal x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x3)
jal x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
jal x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
jal x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
jal x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
jal x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x8)
jal x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x9)
jal x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x10)
jal x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x11)
jal x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x12)
jal x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x13)
jal x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x14)
jal x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x15)
jal x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x16)
jal x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x17)
jal x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x18)
jal x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x19)
jal x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x20)
jal x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x21)
jal x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x22)
jal x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x23)
jal x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x24)
jal x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x25)
jal x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x26)
jal x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x27)
jal x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x28)
jal x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x29)
jal x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x30)
jal x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x31)
jal x31, 1f # perform operation
nop
nop
1:

# Testcase cp_imm_corners_jal 2
.align 14
 # start all tests on a multiple of the largest one
jal x1, 1f
1: 
jal x1, f3_jal

# Testcase cp_imm_corners_jal 3
.align 2
b2_jal:
jal x9, f4_jal # jump to aligned address to stress immediate
.align 2
f3_jal:
jal x9, b2_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 4
.align 3
b3_jal:
jal x9, f5_jal # jump to aligned address to stress immediate
.align 3
f4_jal:
jal x9, b3_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 5
.align 4
b4_jal:
jal x16, f6_jal # jump to aligned address to stress immediate
.align 4
f5_jal:
jal x16, b4_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 6
.align 5
b5_jal:
jal x24, f7_jal # jump to aligned address to stress immediate
.align 5
f6_jal:
jal x24, b5_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 7
.align 6
b6_jal:
jal x18, f8_jal # jump to aligned address to stress immediate
.align 6
f7_jal:
jal x18, b6_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 8
.align 7
b7_jal:
jal x25, f9_jal # jump to aligned address to stress immediate
.align 7
f8_jal:
jal x25, b7_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 9
.align 8
b8_jal:
jal x16, f10_jal # jump to aligned address to stress immediate
.align 8
f9_jal:
jal x16, b8_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 10
.align 9
b9_jal:
jal x17, f11_jal # jump to aligned address to stress immediate
.align 9
f10_jal:
jal x17, b9_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 11
.align 10
b10_jal:
jal x19, f12_jal # jump to aligned address to stress immediate
.align 10
f11_jal:
jal x19, b10_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 12
.align 11
b11_jal:
jal x22, f13_jal # jump to aligned address to stress immediate
.align 11
f12_jal:
jal x22, b11_jal # jump to aligned address to stress immediate

# Testcase cp_imm_corners_jal 13
.align 12
b12_jal:
jal x15, f14_jal # jump to aligned address to stress immediate
.align 12
f13_jal:
jal x15, b12_jal # jump to aligned address to stress immediate
f14_jal:

# Testcase cp_gpr/fpr_hazard nohaz test
add x10, x5, x16 # perform first operation
jal x18, arbitraryLabel37
nop
arbitraryLabel37:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x10, x7, x3 # perform first operation
jal x1, arbitraryLabel38
nop
arbitraryLabel38:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x8, x6 # perform first operation
jal x17, arbitraryLabel39
nop
arbitraryLabel39:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x13, x29, x26 # perform first operation
jal x13, arbitraryLabel40
nop
arbitraryLabel40:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x17, x26 # perform first operation
jal x1, arbitraryLabel41
nop
arbitraryLabel41:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x10, x14, x3 # perform first operation
jal x10, arbitraryLabel42
nop
arbitraryLabel42:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x12, x18 # perform first operation
jal x12, arbitraryLabel43
nop
arbitraryLabel43:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x10, x24 # perform first operation
jal x24, arbitraryLabel44
nop
arbitraryLabel44:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x19, x9 # perform first operation
jal x1, arbitraryLabel45
nop
arbitraryLabel45:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-fence.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_asm_count
fence

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-srai.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x407ea0d9 # initialize rs1
srai x10, x0, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xbb420572 # initialize rs1
srai x18, x1, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x33d2686c # initialize rs1
srai x15, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x899f4877 # initialize rs1
srai x15, x3, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x577a9954 # initialize rs1
srai x11, x4, 21 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa4c6efa4 # initialize rs1
srai x29, x5, 24 # perform operation
RVTEST_SIGUPD(x6, x0, x29, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf4cb95a3 # initialize rs1
srai x13, x6, 24 # perform operation
RVTEST_SIGUPD(x7, x0, x13, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf1cd9ccd # initialize rs1
srai x15, x7, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x0d1cd9e4 # initialize rs1
srai x23, x8, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x8ab51a5e # initialize rs1
srai x18, x9, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x5e883109 # initialize rs1
srai x16, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xf79fb90d # initialize rs1
srai x15, x11, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x97364d82 # initialize rs1
srai x7, x12, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x3920ca51 # initialize rs1
srai x7, x13, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x40c9a47b # initialize rs1
srai x20, x14, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xa926d535 # initialize rs1
srai x16, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x02f23684 # initialize rs1
srai x27, x16, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x9261f739 # initialize rs1
srai x31, x17, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x929fe481 # initialize rs1
srai x11, x18, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x69b0584c # initialize rs1
srai x31, x19, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x29d7c876 # initialize rs1
srai x5, x20, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xe7d7f73a # initialize rs1
srai x24, x21, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x86a7d8c9 # initialize rs1
srai x18, x22, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x19cbf445 # initialize rs1
srai x14, x23, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x7f9d9deb # initialize rs1
srai x9, x24, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x9c7061ac # initialize rs1
srai x20, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x31bb661e # initialize rs1
srai x14, x26, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x679d1842 # initialize rs1
srai x8, x27, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x6464f28d # initialize rs1
srai x24, x28, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xdc1ff7c6 # initialize rs1
srai x10, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xae094de5 # initialize rs1
srai x16, x30, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x57a5dc68 # initialize rs1
srai x20, x31, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 124)

# Testcase cp_rd (Test destination rd = x0)
li x23, 0x9c8a6ffc # initialize rs1
srai x0, x23, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x17, 0x712f67d3 # initialize rs1
srai x1, x17, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x27, 0xa3f175eb # initialize rs1
srai x2, x27, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x27, 0x808b6440 # initialize rs1
srai x3, x27, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x28, 0xd4957ecd # initialize rs1
srai x4, x28, 1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x613697bc # initialize rs1
srai x5, x9, 13 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x29, 0x8bfc5a92 # initialize rs1
srai x6, x29, 10 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0x8f554106 # initialize rs1
srai x7, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0xc6d63049 # initialize rs1
srai x8, x27, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x13, 0x489bd199 # initialize rs1
srai x9, x13, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x9, 0x47014162 # initialize rs1
srai x10, x9, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x11, 0xced2c0ef # initialize rs1
srai x11, x11, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x16, 0x8b49e3d2 # initialize rs1
srai x12, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x14, 0xd1c583ed # initialize rs1
srai x13, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x12, 0xeaf773a8 # initialize rs1
srai x14, x12, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x27, 0x2f445f78 # initialize rs1
srai x15, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x3, 0x45f49bd6 # initialize rs1
srai x16, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x29, 0x34b98870 # initialize rs1
srai x17, x29, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0x0bd18bdf # initialize rs1
srai x18, x7, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0x8e3f9493 # initialize rs1
srai x19, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x20, 0x1fb7a9df # initialize rs1
srai x20, x20, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x21, 0x09c21c2b # initialize rs1
srai x21, x21, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x3, 0x23169391 # initialize rs1
srai x22, x3, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x26, 0xc006b973 # initialize rs1
srai x23, x26, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x17, 0x6042e617 # initialize rs1
srai x24, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x24, 0x29e30c86 # initialize rs1
srai x25, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x13, 0xb747863c # initialize rs1
srai x26, x13, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x3, 0x664b8f9f # initialize rs1
srai x27, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x17, 0xc6f3d24c # initialize rs1
srai x28, x17, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x24, 0x0d697cdc # initialize rs1
srai x29, x24, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x9, 0xa8226607 # initialize rs1
srai x30, x9, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x5, 0xc177c231 # initialize rs1
srai x31, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x00000000 # initialize rs1
srai x26, x30, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x21, 0x00000001 # initialize rs1
srai x22, x21, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x23, 0x00000002 # initialize rs1
srai x13, x23, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x20, 0x80000000 # initialize rs1
srai x28, x20, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x12, 0x80000001 # initialize rs1
srai x13, x12, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x28, 0x7fffffff # initialize rs1
srai x2, x28, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x27, 0x7ffffffe # initialize rs1
srai x20, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x29, 0xffffffff # initialize rs1
srai x25, x29, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x22, 0xfffffffe # initialize rs1
srai x5, x22, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x21, 0x5bbc8872 # initialize rs1
srai x7, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x9, 0xaaaaaaaa # initialize rs1
srai x14, x9, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x11, 0x55555555 # initialize rs1
srai x20, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xe0734f2d # initialize rs1
srai x0, x0, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xd457434c # initialize rs1
srai x1, x1, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x1742d9c0 # initialize rs1
srai x2, x2, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x6f18e119 # initialize rs1
srai x3, x3, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x30bbfc30 # initialize rs1
srai x4, x4, 18 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xc22b4bf3 # initialize rs1
srai x5, x5, 24 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x53a56fd6 # initialize rs1
srai x6, x6, 11 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x342971c9 # initialize rs1
srai x7, x7, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x58e37135 # initialize rs1
srai x8, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x4acad0ef # initialize rs1
srai x9, x9, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x56b42e76 # initialize rs1
srai x10, x10, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xe6dca663 # initialize rs1
srai x11, x11, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x965e2358 # initialize rs1
srai x12, x12, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x9adfdc44 # initialize rs1
srai x13, x13, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xb8be240f # initialize rs1
srai x14, x14, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xe6b05fec # initialize rs1
srai x15, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x0e96002b # initialize rs1
srai x16, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x5a77e005 # initialize rs1
srai x17, x17, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xc7f726bf # initialize rs1
srai x18, x18, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa392ca6c # initialize rs1
srai x19, x19, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xd3752ae6 # initialize rs1
srai x20, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xaf1b4695 # initialize rs1
srai x21, x21, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 388)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xb011c63e # initialize rs1
srai x22, x22, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xff13a4ea # initialize rs1
srai x23, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 396)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x735421c0 # initialize rs1
srai x24, x24, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xc8902ca6 # initialize rs1
srai x25, x25, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 404)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x7b26ccb6 # initialize rs1
srai x26, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xd3343739 # initialize rs1
srai x27, x27, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 412)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xf90c8ccb # initialize rs1
srai x28, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xb2f3902c # initialize rs1
srai x29, x29, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 420)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x86917b2b # initialize rs1
srai x30, x30, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xb4b3f3ca # initialize rs1
srai x31, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 428)

# Testcase cp_uimm (Test bit = 0)
li x11, 0xad9238ae # initialize rs1
srai x18, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 432)

# Testcase cp_uimm (Test bit = 1)
li x28, 0x22349669 # initialize rs1
srai x6, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 436)

# Testcase cp_uimm (Test bit = 2)
li x9, 0x349eb4ed # initialize rs1
srai x19, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 440)

# Testcase cp_uimm (Test bit = 3)
li x1, 0xe8a3b595 # initialize rs1
srai x14, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 444)

# Testcase cp_uimm (Test bit = 4)
li x24, 0x751a5943 # initialize rs1
srai x29, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 448)

# Testcase cp_uimm (Test bit = 5)
li x7, 0x0cf8489a # initialize rs1
srai x22, x7, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 452)

# Testcase cp_uimm (Test bit = 6)
li x28, 0xe80d2cbb # initialize rs1
srai x29, x28, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 456)

# Testcase cp_uimm (Test bit = 7)
li x26, 0x8653fc9a # initialize rs1
srai x21, x26, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 460)

# Testcase cp_uimm (Test bit = 8)
li x5, 0x097b316a # initialize rs1
srai x12, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cp_uimm (Test bit = 9)
li x11, 0x7741671b # initialize rs1
srai x23, x11, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 468)

# Testcase cp_uimm (Test bit = 10)
li x2, 0x91ff8e34 # initialize rs1
srai x25, x2, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 472)

# Testcase cp_uimm (Test bit = 11)
li x26, 0xefa7c489 # initialize rs1
srai x8, x26, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 476)

# Testcase cp_uimm (Test bit = 12)
li x6, 0xb45d3cd2 # initialize rs1
srai x8, x6, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 480)

# Testcase cp_uimm (Test bit = 13)
li x12, 0xe0c45f10 # initialize rs1
srai x21, x12, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 484)

# Testcase cp_uimm (Test bit = 14)
li x13, 0xfc82e758 # initialize rs1
srai x29, x13, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 488)

# Testcase cp_uimm (Test bit = 15)
li x3, 0xf20a3f6c # initialize rs1
srai x22, x3, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 492)

# Testcase cp_uimm (Test bit = 16)
li x29, 0xcc0e587e # initialize rs1
srai x3, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 496)

# Testcase cp_uimm (Test bit = 17)
li x30, 0xcd54f53e # initialize rs1
srai x24, x30, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 500)

# Testcase cp_uimm (Test bit = 18)
li x8, 0xef5e3793 # initialize rs1
srai x14, x8, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 504)

# Testcase cp_uimm (Test bit = 19)
li x7, 0x4dea8c38 # initialize rs1
srai x5, x7, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 508)

# Testcase cp_uimm (Test bit = 20)
li x11, 0x32963308 # initialize rs1
srai x26, x11, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 512)

# Testcase cp_uimm (Test bit = 21)
li x6, 0x6e13fc2d # initialize rs1
srai x9, x6, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 516)

# Testcase cp_uimm (Test bit = 22)
li x24, 0x0e0c491f # initialize rs1
srai x27, x24, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 520)

# Testcase cp_uimm (Test bit = 23)
li x9, 0x1125a2c5 # initialize rs1
srai x19, x9, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 524)

# Testcase cp_uimm (Test bit = 24)
li x14, 0x4b539d8a # initialize rs1
srai x10, x14, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 528)

# Testcase cp_uimm (Test bit = 25)
li x19, 0x89d24baf # initialize rs1
srai x30, x19, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 532)

# Testcase cp_uimm (Test bit = 26)
li x12, 0x80fd2cbb # initialize rs1
srai x28, x12, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 536)

# Testcase cp_uimm (Test bit = 27)
li x15, 0xc202d068 # initialize rs1
srai x14, x15, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 540)

# Testcase cp_uimm (Test bit = 28)
li x27, 0x9d5c87a8 # initialize rs1
srai x1, x27, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 544)

# Testcase cp_uimm (Test bit = 29)
li x8, 0x475d9815 # initialize rs1
srai x24, x8, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 548)

# Testcase cp_uimm (Test bit = 30)
li x8, 0xb3b7db94 # initialize rs1
srai x22, x8, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 552)

# Testcase cp_uimm (Test bit = 31)
li x29, 0x48966efe # initialize rs1
srai x1, x29, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 556)

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x20, x10 # perform first operation
srai x14, x23, 17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x8, x5 # perform first operation
srai x29, x18, 7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x27, x13 # perform first operation
srai x11, x3, 28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x14, x7 # perform first operation
srai x31, x31, 31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x18, x12 # perform first operation
srai x18, x13, 4 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x14, x30, x22 # perform first operation
srai x22, x7, 11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x21, x26, x24 # perform first operation
srai x21, x22, 28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x15, x20 # perform first operation
srai x23, x7, 10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x1, x11 # perform first operation
srai x24, x2, 18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x24, x29 # perform first operation
srai x24, x19, 27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x15, x10 # perform first operation
srai x10, x8, 20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x29, x14 # perform first operation
srai x12, x25, 12 # perform second (triggering) operation

#.EQU SIGSIZE,560


// ******************
// Tests from: WALLY-COV-bgeu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xf8a33dd2 # initialize rs1
li x19, 0x66b069e3 # initialize rs2
bgeu x0, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x66b069e3 # initialize rs1
li x19, 0x66b069e3 # initialize rs2
bgeu x0, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x7ee3fd67 # initialize rs1
li x22, 0x5246d701 # initialize rs2
bgeu x1, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5246d701 # initialize rs1
li x22, 0x5246d701 # initialize rs2
bgeu x1, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x8f57803b # initialize rs1
li x26, 0xbf5ffedf # initialize rs2
bgeu x2, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xbf5ffedf # initialize rs1
li x26, 0xbf5ffedf # initialize rs2
bgeu x2, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xf13d0f87 # initialize rs1
li x18, 0xccc3de2b # initialize rs2
bgeu x3, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xccc3de2b # initialize rs1
li x18, 0xccc3de2b # initialize rs2
bgeu x3, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x91da1276 # initialize rs1
li x16, 0x61304a5d # initialize rs2
bgeu x4, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x61304a5d # initialize rs1
li x16, 0x61304a5d # initialize rs2
bgeu x4, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd78ed74a # initialize rs1
li x25, 0x5fdb97b6 # initialize rs2
bgeu x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5fdb97b6 # initialize rs1
li x25, 0x5fdb97b6 # initialize rs2
bgeu x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3ca8326b # initialize rs1
li x12, 0x00a8a460 # initialize rs2
bgeu x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00a8a460 # initialize rs1
li x12, 0x00a8a460 # initialize rs2
bgeu x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb1b7289f # initialize rs1
li x31, 0x395f6376 # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x395f6376 # initialize rs1
li x31, 0x395f6376 # initialize rs2
bgeu x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xd937cde7 # initialize rs1
li x17, 0xc9bbbff1 # initialize rs2
bgeu x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xc9bbbff1 # initialize rs1
li x17, 0xc9bbbff1 # initialize rs2
bgeu x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x2783f86c # initialize rs1
li x18, 0xcb6fdbc5 # initialize rs2
bgeu x9, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xcb6fdbc5 # initialize rs1
li x18, 0xcb6fdbc5 # initialize rs2
bgeu x9, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xabd6d396 # initialize rs1
li x23, 0x2b8810b0 # initialize rs2
bgeu x10, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x2b8810b0 # initialize rs1
li x23, 0x2b8810b0 # initialize rs2
bgeu x10, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xe783fe8e # initialize rs1
li x20, 0x1d250a68 # initialize rs2
bgeu x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x1d250a68 # initialize rs1
li x20, 0x1d250a68 # initialize rs2
bgeu x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xbd360d93 # initialize rs1
li x19, 0xf416945b # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xf416945b # initialize rs1
li x19, 0xf416945b # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x694952c7 # initialize rs1
li x7, 0x77eef23e # initialize rs2
bgeu x13, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x77eef23e # initialize rs1
li x7, 0x77eef23e # initialize rs2
bgeu x13, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc4b9e67e # initialize rs1
li x18, 0xd0373871 # initialize rs2
bgeu x14, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xd0373871 # initialize rs1
li x18, 0xd0373871 # initialize rs2
bgeu x14, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x2948911c # initialize rs1
li x8, 0x3c802d29 # initialize rs2
bgeu x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x3c802d29 # initialize rs1
li x8, 0x3c802d29 # initialize rs2
bgeu x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x24d4ac04 # initialize rs1
li x1, 0xdfc553b3 # initialize rs2
bgeu x16, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xdfc553b3 # initialize rs1
li x1, 0xdfc553b3 # initialize rs2
bgeu x16, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x6be5f67b # initialize rs1
li x7, 0x0cd465a8 # initialize rs2
bgeu x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x0cd465a8 # initialize rs1
li x7, 0x0cd465a8 # initialize rs2
bgeu x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x8e11987f # initialize rs1
li x13, 0xac6ff974 # initialize rs2
bgeu x18, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xac6ff974 # initialize rs1
li x13, 0xac6ff974 # initialize rs2
bgeu x18, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x80eb8016 # initialize rs1
li x28, 0x02bfc849 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x02bfc849 # initialize rs1
li x28, 0x02bfc849 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xb98f477a # initialize rs1
li x29, 0x41663076 # initialize rs2
bgeu x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x41663076 # initialize rs1
li x29, 0x41663076 # initialize rs2
bgeu x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x7f00281b # initialize rs1
li x5, 0x3191f1f5 # initialize rs2
bgeu x21, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x3191f1f5 # initialize rs1
li x5, 0x3191f1f5 # initialize rs2
bgeu x21, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xdff99143 # initialize rs1
li x3, 0x7f2cb08e # initialize rs2
bgeu x22, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7f2cb08e # initialize rs1
li x3, 0x7f2cb08e # initialize rs2
bgeu x22, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xe1dd5f9b # initialize rs1
li x12, 0x20985703 # initialize rs2
bgeu x23, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x20985703 # initialize rs1
li x12, 0x20985703 # initialize rs2
bgeu x23, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xefdaf9c9 # initialize rs1
li x22, 0x6456b7fd # initialize rs2
bgeu x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x6456b7fd # initialize rs1
li x22, 0x6456b7fd # initialize rs2
bgeu x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x16d32dfc # initialize rs1
li x13, 0x7649316d # initialize rs2
bgeu x25, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7649316d # initialize rs1
li x13, 0x7649316d # initialize rs2
bgeu x25, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x20ccdc58 # initialize rs1
li x23, 0x973d7f9b # initialize rs2
bgeu x26, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x973d7f9b # initialize rs1
li x23, 0x973d7f9b # initialize rs2
bgeu x26, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xaddd05e9 # initialize rs1
li x26, 0xe9d1bed0 # initialize rs2
bgeu x27, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xe9d1bed0 # initialize rs1
li x26, 0xe9d1bed0 # initialize rs2
bgeu x27, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x9076ba52 # initialize rs1
li x26, 0xd8289731 # initialize rs2
bgeu x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xd8289731 # initialize rs1
li x26, 0xd8289731 # initialize rs2
bgeu x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x8c0d4576 # initialize rs1
li x8, 0x1d7579fc # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x1d7579fc # initialize rs1
li x8, 0x1d7579fc # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x7a0c400a # initialize rs1
li x3, 0x0b491466 # initialize rs2
bgeu x30, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0b491466 # initialize rs1
li x3, 0x0b491466 # initialize rs2
bgeu x30, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xfddd17d5 # initialize rs1
li x15, 0x93b197fa # initialize rs2
bgeu x31, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x93b197fa # initialize rs1
li x15, 0x93b197fa # initialize rs2
bgeu x31, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x20, 0x5b33ea85 # initialize rs1
li x0, 0x682c4ddb # initialize rs2
bgeu x20, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x682c4ddb # initialize rs1
li x0, 0x682c4ddb # initialize rs2
bgeu x20, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x23, 0x3b91974d # initialize rs1
li x1, 0x2e64693d # initialize rs2
bgeu x23, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x2e64693d # initialize rs1
li x1, 0x2e64693d # initialize rs2
bgeu x23, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x11, 0xb8e6d84b # initialize rs1
li x2, 0xd33a0d0f # initialize rs2
bgeu x11, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xd33a0d0f # initialize rs1
li x2, 0xd33a0d0f # initialize rs2
bgeu x11, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x29, 0xa7af7cf6 # initialize rs1
li x3, 0x3897ed04 # initialize rs2
bgeu x29, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x3897ed04 # initialize rs1
li x3, 0x3897ed04 # initialize rs2
bgeu x29, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x7, 0xa4e55e49 # initialize rs1
li x4, 0xa530ec28 # initialize rs2
bgeu x7, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xa530ec28 # initialize rs1
li x4, 0xa530ec28 # initialize rs2
bgeu x7, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0xe739f45d # initialize rs1
li x5, 0x0d0f9f0f # initialize rs2
bgeu x4, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x0d0f9f0f # initialize rs1
li x5, 0x0d0f9f0f # initialize rs2
bgeu x4, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0x4f337a1c # initialize rs1
li x6, 0x8548e7ef # initialize rs2
bgeu x15, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x8548e7ef # initialize rs1
li x6, 0x8548e7ef # initialize rs2
bgeu x15, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0xe3bb749f # initialize rs1
li x7, 0xee698c9f # initialize rs2
bgeu x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xee698c9f # initialize rs1
li x7, 0xee698c9f # initialize rs2
bgeu x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x16, 0x7692282f # initialize rs1
li x8, 0xe7d6f25d # initialize rs2
bgeu x16, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xe7d6f25d # initialize rs1
li x8, 0xe7d6f25d # initialize rs2
bgeu x16, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x29, 0x825dadd4 # initialize rs1
li x9, 0x60a3041b # initialize rs2
bgeu x29, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x60a3041b # initialize rs1
li x9, 0x60a3041b # initialize rs2
bgeu x29, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x27, 0xa61cf851 # initialize rs1
li x10, 0x35b1e367 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x35b1e367 # initialize rs1
li x10, 0x35b1e367 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x26, 0x60490ba7 # initialize rs1
li x11, 0x302d8645 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x302d8645 # initialize rs1
li x11, 0x302d8645 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x17, 0x53cf8fe2 # initialize rs1
li x12, 0x68433658 # initialize rs2
bgeu x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x68433658 # initialize rs1
li x12, 0x68433658 # initialize rs2
bgeu x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x11, 0x81308ab2 # initialize rs1
li x13, 0x859cf730 # initialize rs2
bgeu x11, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x859cf730 # initialize rs1
li x13, 0x859cf730 # initialize rs2
bgeu x11, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x30, 0x995a0364 # initialize rs1
li x14, 0xf14ce2c3 # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xf14ce2c3 # initialize rs1
li x14, 0xf14ce2c3 # initialize rs2
bgeu x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x7, 0x871510a5 # initialize rs1
li x15, 0x6aded01f # initialize rs2
bgeu x7, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x6aded01f # initialize rs1
li x15, 0x6aded01f # initialize rs2
bgeu x7, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x10, 0xe63ff1f0 # initialize rs1
li x16, 0xc153315b # initialize rs2
bgeu x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xc153315b # initialize rs1
li x16, 0xc153315b # initialize rs2
bgeu x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x23, 0x3f82b6c0 # initialize rs1
li x17, 0xe89460ad # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xe89460ad # initialize rs1
li x17, 0xe89460ad # initialize rs2
bgeu x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x31, 0xfa54f723 # initialize rs1
li x18, 0xffaf5500 # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffaf5500 # initialize rs1
li x18, 0xffaf5500 # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x9, 0x9e9f976a # initialize rs1
li x19, 0xe6ee78fe # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xe6ee78fe # initialize rs1
li x19, 0xe6ee78fe # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x22, 0x0baed2d8 # initialize rs1
li x20, 0x28b99096 # initialize rs2
bgeu x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x28b99096 # initialize rs1
li x20, 0x28b99096 # initialize rs2
bgeu x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x8, 0xce19bf3c # initialize rs1
li x21, 0x7702f43e # initialize rs2
bgeu x8, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7702f43e # initialize rs1
li x21, 0x7702f43e # initialize rs2
bgeu x8, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x30, 0x5d3a4f9a # initialize rs1
li x22, 0x83770d91 # initialize rs2
bgeu x30, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x83770d91 # initialize rs1
li x22, 0x83770d91 # initialize rs2
bgeu x30, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x30, 0x36fa971c # initialize rs1
li x23, 0xcc5102bd # initialize rs2
bgeu x30, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xcc5102bd # initialize rs1
li x23, 0xcc5102bd # initialize rs2
bgeu x30, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x2, 0xc20f0aef # initialize rs1
li x24, 0x10a9ec0e # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x10a9ec0e # initialize rs1
li x24, 0x10a9ec0e # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x18, 0x9ac3ffb3 # initialize rs1
li x25, 0x221dbcc4 # initialize rs2
bgeu x18, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x221dbcc4 # initialize rs1
li x25, 0x221dbcc4 # initialize rs2
bgeu x18, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x28, 0xf160fbef # initialize rs1
li x26, 0xa4ace232 # initialize rs2
bgeu x28, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xa4ace232 # initialize rs1
li x26, 0xa4ace232 # initialize rs2
bgeu x28, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x25, 0xc8395969 # initialize rs1
li x27, 0x0b8cb251 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x0b8cb251 # initialize rs1
li x27, 0x0b8cb251 # initialize rs2
bgeu x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x9, 0xbf0b2234 # initialize rs1
li x28, 0x2b3e0d39 # initialize rs2
bgeu x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x2b3e0d39 # initialize rs1
li x28, 0x2b3e0d39 # initialize rs2
bgeu x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x5, 0x2c5a2a2b # initialize rs1
li x29, 0x386be445 # initialize rs2
bgeu x5, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x386be445 # initialize rs1
li x29, 0x386be445 # initialize rs2
bgeu x5, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x22, 0x622d539e # initialize rs1
li x30, 0x7126ce11 # initialize rs2
bgeu x22, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7126ce11 # initialize rs1
li x30, 0x7126ce11 # initialize rs2
bgeu x22, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x24, 0x2751e459 # initialize rs1
li x31, 0xd22c7853 # initialize rs2
bgeu x24, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xd22c7853 # initialize rs1
li x31, 0xd22c7853 # initialize rs2
bgeu x24, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x22, 0x00000000 # initialize rs1
li x11, 0xda8d6526 # initialize rs2
bgeu x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xda8d6526 # initialize rs1
li x11, 0xda8d6526 # initialize rs2
bgeu x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x9, 0x00000001 # initialize rs1
li x18, 0x473f9cb2 # initialize rs2
bgeu x9, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x473f9cb2 # initialize rs1
li x18, 0x473f9cb2 # initialize rs2
bgeu x9, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x15, 0x00000002 # initialize rs1
li x23, 0x3ec15aa4 # initialize rs2
bgeu x15, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x3ec15aa4 # initialize rs1
li x23, 0x3ec15aa4 # initialize rs2
bgeu x15, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x9, 0x80000000 # initialize rs1
li x17, 0x27282b98 # initialize rs2
bgeu x9, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x27282b98 # initialize rs1
li x17, 0x27282b98 # initialize rs2
bgeu x9, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x14, 0x80000001 # initialize rs1
li x6, 0xb853ee59 # initialize rs2
bgeu x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xb853ee59 # initialize rs1
li x6, 0xb853ee59 # initialize rs2
bgeu x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x11, 0x7fffffff # initialize rs1
li x30, 0xbc1f822a # initialize rs2
bgeu x11, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xbc1f822a # initialize rs1
li x30, 0xbc1f822a # initialize rs2
bgeu x11, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x16, 0x7ffffffe # initialize rs1
li x25, 0xe11ead8b # initialize rs2
bgeu x16, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xe11ead8b # initialize rs1
li x25, 0xe11ead8b # initialize rs2
bgeu x16, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x27, 0xffffffff # initialize rs1
li x13, 0x636dc17a # initialize rs2
bgeu x27, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x636dc17a # initialize rs1
li x13, 0x636dc17a # initialize rs2
bgeu x27, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x2, 0xfffffffe # initialize rs1
li x10, 0x2b1e1493 # initialize rs2
bgeu x2, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x2b1e1493 # initialize rs1
li x10, 0x2b1e1493 # initialize rs2
bgeu x2, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x27, 0x5bbc8872 # initialize rs1
li x24, 0x3c768c76 # initialize rs2
bgeu x27, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x3c768c76 # initialize rs1
li x24, 0x3c768c76 # initialize rs2
bgeu x27, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x18, 0xaaaaaaaa # initialize rs1
li x27, 0xd3fb4803 # initialize rs2
bgeu x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xd3fb4803 # initialize rs1
li x27, 0xd3fb4803 # initialize rs2
bgeu x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x5, 0x55555555 # initialize rs1
li x31, 0x7f13b4ce # initialize rs2
bgeu x5, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7f13b4ce # initialize rs1
li x31, 0x7f13b4ce # initialize rs2
bgeu x5, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x31, 0x5f7b5777 # initialize rs1
li x20, 0x00000000 # initialize rs2
bgeu x31, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
bgeu x31, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x2, 0xdfe284d1 # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x2, 0x02f8c330 # initialize rs1
li x24, 0x00000002 # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000002 # initialize rs1
li x24, 0x00000002 # initialize rs2
bgeu x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x29, 0x8a7e293d # initialize rs1
li x26, 0x80000000 # initialize rs2
bgeu x29, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000000 # initialize rs1
li x26, 0x80000000 # initialize rs2
bgeu x29, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x17, 0xf6248450 # initialize rs1
li x26, 0x80000001 # initialize rs2
bgeu x17, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x26, 0x80000001 # initialize rs2
bgeu x17, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x12, 0xc4a6943b # initialize rs1
li x22, 0x7fffffff # initialize rs2
bgeu x12, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
bgeu x12, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x23, 0xf603661d # initialize rs1
li x18, 0x7ffffffe # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffe # initialize rs1
li x18, 0x7ffffffe # initialize rs2
bgeu x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x13, 0x8d275ed0 # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x13, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffff # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x13, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x11, 0xa462e3b9 # initialize rs1
li x23, 0xfffffffe # initialize rs2
bgeu x11, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffe # initialize rs1
li x23, 0xfffffffe # initialize rs2
bgeu x11, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x25, 0x28e179c5 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
bgeu x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc8872 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
bgeu x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x2, 0xbbc80f36 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
bgeu x2, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
bgeu x2, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x7, 0x51f48bd6 # initialize rs1
li x10, 0x55555555 # initialize rs2
bgeu x7, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x55555555 # initialize rs1
li x10, 0x55555555 # initialize rs2
bgeu x7, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x27, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
bgeu x27, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
bgeu x27, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x22, 0x00000000 # initialize rs1
li x16, 0x00000001 # initialize rs2
bgeu x22, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000001 # initialize rs1
li x16, 0x00000001 # initialize rs2
bgeu x22, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x20, 0x00000000 # initialize rs1
li x5, 0x00000002 # initialize rs2
bgeu x20, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000002 # initialize rs1
li x5, 0x00000002 # initialize rs2
bgeu x20, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x12, 0x00000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
bgeu x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
bgeu x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x5, 0x00000000 # initialize rs1
li x19, 0x80000001 # initialize rs2
bgeu x5, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x80000001 # initialize rs1
li x19, 0x80000001 # initialize rs2
bgeu x5, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x11, 0x00000000 # initialize rs1
li x12, 0x7fffffff # initialize rs2
bgeu x11, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
bgeu x11, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x19, 0x00000000 # initialize rs1
li x12, 0x7ffffffe # initialize rs2
bgeu x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
bgeu x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x15, 0x00000000 # initialize rs1
li x3, 0xffffffff # initialize rs2
bgeu x15, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffff # initialize rs1
li x3, 0xffffffff # initialize rs2
bgeu x15, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x6, 0x00000000 # initialize rs1
li x11, 0xfffffffe # initialize rs2
bgeu x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
bgeu x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x14, 0x00000000 # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
bgeu x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc8872 # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
bgeu x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x6, 0x00000000 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bgeu x6, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bgeu x6, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x1, 0x00000000 # initialize rs1
li x11, 0x55555555 # initialize rs2
bgeu x1, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x55555555 # initialize rs1
li x11, 0x55555555 # initialize rs2
bgeu x1, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x9, 0x00000001 # initialize rs1
li x23, 0x00000000 # initialize rs2
bgeu x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000 # initialize rs1
li x23, 0x00000000 # initialize rs2
bgeu x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x7, 0x00000001 # initialize rs1
li x29, 0x00000001 # initialize rs2
bgeu x7, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000001 # initialize rs1
li x29, 0x00000001 # initialize rs2
bgeu x7, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x7, 0x00000001 # initialize rs1
li x26, 0x00000002 # initialize rs2
bgeu x7, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000002 # initialize rs1
li x26, 0x00000002 # initialize rs2
bgeu x7, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x14, 0x00000001 # initialize rs1
li x21, 0x80000000 # initialize rs2
bgeu x14, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x80000000 # initialize rs1
li x21, 0x80000000 # initialize rs2
bgeu x14, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x31, 0x00000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x29, 0x00000001 # initialize rs1
li x30, 0x7fffffff # initialize rs2
bgeu x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7fffffff # initialize rs1
li x30, 0x7fffffff # initialize rs2
bgeu x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x17, 0x00000001 # initialize rs1
li x9, 0x7ffffffe # initialize rs2
bgeu x17, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffe # initialize rs1
li x9, 0x7ffffffe # initialize rs2
bgeu x17, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x18, 0x00000001 # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x18, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffff # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x18, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x2, 0x00000001 # initialize rs1
li x27, 0xfffffffe # initialize rs2
bgeu x2, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfffffffe # initialize rs1
li x27, 0xfffffffe # initialize rs2
bgeu x2, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x21, 0x00000001 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
bgeu x21, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5bbc8872 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
bgeu x21, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x16, 0x00000001 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bgeu x16, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bgeu x16, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x21, 0x00000001 # initialize rs1
li x22, 0x55555555 # initialize rs2
bgeu x21, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x55555555 # initialize rs1
li x22, 0x55555555 # initialize rs2
bgeu x21, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x15, 0x00000002 # initialize rs1
li x25, 0x00000000 # initialize rs2
bgeu x15, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000 # initialize rs1
li x25, 0x00000000 # initialize rs2
bgeu x15, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x15, 0x00000002 # initialize rs1
li x2, 0x00000001 # initialize rs2
bgeu x15, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000001 # initialize rs1
li x2, 0x00000001 # initialize rs2
bgeu x15, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x20, 0x00000002 # initialize rs1
li x19, 0x00000002 # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000002 # initialize rs1
li x19, 0x00000002 # initialize rs2
bgeu x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x12, 0x00000002 # initialize rs1
li x20, 0x80000000 # initialize rs2
bgeu x12, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x20, 0x80000000 # initialize rs2
bgeu x12, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x7, 0x00000002 # initialize rs1
li x25, 0x80000001 # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
bgeu x7, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x13, 0x00000002 # initialize rs1
li x29, 0x7fffffff # initialize rs2
bgeu x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bgeu x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x14, 0x00000002 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bgeu x14, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bgeu x14, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x12, 0x00000002 # initialize rs1
li x5, 0xffffffff # initialize rs2
bgeu x12, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xffffffff # initialize rs1
li x5, 0xffffffff # initialize rs2
bgeu x12, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x12, 0x00000002 # initialize rs1
li x24, 0xfffffffe # initialize rs2
bgeu x12, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bgeu x12, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x28, 0x00000002 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
bgeu x28, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc8872 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
bgeu x28, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x16, 0x00000002 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
bgeu x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
bgeu x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x10, 0x00000002 # initialize rs1
li x24, 0x55555555 # initialize rs2
bgeu x10, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x55555555 # initialize rs1
li x24, 0x55555555 # initialize rs2
bgeu x10, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x18, 0x80000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bgeu x18, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bgeu x18, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x21, 0x80000000 # initialize rs1
li x13, 0x00000001 # initialize rs2
bgeu x21, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000001 # initialize rs1
li x13, 0x00000001 # initialize rs2
bgeu x21, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x13, 0x80000000 # initialize rs1
li x1, 0x00000002 # initialize rs2
bgeu x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000002 # initialize rs1
li x1, 0x00000002 # initialize rs2
bgeu x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x13, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x13, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x13, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x26, 0x80000000 # initialize rs1
li x11, 0x80000001 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x80000001 # initialize rs1
li x11, 0x80000001 # initialize rs2
bgeu x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x20, 0x80000000 # initialize rs1
li x28, 0x7fffffff # initialize rs2
bgeu x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffff # initialize rs1
li x28, 0x7fffffff # initialize rs2
bgeu x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x14, 0x80000000 # initialize rs1
li x19, 0x7ffffffe # initialize rs2
bgeu x14, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x19, 0x7ffffffe # initialize rs2
bgeu x14, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x8, 0x80000000 # initialize rs1
li x27, 0xffffffff # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffff # initialize rs1
li x27, 0xffffffff # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x9, 0x80000000 # initialize rs1
li x19, 0xfffffffe # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xfffffffe # initialize rs1
li x19, 0xfffffffe # initialize rs2
bgeu x9, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x25, 0x80000000 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bgeu x25, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bgeu x25, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x24, 0x80000000 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
bgeu x24, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
bgeu x24, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x16, 0x80000000 # initialize rs1
li x28, 0x55555555 # initialize rs2
bgeu x16, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x55555555 # initialize rs1
li x28, 0x55555555 # initialize rs2
bgeu x16, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x15, 0x80000001 # initialize rs1
li x9, 0x00000000 # initialize rs2
bgeu x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000 # initialize rs1
li x9, 0x00000000 # initialize rs2
bgeu x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x1, 0x80000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x1, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x1, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x6, 0x80000001 # initialize rs1
li x13, 0x00000002 # initialize rs2
bgeu x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
bgeu x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x12, 0x80000001 # initialize rs1
li x21, 0x80000000 # initialize rs2
bgeu x12, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x21, 0x80000000 # initialize rs2
bgeu x12, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x30, 0x80000001 # initialize rs1
li x8, 0x80000001 # initialize rs2
bgeu x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x80000001 # initialize rs1
li x8, 0x80000001 # initialize rs2
bgeu x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x19, 0x80000001 # initialize rs1
li x27, 0x7fffffff # initialize rs2
bgeu x19, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffff # initialize rs1
li x27, 0x7fffffff # initialize rs2
bgeu x19, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x16, 0x80000001 # initialize rs1
li x5, 0x7ffffffe # initialize rs2
bgeu x16, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7ffffffe # initialize rs1
li x5, 0x7ffffffe # initialize rs2
bgeu x16, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x22, 0x80000001 # initialize rs1
li x18, 0xffffffff # initialize rs2
bgeu x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xffffffff # initialize rs1
li x18, 0xffffffff # initialize rs2
bgeu x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x31, 0x80000001 # initialize rs1
li x18, 0xfffffffe # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffe # initialize rs1
li x18, 0xfffffffe # initialize rs2
bgeu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x21, 0x80000001 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
bgeu x21, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5bbc8872 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
bgeu x21, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x6, 0x80000001 # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bgeu x6, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bgeu x6, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x13, 0x80000001 # initialize rs1
li x25, 0x55555555 # initialize rs2
bgeu x13, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x55555555 # initialize rs1
li x25, 0x55555555 # initialize rs2
bgeu x13, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x8, 0x7fffffff # initialize rs1
li x27, 0x00000000 # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000 # initialize rs1
li x27, 0x00000000 # initialize rs2
bgeu x8, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x26, 0x7fffffff # initialize rs1
li x1, 0x00000001 # initialize rs2
bgeu x26, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000001 # initialize rs1
li x1, 0x00000001 # initialize rs2
bgeu x26, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x24, 0x7fffffff # initialize rs1
li x13, 0x00000002 # initialize rs2
bgeu x24, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
bgeu x24, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x11, 0x7fffffff # initialize rs1
li x17, 0x80000000 # initialize rs2
bgeu x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x80000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
bgeu x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x7, 0x7fffffff # initialize rs1
li x24, 0x80000001 # initialize rs2
bgeu x7, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000001 # initialize rs1
li x24, 0x80000001 # initialize rs2
bgeu x7, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x25, 0x7fffffff # initialize rs1
li x6, 0x7fffffff # initialize rs2
bgeu x25, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffff # initialize rs1
li x6, 0x7fffffff # initialize rs2
bgeu x25, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x3, 0x7fffffff # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bgeu x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bgeu x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x13, 0x7fffffff # initialize rs1
li x8, 0xffffffff # initialize rs2
bgeu x13, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffff # initialize rs1
li x8, 0xffffffff # initialize rs2
bgeu x13, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x27, 0x7fffffff # initialize rs1
li x24, 0xfffffffe # initialize rs2
bgeu x27, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bgeu x27, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x28, 0x7fffffff # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
bgeu x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc8872 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
bgeu x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x6, 0x7fffffff # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bgeu x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bgeu x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x15, 0x7fffffff # initialize rs1
li x30, 0x55555555 # initialize rs2
bgeu x15, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x30, 0x55555555 # initialize rs2
bgeu x15, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x5, 0x7ffffffe # initialize rs1
li x18, 0x00000000 # initialize rs2
bgeu x5, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
bgeu x5, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x19, 0x7ffffffe # initialize rs1
li x28, 0x00000001 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000001 # initialize rs1
li x28, 0x00000001 # initialize rs2
bgeu x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x13, 0x7ffffffe # initialize rs1
li x21, 0x00000002 # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000002 # initialize rs1
li x21, 0x00000002 # initialize rs2
bgeu x13, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x13, 0x7ffffffe # initialize rs1
li x25, 0x80000000 # initialize rs2
bgeu x13, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x25, 0x80000000 # initialize rs2
bgeu x13, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x13, 0x7ffffffe # initialize rs1
li x17, 0x80000001 # initialize rs2
bgeu x13, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x17, 0x80000001 # initialize rs2
bgeu x13, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x12, 0x7ffffffe # initialize rs1
li x24, 0x7fffffff # initialize rs2
bgeu x12, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffff # initialize rs1
li x24, 0x7fffffff # initialize rs2
bgeu x12, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x11, 0x7ffffffe # initialize rs1
li x15, 0x7ffffffe # initialize rs2
bgeu x11, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7ffffffe # initialize rs1
li x15, 0x7ffffffe # initialize rs2
bgeu x11, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x30, 0x7ffffffe # initialize rs1
li x28, 0xffffffff # initialize rs2
bgeu x30, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xffffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
bgeu x30, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x31, 0x7ffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bgeu x31, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bgeu x31, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x1, 0x7ffffffe # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
bgeu x1, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc8872 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
bgeu x1, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x26, 0x7ffffffe # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
bgeu x26, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
bgeu x26, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x9, 0x7ffffffe # initialize rs1
li x20, 0x55555555 # initialize rs2
bgeu x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x55555555 # initialize rs1
li x20, 0x55555555 # initialize rs2
bgeu x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x25, 0xffffffff # initialize rs1
li x1, 0x00000000 # initialize rs2
bgeu x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000 # initialize rs1
li x1, 0x00000000 # initialize rs2
bgeu x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x8, 0xffffffff # initialize rs1
li x3, 0x00000001 # initialize rs2
bgeu x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000001 # initialize rs1
li x3, 0x00000001 # initialize rs2
bgeu x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x6, 0xffffffff # initialize rs1
li x3, 0x00000002 # initialize rs2
bgeu x6, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000002 # initialize rs1
li x3, 0x00000002 # initialize rs2
bgeu x6, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x29, 0xffffffff # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x12, 0xffffffff # initialize rs1
li x13, 0x80000001 # initialize rs2
bgeu x12, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000001 # initialize rs1
li x13, 0x80000001 # initialize rs2
bgeu x12, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x30, 0xffffffff # initialize rs1
li x13, 0x7fffffff # initialize rs2
bgeu x30, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7fffffff # initialize rs1
li x13, 0x7fffffff # initialize rs2
bgeu x30, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x7, 0xffffffff # initialize rs1
li x1, 0x7ffffffe # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7ffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
bgeu x7, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x11, 0xffffffff # initialize rs1
li x24, 0xffffffff # initialize rs2
bgeu x11, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xffffffff # initialize rs1
li x24, 0xffffffff # initialize rs2
bgeu x11, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x23, 0xffffffff # initialize rs1
li x11, 0xfffffffe # initialize rs2
bgeu x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
bgeu x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x23, 0xffffffff # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bgeu x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x29, 0xffffffff # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bgeu x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x15, 0xffffffff # initialize rs1
li x8, 0x55555555 # initialize rs2
bgeu x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x8, 0x55555555 # initialize rs2
bgeu x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x14, 0xfffffffe # initialize rs1
li x22, 0x00000000 # initialize rs2
bgeu x14, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000 # initialize rs1
li x22, 0x00000000 # initialize rs2
bgeu x14, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x9, 0xfffffffe # initialize rs1
li x14, 0x00000001 # initialize rs2
bgeu x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000001 # initialize rs1
li x14, 0x00000001 # initialize rs2
bgeu x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x3, 0xfffffffe # initialize rs1
li x19, 0x00000002 # initialize rs2
bgeu x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000002 # initialize rs1
li x19, 0x00000002 # initialize rs2
bgeu x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x12, 0xfffffffe # initialize rs1
li x19, 0x80000000 # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x19, 0x80000000 # initialize rs2
bgeu x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x17, 0xfffffffe # initialize rs1
li x25, 0x80000001 # initialize rs2
bgeu x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
bgeu x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x11, 0xfffffffe # initialize rs1
li x5, 0x7fffffff # initialize rs2
bgeu x11, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x5, 0x7fffffff # initialize rs2
bgeu x11, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x14, 0xfffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bgeu x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x13, 0xfffffffe # initialize rs1
li x9, 0xffffffff # initialize rs2
bgeu x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffff # initialize rs1
li x9, 0xffffffff # initialize rs2
bgeu x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x10, 0xfffffffe # initialize rs1
li x14, 0xfffffffe # initialize rs2
bgeu x10, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffe # initialize rs1
li x14, 0xfffffffe # initialize rs2
bgeu x10, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x25, 0xfffffffe # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bgeu x25, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc8872 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bgeu x25, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x29, 0xfffffffe # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bgeu x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bgeu x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x1, 0xfffffffe # initialize rs1
li x31, 0x55555555 # initialize rs2
bgeu x1, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
bgeu x1, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x27, 0x5bbc8872 # initialize rs1
li x10, 0x00000000 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000 # initialize rs1
li x10, 0x00000000 # initialize rs2
bgeu x27, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x9, 0x5bbc8872 # initialize rs1
li x15, 0x00000001 # initialize rs2
bgeu x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
bgeu x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x17, 0x5bbc8872 # initialize rs1
li x10, 0x00000002 # initialize rs2
bgeu x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000002 # initialize rs1
li x10, 0x00000002 # initialize rs2
bgeu x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x1, 0x5bbc8872 # initialize rs1
li x5, 0x80000000 # initialize rs2
bgeu x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x80000000 # initialize rs1
li x5, 0x80000000 # initialize rs2
bgeu x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x19, 0x5bbc8872 # initialize rs1
li x8, 0x80000001 # initialize rs2
bgeu x19, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000001 # initialize rs1
li x8, 0x80000001 # initialize rs2
bgeu x19, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x10, 0x5bbc8872 # initialize rs1
li x16, 0x7fffffff # initialize rs2
bgeu x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bgeu x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x19, 0x5bbc8872 # initialize rs1
li x30, 0x7ffffffe # initialize rs2
bgeu x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffe # initialize rs1
li x30, 0x7ffffffe # initialize rs2
bgeu x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x15, 0x5bbc8872 # initialize rs1
li x18, 0xffffffff # initialize rs2
bgeu x15, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffff # initialize rs1
li x18, 0xffffffff # initialize rs2
bgeu x15, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x31, 0x5bbc8872 # initialize rs1
li x21, 0xfffffffe # initialize rs2
bgeu x31, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffe # initialize rs1
li x21, 0xfffffffe # initialize rs2
bgeu x31, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bgeu x31, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x31, 0x5bbc8872 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bgeu x31, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bgeu x31, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x17, 0x5bbc8872 # initialize rs1
li x24, 0x55555555 # initialize rs2
bgeu x17, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x55555555 # initialize rs1
li x24, 0x55555555 # initialize rs2
bgeu x17, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x18, 0xaaaaaaaa # initialize rs1
li x15, 0x00000000 # initialize rs2
bgeu x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
bgeu x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x9, 0xaaaaaaaa # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x9, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
bgeu x9, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x24, 0xaaaaaaaa # initialize rs1
li x22, 0x00000002 # initialize rs2
bgeu x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000002 # initialize rs1
li x22, 0x00000002 # initialize rs2
bgeu x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x21, 0xaaaaaaaa # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
bgeu x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x8, 0xaaaaaaaa # initialize rs1
li x17, 0x80000001 # initialize rs2
bgeu x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x80000001 # initialize rs1
li x17, 0x80000001 # initialize rs2
bgeu x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x25, 0xaaaaaaaa # initialize rs1
li x15, 0x7fffffff # initialize rs2
bgeu x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffff # initialize rs1
li x15, 0x7fffffff # initialize rs2
bgeu x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x27, 0xaaaaaaaa # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bgeu x27, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7ffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bgeu x27, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x14, 0xaaaaaaaa # initialize rs1
li x31, 0xffffffff # initialize rs2
bgeu x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xffffffff # initialize rs1
li x31, 0xffffffff # initialize rs2
bgeu x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x1, 0xaaaaaaaa # initialize rs1
li x23, 0xfffffffe # initialize rs2
bgeu x1, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffe # initialize rs1
li x23, 0xfffffffe # initialize rs2
bgeu x1, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x27, 0xaaaaaaaa # initialize rs1
li x1, 0x5bbc8872 # initialize rs2
bgeu x27, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5bbc8872 # initialize rs1
li x1, 0x5bbc8872 # initialize rs2
bgeu x27, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x24, 0xaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaa # initialize rs2
bgeu x24, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaa # initialize rs2
bgeu x24, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x22, 0xaaaaaaaa # initialize rs1
li x10, 0x55555555 # initialize rs2
bgeu x22, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x10, 0x55555555 # initialize rs2
bgeu x22, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x18, 0x55555555 # initialize rs1
li x31, 0x00000000 # initialize rs2
bgeu x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x31, 0x00000000 # initialize rs2
bgeu x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x23, 0x55555555 # initialize rs1
li x25, 0x00000001 # initialize rs2
bgeu x23, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000001 # initialize rs1
li x25, 0x00000001 # initialize rs2
bgeu x23, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x24, 0x55555555 # initialize rs1
li x6, 0x00000002 # initialize rs2
bgeu x24, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000002 # initialize rs1
li x6, 0x00000002 # initialize rs2
bgeu x24, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x1, 0x55555555 # initialize rs1
li x9, 0x80000000 # initialize rs2
bgeu x1, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x80000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
bgeu x1, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x10, 0x55555555 # initialize rs1
li x2, 0x80000001 # initialize rs2
bgeu x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000001 # initialize rs1
li x2, 0x80000001 # initialize rs2
bgeu x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x26, 0x55555555 # initialize rs1
li x19, 0x7fffffff # initialize rs2
bgeu x26, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7fffffff # initialize rs1
li x19, 0x7fffffff # initialize rs2
bgeu x26, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x14, 0x55555555 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bgeu x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bgeu x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x17, 0x55555555 # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x17, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffff # initialize rs1
li x6, 0xffffffff # initialize rs2
bgeu x17, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x3, 0x55555555 # initialize rs1
li x21, 0xfffffffe # initialize rs2
bgeu x3, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffe # initialize rs1
li x21, 0xfffffffe # initialize rs2
bgeu x3, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x1, 0x55555555 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
bgeu x1, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc8872 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
bgeu x1, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x17, 0x55555555 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
bgeu x17, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaa # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
bgeu x17, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x1, 0x55555555 # initialize rs1
li x25, 0x55555555 # initialize rs2
bgeu x1, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x55555555 # initialize rs1
li x25, 0x55555555 # initialize rs2
bgeu x1, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x82b7c995 # initialize rs1
li x0, 0xa85abc42 # initialize rs2
bgeu x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xa85abc42 # initialize rs1
li x0, 0xa85abc42 # initialize rs2
bgeu x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x20666af7 # initialize rs1
li x1, 0xd341236e # initialize rs2
bgeu x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xd341236e # initialize rs1
li x1, 0xd341236e # initialize rs2
bgeu x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x09976aad # initialize rs1
li x2, 0x38271a56 # initialize rs2
bgeu x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x38271a56 # initialize rs1
li x2, 0x38271a56 # initialize rs2
bgeu x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xad1dc8e6 # initialize rs1
li x3, 0x1baf481a # initialize rs2
bgeu x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x1baf481a # initialize rs1
li x3, 0x1baf481a # initialize rs2
bgeu x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0d3ac0e1 # initialize rs1
li x4, 0xf4af723c # initialize rs2
bgeu x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xf4af723c # initialize rs1
li x4, 0xf4af723c # initialize rs2
bgeu x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x31c43883 # initialize rs1
li x5, 0x402cc38a # initialize rs2
bgeu x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x402cc38a # initialize rs1
li x5, 0x402cc38a # initialize rs2
bgeu x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x700477c4 # initialize rs1
li x6, 0xc74de182 # initialize rs2
bgeu x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xc74de182 # initialize rs1
li x6, 0xc74de182 # initialize rs2
bgeu x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xea417495 # initialize rs1
li x7, 0x006fc953 # initialize rs2
bgeu x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x006fc953 # initialize rs1
li x7, 0x006fc953 # initialize rs2
bgeu x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x9e47398a # initialize rs1
li x8, 0x71f98c45 # initialize rs2
bgeu x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x71f98c45 # initialize rs1
li x8, 0x71f98c45 # initialize rs2
bgeu x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x84c42a58 # initialize rs1
li x9, 0xf9d66907 # initialize rs2
bgeu x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xf9d66907 # initialize rs1
li x9, 0xf9d66907 # initialize rs2
bgeu x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x466e7956 # initialize rs1
li x10, 0x6f07873a # initialize rs2
bgeu x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x6f07873a # initialize rs1
li x10, 0x6f07873a # initialize rs2
bgeu x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xccf2a3df # initialize rs1
li x11, 0xc708c48f # initialize rs2
bgeu x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xc708c48f # initialize rs1
li x11, 0xc708c48f # initialize rs2
bgeu x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xcf32c386 # initialize rs1
li x12, 0xbbc713dd # initialize rs2
bgeu x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xbbc713dd # initialize rs1
li x12, 0xbbc713dd # initialize rs2
bgeu x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xc1d3074d # initialize rs1
li x13, 0xa16d0564 # initialize rs2
bgeu x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xa16d0564 # initialize rs1
li x13, 0xa16d0564 # initialize rs2
bgeu x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xbfaa2bcf # initialize rs1
li x14, 0xc4e30192 # initialize rs2
bgeu x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xc4e30192 # initialize rs1
li x14, 0xc4e30192 # initialize rs2
bgeu x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x66a2e17f # initialize rs1
li x15, 0x69f53771 # initialize rs2
bgeu x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x69f53771 # initialize rs1
li x15, 0x69f53771 # initialize rs2
bgeu x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x87ca7418 # initialize rs1
li x16, 0x22449ffc # initialize rs2
bgeu x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x22449ffc # initialize rs1
li x16, 0x22449ffc # initialize rs2
bgeu x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x3929898f # initialize rs1
li x17, 0x23605ace # initialize rs2
bgeu x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x23605ace # initialize rs1
li x17, 0x23605ace # initialize rs2
bgeu x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x1ed7908a # initialize rs1
li x18, 0x726a18cc # initialize rs2
bgeu x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x726a18cc # initialize rs1
li x18, 0x726a18cc # initialize rs2
bgeu x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x1027e6a6 # initialize rs1
li x19, 0x8c2df752 # initialize rs2
bgeu x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8c2df752 # initialize rs1
li x19, 0x8c2df752 # initialize rs2
bgeu x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xbcffdc78 # initialize rs1
li x20, 0xf7be3d07 # initialize rs2
bgeu x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xf7be3d07 # initialize rs1
li x20, 0xf7be3d07 # initialize rs2
bgeu x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x36907b2a # initialize rs1
li x21, 0x0baa95e7 # initialize rs2
bgeu x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x0baa95e7 # initialize rs1
li x21, 0x0baa95e7 # initialize rs2
bgeu x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x3fa930e5 # initialize rs1
li x22, 0x665fde3b # initialize rs2
bgeu x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x665fde3b # initialize rs1
li x22, 0x665fde3b # initialize rs2
bgeu x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x1aacf9b1 # initialize rs1
li x23, 0x502c0ad5 # initialize rs2
bgeu x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x502c0ad5 # initialize rs1
li x23, 0x502c0ad5 # initialize rs2
bgeu x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x129516d4 # initialize rs1
li x24, 0x22e02aad # initialize rs2
bgeu x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x22e02aad # initialize rs1
li x24, 0x22e02aad # initialize rs2
bgeu x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xcf38bb1a # initialize rs1
li x25, 0x00eb23d4 # initialize rs2
bgeu x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00eb23d4 # initialize rs1
li x25, 0x00eb23d4 # initialize rs2
bgeu x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xb98f4829 # initialize rs1
li x26, 0x9e263804 # initialize rs2
bgeu x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x9e263804 # initialize rs1
li x26, 0x9e263804 # initialize rs2
bgeu x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x8f29fc9a # initialize rs1
li x27, 0x85352355 # initialize rs2
bgeu x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x85352355 # initialize rs1
li x27, 0x85352355 # initialize rs2
bgeu x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x8929aad8 # initialize rs1
li x28, 0x773d491d # initialize rs2
bgeu x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x773d491d # initialize rs1
li x28, 0x773d491d # initialize rs2
bgeu x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xb9a86b4e # initialize rs1
li x29, 0x3e6b2f2e # initialize rs2
bgeu x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x3e6b2f2e # initialize rs1
li x29, 0x3e6b2f2e # initialize rs2
bgeu x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x9045820f # initialize rs1
li x30, 0x1f80075a # initialize rs2
bgeu x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x1f80075a # initialize rs1
li x30, 0x1f80075a # initialize rs2
bgeu x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xf46cb8f8 # initialize rs1
li x31, 0xefd22975 # initialize rs2
bgeu x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xefd22975 # initialize rs1
li x31, 0xefd22975 # initialize rs2
bgeu x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bgeu x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x8, x26 # perform first operation
bgeu x2, x17, arbitraryLabel13
nop
arbitraryLabel13:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x12, x6 # perform first operation
bgeu x30, x19, arbitraryLabel14
nop
arbitraryLabel14:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x11, x31, x10 # perform first operation
bgeu x21, x19, arbitraryLabel15
nop
arbitraryLabel15:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x3, x5 # perform first operation
bgeu x29, x13, arbitraryLabel16
nop
arbitraryLabel16:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x14, x8 # perform first operation
bgeu x6, x21, arbitraryLabel17
nop
arbitraryLabel17:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x14, x18, x11 # perform first operation
bgeu x30, x9, arbitraryLabel18
nop
arbitraryLabel18:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-and.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xd8e59ccc # initialize rs1
li x17, 0x28d349bc # initialize rs2
and x20, x0, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xb442ef42 # initialize rs1
li x28, 0x02ef6b2a # initialize rs2
and x17, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x1fdf433b # initialize rs1
li x10, 0xa1a67372 # initialize rs2
and x20, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x1c380a37 # initialize rs1
li x20, 0x45ad40d2 # initialize rs2
and x17, x3, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9f9a043d # initialize rs1
li x9, 0x346bc1d5 # initialize rs2
and x18, x4, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x037aaf5e # initialize rs1
li x2, 0x974690cb # initialize rs2
and x10, x5, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x14d0b1e4 # initialize rs1
li x17, 0x1e1bcc2f # initialize rs2
and x16, x6, x17 # perform operation
RVTEST_SIGUPD(x7, x0, x16, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x09a7df3c # initialize rs1
li x30, 0xaf87f316 # initialize rs2
and x28, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x7210069e # initialize rs1
li x12, 0xf61bc168 # initialize rs2
and x9, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xc669bcf9 # initialize rs1
li x25, 0xdcf59a88 # initialize rs2
and x3, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x72fb0423 # initialize rs1
li x8, 0x2ac13b8a # initialize rs2
and x18, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x8d0714b0 # initialize rs1
li x7, 0x9ffe8960 # initialize rs2
and x1, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x4ea94bbb # initialize rs1
li x10, 0x0f6261ed # initialize rs2
and x26, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xb22899d5 # initialize rs1
li x8, 0x71a5808b # initialize rs2
and x2, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x69e5b962 # initialize rs1
li x30, 0x982b6a3f # initialize rs2
and x31, x14, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x06721863 # initialize rs1
li x28, 0x218447d3 # initialize rs2
and x25, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xf1a5bbd3 # initialize rs1
li x1, 0x2fd46f2e # initialize rs2
and x30, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xb6da4f9d # initialize rs1
li x9, 0x70e641d7 # initialize rs2
and x23, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xfc9fd75e # initialize rs1
li x2, 0x2f26afc3 # initialize rs2
and x31, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xdb03a761 # initialize rs1
li x30, 0xfa13d9c7 # initialize rs2
and x12, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xca2d6f35 # initialize rs1
li x18, 0x67f59a58 # initialize rs2
and x11, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x46fe35cc # initialize rs1
li x19, 0x87ca0af3 # initialize rs2
and x8, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x7dc85bd7 # initialize rs1
li x8, 0x391c8ae9 # initialize rs2
and x19, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x3d7e57bf # initialize rs1
li x12, 0xa7f0e2f8 # initialize rs2
and x5, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x52ed3f7a # initialize rs1
li x25, 0x55aafc3a # initialize rs2
and x8, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x69af07fb # initialize rs1
li x5, 0x56aad2cd # initialize rs2
and x19, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x333e47b0 # initialize rs1
li x6, 0x20f95e15 # initialize rs2
and x16, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x2431643f # initialize rs1
li x26, 0x59fe5dd6 # initialize rs2
and x31, x27, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xf6aa62f8 # initialize rs1
li x12, 0x4eb67e20 # initialize rs2
and x13, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xe69bc1d4 # initialize rs1
li x31, 0x73bd6f99 # initialize rs2
and x30, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x9858db9d # initialize rs1
li x26, 0x3c130b8d # initialize rs2
and x18, x30, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x61ca4640 # initialize rs1
li x24, 0x48116fd5 # initialize rs2
and x21, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x15, 0x7b7dac62 # initialize rs1
li x0, 0xc4d7e820 # initialize rs2
and x9, x15, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x27, 0x11f8baed # initialize rs1
li x1, 0x4a64cfe9 # initialize rs2
and x20, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x11, 0x9bf686dc # initialize rs1
li x2, 0x49766cba # initialize rs2
and x6, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x19, 0x8d797005 # initialize rs1
li x3, 0xd3946dbc # initialize rs2
and x8, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x13, 0xabada152 # initialize rs1
li x4, 0x64542c66 # initialize rs2
and x10, x13, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x15, 0x139baebb # initialize rs1
li x5, 0x97ad5597 # initialize rs2
and x17, x15, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x17, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0xbae1f65f # initialize rs1
li x6, 0x75fdab86 # initialize rs2
and x11, x8, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x11, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0x35472fe5 # initialize rs1
li x7, 0x16a7f74c # initialize rs2
and x13, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x31, 0x6920d83f # initialize rs1
li x8, 0xe20d02db # initialize rs2
and x18, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x24, 0xd04e300a # initialize rs1
li x9, 0x2c917a67 # initialize rs2
and x25, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x28, 0xeb0511e1 # initialize rs1
li x10, 0x92d2ee25 # initialize rs2
and x31, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x27, 0x4cd511c2 # initialize rs1
li x11, 0x16f92c79 # initialize rs2
and x19, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x3, 0x831ded30 # initialize rs1
li x12, 0xde83422f # initialize rs2
and x5, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x8, 0xfd2ad168 # initialize rs1
li x13, 0x437f3034 # initialize rs2
and x2, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x7, 0xf388a163 # initialize rs1
li x14, 0xcc2f6ba5 # initialize rs2
and x28, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x28, 0xbc0463ac # initialize rs1
li x15, 0xd24d4df2 # initialize rs2
and x3, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x15, 0x141cd6d5 # initialize rs1
li x16, 0x3968267e # initialize rs2
and x31, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x30, 0xc4acd26c # initialize rs1
li x17, 0xfc9f2d91 # initialize rs2
and x12, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x23, 0xa636fa8e # initialize rs1
li x18, 0x976a7e37 # initialize rs2
and x3, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x24, 0x275f3918 # initialize rs1
li x19, 0xb0b77a12 # initialize rs2
and x15, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x12, 0xa359346a # initialize rs1
li x20, 0xf554a050 # initialize rs2
and x21, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x24, 0x1fd66d89 # initialize rs1
li x21, 0x8deab3b3 # initialize rs2
and x15, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x3, 0xe787cd4c # initialize rs1
li x22, 0x4456e0b2 # initialize rs2
and x30, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x22, 0xa88a147a # initialize rs1
li x23, 0x64d03051 # initialize rs2
and x19, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x28, 0x8df3854e # initialize rs1
li x24, 0xf7e05847 # initialize rs2
and x8, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x18, 0x8578aaa7 # initialize rs1
li x25, 0x6e1d4f4d # initialize rs2
and x8, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x22, 0xffd54ad6 # initialize rs1
li x26, 0x518699b8 # initialize rs2
and x18, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x17, 0xa844a3c5 # initialize rs1
li x27, 0xf6fbb6c1 # initialize rs2
and x18, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x23, 0xca13cb70 # initialize rs1
li x28, 0xf2aa19ff # initialize rs2
and x30, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x26, 0x5f845773 # initialize rs1
li x29, 0x4f0a99d7 # initialize rs2
and x2, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x19, 0xe080e2d4 # initialize rs1
li x30, 0xfc66e07a # initialize rs2
and x15, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x28, 0x6170b15c # initialize rs1
li x31, 0x979bc686 # initialize rs2
and x30, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 252)

# Testcase cp_rd (Test destination rd = x0)
li x14, 0x0884b289 # initialize rs1
li x10, 0x814d7ef6 # initialize rs2
and x0, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x7, 0xf23f2e84 # initialize rs1
li x24, 0xf1814714 # initialize rs2
and x1, x7, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x16, 0x14e0790c # initialize rs1
li x15, 0x71a05bf8 # initialize rs2
and x2, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x6, 0xf14854a7 # initialize rs1
li x24, 0x7146e3e8 # initialize rs2
and x3, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0x72960d11 # initialize rs1
li x20, 0xde19e3de # initialize rs2
and x4, x18, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0x03c130ca # initialize rs1
li x21, 0xbc4410c7 # initialize rs2
and x5, x27, x21 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0xc6bc0baf # initialize rs1
li x22, 0x0d849d58 # initialize rs2
and x6, x5, x22 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x10, 0x18e6b02d # initialize rs1
li x29, 0x3c309d5d # initialize rs2
and x7, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x12, 0x0b6f1332 # initialize rs1
li x8, 0x98a649c9 # initialize rs2
and x8, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x11, 0x8254a836 # initialize rs1
li x10, 0x7a76fdbb # initialize rs2
and x9, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x26, 0x549f69b5 # initialize rs1
li x11, 0xc0d3e154 # initialize rs2
and x10, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x3, 0xd55da599 # initialize rs1
li x28, 0xc5c39e44 # initialize rs2
and x11, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x3, 0x078b5622 # initialize rs1
li x11, 0xf3b33d2e # initialize rs2
and x12, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x24, 0xdb245a7e # initialize rs1
li x25, 0x8b8ed36e # initialize rs2
and x13, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x29, 0x07851fc6 # initialize rs1
li x18, 0x0da967eb # initialize rs2
and x14, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x16, 0x7471766d # initialize rs1
li x13, 0x20b0a102 # initialize rs2
and x15, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x18, 0x85bfe5e0 # initialize rs1
li x10, 0xa407fc8e # initialize rs2
and x16, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x2, 0xd0e6ac21 # initialize rs1
li x6, 0x9ef821ed # initialize rs2
and x17, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x5, 0x4b92ffb0 # initialize rs1
li x1, 0x293abd13 # initialize rs2
and x18, x5, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0xb657d1cb # initialize rs1
li x29, 0x1a3ca4c4 # initialize rs2
and x19, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x26, 0x785b5797 # initialize rs1
li x10, 0x1efa4d94 # initialize rs2
and x20, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x15, 0x3771dd21 # initialize rs1
li x18, 0x835bcd9c # initialize rs2
and x21, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x14, 0x85a03fe0 # initialize rs1
li x5, 0x4085be98 # initialize rs2
and x22, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x26, 0x0fe8a869 # initialize rs1
li x10, 0xbdd411ca # initialize rs2
and x23, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x2, 0x42963a13 # initialize rs1
li x24, 0x86fd9472 # initialize rs2
and x24, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x17, 0x0af40098 # initialize rs1
li x13, 0xaf11cee6 # initialize rs2
and x25, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x16, 0x50777433 # initialize rs1
li x11, 0xe2c1c565 # initialize rs2
and x26, x16, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x27, 0x884d58aa # initialize rs1
li x3, 0x503c263d # initialize rs2
and x27, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x24, 0x9b1d33a0 # initialize rs1
li x28, 0xb89782c9 # initialize rs2
and x28, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x31, 0x33626a8c # initialize rs1
li x12, 0x6a5c0fd4 # initialize rs2
and x29, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0xa2aaa53b # initialize rs1
li x10, 0xa601177d # initialize rs2
and x30, x11, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x15, 0x0bbafdc9 # initialize rs1
li x17, 0x3c995c3e # initialize rs2
and x31, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x17, 0x00000000 # initialize rs1
li x11, 0x89e9659a # initialize rs2
and x9, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x26, 0x00000001 # initialize rs1
li x25, 0x17ab3201 # initialize rs2
and x14, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x18, 0x00000002 # initialize rs1
li x24, 0xfa7ceedc # initialize rs2
and x28, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x2, 0x80000000 # initialize rs1
li x10, 0xfc83f4d2 # initialize rs2
and x16, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x6, 0x80000001 # initialize rs1
li x15, 0xead0bf4f # initialize rs2
and x9, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x27, 0x7fffffff # initialize rs1
li x5, 0x3d904e92 # initialize rs2
and x26, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x28, 0x7ffffffe # initialize rs1
li x21, 0x07bd99a2 # initialize rs2
and x10, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x12, 0xffffffff # initialize rs1
li x24, 0xfb51a8cc # initialize rs2
and x21, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x8, 0xfffffffe # initialize rs1
li x26, 0xb041044d # initialize rs2
and x13, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x18, 0x5bbc8872 # initialize rs1
li x26, 0xc45598fc # initialize rs2
and x29, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x23, 0xaaaaaaaa # initialize rs1
li x24, 0xd14d0ce5 # initialize rs2
and x5, x23, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x29, 0x55555555 # initialize rs1
li x2, 0xd3ae8196 # initialize rs2
and x27, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x8, 0x053b6da9 # initialize rs1
li x2, 0x00000000 # initialize rs2
and x12, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0xaced8bb2 # initialize rs1
li x12, 0x00000001 # initialize rs2
and x15, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x24, 0x001b57ae # initialize rs1
li x22, 0x00000002 # initialize rs2
and x25, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x24, 0xdc05f25a # initialize rs1
li x9, 0x80000000 # initialize rs2
and x1, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x14, 0xfd8f0343 # initialize rs1
li x27, 0x80000001 # initialize rs2
and x19, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x18, 0x9d2576ad # initialize rs1
li x13, 0x7fffffff # initialize rs2
and x17, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x30, 0x21704952 # initialize rs1
li x23, 0x7ffffffe # initialize rs2
and x21, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x12, 0x79059101 # initialize rs1
li x29, 0xffffffff # initialize rs2
and x22, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x9, 0x154d18f7 # initialize rs1
li x24, 0xfffffffe # initialize rs2
and x10, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x11, 0xabf9703f # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
and x14, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x25, 0x6af5e763 # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
and x28, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x11, 0x4ba84251 # initialize rs1
li x27, 0x55555555 # initialize rs2
and x14, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x8, 0x00000000 # initialize rs1
li x29, 0x00000000 # initialize rs2
and x5, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x10, 0x00000000 # initialize rs1
li x12, 0x00000001 # initialize rs2
and x24, x10, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x29, 0x00000000 # initialize rs1
li x12, 0x00000002 # initialize rs2
and x18, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x11, 0x00000000 # initialize rs1
li x14, 0x80000000 # initialize rs2
and x23, x11, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x22, 0x00000000 # initialize rs1
li x19, 0x80000001 # initialize rs2
and x28, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x12, 0x00000000 # initialize rs1
li x1, 0x7fffffff # initialize rs2
and x23, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x30, 0x00000000 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
and x28, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x12, 0x00000000 # initialize rs1
li x17, 0xffffffff # initialize rs2
and x8, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x16, 0x00000000 # initialize rs1
li x31, 0xfffffffe # initialize rs2
and x2, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x7, 0x00000000 # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
and x11, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x14, 0x00000000 # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
and x7, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x3, 0x00000000 # initialize rs1
li x28, 0x55555555 # initialize rs2
and x9, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x6, 0x00000001 # initialize rs1
li x11, 0x00000000 # initialize rs2
and x2, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x17, 0x00000001 # initialize rs1
li x13, 0x00000001 # initialize rs2
and x21, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x19, 0x00000001 # initialize rs1
li x20, 0x00000002 # initialize rs2
and x7, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x20, 0x00000001 # initialize rs1
li x14, 0x80000000 # initialize rs2
and x13, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x28, 0x00000001 # initialize rs1
li x12, 0x80000001 # initialize rs2
and x20, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x13, 0x00000001 # initialize rs1
li x26, 0x7fffffff # initialize rs2
and x30, x13, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x2, 0x00000001 # initialize rs1
li x15, 0x7ffffffe # initialize rs2
and x29, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x24, 0x00000001 # initialize rs1
li x17, 0xffffffff # initialize rs2
and x20, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x16, 0x00000001 # initialize rs1
li x1, 0xfffffffe # initialize rs2
and x30, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x21, 0x00000001 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
and x17, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x13, 0x00000001 # initialize rs1
li x16, 0xaaaaaaaa # initialize rs2
and x22, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x5, 0x00000001 # initialize rs1
li x20, 0x55555555 # initialize rs2
and x25, x5, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x18, 0x00000002 # initialize rs1
li x15, 0x00000000 # initialize rs2
and x6, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x6, 0x00000002 # initialize rs1
li x23, 0x00000001 # initialize rs2
and x12, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x25, 0x00000002 # initialize rs1
li x23, 0x00000002 # initialize rs2
and x28, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x28, 0x00000002 # initialize rs1
li x29, 0x80000000 # initialize rs2
and x14, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x31, 0x00000002 # initialize rs1
li x14, 0x80000001 # initialize rs2
and x26, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x10, 0x00000002 # initialize rs1
li x20, 0x7fffffff # initialize rs2
and x6, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x7, 0x00000002 # initialize rs1
li x5, 0x7ffffffe # initialize rs2
and x15, x7, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x15, 0x00000002 # initialize rs1
li x25, 0xffffffff # initialize rs2
and x22, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x7, 0x00000002 # initialize rs1
li x10, 0xfffffffe # initialize rs2
and x30, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x6, 0x00000002 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
and x21, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x7, 0x00000002 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
and x11, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x31, 0x00000002 # initialize rs1
li x30, 0x55555555 # initialize rs2
and x8, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x21, 0x80000000 # initialize rs1
li x2, 0x00000000 # initialize rs2
and x18, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x1, 0x80000000 # initialize rs1
li x18, 0x00000001 # initialize rs2
and x8, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x28, 0x80000000 # initialize rs1
li x14, 0x00000002 # initialize rs2
and x8, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x26, 0x80000000 # initialize rs1
li x5, 0x80000000 # initialize rs2
and x23, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x5, 0x80000000 # initialize rs1
li x27, 0x80000001 # initialize rs2
and x10, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x14, 0x80000000 # initialize rs1
li x2, 0x7fffffff # initialize rs2
and x16, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x29, 0x80000000 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
and x25, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x16, 0x80000000 # initialize rs1
li x13, 0xffffffff # initialize rs2
and x15, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x12, 0x80000000 # initialize rs1
li x21, 0xfffffffe # initialize rs2
and x27, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x20, 0x80000000 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
and x6, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x2, 0x80000000 # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
and x31, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x30, 0x80000000 # initialize rs1
li x22, 0x55555555 # initialize rs2
and x23, x30, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x20, 0x80000001 # initialize rs1
li x13, 0x00000000 # initialize rs2
and x10, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x13, 0x80000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
and x14, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x27, 0x80000001 # initialize rs1
li x22, 0x00000002 # initialize rs2
and x3, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x30, 0x80000001 # initialize rs1
li x6, 0x80000000 # initialize rs2
and x11, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x10, 0x80000001 # initialize rs1
li x31, 0x80000001 # initialize rs2
and x5, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x11, 0x80000001 # initialize rs1
li x3, 0x7fffffff # initialize rs2
and x7, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x12, 0x80000001 # initialize rs1
li x18, 0x7ffffffe # initialize rs2
and x1, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x29, 0x80000001 # initialize rs1
li x18, 0xffffffff # initialize rs2
and x25, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x8, 0x80000001 # initialize rs1
li x28, 0xfffffffe # initialize rs2
and x1, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x26, 0x80000001 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
and x15, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x1, 0x80000001 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
and x20, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x26, 0x80000001 # initialize rs1
li x18, 0x55555555 # initialize rs2
and x17, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x30, 0x7fffffff # initialize rs1
li x20, 0x00000000 # initialize rs2
and x11, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x1, 0x7fffffff # initialize rs1
li x9, 0x00000001 # initialize rs2
and x20, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x29, 0x7fffffff # initialize rs1
li x24, 0x00000002 # initialize rs2
and x11, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x20, 0x7fffffff # initialize rs1
li x9, 0x80000000 # initialize rs2
and x18, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x23, 0x7fffffff # initialize rs1
li x19, 0x80000001 # initialize rs2
and x15, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x12, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
and x18, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x24, 0x7fffffff # initialize rs1
li x2, 0x7ffffffe # initialize rs2
and x22, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x12, 0x7fffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
and x17, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x10, 0x7fffffff # initialize rs1
li x5, 0xfffffffe # initialize rs2
and x27, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x25, 0x7fffffff # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
and x30, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x5, 0x7fffffff # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
and x17, x5, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x6, 0x7fffffff # initialize rs1
li x2, 0x55555555 # initialize rs2
and x29, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x23, 0x7ffffffe # initialize rs1
li x12, 0x00000000 # initialize rs2
and x20, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x10, 0x7ffffffe # initialize rs1
li x19, 0x00000001 # initialize rs2
and x16, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x16, 0x7ffffffe # initialize rs1
li x7, 0x00000002 # initialize rs2
and x20, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x27, 0x7ffffffe # initialize rs1
li x21, 0x80000000 # initialize rs2
and x7, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x9, 0x7ffffffe # initialize rs1
li x24, 0x80000001 # initialize rs2
and x15, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x5, 0x7ffffffe # initialize rs1
li x19, 0x7fffffff # initialize rs2
and x3, x5, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x6, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
and x13, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x16, 0x7ffffffe # initialize rs1
li x20, 0xffffffff # initialize rs2
and x7, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x30, 0x7ffffffe # initialize rs1
li x29, 0xfffffffe # initialize rs2
and x20, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x26, 0x7ffffffe # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
and x18, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x30, 0x7ffffffe # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
and x21, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x18, 0x7ffffffe # initialize rs1
li x1, 0x55555555 # initialize rs2
and x27, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x31, 0xffffffff # initialize rs1
li x30, 0x00000000 # initialize rs2
and x1, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x16, 0xffffffff # initialize rs1
li x6, 0x00000001 # initialize rs2
and x29, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x7, 0xffffffff # initialize rs1
li x30, 0x00000002 # initialize rs2
and x12, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x10, 0xffffffff # initialize rs1
li x7, 0x80000000 # initialize rs2
and x2, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x23, 0xffffffff # initialize rs1
li x28, 0x80000001 # initialize rs2
and x22, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x21, 0xffffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
and x27, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x16, 0xffffffff # initialize rs1
li x6, 0x7ffffffe # initialize rs2
and x21, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x17, 0xffffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
and x18, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x15, 0xffffffff # initialize rs1
li x8, 0xfffffffe # initialize rs2
and x24, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x25, 0xffffffff # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
and x17, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x12, 0xffffffff # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
and x29, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x21, 0xffffffff # initialize rs1
li x31, 0x55555555 # initialize rs2
and x10, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x24, 0xfffffffe # initialize rs1
li x11, 0x00000000 # initialize rs2
and x8, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x25, 0xfffffffe # initialize rs1
li x12, 0x00000001 # initialize rs2
and x7, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x28, 0xfffffffe # initialize rs1
li x2, 0x00000002 # initialize rs2
and x25, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x13, 0xfffffffe # initialize rs1
li x7, 0x80000000 # initialize rs2
and x5, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x13, 0xfffffffe # initialize rs1
li x28, 0x80000001 # initialize rs2
and x8, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x14, 0xfffffffe # initialize rs1
li x6, 0x7fffffff # initialize rs2
and x17, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x14, 0xfffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
and x7, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x21, 0xfffffffe # initialize rs1
li x1, 0xffffffff # initialize rs2
and x6, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x26, 0xfffffffe # initialize rs1
li x2, 0xfffffffe # initialize rs2
and x8, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x30, 0xfffffffe # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
and x9, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x31, 0xfffffffe # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
and x27, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x30, 0xfffffffe # initialize rs1
li x29, 0x55555555 # initialize rs2
and x5, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x3, 0x5bbc8872 # initialize rs1
li x19, 0x00000000 # initialize rs2
and x24, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x17, 0x5bbc8872 # initialize rs1
li x11, 0x00000001 # initialize rs2
and x5, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x27, 0x5bbc8872 # initialize rs1
li x25, 0x00000002 # initialize rs2
and x18, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x12, 0x5bbc8872 # initialize rs1
li x5, 0x80000000 # initialize rs2
and x1, x12, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x26, 0x5bbc8872 # initialize rs1
li x20, 0x80000001 # initialize rs2
and x25, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x6, 0x5bbc8872 # initialize rs1
li x19, 0x7fffffff # initialize rs2
and x24, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x19, 0x5bbc8872 # initialize rs1
li x2, 0x7ffffffe # initialize rs2
and x18, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x8, 0x5bbc8872 # initialize rs1
li x11, 0xffffffff # initialize rs2
and x21, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x3, 0x5bbc8872 # initialize rs1
li x5, 0xfffffffe # initialize rs2
and x29, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x6, 0x5bbc8872 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
and x8, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x19, 0x5bbc8872 # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
and x11, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x13, 0x5bbc8872 # initialize rs1
li x6, 0x55555555 # initialize rs2
and x31, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x2, 0xaaaaaaaa # initialize rs1
li x12, 0x00000000 # initialize rs2
and x5, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x13, 0xaaaaaaaa # initialize rs1
li x12, 0x00000001 # initialize rs2
and x20, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x30, 0xaaaaaaaa # initialize rs1
li x17, 0x00000002 # initialize rs2
and x24, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x16, 0xaaaaaaaa # initialize rs1
li x22, 0x80000000 # initialize rs2
and x9, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x1, 0xaaaaaaaa # initialize rs1
li x31, 0x80000001 # initialize rs2
and x7, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x11, 0xaaaaaaaa # initialize rs1
li x26, 0x7fffffff # initialize rs2
and x25, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x18, 0xaaaaaaaa # initialize rs1
li x19, 0x7ffffffe # initialize rs2
and x16, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x14, 0xaaaaaaaa # initialize rs1
li x17, 0xffffffff # initialize rs2
and x7, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x20, 0xaaaaaaaa # initialize rs1
li x5, 0xfffffffe # initialize rs2
and x31, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x28, 0xaaaaaaaa # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
and x24, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x10, 0xaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
and x28, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x21, 0xaaaaaaaa # initialize rs1
li x19, 0x55555555 # initialize rs2
and x17, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x3, 0x55555555 # initialize rs1
li x7, 0x00000000 # initialize rs2
and x16, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x24, 0x55555555 # initialize rs1
li x28, 0x00000001 # initialize rs2
and x27, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x18, 0x55555555 # initialize rs1
li x13, 0x00000002 # initialize rs2
and x25, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x24, 0x55555555 # initialize rs1
li x29, 0x80000000 # initialize rs2
and x9, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x18, 0x55555555 # initialize rs1
li x7, 0x80000001 # initialize rs2
and x22, x18, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x3, 0x55555555 # initialize rs1
li x17, 0x7fffffff # initialize rs2
and x13, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x25, 0x55555555 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
and x22, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x8, 0x55555555 # initialize rs1
li x24, 0xffffffff # initialize rs2
and x2, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x17, 0x55555555 # initialize rs1
li x23, 0xfffffffe # initialize rs2
and x15, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x9, 0x55555555 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
and x31, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x20, 0x55555555 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
and x10, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x16, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
and x22, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x5b7f740a # initialize rs1
li x0, 0x7094c424 # initialize rs2
and x21, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x31436217 # initialize rs1
li x1, 0xacb8e5f0 # initialize rs2
and x8, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x45a6c658 # initialize rs1
li x2, 0xafea3403 # initialize rs2
and x3, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x398e7895 # initialize rs1
li x3, 0xb686f0ed # initialize rs2
and x5, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xd4e73d3c # initialize rs1
li x4, 0x4ad646e7 # initialize rs2
and x16, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6a376524 # initialize rs1
li x5, 0x3d1083e0 # initialize rs2
and x20, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x51dadeae # initialize rs1
li x6, 0x7400f629 # initialize rs2
and x9, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb3108177 # initialize rs1
li x7, 0xd89717fe # initialize rs2
and x24, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xcfc29099 # initialize rs1
li x8, 0x663b1f24 # initialize rs2
and x19, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x24f81964 # initialize rs1
li x9, 0x9aef0463 # initialize rs2
and x6, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xd7903e03 # initialize rs1
li x10, 0x5fa6f641 # initialize rs2
and x2, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x8d377777 # initialize rs1
li x11, 0xece4385a # initialize rs2
and x1, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x435c73e0 # initialize rs1
li x12, 0x0cda812e # initialize rs2
and x7, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xc43d2a2b # initialize rs1
li x13, 0x36be1a9a # initialize rs2
and x5, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xe2fa2c1f # initialize rs1
li x14, 0xea8ba01e # initialize rs2
and x16, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x49967959 # initialize rs1
li x15, 0x10e8c751 # initialize rs2
and x28, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x659cad26 # initialize rs1
li x16, 0x0e1367f0 # initialize rs2
and x22, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x5a0edf17 # initialize rs1
li x17, 0x00e6f8c1 # initialize rs2
and x26, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xb62145ce # initialize rs1
li x18, 0xcaabd25a # initialize rs2
and x25, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xc9b0bc8d # initialize rs1
li x19, 0x90b75105 # initialize rs2
and x1, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x4c86d5ba # initialize rs1
li x20, 0x712e1475 # initialize rs2
and x18, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x7e7d3bed # initialize rs1
li x21, 0xf7f5c409 # initialize rs2
and x31, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x674dc30d # initialize rs1
li x22, 0xb7773d40 # initialize rs2
and x26, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x36b3c921 # initialize rs1
li x23, 0x74668f00 # initialize rs2
and x10, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xdf95cd36 # initialize rs1
li x24, 0x19a5dd64 # initialize rs2
and x12, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xe8693bc4 # initialize rs1
li x25, 0xdcd96955 # initialize rs2
and x15, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x75ba192a # initialize rs1
li x26, 0x6803469d # initialize rs2
and x19, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xab25cee4 # initialize rs1
li x27, 0x9e1184b0 # initialize rs2
and x17, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x7b332824 # initialize rs1
li x28, 0x05f1b0ac # initialize rs2
and x31, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x08574cbc # initialize rs1
li x29, 0xa92f93aa # initialize rs2
and x31, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x3f027e48 # initialize rs1
li x30, 0xba6c478f # initialize rs2
and x7, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xfe1d4187 # initialize rs1
li x31, 0x7fe3a8c3 # initialize rs2
and x29, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x51f0089a # initialize rs1
li x22, 0xadee1703 # initialize rs2
and x0, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x836fd5c8 # initialize rs1
li x6, 0xf5ae7b18 # initialize rs2
and x1, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x72461275 # initialize rs1
li x10, 0x6cd74678 # initialize rs2
and x2, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x9cfff001 # initialize rs1
li x14, 0x6f4f2b74 # initialize rs2
and x3, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x1857192e # initialize rs1
li x13, 0x56c6664f # initialize rs2
and x4, x4, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x100776b5 # initialize rs1
li x17, 0xab38b8e9 # initialize rs2
and x5, x5, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xcad1756b # initialize rs1
li x10, 0xf3d4710c # initialize rs2
and x6, x6, x10 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbf835919 # initialize rs1
li x12, 0xf4cba671 # initialize rs2
and x7, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x56d4dad8 # initialize rs1
li x25, 0x934083bd # initialize rs2
and x8, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x65fff04d # initialize rs1
li x26, 0x72910c53 # initialize rs2
and x9, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xbe94cf73 # initialize rs1
li x17, 0x6b1fa208 # initialize rs2
and x10, x10, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xcd8db90b # initialize rs1
li x25, 0x3106e539 # initialize rs2
and x11, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xcab06133 # initialize rs1
li x24, 0x228f3ba4 # initialize rs2
and x12, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x993d9e7f # initialize rs1
li x5, 0x7b831fd4 # initialize rs2
and x13, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x283cc831 # initialize rs1
li x23, 0x16231eab # initialize rs2
and x14, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x67cd631f # initialize rs1
li x19, 0x2c207dad # initialize rs2
and x15, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x3f40c277 # initialize rs1
li x8, 0x062f2aa7 # initialize rs2
and x16, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x6ee18856 # initialize rs1
li x6, 0xb1073ebd # initialize rs2
and x17, x17, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x9a9f3267 # initialize rs1
li x26, 0xe1870d85 # initialize rs2
and x18, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x76b71bfe # initialize rs1
li x21, 0x88c6523a # initialize rs2
and x19, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xcf5ef11c # initialize rs1
li x26, 0x6c43ed15 # initialize rs2
and x20, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x59ffb0f0 # initialize rs1
li x30, 0x19754d8e # initialize rs2
and x21, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x35181ca9 # initialize rs1
li x8, 0x65cd1d34 # initialize rs2
and x22, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xcf9ef2fb # initialize rs1
li x29, 0xe122991a # initialize rs2
and x23, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xc89ea3ad # initialize rs1
li x11, 0xbcba4cdf # initialize rs2
and x24, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x0601028d # initialize rs1
li x5, 0xadf15155 # initialize rs2
and x25, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xa3bb020f # initialize rs1
li x21, 0x1dbf5be7 # initialize rs2
and x26, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x2ad3ad7a # initialize rs1
li x13, 0x105893d3 # initialize rs2
and x27, x27, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x7ebe98eb # initialize rs1
li x15, 0x8be54c1d # initialize rs2
and x28, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x846f7acd # initialize rs1
li x27, 0x5f905fb2 # initialize rs2
and x29, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xf5555e33 # initialize rs1
li x28, 0x801bd765 # initialize rs2
and x30, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xda376008 # initialize rs1
li x23, 0x954d86dd # initialize rs2
and x31, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x29, 0x26a3d320 # initialize rs1
li x0, 0x1782b151 # initialize rs2
and x0, x29, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x29, 0xf16e266d # initialize rs1
li x1, 0xcf9266f0 # initialize rs2
and x1, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x9, 0x97539935 # initialize rs1
li x2, 0x81cfc56d # initialize rs2
and x2, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x25, 0x17089124 # initialize rs1
li x3, 0x3190b7d5 # initialize rs2
and x3, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x16, 0x755fb8f2 # initialize rs1
li x4, 0xe8b23271 # initialize rs2
and x4, x16, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0x89270129 # initialize rs1
li x5, 0x1abc5e52 # initialize rs2
and x5, x11, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0x36ea7d17 # initialize rs1
li x6, 0xdd908a0c # initialize rs2
and x6, x22, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x7b42e7e1 # initialize rs1
li x7, 0xe58cd896 # initialize rs2
and x7, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x18, 0xc1943b89 # initialize rs1
li x8, 0xe6ee7b13 # initialize rs2
and x8, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x29, 0x29252e60 # initialize rs1
li x9, 0xed0a86bc # initialize rs2
and x9, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x22, 0x56bc303a # initialize rs1
li x10, 0xac18b3da # initialize rs2
and x10, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x29, 0x552da374 # initialize rs1
li x11, 0x12eacea0 # initialize rs2
and x11, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x2, 0x97a278f0 # initialize rs1
li x12, 0xdfa80048 # initialize rs2
and x12, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x13, 0xf6fd2420 # initialize rs1
li x13, 0xbf3f9b5b # initialize rs2
and x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x22, 0x6b3a8fa8 # initialize rs1
li x14, 0xdc8a3df0 # initialize rs2
and x14, x22, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x3, 0xeb116626 # initialize rs1
li x15, 0x8c3eaa33 # initialize rs2
and x15, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x6, 0xbb6f8638 # initialize rs1
li x16, 0xa89adefe # initialize rs2
and x16, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x29, 0xc8ec2920 # initialize rs1
li x17, 0xc8381170 # initialize rs2
and x17, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x17, 0x0344adc8 # initialize rs1
li x18, 0x16ac6573 # initialize rs2
and x18, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x12, 0xf9e0b615 # initialize rs1
li x19, 0x9e67d1eb # initialize rs2
and x19, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x30, 0xd7948a30 # initialize rs1
li x20, 0x2e4d012b # initialize rs2
and x20, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x6, 0xc82a1738 # initialize rs1
li x21, 0x7000693b # initialize rs2
and x21, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x13, 0x962865e2 # initialize rs1
li x22, 0x515aeb8e # initialize rs2
and x22, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x23, 0x2c825b0b # initialize rs1
li x23, 0x06e9b01e # initialize rs2
and x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x25, 0xbca5ae98 # initialize rs1
li x24, 0x42897b81 # initialize rs2
and x24, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x14, 0xc1e2fcaa # initialize rs1
li x25, 0x1983af44 # initialize rs2
and x25, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x29, 0xab040295 # initialize rs1
li x26, 0x1e38f713 # initialize rs2
and x26, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x3, 0xea94bb7a # initialize rs1
li x27, 0x767b8867 # initialize rs2
and x27, x3, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x29, 0x746c051c # initialize rs1
li x28, 0xed072b0d # initialize rs2
and x28, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x26, 0x35e0f8e1 # initialize rs1
li x29, 0x5aa01790 # initialize rs2
and x29, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x5, 0xd5b833da # initialize rs1
li x30, 0x26f2f7ba # initialize rs2
and x30, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x10, 0x1b4d4165 # initialize rs1
li x31, 0x351b9373 # initialize rs2
and x31, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x95c26119 # initialize rs1
li x0, 0xa7a187f3 # initialize rs2
and x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xe86ad18b # initialize rs1
li x1, 0xfec3389c # initialize rs2
and x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x882e2490 # initialize rs1
li x2, 0x72e13f3b # initialize rs2
and x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xec6d717d # initialize rs1
li x3, 0xbcd02e99 # initialize rs2
and x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb8c635f6 # initialize rs1
li x4, 0x68a119a6 # initialize rs2
and x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbfbd6c44 # initialize rs1
li x5, 0xa825022d # initialize rs2
and x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe4fe857c # initialize rs1
li x6, 0xb9af6174 # initialize rs2
and x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x2e8ad3c2 # initialize rs1
li x7, 0xbe9a6a63 # initialize rs2
and x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x0973d6c6 # initialize rs1
li x8, 0x69a8a52f # initialize rs2
and x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x886517bf # initialize rs1
li x9, 0x0c1f9887 # initialize rs2
and x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x2b16654d # initialize rs1
li x10, 0xd8a6e8e6 # initialize rs2
and x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x7b504090 # initialize rs1
li x11, 0x4693a4e3 # initialize rs2
and x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xc4f3a548 # initialize rs1
li x12, 0x922d2684 # initialize rs2
and x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xe764c586 # initialize rs1
li x13, 0xae4abb42 # initialize rs2
and x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x308503ab # initialize rs1
li x14, 0xb0e248ef # initialize rs2
and x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x7068e2b8 # initialize rs1
li x15, 0x7af64818 # initialize rs2
and x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x6739576a # initialize rs1
li x16, 0xf2928893 # initialize rs2
and x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x3ddb2c64 # initialize rs1
li x17, 0x1e263f0b # initialize rs2
and x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x2a2d2d50 # initialize rs1
li x18, 0xb4c613f8 # initialize rs2
and x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xd6cf9281 # initialize rs1
li x19, 0xd8a17b29 # initialize rs2
and x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xfbfc5c07 # initialize rs1
li x20, 0x1f34bb98 # initialize rs2
and x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x2fe55a7a # initialize rs1
li x21, 0xaf8afed5 # initialize rs2
and x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x3f3fa7ec # initialize rs1
li x22, 0xc443ee6a # initialize rs2
and x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xee0747cc # initialize rs1
li x23, 0xd4b41f2a # initialize rs2
and x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xea21017e # initialize rs1
li x24, 0x52b4f614 # initialize rs2
and x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x8fc462ef # initialize rs1
li x25, 0x7eb30122 # initialize rs2
and x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x47004514 # initialize rs1
li x26, 0x9aac9c74 # initialize rs2
and x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xcc2e4c80 # initialize rs1
li x27, 0x4f6702ed # initialize rs2
and x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x195034e5 # initialize rs1
li x28, 0x0a3ea40f # initialize rs2
and x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x3a5c1ac3 # initialize rs1
li x29, 0xdc4f9df4 # initialize rs2
and x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x63d01d0a # initialize rs1
li x30, 0x85236c06 # initialize rs2
and x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x7aad8f87 # initialize rs1
li x31, 0x718ac72b # initialize rs2
and x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x25, x6 # perform first operation
and x29, x13, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x14, x1 # perform first operation
and x11, x25, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x25, x16, x5 # perform first operation
and x26, x29, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x7, x22 # perform first operation
and x22, x2, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x25, x3, x26 # perform first operation
and x5, x17, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x19, x3 # perform first operation
and x13, x9, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x31, x9, x6 # perform first operation
and x31, x7, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x27, x17 # perform first operation
and x23, x3, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x6, x18, x11 # perform first operation
and x6, x28, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x1, x22 # perform first operation
and x1, x20, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x10, x20, x7 # perform first operation
and x7, x19, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x26, x1 # perform first operation
and x27, x22, x6 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-slt.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xea562851 # initialize rs1
li x5, 0x1d03f01c # initialize rs2
slt x18, x0, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x06fc86e8 # initialize rs1
li x27, 0xe887e9ee # initialize rs2
slt x13, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x88a701d3 # initialize rs1
li x9, 0xbadb48be # initialize rs2
slt x24, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xe5cd076d # initialize rs1
li x14, 0x63450672 # initialize rs2
slt x16, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x02b376ff # initialize rs1
li x2, 0x00b02769 # initialize rs2
slt x24, x4, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x35469dc2 # initialize rs1
li x8, 0x5a025cdd # initialize rs2
slt x31, x5, x8 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x82f45fc8 # initialize rs1
li x30, 0xfd96625a # initialize rs2
slt x18, x6, x30 # perform operation
RVTEST_SIGUPD(x7, x0, x18, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1502b1e5 # initialize rs1
li x20, 0x51dfb3d4 # initialize rs2
slt x15, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x1cb7a43d # initialize rs1
li x7, 0xc0b82c08 # initialize rs2
slt x30, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xb8ab615d # initialize rs1
li x26, 0x04d3dcbe # initialize rs2
slt x29, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xeaa478ae # initialize rs1
li x15, 0x930a718f # initialize rs2
slt x25, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xb5e5afac # initialize rs1
li x19, 0xe430b610 # initialize rs2
slt x31, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x25f23f25 # initialize rs1
li x28, 0xb38e8700 # initialize rs2
slt x22, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x3ec27f23 # initialize rs1
li x24, 0x66a01617 # initialize rs2
slt x31, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x4327daa7 # initialize rs1
li x18, 0x7768b3e1 # initialize rs2
slt x30, x14, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x1df08754 # initialize rs1
li x6, 0xf79465de # initialize rs2
slt x2, x15, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xd2378587 # initialize rs1
li x29, 0xbcbc65ab # initialize rs2
slt x30, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x10549acc # initialize rs1
li x26, 0x6dacf05d # initialize rs2
slt x31, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x18836824 # initialize rs1
li x17, 0x5ca60e72 # initialize rs2
slt x6, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe0ef2fcc # initialize rs1
li x6, 0xc907dd4e # initialize rs2
slt x18, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xf2a8d934 # initialize rs1
li x6, 0xcf970722 # initialize rs2
slt x15, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x6c568882 # initialize rs1
li x17, 0x8aa439db # initialize rs2
slt x26, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x50de03c1 # initialize rs1
li x17, 0xbb994ceb # initialize rs2
slt x16, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xf7b7a803 # initialize rs1
li x11, 0x0718932e # initialize rs2
slt x25, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x501b52bc # initialize rs1
li x26, 0x97f83be8 # initialize rs2
slt x2, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xb71c12d1 # initialize rs1
li x15, 0x9ca3c257 # initialize rs2
slt x13, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9e5a9578 # initialize rs1
li x18, 0xe8e39550 # initialize rs2
slt x19, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x68bd1787 # initialize rs1
li x20, 0x3b2389df # initialize rs2
slt x23, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x17056b1c # initialize rs1
li x3, 0xdb30cbc6 # initialize rs2
slt x30, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x2b4a97a6 # initialize rs1
li x7, 0xe706c759 # initialize rs2
slt x16, x29, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xf51968c3 # initialize rs1
li x10, 0x27a5587b # initialize rs2
slt x21, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x179862e0 # initialize rs1
li x17, 0x77e5b216 # initialize rs2
slt x14, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x9, 0x503e0f4e # initialize rs1
li x0, 0x4fdecda5 # initialize rs2
slt x19, x9, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x26, 0xeb0c2092 # initialize rs1
li x1, 0x3e517919 # initialize rs2
slt x13, x26, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x31, 0x9e4c2d4a # initialize rs1
li x2, 0xa6f5833d # initialize rs2
slt x28, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x15, 0x2a6d710f # initialize rs1
li x3, 0x0aa5a35b # initialize rs2
slt x10, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x2, 0x7e1d4bde # initialize rs1
li x4, 0xbc1ac3fc # initialize rs2
slt x16, x2, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x31, 0x0e2d275e # initialize rs1
li x5, 0x6fbb1ad5 # initialize rs2
slt x14, x31, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x14, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x11, 0x4efaa8e9 # initialize rs1
li x6, 0x02a91351 # initialize rs2
slt x29, x11, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x29, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0x651b5c6c # initialize rs1
li x7, 0x31a2f87c # initialize rs2
slt x19, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x14, 0x1feff560 # initialize rs1
li x8, 0x3553f981 # initialize rs2
slt x11, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x10, 0x0d46f3c2 # initialize rs1
li x9, 0x26388278 # initialize rs2
slt x11, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x20, 0x849475f5 # initialize rs1
li x10, 0xf02f317e # initialize rs2
slt x11, x20, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x12, 0xb6b6fa32 # initialize rs1
li x11, 0xab00a1c6 # initialize rs2
slt x16, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x28, 0xedc4fbdf # initialize rs1
li x12, 0x6c792ded # initialize rs2
slt x20, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x17, 0x75be8719 # initialize rs1
li x13, 0x0296ca04 # initialize rs2
slt x24, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x25, 0x22cf956a # initialize rs1
li x14, 0x520bc355 # initialize rs2
slt x11, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x6, 0xabc06c1b # initialize rs1
li x15, 0x5a1ee62e # initialize rs2
slt x3, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x8, 0x41aea10e # initialize rs1
li x16, 0xe1bb6cd3 # initialize rs2
slt x7, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x22, 0x7a6534de # initialize rs1
li x17, 0xe72b8765 # initialize rs2
slt x15, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x8, 0xeeb43dec # initialize rs1
li x18, 0xfc68f759 # initialize rs2
slt x1, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x21, 0x52b311ab # initialize rs1
li x19, 0x95bb9619 # initialize rs2
slt x11, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x21, 0xc38ddc93 # initialize rs1
li x20, 0xdae72da5 # initialize rs2
slt x7, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x9, 0xad64fc21 # initialize rs1
li x21, 0xcfb6135e # initialize rs2
slt x17, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x3, 0x0c54bc56 # initialize rs1
li x22, 0xf5a094fb # initialize rs2
slt x10, x3, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x9, 0xb9fee848 # initialize rs1
li x23, 0xc8e1cf67 # initialize rs2
slt x8, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x15, 0x5ca31b6d # initialize rs1
li x24, 0x28d29030 # initialize rs2
slt x9, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x12, 0xfe13bf08 # initialize rs1
li x25, 0x0d831d33 # initialize rs2
slt x16, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x13, 0x53abfee2 # initialize rs1
li x26, 0xe8620646 # initialize rs2
slt x21, x13, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x5, 0xdefa6cdd # initialize rs1
li x27, 0x552052ab # initialize rs2
slt x1, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x24, 0xa7620027 # initialize rs1
li x28, 0x5c98272c # initialize rs2
slt x30, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x11, 0xea5fc5c7 # initialize rs1
li x29, 0xcb4488a3 # initialize rs2
slt x27, x11, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x25, 0xc18a95ab # initialize rs1
li x30, 0x1d528a08 # initialize rs2
slt x24, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x17, 0x32350aa5 # initialize rs1
li x31, 0x76e83957 # initialize rs2
slt x9, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 252)

# Testcase cp_rd (Test destination rd = x0)
li x17, 0x16874ce9 # initialize rs1
li x16, 0xc85f60ea # initialize rs2
slt x0, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x3, 0xfa23d8fe # initialize rs1
li x16, 0xb7f13815 # initialize rs2
slt x1, x3, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x21, 0x075761dc # initialize rs1
li x6, 0xbfc67305 # initialize rs2
slt x2, x21, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x31, 0xe70bc36a # initialize rs1
li x6, 0x84802487 # initialize rs2
slt x3, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0x82cb7611 # initialize rs1
li x17, 0x0f774a8f # initialize rs2
slt x4, x18, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0x390fed3e # initialize rs1
li x10, 0xc5dc2878 # initialize rs2
slt x5, x27, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0xd722dd4f # initialize rs1
li x4, 0x465bedb5 # initialize rs2
slt x6, x8, x4 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x25, 0xaef1d502 # initialize rs1
li x15, 0xf2ed7768 # initialize rs2
slt x7, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x31, 0x68c948b1 # initialize rs1
li x24, 0xed2fe95f # initialize rs2
slt x8, x31, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x29, 0x110ddbfa # initialize rs1
li x6, 0xe537fc28 # initialize rs2
slt x9, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x12, 0x93f80939 # initialize rs1
li x11, 0xdb11d345 # initialize rs2
slt x10, x12, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x17, 0x676c3238 # initialize rs1
li x16, 0x6f60f537 # initialize rs2
slt x11, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x17, 0xd07cc825 # initialize rs1
li x10, 0x6b1da880 # initialize rs2
slt x12, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x9, 0x3a118457 # initialize rs1
li x26, 0xda949ac1 # initialize rs2
slt x13, x9, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x13, 0xdac7ee93 # initialize rs1
li x5, 0xc3c2aad2 # initialize rs2
slt x14, x13, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x16, 0x12698bcd # initialize rs1
li x8, 0x544b6f5a # initialize rs2
slt x15, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x20, 0x20f77e2f # initialize rs1
li x27, 0x2da4c416 # initialize rs2
slt x16, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x22, 0xd4c78913 # initialize rs1
li x19, 0xe4d28a26 # initialize rs2
slt x17, x22, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x27, 0x486b3701 # initialize rs1
li x29, 0xa10dc3fd # initialize rs2
slt x18, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x19, 0xac467d88 # initialize rs1
li x24, 0x88a58d76 # initialize rs2
slt x19, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x25, 0x0f480f5f # initialize rs1
li x13, 0x35d94cb5 # initialize rs2
slt x20, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x30, 0x55d10cdf # initialize rs1
li x24, 0xc0b9085a # initialize rs2
slt x21, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x10, 0x1068ba1b # initialize rs1
li x18, 0xa55c8fac # initialize rs2
slt x22, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x11, 0xb6a08451 # initialize rs1
li x27, 0x4ebea812 # initialize rs2
slt x23, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0x12504bb6 # initialize rs1
li x1, 0x7bf6b46f # initialize rs2
slt x24, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x31, 0xfb082fc4 # initialize rs1
li x2, 0xfefbae3a # initialize rs2
slt x25, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x6, 0x3e948ca5 # initialize rs1
li x25, 0xf218c7df # initialize rs2
slt x26, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x5, 0x5d64fe2f # initialize rs1
li x13, 0xfdafeb50 # initialize rs2
slt x27, x5, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x13, 0x6d147ae5 # initialize rs1
li x15, 0xa2408dca # initialize rs2
slt x28, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x6, 0x27914224 # initialize rs1
li x29, 0xbcbf349c # initialize rs2
slt x29, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0x6f410107 # initialize rs1
li x5, 0xfde37586 # initialize rs2
slt x30, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x14, 0x67473c79 # initialize rs1
li x19, 0x6a511ca7 # initialize rs2
slt x31, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x2, 0x00000000 # initialize rs1
li x12, 0xefdd6fff # initialize rs2
slt x29, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x2, 0x00000001 # initialize rs1
li x28, 0x341a21ab # initialize rs2
slt x21, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x9, 0x00000002 # initialize rs1
li x18, 0x6519bcf7 # initialize rs2
slt x24, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x11, 0x80000000 # initialize rs1
li x16, 0xe94158a8 # initialize rs2
slt x26, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x10, 0x80000001 # initialize rs1
li x25, 0x0617e342 # initialize rs2
slt x29, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x1, 0x7fffffff # initialize rs1
li x21, 0xd984785f # initialize rs2
slt x14, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x29, 0x7ffffffe # initialize rs1
li x2, 0x83f3904a # initialize rs2
slt x10, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x21, 0xffffffff # initialize rs1
li x5, 0xbef879ee # initialize rs2
slt x31, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x27, 0xfffffffe # initialize rs1
li x5, 0x4fa6c520 # initialize rs2
slt x21, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x13, 0x5bbc8872 # initialize rs1
li x28, 0x8242f483 # initialize rs2
slt x25, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x24, 0xaaaaaaaa # initialize rs1
li x10, 0x3d1905e1 # initialize rs2
slt x14, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x15, 0x55555555 # initialize rs1
li x18, 0x4576702e # initialize rs2
slt x17, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x17, 0xde9eb0a3 # initialize rs1
li x29, 0x00000000 # initialize rs2
slt x25, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x20, 0xc8872cd2 # initialize rs1
li x31, 0x00000001 # initialize rs2
slt x15, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x22, 0x6452e05c # initialize rs1
li x3, 0x00000002 # initialize rs2
slt x2, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x17, 0x1dd382d3 # initialize rs1
li x16, 0x80000000 # initialize rs2
slt x24, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x5, 0x04d7f2e9 # initialize rs1
li x14, 0x80000001 # initialize rs2
slt x11, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x22, 0x1692e972 # initialize rs1
li x7, 0x7fffffff # initialize rs2
slt x20, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x31, 0x444f265e # initialize rs1
li x2, 0x7ffffffe # initialize rs2
slt x28, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x28, 0xed5a7d62 # initialize rs1
li x18, 0xffffffff # initialize rs2
slt x24, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x6, 0x04bad457 # initialize rs1
li x28, 0xfffffffe # initialize rs2
slt x26, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x31, 0x3c3b89c2 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
slt x22, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x3, 0x511b3d1c # initialize rs1
li x25, 0xaaaaaaaa # initialize rs2
slt x17, x3, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x3, 0x28e29564 # initialize rs1
li x10, 0x55555555 # initialize rs2
slt x29, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x6, 0x00000000 # initialize rs1
li x26, 0x00000000 # initialize rs2
slt x20, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x8, 0x00000000 # initialize rs1
li x20, 0x00000001 # initialize rs2
slt x7, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x9, 0x00000000 # initialize rs1
li x23, 0x00000002 # initialize rs2
slt x8, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x29, 0x00000000 # initialize rs1
li x22, 0x80000000 # initialize rs2
slt x15, x29, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x2, 0x00000000 # initialize rs1
li x29, 0x80000001 # initialize rs2
slt x13, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x23, 0x00000000 # initialize rs1
li x14, 0x7fffffff # initialize rs2
slt x26, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x26, 0x00000000 # initialize rs1
li x31, 0x7ffffffe # initialize rs2
slt x16, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x14, 0x00000000 # initialize rs1
li x8, 0xffffffff # initialize rs2
slt x6, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x17, 0x00000000 # initialize rs1
li x27, 0xfffffffe # initialize rs2
slt x19, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x18, 0x00000000 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
slt x29, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x31, 0x00000000 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
slt x27, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x23, 0x00000000 # initialize rs1
li x3, 0x55555555 # initialize rs2
slt x15, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x28, 0x00000001 # initialize rs1
li x27, 0x00000000 # initialize rs2
slt x16, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x27, 0x00000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
slt x6, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x13, 0x00000001 # initialize rs1
li x8, 0x00000002 # initialize rs2
slt x30, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x17, 0x00000001 # initialize rs1
li x19, 0x80000000 # initialize rs2
slt x7, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x12, 0x00000001 # initialize rs1
li x9, 0x80000001 # initialize rs2
slt x6, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x30, 0x00000001 # initialize rs1
li x12, 0x7fffffff # initialize rs2
slt x11, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x3, 0x00000001 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
slt x9, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x23, 0x00000001 # initialize rs1
li x29, 0xffffffff # initialize rs2
slt x22, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x3, 0x00000001 # initialize rs1
li x2, 0xfffffffe # initialize rs2
slt x8, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x9, 0x00000001 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
slt x25, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x25, 0x00000001 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
slt x27, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x8, 0x00000001 # initialize rs1
li x20, 0x55555555 # initialize rs2
slt x6, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x30, 0x00000002 # initialize rs1
li x24, 0x00000000 # initialize rs2
slt x20, x30, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x25, 0x00000002 # initialize rs1
li x7, 0x00000001 # initialize rs2
slt x1, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x8, 0x00000002 # initialize rs1
li x12, 0x00000002 # initialize rs2
slt x28, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x26, 0x00000002 # initialize rs1
li x6, 0x80000000 # initialize rs2
slt x9, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x11, 0x00000002 # initialize rs1
li x28, 0x80000001 # initialize rs2
slt x25, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x7, 0x00000002 # initialize rs1
li x28, 0x7fffffff # initialize rs2
slt x20, x7, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x2, 0x00000002 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
slt x16, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x31, 0x00000002 # initialize rs1
li x6, 0xffffffff # initialize rs2
slt x25, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x14, 0x00000002 # initialize rs1
li x11, 0xfffffffe # initialize rs2
slt x29, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x29, 0x00000002 # initialize rs1
li x23, 0x5bbc8872 # initialize rs2
slt x17, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x6, 0x00000002 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
slt x22, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x23, 0x00000002 # initialize rs1
li x16, 0x55555555 # initialize rs2
slt x29, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x29, 0x80000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
slt x21, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x3, 0x80000000 # initialize rs1
li x31, 0x00000001 # initialize rs2
slt x5, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x18, 0x80000000 # initialize rs1
li x30, 0x00000002 # initialize rs2
slt x15, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x23, 0x80000000 # initialize rs1
li x30, 0x80000000 # initialize rs2
slt x17, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x20, 0x80000000 # initialize rs1
li x21, 0x80000001 # initialize rs2
slt x29, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x2, 0x80000000 # initialize rs1
li x21, 0x7fffffff # initialize rs2
slt x15, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x21, 0x80000000 # initialize rs1
li x5, 0x7ffffffe # initialize rs2
slt x31, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x18, 0x80000000 # initialize rs1
li x1, 0xffffffff # initialize rs2
slt x28, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x6, 0x80000000 # initialize rs1
li x3, 0xfffffffe # initialize rs2
slt x26, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x12, 0x80000000 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
slt x8, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x6, 0x80000000 # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
slt x9, x6, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x7, 0x80000000 # initialize rs1
li x19, 0x55555555 # initialize rs2
slt x2, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x10, 0x80000001 # initialize rs1
li x9, 0x00000000 # initialize rs2
slt x18, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x11, 0x80000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
slt x27, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x28, 0x80000001 # initialize rs1
li x27, 0x00000002 # initialize rs2
slt x8, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x5, 0x80000001 # initialize rs1
li x23, 0x80000000 # initialize rs2
slt x30, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x16, 0x80000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
slt x30, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x28, 0x80000001 # initialize rs1
li x21, 0x7fffffff # initialize rs2
slt x10, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x12, 0x80000001 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
slt x9, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x6, 0x80000001 # initialize rs1
li x10, 0xffffffff # initialize rs2
slt x30, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x30, 0x80000001 # initialize rs1
li x28, 0xfffffffe # initialize rs2
slt x1, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x5, 0x80000001 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
slt x11, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x2, 0x80000001 # initialize rs1
li x25, 0xaaaaaaaa # initialize rs2
slt x8, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x16, 0x80000001 # initialize rs1
li x22, 0x55555555 # initialize rs2
slt x30, x16, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x17, 0x7fffffff # initialize rs1
li x21, 0x00000000 # initialize rs2
slt x20, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x22, 0x7fffffff # initialize rs1
li x7, 0x00000001 # initialize rs2
slt x5, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x19, 0x7fffffff # initialize rs1
li x20, 0x00000002 # initialize rs2
slt x13, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x20, 0x7fffffff # initialize rs1
li x24, 0x80000000 # initialize rs2
slt x9, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x31, 0x7fffffff # initialize rs1
li x21, 0x80000001 # initialize rs2
slt x26, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x24, 0x7fffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
slt x27, x24, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x10, 0x7fffffff # initialize rs1
li x29, 0x7ffffffe # initialize rs2
slt x9, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x14, 0x7fffffff # initialize rs1
li x29, 0xffffffff # initialize rs2
slt x2, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x15, 0x7fffffff # initialize rs1
li x10, 0xfffffffe # initialize rs2
slt x14, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x10, 0x7fffffff # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
slt x16, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x8, 0x7fffffff # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
slt x7, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x10, 0x7fffffff # initialize rs1
li x26, 0x55555555 # initialize rs2
slt x16, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x22, 0x7ffffffe # initialize rs1
li x10, 0x00000000 # initialize rs2
slt x1, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x22, 0x7ffffffe # initialize rs1
li x5, 0x00000001 # initialize rs2
slt x29, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x27, 0x7ffffffe # initialize rs1
li x14, 0x00000002 # initialize rs2
slt x2, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x29, 0x7ffffffe # initialize rs1
li x17, 0x80000000 # initialize rs2
slt x20, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x26, 0x7ffffffe # initialize rs1
li x5, 0x80000001 # initialize rs2
slt x15, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x19, 0x7ffffffe # initialize rs1
li x1, 0x7fffffff # initialize rs2
slt x21, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x23, 0x7ffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
slt x13, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x13, 0x7ffffffe # initialize rs1
li x6, 0xffffffff # initialize rs2
slt x31, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x5, 0x7ffffffe # initialize rs1
li x23, 0xfffffffe # initialize rs2
slt x30, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x6, 0x7ffffffe # initialize rs1
li x23, 0x5bbc8872 # initialize rs2
slt x2, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x23, 0x7ffffffe # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
slt x24, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x13, 0x7ffffffe # initialize rs1
li x6, 0x55555555 # initialize rs2
slt x17, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x18, 0xffffffff # initialize rs1
li x10, 0x00000000 # initialize rs2
slt x20, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x27, 0xffffffff # initialize rs1
li x18, 0x00000001 # initialize rs2
slt x24, x27, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x28, 0xffffffff # initialize rs1
li x15, 0x00000002 # initialize rs2
slt x13, x28, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x28, 0xffffffff # initialize rs1
li x16, 0x80000000 # initialize rs2
slt x3, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x2, 0xffffffff # initialize rs1
li x20, 0x80000001 # initialize rs2
slt x31, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x23, 0xffffffff # initialize rs1
li x20, 0x7fffffff # initialize rs2
slt x26, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x16, 0xffffffff # initialize rs1
li x28, 0x7ffffffe # initialize rs2
slt x1, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x26, 0xffffffff # initialize rs1
li x27, 0xffffffff # initialize rs2
slt x21, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x10, 0xffffffff # initialize rs1
li x7, 0xfffffffe # initialize rs2
slt x1, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x30, 0xffffffff # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
slt x12, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x15, 0xffffffff # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
slt x13, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x27, 0xffffffff # initialize rs1
li x14, 0x55555555 # initialize rs2
slt x29, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x11, 0xfffffffe # initialize rs1
li x3, 0x00000000 # initialize rs2
slt x22, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x30, 0xfffffffe # initialize rs1
li x18, 0x00000001 # initialize rs2
slt x11, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x10, 0xfffffffe # initialize rs1
li x26, 0x00000002 # initialize rs2
slt x11, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x30, 0xfffffffe # initialize rs1
li x27, 0x80000000 # initialize rs2
slt x2, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x24, 0xfffffffe # initialize rs1
li x29, 0x80000001 # initialize rs2
slt x10, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x11, 0xfffffffe # initialize rs1
li x30, 0x7fffffff # initialize rs2
slt x25, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x9, 0xfffffffe # initialize rs1
li x5, 0x7ffffffe # initialize rs2
slt x31, x9, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x11, 0xfffffffe # initialize rs1
li x21, 0xffffffff # initialize rs2
slt x13, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0xfffffffe # initialize rs1
li x20, 0xfffffffe # initialize rs2
slt x13, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x23, 0xfffffffe # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
slt x16, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x31, 0xfffffffe # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
slt x13, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x5, 0xfffffffe # initialize rs1
li x30, 0x55555555 # initialize rs2
slt x12, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x9, 0x5bbc8872 # initialize rs1
li x31, 0x00000000 # initialize rs2
slt x20, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x6, 0x5bbc8872 # initialize rs1
li x10, 0x00000001 # initialize rs2
slt x19, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x25, 0x5bbc8872 # initialize rs1
li x26, 0x00000002 # initialize rs2
slt x5, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x22, 0x5bbc8872 # initialize rs1
li x28, 0x80000000 # initialize rs2
slt x12, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x15, 0x5bbc8872 # initialize rs1
li x20, 0x80000001 # initialize rs2
slt x29, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x23, 0x5bbc8872 # initialize rs1
li x9, 0x7fffffff # initialize rs2
slt x3, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x1, 0x5bbc8872 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
slt x16, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x17, 0x5bbc8872 # initialize rs1
li x22, 0xffffffff # initialize rs2
slt x11, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x1, 0x5bbc8872 # initialize rs1
li x12, 0xfffffffe # initialize rs2
slt x30, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x19, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
slt x6, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x12, 0x5bbc8872 # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
slt x9, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x10, 0x5bbc8872 # initialize rs1
li x1, 0x55555555 # initialize rs2
slt x14, x10, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x19, 0xaaaaaaaa # initialize rs1
li x23, 0x00000000 # initialize rs2
slt x18, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x10, 0xaaaaaaaa # initialize rs1
li x5, 0x00000001 # initialize rs2
slt x8, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x18, 0xaaaaaaaa # initialize rs1
li x13, 0x00000002 # initialize rs2
slt x28, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x2, 0xaaaaaaaa # initialize rs1
li x8, 0x80000000 # initialize rs2
slt x7, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x24, 0xaaaaaaaa # initialize rs1
li x13, 0x80000001 # initialize rs2
slt x27, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x10, 0xaaaaaaaa # initialize rs1
li x9, 0x7fffffff # initialize rs2
slt x13, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x22, 0xaaaaaaaa # initialize rs1
li x6, 0x7ffffffe # initialize rs2
slt x7, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x30, 0xaaaaaaaa # initialize rs1
li x11, 0xffffffff # initialize rs2
slt x25, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x1, 0xaaaaaaaa # initialize rs1
li x5, 0xfffffffe # initialize rs2
slt x6, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x25, 0xaaaaaaaa # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
slt x1, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x11, 0xaaaaaaaa # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
slt x28, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x21, 0xaaaaaaaa # initialize rs1
li x15, 0x55555555 # initialize rs2
slt x1, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x30, 0x55555555 # initialize rs1
li x6, 0x00000000 # initialize rs2
slt x22, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x6, 0x55555555 # initialize rs1
li x23, 0x00000001 # initialize rs2
slt x13, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x8, 0x55555555 # initialize rs1
li x13, 0x00000002 # initialize rs2
slt x3, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x6, 0x55555555 # initialize rs1
li x1, 0x80000000 # initialize rs2
slt x8, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x26, 0x55555555 # initialize rs1
li x29, 0x80000001 # initialize rs2
slt x24, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x25, 0x55555555 # initialize rs1
li x31, 0x7fffffff # initialize rs2
slt x27, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x22, 0x55555555 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
slt x29, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x19, 0x55555555 # initialize rs1
li x2, 0xffffffff # initialize rs2
slt x20, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x22, 0x55555555 # initialize rs1
li x17, 0xfffffffe # initialize rs2
slt x3, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x17, 0x55555555 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
slt x8, x17, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x19, 0x55555555 # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
slt x7, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x15, 0x55555555 # initialize rs1
li x27, 0x55555555 # initialize rs2
slt x17, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x0842b03c # initialize rs1
li x0, 0x59112b79 # initialize rs2
slt x6, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x0e451816 # initialize rs1
li x1, 0xb345e482 # initialize rs2
slt x13, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xb4acff27 # initialize rs1
li x2, 0x52b9291e # initialize rs2
slt x14, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xff500f9f # initialize rs1
li x3, 0xea720c9c # initialize rs2
slt x24, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x3df61e6d # initialize rs1
li x4, 0x1d7141c1 # initialize rs2
slt x29, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x9c0abc16 # initialize rs1
li x5, 0x63230241 # initialize rs2
slt x13, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x66586358 # initialize rs1
li x6, 0x3a2f9b2d # initialize rs2
slt x20, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x20, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xe96ec128 # initialize rs1
li x7, 0xc23eba33 # initialize rs2
slt x15, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x853f64a1 # initialize rs1
li x8, 0x601a68ae # initialize rs2
slt x22, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x4f0b24fb # initialize rs1
li x9, 0x9d0777c6 # initialize rs2
slt x20, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x8077cd32 # initialize rs1
li x10, 0x60e84904 # initialize rs2
slt x9, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xa8b49dc8 # initialize rs1
li x11, 0x3362e2a2 # initialize rs2
slt x19, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x517c002b # initialize rs1
li x12, 0x5a9313ec # initialize rs2
slt x8, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x67c1c932 # initialize rs1
li x13, 0x2b69ba3f # initialize rs2
slt x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xe2ab9fbe # initialize rs1
li x14, 0x25faa3aa # initialize rs2
slt x6, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xecc5687a # initialize rs1
li x15, 0x97d772ae # initialize rs2
slt x17, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x0646a203 # initialize rs1
li x16, 0x92380172 # initialize rs2
slt x11, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x79b14626 # initialize rs1
li x17, 0xfdaf1859 # initialize rs2
slt x13, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xecd17cd0 # initialize rs1
li x18, 0xbcee28eb # initialize rs2
slt x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xae564904 # initialize rs1
li x19, 0xc3747e55 # initialize rs2
slt x2, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x4cd4b234 # initialize rs1
li x20, 0xeea9a63f # initialize rs2
slt x24, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x06bb0c94 # initialize rs1
li x21, 0x803fd4d4 # initialize rs2
slt x30, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x6d416bd0 # initialize rs1
li x22, 0xa2e48cd5 # initialize rs2
slt x8, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x7ad6b656 # initialize rs1
li x23, 0x79d57298 # initialize rs2
slt x18, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x016e5573 # initialize rs1
li x24, 0x353e4f47 # initialize rs2
slt x2, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xb13f59c2 # initialize rs1
li x25, 0xdf7b0303 # initialize rs2
slt x2, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x7b0829be # initialize rs1
li x26, 0xbc621d63 # initialize rs2
slt x3, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xe364a5aa # initialize rs1
li x27, 0x9ab71003 # initialize rs2
slt x14, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x0e107541 # initialize rs1
li x28, 0xfc7757f1 # initialize rs2
slt x31, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x7bb4e159 # initialize rs1
li x29, 0x90958a90 # initialize rs2
slt x24, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x7950064d # initialize rs1
li x30, 0x14c3ea40 # initialize rs2
slt x13, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xed08125d # initialize rs1
li x31, 0x49383f2f # initialize rs2
slt x24, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x238e28a4 # initialize rs1
li x25, 0x58e6abd2 # initialize rs2
slt x0, x0, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x6be716b3 # initialize rs1
li x26, 0xdade4629 # initialize rs2
slt x1, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x8096902e # initialize rs1
li x18, 0x83c607dd # initialize rs2
slt x2, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x4998363f # initialize rs1
li x13, 0xccc0e2fa # initialize rs2
slt x3, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x88dc254d # initialize rs1
li x22, 0x3d0e538f # initialize rs2
slt x4, x4, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x905db617 # initialize rs1
li x29, 0x56601de7 # initialize rs2
slt x5, x5, x29 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc83a7c14 # initialize rs1
li x7, 0x29808f43 # initialize rs2
slt x6, x6, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
li x7, 0x9fb49306 # initialize rs1
li x27, 0x43c97def # initialize rs2
slt x7, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x8e5cfff7 # initialize rs1
li x7, 0xbc411cfe # initialize rs2
slt x8, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x5d999fc2 # initialize rs1
li x31, 0xe38addd8 # initialize rs2
slt x9, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xdab8d72f # initialize rs1
li x21, 0xa27264e0 # initialize rs2
slt x10, x10, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x2dab2b5e # initialize rs1
li x16, 0x16f1e3bf # initialize rs2
slt x11, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x3cb9d8cb # initialize rs1
li x14, 0x9fadd711 # initialize rs2
slt x12, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb4da43c8 # initialize rs1
li x10, 0xbd04bdb8 # initialize rs2
slt x13, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x5e4ea48a # initialize rs1
li x28, 0xde03caf0 # initialize rs2
slt x14, x14, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xd9313ceb # initialize rs1
li x27, 0x512cc15e # initialize rs2
slt x15, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x27c75c15 # initialize rs1
li x7, 0xfec81428 # initialize rs2
slt x16, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x4f56198e # initialize rs1
li x9, 0x2d88841b # initialize rs2
slt x17, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x45c78ecc # initialize rs1
li x18, 0x5c79d43f # initialize rs2
slt x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x851036cf # initialize rs1
li x5, 0x00f4f0e9 # initialize rs2
slt x19, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x1dfd1ff8 # initialize rs1
li x8, 0xe870f049 # initialize rs2
slt x20, x20, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xd78c285c # initialize rs1
li x5, 0x63ab51c1 # initialize rs2
slt x21, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xce4d2285 # initialize rs1
li x22, 0x17054125 # initialize rs2
slt x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x24c11b4f # initialize rs1
li x19, 0x4cc5a20b # initialize rs2
slt x23, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x0d70482a # initialize rs1
li x15, 0xd5b2e74b # initialize rs2
slt x24, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xeeee45dd # initialize rs1
li x6, 0xaa77863c # initialize rs2
slt x25, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x23f5b957 # initialize rs1
li x24, 0x43e0ea0a # initialize rs2
slt x26, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x0ae96326 # initialize rs1
li x6, 0x4b3e2b2b # initialize rs2
slt x27, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xd488245a # initialize rs1
li x18, 0xa6dd9a12 # initialize rs2
slt x28, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x55929028 # initialize rs1
li x21, 0x9ac0eaa7 # initialize rs2
slt x29, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xcbc4016f # initialize rs1
li x28, 0x44fa0e35 # initialize rs2
slt x30, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x3caf0abc # initialize rs1
li x27, 0x3f22a6ea # initialize rs2
slt x31, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x18, 0x532314cd # initialize rs1
li x0, 0x14aeea91 # initialize rs2
slt x0, x18, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x23, 0xf7d4f66d # initialize rs1
li x1, 0x0b0eb3b1 # initialize rs2
slt x1, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x1, 0xa3ed4b17 # initialize rs1
li x2, 0x63636e56 # initialize rs2
slt x2, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x12, 0xd9a6bfab # initialize rs1
li x3, 0x270d1e4b # initialize rs2
slt x3, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0x08698abe # initialize rs1
li x4, 0x51e6f0b6 # initialize rs2
slt x4, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x885b98f6 # initialize rs1
li x5, 0x1ebde180 # initialize rs2
slt x5, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0xcb3ae821 # initialize rs1
li x6, 0xa3c50451 # initialize rs2
slt x6, x15, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x15, 0x5f64f7bc # initialize rs1
li x7, 0xd1345f76 # initialize rs2
slt x7, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x11, 0x9b3eaf2d # initialize rs1
li x8, 0x6074d847 # initialize rs2
slt x8, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x25, 0x83912331 # initialize rs1
li x9, 0x7761d8f7 # initialize rs2
slt x9, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x21, 0xe2a4dca6 # initialize rs1
li x10, 0xe25847a0 # initialize rs2
slt x10, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x2, 0x863f190c # initialize rs1
li x11, 0x45548a70 # initialize rs2
slt x11, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x6, 0x7935a028 # initialize rs1
li x12, 0xe78e9028 # initialize rs2
slt x12, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x15, 0x92e96357 # initialize rs1
li x13, 0xf6019a8f # initialize rs2
slt x13, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x6, 0x727623a7 # initialize rs1
li x14, 0xaaaf4504 # initialize rs2
slt x14, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x6, 0x07f62104 # initialize rs1
li x15, 0x6bf3e463 # initialize rs2
slt x15, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x7, 0xc72dd5c6 # initialize rs1
li x16, 0x5812d2ad # initialize rs2
slt x16, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x11, 0x34063a2e # initialize rs1
li x17, 0xde8fd606 # initialize rs2
slt x17, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x24, 0xfcbe36ba # initialize rs1
li x18, 0xb975dae6 # initialize rs2
slt x18, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x25, 0x8656f2c6 # initialize rs1
li x19, 0xd3f46dc0 # initialize rs2
slt x19, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x6, 0x21385e95 # initialize rs1
li x20, 0x979534e0 # initialize rs2
slt x20, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x16, 0x7510177d # initialize rs1
li x21, 0xc0104215 # initialize rs2
slt x21, x16, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x10, 0x1298777f # initialize rs1
li x22, 0xecdbe1e4 # initialize rs2
slt x22, x10, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x26, 0x439da77b # initialize rs1
li x23, 0x8c037b9b # initialize rs2
slt x23, x26, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x10, 0x33823c60 # initialize rs1
li x24, 0x9224f761 # initialize rs2
slt x24, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x20, 0x3ac97899 # initialize rs1
li x25, 0x9174c6b5 # initialize rs2
slt x25, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x23, 0x65fb0a56 # initialize rs1
li x26, 0x79c8b750 # initialize rs2
slt x26, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x31, 0x4b785880 # initialize rs1
li x27, 0x9c566d48 # initialize rs2
slt x27, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x27, 0xab299142 # initialize rs1
li x28, 0xd1a12219 # initialize rs2
slt x28, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x24, 0x3605d7ee # initialize rs1
li x29, 0x714391af # initialize rs2
slt x29, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x29, 0xa3278a3b # initialize rs1
li x30, 0xed164fc2 # initialize rs2
slt x30, x29, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x2, 0x73e42337 # initialize rs1
li x31, 0x71738c28 # initialize rs2
slt x31, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x77e6f5c1 # initialize rs1
li x0, 0x7d8b6b03 # initialize rs2
slt x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xd74054d6 # initialize rs1
li x1, 0x0f7e6095 # initialize rs2
slt x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x0cc1d027 # initialize rs1
li x2, 0x5a816e19 # initialize rs2
slt x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xc41c8b05 # initialize rs1
li x3, 0x339dbd0a # initialize rs2
slt x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb13d1397 # initialize rs1
li x4, 0x970f1b50 # initialize rs2
slt x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x5ba1fc9c # initialize rs1
li x5, 0x27a7ae0e # initialize rs2
slt x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x8f7d6771 # initialize rs1
li x6, 0xa71ffe28 # initialize rs2
slt x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9f0a6dcf # initialize rs1
li x7, 0xea308c47 # initialize rs2
slt x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x63afe16f # initialize rs1
li x8, 0xa952cd15 # initialize rs2
slt x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xcdaa204f # initialize rs1
li x9, 0x11145a37 # initialize rs2
slt x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x35b2c90d # initialize rs1
li x10, 0x31281f0d # initialize rs2
slt x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xe190d6c8 # initialize rs1
li x11, 0xec929bd0 # initialize rs2
slt x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xd73b3281 # initialize rs1
li x12, 0xf486a77f # initialize rs2
slt x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xda6a3aa4 # initialize rs1
li x13, 0x15cf42a4 # initialize rs2
slt x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x52890086 # initialize rs1
li x14, 0xaedfefcb # initialize rs2
slt x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xb463e9e6 # initialize rs1
li x15, 0x5ded6427 # initialize rs2
slt x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x2ce26efe # initialize rs1
li x16, 0x1ed15acc # initialize rs2
slt x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x52b3b97c # initialize rs1
li x17, 0x32b9cd3c # initialize rs2
slt x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x82a9021e # initialize rs1
li x18, 0xbcdd81a6 # initialize rs2
slt x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x2120177b # initialize rs1
li x19, 0x4e60f37c # initialize rs2
slt x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x91f2271f # initialize rs1
li x20, 0x14677935 # initialize rs2
slt x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x7b26af1b # initialize rs1
li x21, 0x001efa0e # initialize rs2
slt x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x35296ae7 # initialize rs1
li x22, 0x46597b79 # initialize rs2
slt x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x18dec99b # initialize rs1
li x23, 0xb3417eb7 # initialize rs2
slt x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x0c50be19 # initialize rs1
li x24, 0xb238e2a2 # initialize rs2
slt x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x832c286f # initialize rs1
li x25, 0xee013cfa # initialize rs2
slt x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xf8fcc919 # initialize rs1
li x26, 0x7b0899f3 # initialize rs2
slt x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x367e6e67 # initialize rs1
li x27, 0xff53fb69 # initialize rs2
slt x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xe8767cc4 # initialize rs1
li x28, 0x9ce33178 # initialize rs2
slt x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x718c182d # initialize rs1
li x29, 0x11e0f1fb # initialize rs2
slt x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x2626b837 # initialize rs1
li x30, 0xe5c1869b # initialize rs2
slt x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xc3a821a6 # initialize rs1
li x31, 0xf5e20245 # initialize rs2
slt x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x26, x18 # perform first operation
slt x11, x7, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x13, x26 # perform first operation
slt x14, x18, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x8, x7 # perform first operation
slt x19, x30, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x11, x30, x17 # perform first operation
slt x17, x11, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x10, x8 # perform first operation
slt x10, x19, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x22, x28 # perform first operation
slt x28, x12, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x8, x24 # perform first operation
slt x22, x3, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x10, x9, x11 # perform first operation
slt x10, x31, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x28, x9, x10 # perform first operation
slt x28, x29, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x18, x13 # perform first operation
slt x18, x3, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x12, x22, x10 # perform first operation
slt x10, x26, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x5, x10 # perform first operation
slt x25, x15, x30 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-add.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xb4e96718 # initialize rs1
li x24, 0xeaa512b3 # initialize rs2
add x25, x0, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x81c4ef2a # initialize rs1
li x6, 0x917cfa69 # initialize rs2
add x7, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x6ec5c7fc # initialize rs1
li x24, 0x8cc9fc60 # initialize rs2
add x31, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x7103a60c # initialize rs1
li x11, 0x6637281b # initialize rs2
add x19, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xa6a21865 # initialize rs1
li x31, 0xb2c0b170 # initialize rs2
add x24, x4, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xf1f178b8 # initialize rs1
li x16, 0x0ddcce40 # initialize rs2
add x1, x5, x16 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9856a7fa # initialize rs1
li x27, 0xa8c9c006 # initialize rs2
add x16, x6, x27 # perform operation
RVTEST_SIGUPD(x7, x0, x16, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x6, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb6fe088a # initialize rs1
li x5, 0x8f865f5c # initialize rs2
add x4, x7, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf0a493f3 # initialize rs1
li x28, 0xfc076872 # initialize rs2
add x11, x8, x28 # perform operation
RVTEST_SIGUPD(x6, x0, x11, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xf6c6e227 # initialize rs1
li x4, 0x7a1129a5 # initialize rs2
add x5, x9, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x9483c110 # initialize rs1
li x13, 0x5293d68b # initialize rs2
add x8, x10, x13 # perform operation
RVTEST_SIGUPD(x6, x0, x8, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x2be63122 # initialize rs1
li x28, 0xb6ec53d3 # initialize rs2
add x31, x11, x28 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xdbc60702 # initialize rs1
li x15, 0x429ebecd # initialize rs2
add x4, x12, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa7bb3ee5 # initialize rs1
li x7, 0x3f955895 # initialize rs2
add x3, x13, x7 # perform operation
RVTEST_SIGUPD(x6, x0, x3, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x471a0e78 # initialize rs1
li x10, 0xedccfc10 # initialize rs2
add x21, x14, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x21, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xa7de3f8b # initialize rs1
li x2, 0xbaf03ed8 # initialize rs2
add x19, x15, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x29fe1b24 # initialize rs1
li x3, 0xdee8e75a # initialize rs2
add x27, x16, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x27, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xf80c75e2 # initialize rs1
li x3, 0x6a018c23 # initialize rs2
add x1, x17, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x25adead4 # initialize rs1
li x12, 0xc7d46f1f # initialize rs2
add x16, x18, x12 # perform operation
RVTEST_SIGUPD(x6, x0, x16, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x4dd37fa5 # initialize rs1
li x15, 0x96cabe72 # initialize rs2
add x3, x19, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x3, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x9ce08a13 # initialize rs1
li x23, 0x8edeb8fa # initialize rs2
add x15, x20, x23 # perform operation
RVTEST_SIGUPD(x6, x0, x15, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x3eb3eb8e # initialize rs1
li x25, 0x4bec5ef9 # initialize rs2
add x17, x21, x25 # perform operation
RVTEST_SIGUPD(x6, x0, x17, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x1903fcbe # initialize rs1
li x10, 0x78a72569 # initialize rs2
add x19, x22, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x0678e676 # initialize rs1
li x29, 0x44a57e92 # initialize rs2
add x18, x23, x29 # perform operation
RVTEST_SIGUPD(x6, x0, x18, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x0f514c8f # initialize rs1
li x4, 0xc0374f99 # initialize rs2
add x23, x24, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x23, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xc31c0d20 # initialize rs1
li x17, 0x54de2add # initialize rs2
add x28, x25, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xc87725fc # initialize rs1
li x8, 0x8457042b # initialize rs2
add x23, x26, x8 # perform operation
RVTEST_SIGUPD(x6, x0, x23, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x381188b9 # initialize rs1
li x10, 0x00448477 # initialize rs2
add x9, x27, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x9, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x99fdf848 # initialize rs1
li x11, 0x41ef048b # initialize rs2
add x29, x28, x11 # perform operation
RVTEST_SIGUPD(x6, x0, x29, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x8ad34df6 # initialize rs1
li x8, 0xf56bba98 # initialize rs2
add x26, x29, x8 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xe6a75541 # initialize rs1
li x18, 0x2418752b # initialize rs2
add x15, x30, x18 # perform operation
RVTEST_SIGUPD(x6, x0, x15, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xe899a96d # initialize rs1
li x5, 0x72f41290 # initialize rs2
add x28, x31, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x31, 0xc1f4ddd5 # initialize rs1
li x0, 0xc1cae6f0 # initialize rs2
add x12, x31, x0 # perform operation
RVTEST_SIGUPD(x6, x0, x12, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x23, 0xff3dab23 # initialize rs1
li x1, 0x8281b902 # initialize rs2
add x26, x23, x1 # perform operation
RVTEST_SIGUPD(x6, x0, x26, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x16, 0xcea14c52 # initialize rs1
li x2, 0xabde2cae # initialize rs2
add x21, x16, x2 # perform operation
RVTEST_SIGUPD(x6, x0, x21, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x9, 0xb1b6ca4c # initialize rs1
li x3, 0x05346635 # initialize rs2
add x7, x9, x3 # perform operation
RVTEST_SIGUPD(x6, x0, x7, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
li x5, 0x8818ebd1 # initialize rs1
li x4, 0xce48467d # initialize rs2
add x10, x5, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
li x25, 0xe20229e8 # initialize rs1
li x5, 0x049c2462 # initialize rs2
add x13, x25, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x13, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x9, 0xdf0316e5 # initialize rs1
li x6, 0x128e3c15 # initialize rs2
add x18, x9, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x18, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0x6ce184e8 # initialize rs1
li x7, 0xc21eccb0 # initialize rs2
add x15, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x30, 0x8888734f # initialize rs1
li x8, 0xf0dfca4a # initialize rs2
add x27, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x14, 0x24571a9b # initialize rs1
li x9, 0xbf00be87 # initialize rs2
add x12, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x14, 0x50caec3b # initialize rs1
li x10, 0xf006b21d # initialize rs2
add x16, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x25, 0x84beb586 # initialize rs1
li x11, 0x1723a2d1 # initialize rs2
add x7, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x26, 0xca9cd9de # initialize rs1
li x12, 0xf14599fc # initialize rs2
add x29, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x9, 0xdfcf6182 # initialize rs1
li x13, 0x87d2aa1e # initialize rs2
add x29, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x24, 0x3cef98f6 # initialize rs1
li x14, 0x9f739800 # initialize rs2
add x17, x24, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x22, 0xbfe747d1 # initialize rs1
li x15, 0x410379d1 # initialize rs2
add x21, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x20, 0x8aac8f33 # initialize rs1
li x16, 0x55fe5f7c # initialize rs2
add x17, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0xc926c93f # initialize rs1
li x17, 0x687221de # initialize rs2
add x3, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x8, 0x7161c407 # initialize rs1
li x18, 0xd113fbe6 # initialize rs2
add x29, x8, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x17, 0x4625cae6 # initialize rs1
li x19, 0x375ee341 # initialize rs2
add x1, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x24, 0xd2df78e8 # initialize rs1
li x20, 0x317ae68a # initialize rs2
add x6, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x12, 0xbd2ad466 # initialize rs1
li x21, 0x722b4f26 # initialize rs2
add x25, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x25, 0x99a2fbad # initialize rs1
li x22, 0x7edce4c7 # initialize rs2
add x12, x25, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x2, 0x3a5bdf67 # initialize rs1
li x23, 0xd5c19963 # initialize rs2
add x1, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x27, 0x1e8ad341 # initialize rs1
li x24, 0xed932367 # initialize rs2
add x8, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x21, 0xb3640322 # initialize rs1
li x25, 0xa0ff60c4 # initialize rs2
add x8, x21, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x6, 0x909efac7 # initialize rs1
li x26, 0x27d03286 # initialize rs2
add x15, x6, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x10, 0x52f47fdd # initialize rs1
li x27, 0xe1b6486a # initialize rs2
add x31, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x21, 0xe0638b6c # initialize rs1
li x28, 0x3c46a9b4 # initialize rs2
add x13, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x18, 0xabf5a092 # initialize rs1
li x29, 0xac3e4a28 # initialize rs2
add x20, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x12, 0x35ed0a3a # initialize rs1
li x30, 0xfbe305b1 # initialize rs2
add x11, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x12, 0x0a5091cf # initialize rs1
li x31, 0xe3451cb6 # initialize rs2
add x24, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 252)

# Testcase cp_rd (Test destination rd = x0)
li x19, 0x1d01c852 # initialize rs1
li x9, 0x1bfbf146 # initialize rs2
add x0, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x26, 0x1e3aafcf # initialize rs1
li x19, 0x986da37b # initialize rs2
add x1, x26, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x24, 0x7cc9c425 # initialize rs1
li x6, 0x11c98bc0 # initialize rs2
add x2, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x25, 0x21460692 # initialize rs1
li x18, 0x330ad053 # initialize rs2
add x3, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0x7b275442 # initialize rs1
li x26, 0x2d1db3d5 # initialize rs2
add x4, x9, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0xe20b6023 # initialize rs1
li x27, 0x37f42108 # initialize rs2
add x5, x14, x27 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x3, 0xf1a7383d # initialize rs1
li x28, 0x96b85b2a # initialize rs2
add x6, x3, x28 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x14, 0x84507ba2 # initialize rs1
li x15, 0xef638255 # initialize rs2
add x7, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x13, 0x1d1babbf # initialize rs1
li x10, 0xe9a3c3e4 # initialize rs2
add x8, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x6, 0xb0c5d011 # initialize rs1
li x1, 0xbd29e745 # initialize rs2
add x9, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x5, 0x21f003f9 # initialize rs1
li x28, 0x36ae688a # initialize rs2
add x10, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x25, 0x570241be # initialize rs1
li x18, 0x99c4e084 # initialize rs2
add x11, x25, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x6, 0x72af9519 # initialize rs1
li x18, 0x3babc7ce # initialize rs2
add x12, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x24, 0x884481cc # initialize rs1
li x25, 0xabd547b5 # initialize rs2
add x13, x24, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x2, 0x0a12ef56 # initialize rs1
li x24, 0x10cf6c7c # initialize rs2
add x14, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x1, 0x4d82a97a # initialize rs1
li x18, 0x82eb8fbc # initialize rs2
add x15, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x18, 0x383d042f # initialize rs1
li x12, 0xe2cf0268 # initialize rs2
add x16, x18, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x9, 0x506e0cb7 # initialize rs1
li x20, 0x201edcfa # initialize rs2
add x17, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x29, 0x3d45c2ea # initialize rs1
li x6, 0x39fa9f15 # initialize rs2
add x18, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x20, 0x4a1d5f9b # initialize rs1
li x24, 0x80c0c484 # initialize rs2
add x19, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x6, 0x27404389 # initialize rs1
li x25, 0xa5b71193 # initialize rs2
add x20, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x12, 0x2b3caf9a # initialize rs1
li x16, 0x752b6ef5 # initialize rs2
add x21, x12, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x23, 0x28680b1b # initialize rs1
li x1, 0x17177d13 # initialize rs2
add x22, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x8, 0x91ca2a0c # initialize rs1
li x10, 0x35bf5f07 # initialize rs2
add x23, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x12, 0x8fcd92b3 # initialize rs1
li x23, 0xbc945c70 # initialize rs2
add x24, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x19, 0xbe0e448a # initialize rs1
li x11, 0x97939303 # initialize rs2
add x25, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x11, 0x21a2605b # initialize rs1
li x25, 0xfc04152e # initialize rs2
add x26, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x31, 0x053b5ca6 # initialize rs1
li x7, 0xc4f19aa7 # initialize rs2
add x27, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x21, 0x5570113f # initialize rs1
li x15, 0x9048ca9a # initialize rs2
add x28, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x14, 0x00a5ba69 # initialize rs1
li x19, 0xc4a12a8b # initialize rs2
add x29, x14, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x8, 0x11cf1954 # initialize rs1
li x28, 0x307ebfa4 # initialize rs2
add x30, x8, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x5, 0xbcf0ced0 # initialize rs1
li x11, 0x559df4df # initialize rs2
add x31, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x17, 0x00000000 # initialize rs1
li x11, 0x535942e8 # initialize rs2
add x26, x17, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x19, 0x00000001 # initialize rs1
li x3, 0x07bbf8de # initialize rs2
add x13, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x1, 0x00000002 # initialize rs1
li x30, 0x7875c18d # initialize rs2
add x12, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x2, 0x80000000 # initialize rs1
li x24, 0x197ecbd3 # initialize rs2
add x6, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x14, 0x80000001 # initialize rs1
li x5, 0x8ebb2ebf # initialize rs2
add x2, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x24, 0x7fffffff # initialize rs1
li x1, 0xab6c279e # initialize rs2
add x13, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x13, 0x7ffffffe # initialize rs1
li x25, 0x557b6abf # initialize rs2
add x24, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x26, 0xffffffff # initialize rs1
li x3, 0xdb9fb0b7 # initialize rs2
add x30, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x25, 0xfffffffe # initialize rs1
li x15, 0x0b23e84d # initialize rs2
add x12, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x10, 0x5bbc8872 # initialize rs1
li x26, 0x65a6240e # initialize rs2
add x13, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x14, 0xaaaaaaaa # initialize rs1
li x1, 0x68485e50 # initialize rs2
add x31, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x27, 0x55555555 # initialize rs1
li x20, 0x17b42fab # initialize rs2
add x9, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x20, 0xa80726a0 # initialize rs1
li x16, 0x00000000 # initialize rs2
add x12, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x19, 0x8c1af93b # initialize rs1
li x13, 0x00000001 # initialize rs2
add x29, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x8, 0x8f9c8721 # initialize rs1
li x11, 0x00000002 # initialize rs2
add x5, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x26, 0x1cb92ff7 # initialize rs1
li x5, 0x80000000 # initialize rs2
add x28, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x18, 0x3715541d # initialize rs1
li x1, 0x80000001 # initialize rs2
add x31, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x15, 0x707daeff # initialize rs1
li x28, 0x7fffffff # initialize rs2
add x25, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x8, 0x09d344b9 # initialize rs1
li x12, 0x7ffffffe # initialize rs2
add x13, x8, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x7, 0x1aff4ae6 # initialize rs1
li x18, 0xffffffff # initialize rs2
add x2, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x7, 0x60a566cb # initialize rs1
li x29, 0xfffffffe # initialize rs2
add x13, x7, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x18, 0x252b832e # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
add x13, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x15, 0x47a917cf # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
add x28, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x2, 0x4f5cd28c # initialize rs1
li x17, 0x55555555 # initialize rs2
add x29, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x15, 0x00000000 # initialize rs1
li x5, 0x00000000 # initialize rs2
add x11, x15, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x1, 0x00000000 # initialize rs1
li x31, 0x00000001 # initialize rs2
add x20, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x27, 0x00000000 # initialize rs1
li x3, 0x00000002 # initialize rs2
add x11, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x8, 0x00000000 # initialize rs1
li x5, 0x80000000 # initialize rs2
add x16, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x27, 0x00000000 # initialize rs1
li x11, 0x80000001 # initialize rs2
add x25, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x13, 0x00000000 # initialize rs1
li x12, 0x7fffffff # initialize rs2
add x8, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x6, 0x00000000 # initialize rs1
li x25, 0x7ffffffe # initialize rs2
add x19, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x10, 0x00000000 # initialize rs1
li x7, 0xffffffff # initialize rs2
add x2, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x28, 0x00000000 # initialize rs1
li x31, 0xfffffffe # initialize rs2
add x11, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x17, 0x00000000 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
add x30, x17, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x14, 0x00000000 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
add x18, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x18, 0x00000000 # initialize rs1
li x5, 0x55555555 # initialize rs2
add x8, x18, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x22, 0x00000001 # initialize rs1
li x21, 0x00000000 # initialize rs2
add x30, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x15, 0x00000001 # initialize rs1
li x20, 0x00000001 # initialize rs2
add x12, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x19, 0x00000001 # initialize rs1
li x3, 0x00000002 # initialize rs2
add x31, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x17, 0x00000001 # initialize rs1
li x15, 0x80000000 # initialize rs2
add x3, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x5, 0x00000001 # initialize rs1
li x26, 0x80000001 # initialize rs2
add x16, x5, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x24, 0x00000001 # initialize rs1
li x30, 0x7fffffff # initialize rs2
add x3, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x24, 0x00000001 # initialize rs1
li x2, 0x7ffffffe # initialize rs2
add x9, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x6, 0x00000001 # initialize rs1
li x13, 0xffffffff # initialize rs2
add x28, x6, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x14, 0x00000001 # initialize rs1
li x1, 0xfffffffe # initialize rs2
add x11, x14, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x12, 0x00000001 # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
add x14, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x5, 0x00000001 # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
add x15, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x11, 0x00000001 # initialize rs1
li x18, 0x55555555 # initialize rs2
add x24, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x12, 0x00000002 # initialize rs1
li x22, 0x00000000 # initialize rs2
add x26, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x24, 0x00000002 # initialize rs1
li x12, 0x00000001 # initialize rs2
add x29, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x28, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
add x16, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x9, 0x00000002 # initialize rs1
li x7, 0x80000000 # initialize rs2
add x18, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x2, 0x00000002 # initialize rs1
li x28, 0x80000001 # initialize rs2
add x9, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x26, 0x00000002 # initialize rs1
li x16, 0x7fffffff # initialize rs2
add x17, x26, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x19, 0x00000002 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
add x2, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x17, 0x00000002 # initialize rs1
li x20, 0xffffffff # initialize rs2
add x19, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x23, 0x00000002 # initialize rs1
li x19, 0xfffffffe # initialize rs2
add x15, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x30, 0x00000002 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
add x15, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x30, 0x00000002 # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
add x13, x30, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x14, 0x00000002 # initialize rs1
li x21, 0x55555555 # initialize rs2
add x12, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x14, 0x80000000 # initialize rs1
li x17, 0x00000000 # initialize rs2
add x5, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x21, 0x80000000 # initialize rs1
li x8, 0x00000001 # initialize rs2
add x10, x21, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x6, 0x80000000 # initialize rs1
li x24, 0x00000002 # initialize rs2
add x11, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x7, 0x80000000 # initialize rs1
li x16, 0x80000000 # initialize rs2
add x11, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x23, 0x80000000 # initialize rs1
li x28, 0x80000001 # initialize rs2
add x14, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x29, 0x80000000 # initialize rs1
li x26, 0x7fffffff # initialize rs2
add x9, x29, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x28, 0x80000000 # initialize rs1
li x1, 0x7ffffffe # initialize rs2
add x31, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x22, 0x80000000 # initialize rs1
li x20, 0xffffffff # initialize rs2
add x30, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x8, 0x80000000 # initialize rs1
li x10, 0xfffffffe # initialize rs2
add x2, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x19, 0x80000000 # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
add x5, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x17, 0x80000000 # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
add x22, x17, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x11, 0x80000000 # initialize rs1
li x21, 0x55555555 # initialize rs2
add x17, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x12, 0x80000001 # initialize rs1
li x8, 0x00000000 # initialize rs2
add x20, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x7, 0x80000001 # initialize rs1
li x17, 0x00000001 # initialize rs2
add x29, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x21, 0x80000001 # initialize rs1
li x30, 0x00000002 # initialize rs2
add x12, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x20, 0x80000001 # initialize rs1
li x2, 0x80000000 # initialize rs2
add x21, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x23, 0x80000001 # initialize rs1
li x2, 0x80000001 # initialize rs2
add x19, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x19, 0x80000001 # initialize rs1
li x28, 0x7fffffff # initialize rs2
add x2, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x21, 0x80000001 # initialize rs1
li x23, 0x7ffffffe # initialize rs2
add x16, x21, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x9, 0x80000001 # initialize rs1
li x31, 0xffffffff # initialize rs2
add x24, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x27, 0x80000001 # initialize rs1
li x19, 0xfffffffe # initialize rs2
add x5, x27, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x25, 0x80000001 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
add x3, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x20, 0x80000001 # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
add x29, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x8, 0x80000001 # initialize rs1
li x15, 0x55555555 # initialize rs2
add x6, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x16, 0x7fffffff # initialize rs1
li x6, 0x00000000 # initialize rs2
add x24, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x10, 0x7fffffff # initialize rs1
li x19, 0x00000001 # initialize rs2
add x11, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x13, 0x7fffffff # initialize rs1
li x6, 0x00000002 # initialize rs2
add x10, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x28, 0x7fffffff # initialize rs1
li x17, 0x80000000 # initialize rs2
add x15, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x13, 0x7fffffff # initialize rs1
li x1, 0x80000001 # initialize rs2
add x18, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x22, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
add x20, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x7, 0x7fffffff # initialize rs1
li x17, 0x7ffffffe # initialize rs2
add x21, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x5, 0x7fffffff # initialize rs1
li x8, 0xffffffff # initialize rs2
add x11, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x14, 0x7fffffff # initialize rs1
li x15, 0xfffffffe # initialize rs2
add x12, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x12, 0x7fffffff # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
add x21, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x15, 0x7fffffff # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
add x14, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x21, 0x7fffffff # initialize rs1
li x26, 0x55555555 # initialize rs2
add x16, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x16, 0x7ffffffe # initialize rs1
li x10, 0x00000000 # initialize rs2
add x23, x16, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x6, 0x7ffffffe # initialize rs1
li x31, 0x00000001 # initialize rs2
add x17, x6, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x22, 0x7ffffffe # initialize rs1
li x23, 0x00000002 # initialize rs2
add x21, x22, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x16, 0x7ffffffe # initialize rs1
li x5, 0x80000000 # initialize rs2
add x20, x16, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x13, 0x7ffffffe # initialize rs1
li x21, 0x80000001 # initialize rs2
add x11, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x1, 0x7ffffffe # initialize rs1
li x27, 0x7fffffff # initialize rs2
add x10, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x29, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
add x27, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x10, 0x7ffffffe # initialize rs1
li x28, 0xffffffff # initialize rs2
add x6, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x1, 0x7ffffffe # initialize rs1
li x14, 0xfffffffe # initialize rs2
add x15, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x25, 0x7ffffffe # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
add x28, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x25, 0x7ffffffe # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
add x28, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x14, 0x7ffffffe # initialize rs1
li x20, 0x55555555 # initialize rs2
add x24, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x26, 0xffffffff # initialize rs1
li x11, 0x00000000 # initialize rs2
add x5, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x5, 0xffffffff # initialize rs1
li x26, 0x00000001 # initialize rs2
add x27, x5, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x23, 0xffffffff # initialize rs1
li x30, 0x00000002 # initialize rs2
add x28, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x13, 0xffffffff # initialize rs1
li x25, 0x80000000 # initialize rs2
add x8, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x25, 0xffffffff # initialize rs1
li x31, 0x80000001 # initialize rs2
add x5, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x3, 0xffffffff # initialize rs1
li x8, 0x7fffffff # initialize rs2
add x2, x3, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x20, 0xffffffff # initialize rs1
li x5, 0x7ffffffe # initialize rs2
add x31, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x7, 0xffffffff # initialize rs1
li x12, 0xffffffff # initialize rs2
add x31, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x20, 0xffffffff # initialize rs1
li x31, 0xfffffffe # initialize rs2
add x29, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x1, 0xffffffff # initialize rs1
li x22, 0x5bbc8872 # initialize rs2
add x28, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x3, 0xffffffff # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
add x16, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x8, 0xffffffff # initialize rs1
li x1, 0x55555555 # initialize rs2
add x26, x8, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x23, 0xfffffffe # initialize rs1
li x26, 0x00000000 # initialize rs2
add x13, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x13, 0xfffffffe # initialize rs1
li x24, 0x00000001 # initialize rs2
add x30, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x1, 0xfffffffe # initialize rs1
li x6, 0x00000002 # initialize rs2
add x30, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x20, 0xfffffffe # initialize rs1
li x13, 0x80000000 # initialize rs2
add x6, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x25, 0xfffffffe # initialize rs1
li x23, 0x80000001 # initialize rs2
add x22, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x14, 0xfffffffe # initialize rs1
li x31, 0x7fffffff # initialize rs2
add x24, x14, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x16, 0xfffffffe # initialize rs1
li x19, 0x7ffffffe # initialize rs2
add x25, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x25, 0xfffffffe # initialize rs1
li x3, 0xffffffff # initialize rs2
add x18, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x23, 0xfffffffe # initialize rs1
li x10, 0xfffffffe # initialize rs2
add x18, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x5, 0xfffffffe # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
add x30, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x31, 0xfffffffe # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
add x27, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x31, 0xfffffffe # initialize rs1
li x23, 0x55555555 # initialize rs2
add x3, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x6, 0x5bbc8872 # initialize rs1
li x3, 0x00000000 # initialize rs2
add x31, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x8, 0x5bbc8872 # initialize rs1
li x15, 0x00000001 # initialize rs2
add x12, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x15, 0x5bbc8872 # initialize rs1
li x10, 0x00000002 # initialize rs2
add x3, x15, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x30, 0x5bbc8872 # initialize rs1
li x9, 0x80000000 # initialize rs2
add x25, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x1, 0x5bbc8872 # initialize rs1
li x7, 0x80000001 # initialize rs2
add x2, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x13, 0x5bbc8872 # initialize rs1
li x8, 0x7fffffff # initialize rs2
add x20, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x7, 0x5bbc8872 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
add x19, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x22, 0x5bbc8872 # initialize rs1
li x2, 0xffffffff # initialize rs2
add x1, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x24, 0x5bbc8872 # initialize rs1
li x26, 0xfffffffe # initialize rs2
add x8, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
add x29, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x9, 0x5bbc8872 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
add x15, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x23, 0x5bbc8872 # initialize rs1
li x8, 0x55555555 # initialize rs2
add x2, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x28, 0xaaaaaaaa # initialize rs1
li x1, 0x00000000 # initialize rs2
add x18, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x19, 0xaaaaaaaa # initialize rs1
li x10, 0x00000001 # initialize rs2
add x24, x19, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x8, 0xaaaaaaaa # initialize rs1
li x10, 0x00000002 # initialize rs2
add x16, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x10, 0xaaaaaaaa # initialize rs1
li x7, 0x80000000 # initialize rs2
add x23, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x22, 0xaaaaaaaa # initialize rs1
li x5, 0x80000001 # initialize rs2
add x9, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x12, 0xaaaaaaaa # initialize rs1
li x27, 0x7fffffff # initialize rs2
add x17, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x8, 0xaaaaaaaa # initialize rs1
li x15, 0x7ffffffe # initialize rs2
add x6, x8, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x10, 0xaaaaaaaa # initialize rs1
li x31, 0xffffffff # initialize rs2
add x16, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x11, 0xaaaaaaaa # initialize rs1
li x1, 0xfffffffe # initialize rs2
add x9, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x10, 0xaaaaaaaa # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
add x1, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x20, 0xaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
add x29, x20, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x21, 0xaaaaaaaa # initialize rs1
li x31, 0x55555555 # initialize rs2
add x6, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x6, 0x55555555 # initialize rs1
li x5, 0x00000000 # initialize rs2
add x27, x6, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x30, 0x55555555 # initialize rs1
li x17, 0x00000001 # initialize rs2
add x25, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x21, 0x55555555 # initialize rs1
li x7, 0x00000002 # initialize rs2
add x16, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x13, 0x55555555 # initialize rs1
li x25, 0x80000000 # initialize rs2
add x22, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x30, 0x55555555 # initialize rs1
li x31, 0x80000001 # initialize rs2
add x26, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x25, 0x55555555 # initialize rs1
li x27, 0x7fffffff # initialize rs2
add x19, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x26, 0x55555555 # initialize rs1
li x8, 0x7ffffffe # initialize rs2
add x25, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x5, 0x55555555 # initialize rs1
li x6, 0xffffffff # initialize rs2
add x21, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x2, 0x55555555 # initialize rs1
li x27, 0xfffffffe # initialize rs2
add x8, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x26, 0x55555555 # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
add x1, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x12, 0x55555555 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
add x6, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x10, 0x55555555 # initialize rs1
li x23, 0x55555555 # initialize rs2
add x19, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x1c1927b0 # initialize rs1
li x0, 0xab1adbb8 # initialize rs2
add x25, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x6f1df1ea # initialize rs1
li x1, 0x3eca5ac0 # initialize rs2
add x14, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x44d71f0a # initialize rs1
li x2, 0x2307a3a6 # initialize rs2
add x7, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xec26f19f # initialize rs1
li x3, 0x1f2dfcf9 # initialize rs2
add x30, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xbc52b5ec # initialize rs1
li x4, 0x221abb0a # initialize rs2
add x17, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x82695c89 # initialize rs1
li x5, 0x86d68808 # initialize rs2
add x10, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9eb33c93 # initialize rs1
li x6, 0xfd37bcdb # initialize rs2
add x31, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x31, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xbc55197b # initialize rs1
li x7, 0x70c129c5 # initialize rs2
add x19, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xd05c1fff # initialize rs1
li x8, 0x4e8dfdfa # initialize rs2
add x12, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xfeeb3eac # initialize rs1
li x9, 0xd41c0d73 # initialize rs2
add x30, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x5488c840 # initialize rs1
li x10, 0x51af0476 # initialize rs2
add x20, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xbb3d4d8c # initialize rs1
li x11, 0x2bebf081 # initialize rs2
add x27, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x36f26b28 # initialize rs1
li x12, 0x01b08eca # initialize rs2
add x22, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x8cc35e40 # initialize rs1
li x13, 0xd0774cbf # initialize rs2
add x27, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xcfd7fb75 # initialize rs1
li x14, 0x799de966 # initialize rs2
add x3, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x54954596 # initialize rs1
li x15, 0x6e3415fd # initialize rs2
add x16, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x1643bcfa # initialize rs1
li x16, 0xfc8061f5 # initialize rs2
add x3, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xe4566dca # initialize rs1
li x17, 0x67ca12e6 # initialize rs2
add x22, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xf0c3f3b2 # initialize rs1
li x18, 0xa93c5fbd # initialize rs2
add x14, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x9c2b3e88 # initialize rs1
li x19, 0x063984b8 # initialize rs2
add x15, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x9d37cfe0 # initialize rs1
li x20, 0x2a7e9926 # initialize rs2
add x6, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x21797878 # initialize rs1
li x21, 0xa16de89e # initialize rs2
add x20, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xeb318db6 # initialize rs1
li x22, 0xd8ee2a9c # initialize rs2
add x19, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xbe5871d9 # initialize rs1
li x23, 0x795b6a3f # initialize rs2
add x16, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x5391cfcd # initialize rs1
li x24, 0x71d4c07f # initialize rs2
add x21, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x21b08058 # initialize rs1
li x25, 0x5accf892 # initialize rs2
add x2, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x3e02ecb4 # initialize rs1
li x26, 0x99de3cc3 # initialize rs2
add x27, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xb1487535 # initialize rs1
li x27, 0x65b1f8a3 # initialize rs2
add x26, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x33ecc6d5 # initialize rs1
li x28, 0xf66a7247 # initialize rs2
add x19, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x3173bc29 # initialize rs1
li x29, 0xa61478ba # initialize rs2
add x15, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x8fd8229b # initialize rs1
li x30, 0xc20019e2 # initialize rs2
add x18, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xd5c40c43 # initialize rs1
li x31, 0xd9d93464 # initialize rs2
add x6, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x58fde627 # initialize rs1
li x7, 0x93d230a8 # initialize rs2
add x0, x0, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x94d2b4ae # initialize rs1
li x22, 0xdd56df05 # initialize rs2
add x1, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xe13ea7f8 # initialize rs1
li x9, 0x3bfc5568 # initialize rs2
add x2, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x54856578 # initialize rs1
li x13, 0xcb83d603 # initialize rs2
add x3, x3, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x54473d9e # initialize rs1
li x7, 0x9435e05b # initialize rs2
add x4, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3649d65a # initialize rs1
li x22, 0x9011eede # initialize rs2
add x5, x5, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf4b65606 # initialize rs1
li x2, 0x4721d506 # initialize rs2
add x6, x6, x2 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xe7a9bd49 # initialize rs1
li x13, 0xe6558aa0 # initialize rs2
add x7, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x8615f89c # initialize rs1
li x7, 0x52153d95 # initialize rs2
add x8, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xe5175ec0 # initialize rs1
li x28, 0xc3dd9edc # initialize rs2
add x9, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x0a29a4e0 # initialize rs1
li x19, 0x19c8cf97 # initialize rs2
add x10, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xd096c87a # initialize rs1
li x21, 0xbb849585 # initialize rs2
add x11, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xf4de262e # initialize rs1
li x21, 0x6822b9d5 # initialize rs2
add x12, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xf370dd1a # initialize rs1
li x31, 0x85df0d07 # initialize rs2
add x13, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x4bb3e49c # initialize rs1
li x16, 0xb8b30e43 # initialize rs2
add x14, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xff6630a3 # initialize rs1
li x19, 0xc4922a7a # initialize rs2
add x15, x15, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x1e380349 # initialize rs1
li x27, 0x73844b43 # initialize rs2
add x16, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x8c770301 # initialize rs1
li x28, 0xbc8dbaa5 # initialize rs2
add x17, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xceaccce5 # initialize rs1
li x25, 0x43106aef # initialize rs2
add x18, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xb547f6cb # initialize rs1
li x2, 0x918b4624 # initialize rs2
add x19, x19, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x88c8561c # initialize rs1
li x6, 0x421d48d8 # initialize rs2
add x20, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xd2f3aab5 # initialize rs1
li x20, 0x5a555082 # initialize rs2
add x21, x21, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xe23cebc6 # initialize rs1
li x31, 0xa79f5489 # initialize rs2
add x22, x22, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x0e02fb2b # initialize rs1
li x9, 0xfe760b32 # initialize rs2
add x23, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x0e581f1e # initialize rs1
li x26, 0x25e64dc2 # initialize rs2
add x24, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x4c4da662 # initialize rs1
li x24, 0xb308a521 # initialize rs2
add x25, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x76cfd600 # initialize rs1
li x18, 0x9a21f598 # initialize rs2
add x26, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x467ce88c # initialize rs1
li x25, 0xea6ea20b # initialize rs2
add x27, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x79762167 # initialize rs1
li x6, 0xa29e0fd1 # initialize rs2
add x28, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x0d82a1c4 # initialize rs1
li x29, 0x666096b1 # initialize rs2
add x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x1d5eb960 # initialize rs1
li x3, 0xa127a38f # initialize rs2
add x30, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x7e4d9a8b # initialize rs1
li x25, 0x87c6633c # initialize rs2
add x31, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x12, 0xecadc7ef # initialize rs1
li x0, 0x55775b36 # initialize rs2
add x0, x12, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x17, 0x64375136 # initialize rs1
li x1, 0x71705bad # initialize rs2
add x1, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x11, 0xd538b3f1 # initialize rs1
li x2, 0xd9d4f8a3 # initialize rs2
add x2, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x29, 0x477fe9ff # initialize rs1
li x3, 0xc1df21e3 # initialize rs2
add x3, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x3, 0xd84665f8 # initialize rs1
li x4, 0x220cbdac # initialize rs2
add x4, x3, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x72239287 # initialize rs1
li x5, 0x053fd25e # initialize rs2
add x5, x23, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0x794bb74f # initialize rs1
li x6, 0x3140a3b3 # initialize rs2
add x6, x10, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x23, 0x222c5472 # initialize rs1
li x7, 0x74e0b141 # initialize rs2
add x7, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x30, 0xacb3eb5a # initialize rs1
li x8, 0x56e5f23c # initialize rs2
add x8, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x14, 0xb204c113 # initialize rs1
li x9, 0xc24c15fb # initialize rs2
add x9, x14, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x9, 0xe2afbf47 # initialize rs1
li x10, 0xe2ddfd98 # initialize rs2
add x10, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x13, 0xe7058c65 # initialize rs1
li x11, 0x3d20f74a # initialize rs2
add x11, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x13, 0x83700c3f # initialize rs1
li x12, 0x58d021ba # initialize rs2
add x12, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x17, 0xbf8a8dee # initialize rs1
li x13, 0x5a4e0f92 # initialize rs2
add x13, x17, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x7, 0xbc552c59 # initialize rs1
li x14, 0xacbce605 # initialize rs2
add x14, x7, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x3, 0x5dec4416 # initialize rs1
li x15, 0x186f23eb # initialize rs2
add x15, x3, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x9, 0xa25e2a95 # initialize rs1
li x16, 0x8b8ea9f4 # initialize rs2
add x16, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x17, 0x8e25e8dd # initialize rs1
li x17, 0x7576b404 # initialize rs2
add x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x28, 0x44111b30 # initialize rs1
li x18, 0xf7e13f78 # initialize rs2
add x18, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x3, 0x31fb9fab # initialize rs1
li x19, 0x04237203 # initialize rs2
add x19, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x17, 0xf3db2d03 # initialize rs1
li x20, 0x69a740c9 # initialize rs2
add x20, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x22, 0xbb0c5f7d # initialize rs1
li x21, 0x06d3082a # initialize rs2
add x21, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x9, 0x1d109a11 # initialize rs1
li x22, 0x094c920d # initialize rs2
add x22, x9, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x19, 0xfc9fe035 # initialize rs1
li x23, 0x86e286f1 # initialize rs2
add x23, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x12, 0x496e4797 # initialize rs1
li x24, 0xcc62605b # initialize rs2
add x24, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x23, 0x26cf2eb9 # initialize rs1
li x25, 0xbbc0208c # initialize rs2
add x25, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x8, 0xde118590 # initialize rs1
li x26, 0xc7c3b4db # initialize rs2
add x26, x8, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x11, 0x84c7d362 # initialize rs1
li x27, 0x4e361317 # initialize rs2
add x27, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x18, 0x8fb8f04f # initialize rs1
li x28, 0x4fdf99df # initialize rs2
add x28, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x6, 0xf8c27a82 # initialize rs1
li x29, 0x3ab2c839 # initialize rs2
add x29, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x23, 0x230a44ac # initialize rs1
li x30, 0x884948b0 # initialize rs2
add x30, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x16, 0xd5e90698 # initialize rs1
li x31, 0x105dd08d # initialize rs2
add x31, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x0b13b9da # initialize rs1
li x0, 0x941db913 # initialize rs2
add x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x52d8a3b0 # initialize rs1
li x1, 0xe478d982 # initialize rs2
add x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0xe902a31d # initialize rs1
li x2, 0x6a842f48 # initialize rs2
add x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x68b32256 # initialize rs1
li x3, 0x7021ba8d # initialize rs2
add x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x55f5feed # initialize rs1
li x4, 0x0c4f3600 # initialize rs2
add x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x26adb99d # initialize rs1
li x5, 0xf520de87 # initialize rs2
add x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x36dea232 # initialize rs1
li x6, 0xe12bb546 # initialize rs2
add x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xffe74790 # initialize rs1
li x7, 0xf6e210e9 # initialize rs2
add x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x120b6e3a # initialize rs1
li x8, 0x65a24262 # initialize rs2
add x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x38c8c322 # initialize rs1
li x9, 0x3dc0a76c # initialize rs2
add x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x25c1f4e6 # initialize rs1
li x10, 0xba249ffd # initialize rs2
add x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x7f10bb19 # initialize rs1
li x11, 0x84b9e694 # initialize rs2
add x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x7e88380b # initialize rs1
li x12, 0xa7b7876b # initialize rs2
add x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x2f02e3de # initialize rs1
li x13, 0x27e35133 # initialize rs2
add x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x7566eddf # initialize rs1
li x14, 0xfcb860c3 # initialize rs2
add x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x085990fe # initialize rs1
li x15, 0x8aed84f6 # initialize rs2
add x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xdc3e8dcc # initialize rs1
li x16, 0xb81d51c6 # initialize rs2
add x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x84ec3cd5 # initialize rs1
li x17, 0x11bbaf11 # initialize rs2
add x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x5b1b0245 # initialize rs1
li x18, 0x7a870c95 # initialize rs2
add x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xa9a11cc4 # initialize rs1
li x19, 0xe8925767 # initialize rs2
add x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x70a6d495 # initialize rs1
li x20, 0x5e6494f9 # initialize rs2
add x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x01bd2cfc # initialize rs1
li x21, 0x89b7feee # initialize rs2
add x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xda147754 # initialize rs1
li x22, 0xa2a3973b # initialize rs2
add x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x1ff20d67 # initialize rs1
li x23, 0x855f44b0 # initialize rs2
add x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x16daf3a2 # initialize rs1
li x24, 0x00b91ba9 # initialize rs2
add x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x2118a052 # initialize rs1
li x25, 0x07b08895 # initialize rs2
add x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x1ad59fe9 # initialize rs1
li x26, 0x6a81085d # initialize rs2
add x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xaa5948e4 # initialize rs1
li x27, 0x21a5ae2e # initialize rs2
add x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xf5944673 # initialize rs1
li x28, 0x7f01e13f # initialize rs2
add x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x17ddb1a5 # initialize rs1
li x29, 0x9fa6b3f5 # initialize rs2
add x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x56b70555 # initialize rs1
li x30, 0x994bba06 # initialize rs2
add x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x09e210bb # initialize rs1
li x31, 0xcc0d3c4f # initialize rs2
add x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x3, x26 # perform first operation
add x31, x28, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x18, x1, x20 # perform first operation
add x25, x17, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x20, x8 # perform first operation
add x27, x12, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x26, x30 # perform first operation
add x19, x13, x6 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x21, x3 # perform first operation
add x3, x16, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x20, x8 # perform first operation
add x25, x1, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x11, x23 # perform first operation
add x24, x17, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x13, x12, x20 # perform first operation
add x13, x9, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x12, x18 # perform first operation
add x24, x19, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x3, x28, x13 # perform first operation
add x28, x10, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x3, x20, x29 # perform first operation
add x29, x11, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x9, x26 # perform first operation
add x2, x17, x19 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-bne.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xabf3dd30 # initialize rs1
li x18, 0x7a6b9942 # initialize rs2
bne x0, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x7a6b9942 # initialize rs1
li x18, 0x7a6b9942 # initialize rs2
bne x0, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x3aba44e6 # initialize rs1
li x13, 0x585b1c47 # initialize rs2
bne x1, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x585b1c47 # initialize rs1
li x13, 0x585b1c47 # initialize rs2
bne x1, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x4010386d # initialize rs1
li x13, 0x566cb4a3 # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x566cb4a3 # initialize rs1
li x13, 0x566cb4a3 # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x15577cd8 # initialize rs1
li x24, 0xcdcf9e02 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xcdcf9e02 # initialize rs1
li x24, 0xcdcf9e02 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x3c4fd5ee # initialize rs1
li x12, 0x9a25feb4 # initialize rs2
bne x4, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x9a25feb4 # initialize rs1
li x12, 0x9a25feb4 # initialize rs2
bne x4, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x16d5530f # initialize rs1
li x11, 0x892206f1 # initialize rs2
bne x5, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x892206f1 # initialize rs1
li x11, 0x892206f1 # initialize rs2
bne x5, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x73504dcf # initialize rs1
li x5, 0xbc06483f # initialize rs2
bne x6, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xbc06483f # initialize rs1
li x5, 0xbc06483f # initialize rs2
bne x6, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa0e89eed # initialize rs1
li x26, 0xead9078e # initialize rs2
bne x7, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xead9078e # initialize rs1
li x26, 0xead9078e # initialize rs2
bne x7, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x2c308e44 # initialize rs1
li x24, 0xa2c02845 # initialize rs2
bne x8, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xa2c02845 # initialize rs1
li x24, 0xa2c02845 # initialize rs2
bne x8, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x9cba0d90 # initialize rs1
li x20, 0xb83fc723 # initialize rs2
bne x9, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xb83fc723 # initialize rs1
li x20, 0xb83fc723 # initialize rs2
bne x9, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x3a187f0e # initialize rs1
li x15, 0x1420f02b # initialize rs2
bne x10, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x1420f02b # initialize rs1
li x15, 0x1420f02b # initialize rs2
bne x10, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xfcb0518f # initialize rs1
li x19, 0x14f18acf # initialize rs2
bne x11, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x14f18acf # initialize rs1
li x19, 0x14f18acf # initialize rs2
bne x11, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xbd6146ad # initialize rs1
li x16, 0x1a681a79 # initialize rs2
bne x12, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x1a681a79 # initialize rs1
li x16, 0x1a681a79 # initialize rs2
bne x12, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x81008ccf # initialize rs1
li x9, 0x686d7568 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x686d7568 # initialize rs1
li x9, 0x686d7568 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xa1f43111 # initialize rs1
li x30, 0xdaf533b2 # initialize rs2
bne x14, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xdaf533b2 # initialize rs1
li x30, 0xdaf533b2 # initialize rs2
bne x14, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x57b0f818 # initialize rs1
li x10, 0x89d39952 # initialize rs2
bne x15, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x89d39952 # initialize rs1
li x10, 0x89d39952 # initialize rs2
bne x15, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xdb9bb7a8 # initialize rs1
li x3, 0x0bdede58 # initialize rs2
bne x16, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0bdede58 # initialize rs1
li x3, 0x0bdede58 # initialize rs2
bne x16, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xf45f4ad3 # initialize rs1
li x10, 0x6fb82317 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x6fb82317 # initialize rs1
li x10, 0x6fb82317 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xabd7594a # initialize rs1
li x27, 0x35fcb4de # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x35fcb4de # initialize rs1
li x27, 0x35fcb4de # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xdd1b48e6 # initialize rs1
li x1, 0x1e4585de # initialize rs2
bne x19, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x1e4585de # initialize rs1
li x1, 0x1e4585de # initialize rs2
bne x19, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xaa4f6a9e # initialize rs1
li x8, 0xef22e37a # initialize rs2
bne x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xef22e37a # initialize rs1
li x8, 0xef22e37a # initialize rs2
bne x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xbafaf498 # initialize rs1
li x27, 0xeec272b9 # initialize rs2
bne x21, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xeec272b9 # initialize rs1
li x27, 0xeec272b9 # initialize rs2
bne x21, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xc93ba9ab # initialize rs1
li x6, 0xcd9cb5b3 # initialize rs2
bne x22, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xcd9cb5b3 # initialize rs1
li x6, 0xcd9cb5b3 # initialize rs2
bne x22, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xc4e76ffd # initialize rs1
li x18, 0xff9b19bb # initialize rs2
bne x23, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xff9b19bb # initialize rs1
li x18, 0xff9b19bb # initialize rs2
bne x23, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x40a7f792 # initialize rs1
li x5, 0x4426390c # initialize rs2
bne x24, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x4426390c # initialize rs1
li x5, 0x4426390c # initialize rs2
bne x24, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xd3b992f7 # initialize rs1
li x9, 0xb1f5c24f # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xb1f5c24f # initialize rs1
li x9, 0xb1f5c24f # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x7ec469bc # initialize rs1
li x24, 0xb9ba0fdd # initialize rs2
bne x26, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xb9ba0fdd # initialize rs1
li x24, 0xb9ba0fdd # initialize rs2
bne x26, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x5057c4aa # initialize rs1
li x14, 0x76cb4ab9 # initialize rs2
bne x27, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x76cb4ab9 # initialize rs1
li x14, 0x76cb4ab9 # initialize rs2
bne x27, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x0de2ca44 # initialize rs1
li x16, 0x79a630a1 # initialize rs2
bne x28, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x79a630a1 # initialize rs1
li x16, 0x79a630a1 # initialize rs2
bne x28, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xc9d06f59 # initialize rs1
li x8, 0x54098250 # initialize rs2
bne x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x54098250 # initialize rs1
li x8, 0x54098250 # initialize rs2
bne x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x3f01fca7 # initialize rs1
li x8, 0x0db9e17b # initialize rs2
bne x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0db9e17b # initialize rs1
li x8, 0x0db9e17b # initialize rs2
bne x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x6108eac5 # initialize rs1
li x17, 0x682ae472 # initialize rs2
bne x31, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x682ae472 # initialize rs1
li x17, 0x682ae472 # initialize rs2
bne x31, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x5, 0x6347002f # initialize rs1
li x0, 0x0fcd79d9 # initialize rs2
bne x5, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0fcd79d9 # initialize rs1
li x0, 0x0fcd79d9 # initialize rs2
bne x5, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x16, 0xbc636b0c # initialize rs1
li x1, 0x48f8bde7 # initialize rs2
bne x16, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x48f8bde7 # initialize rs1
li x1, 0x48f8bde7 # initialize rs2
bne x16, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x22, 0xbcfe35b7 # initialize rs1
li x2, 0x75c7888c # initialize rs2
bne x22, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x75c7888c # initialize rs1
li x2, 0x75c7888c # initialize rs2
bne x22, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x8, 0x865d83e1 # initialize rs1
li x3, 0xc321ed92 # initialize rs2
bne x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xc321ed92 # initialize rs1
li x3, 0xc321ed92 # initialize rs2
bne x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x28, 0x4f0e1d8c # initialize rs1
li x4, 0x6b2ab889 # initialize rs2
bne x28, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x6b2ab889 # initialize rs1
li x4, 0x6b2ab889 # initialize rs2
bne x28, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x8, 0xa25e576e # initialize rs1
li x5, 0x28e091e4 # initialize rs2
bne x8, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x28e091e4 # initialize rs1
li x5, 0x28e091e4 # initialize rs2
bne x8, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x26, 0xb8a8d424 # initialize rs1
li x6, 0x3f09d8ff # initialize rs2
bne x26, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x3f09d8ff # initialize rs1
li x6, 0x3f09d8ff # initialize rs2
bne x26, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x890cc67d # initialize rs1
li x7, 0x41aad056 # initialize rs2
bne x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x41aad056 # initialize rs1
li x7, 0x41aad056 # initialize rs2
bne x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x2, 0xfc27ec42 # initialize rs1
li x8, 0xfc35d345 # initialize rs2
bne x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfc35d345 # initialize rs1
li x8, 0xfc35d345 # initialize rs2
bne x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x13, 0xaadde99c # initialize rs1
li x9, 0x7490cd69 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7490cd69 # initialize rs1
li x9, 0x7490cd69 # initialize rs2
bne x13, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x13, 0xd5056d88 # initialize rs1
li x10, 0x7199e7b3 # initialize rs2
bne x13, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7199e7b3 # initialize rs1
li x10, 0x7199e7b3 # initialize rs2
bne x13, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x25, 0xcccba45f # initialize rs1
li x11, 0x3a513ea7 # initialize rs2
bne x25, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x3a513ea7 # initialize rs1
li x11, 0x3a513ea7 # initialize rs2
bne x25, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x29, 0xd974bb2a # initialize rs1
li x12, 0xe73a8e5d # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xe73a8e5d # initialize rs1
li x12, 0xe73a8e5d # initialize rs2
bne x29, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x1, 0x3eaefddb # initialize rs1
li x13, 0x5ed9ba58 # initialize rs2
bne x1, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5ed9ba58 # initialize rs1
li x13, 0x5ed9ba58 # initialize rs2
bne x1, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x1, 0x678e6405 # initialize rs1
li x14, 0x98f01526 # initialize rs2
bne x1, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x98f01526 # initialize rs1
li x14, 0x98f01526 # initialize rs2
bne x1, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x13, 0xad0e4ec3 # initialize rs1
li x15, 0xcdcfcdb3 # initialize rs2
bne x13, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xcdcfcdb3 # initialize rs1
li x15, 0xcdcfcdb3 # initialize rs2
bne x13, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x17, 0x9376f64f # initialize rs1
li x16, 0xee1aa829 # initialize rs2
bne x17, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xee1aa829 # initialize rs1
li x16, 0xee1aa829 # initialize rs2
bne x17, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x21, 0x9ef93d7f # initialize rs1
li x17, 0x6f644c70 # initialize rs2
bne x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x6f644c70 # initialize rs1
li x17, 0x6f644c70 # initialize rs2
bne x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x19, 0xef568af5 # initialize rs1
li x18, 0x57678a4a # initialize rs2
bne x19, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x57678a4a # initialize rs1
li x18, 0x57678a4a # initialize rs2
bne x19, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x20, 0x52c224d2 # initialize rs1
li x19, 0xca92e2fd # initialize rs2
bne x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xca92e2fd # initialize rs1
li x19, 0xca92e2fd # initialize rs2
bne x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x29, 0x45984077 # initialize rs1
li x20, 0x8902d05a # initialize rs2
bne x29, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x8902d05a # initialize rs1
li x20, 0x8902d05a # initialize rs2
bne x29, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x22, 0x51f3188d # initialize rs1
li x21, 0x99000211 # initialize rs2
bne x22, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x99000211 # initialize rs1
li x21, 0x99000211 # initialize rs2
bne x22, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x18, 0xb0719eb8 # initialize rs1
li x22, 0x523584bc # initialize rs2
bne x18, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x523584bc # initialize rs1
li x22, 0x523584bc # initialize rs2
bne x18, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x10, 0xedaaff1c # initialize rs1
li x23, 0x031d48ce # initialize rs2
bne x10, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x031d48ce # initialize rs1
li x23, 0x031d48ce # initialize rs2
bne x10, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x21, 0xe95ada80 # initialize rs1
li x24, 0x2df6c3a7 # initialize rs2
bne x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x2df6c3a7 # initialize rs1
li x24, 0x2df6c3a7 # initialize rs2
bne x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x28, 0x2049e1f5 # initialize rs1
li x25, 0x781e186b # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x781e186b # initialize rs1
li x25, 0x781e186b # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x5, 0x97dc0367 # initialize rs1
li x26, 0xf7bc4631 # initialize rs2
bne x5, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xf7bc4631 # initialize rs1
li x26, 0xf7bc4631 # initialize rs2
bne x5, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x20, 0xd8b96021 # initialize rs1
li x27, 0x874ad641 # initialize rs2
bne x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x874ad641 # initialize rs1
li x27, 0x874ad641 # initialize rs2
bne x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x20, 0x328afe81 # initialize rs1
li x28, 0xd5ad3ff0 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xd5ad3ff0 # initialize rs1
li x28, 0xd5ad3ff0 # initialize rs2
bne x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x14, 0x4f2a4bf5 # initialize rs1
li x29, 0xc13485ce # initialize rs2
bne x14, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xc13485ce # initialize rs1
li x29, 0xc13485ce # initialize rs2
bne x14, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x3, 0xcfacf19a # initialize rs1
li x30, 0x981d5db0 # initialize rs2
bne x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x981d5db0 # initialize rs1
li x30, 0x981d5db0 # initialize rs2
bne x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x14, 0x33c1d846 # initialize rs1
li x31, 0x49be0364 # initialize rs2
bne x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x49be0364 # initialize rs1
li x31, 0x49be0364 # initialize rs2
bne x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x12, 0x00000000 # initialize rs1
li x5, 0x06ee5989 # initialize rs2
bne x12, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x06ee5989 # initialize rs1
li x5, 0x06ee5989 # initialize rs2
bne x12, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x30, 0x00000001 # initialize rs1
li x6, 0xdb2fb6d5 # initialize rs2
bne x30, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xdb2fb6d5 # initialize rs1
li x6, 0xdb2fb6d5 # initialize rs2
bne x30, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x7, 0x00000002 # initialize rs1
li x3, 0xaa4d0326 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaa4d0326 # initialize rs1
li x3, 0xaa4d0326 # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x3, 0x80000000 # initialize rs1
li x26, 0xf525ad3f # initialize rs2
bne x3, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xf525ad3f # initialize rs1
li x26, 0xf525ad3f # initialize rs2
bne x3, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x1, 0x80000001 # initialize rs1
li x25, 0xd33621ac # initialize rs2
bne x1, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xd33621ac # initialize rs1
li x25, 0xd33621ac # initialize rs2
bne x1, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x21, 0x7fffffff # initialize rs1
li x5, 0x9c464818 # initialize rs2
bne x21, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x9c464818 # initialize rs1
li x5, 0x9c464818 # initialize rs2
bne x21, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x20, 0x7ffffffe # initialize rs1
li x25, 0x3f27dfe3 # initialize rs2
bne x20, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x3f27dfe3 # initialize rs1
li x25, 0x3f27dfe3 # initialize rs2
bne x20, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x24, 0xffffffff # initialize rs1
li x28, 0xbb6d8be2 # initialize rs2
bne x24, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xbb6d8be2 # initialize rs1
li x28, 0xbb6d8be2 # initialize rs2
bne x24, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x25, 0xfffffffe # initialize rs1
li x9, 0xcb05482e # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xcb05482e # initialize rs1
li x9, 0xcb05482e # initialize rs2
bne x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x25, 0x5bbc8872 # initialize rs1
li x23, 0xd6e9f4a7 # initialize rs2
bne x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xd6e9f4a7 # initialize rs1
li x23, 0xd6e9f4a7 # initialize rs2
bne x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x17, 0xaaaaaaaa # initialize rs1
li x13, 0x7d525a1e # initialize rs2
bne x17, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7d525a1e # initialize rs1
li x13, 0x7d525a1e # initialize rs2
bne x17, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x8, 0x55555555 # initialize rs1
li x17, 0xc6795a62 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xc6795a62 # initialize rs1
li x17, 0xc6795a62 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x25, 0x706fa331 # initialize rs1
li x6, 0x00000000 # initialize rs2
bne x25, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
bne x25, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x14, 0x2911e77e # initialize rs1
li x31, 0x00000001 # initialize rs2
bne x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x31, 0x00000001 # initialize rs2
bne x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x8, 0x44839ec2 # initialize rs1
li x17, 0x00000002 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000002 # initialize rs1
li x17, 0x00000002 # initialize rs2
bne x8, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x23, 0x769d3d48 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x23, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x23, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x16, 0xf955f208 # initialize rs1
li x20, 0x80000001 # initialize rs2
bne x16, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x80000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
bne x16, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x20, 0x7a81510e # initialize rs1
li x30, 0x7fffffff # initialize rs2
bne x20, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffff # initialize rs1
li x30, 0x7fffffff # initialize rs2
bne x20, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x2, 0x3ac8b3b9 # initialize rs1
li x14, 0x7ffffffe # initialize rs2
bne x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffe # initialize rs1
li x14, 0x7ffffffe # initialize rs2
bne x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x10, 0x82390508 # initialize rs1
li x27, 0xffffffff # initialize rs2
bne x10, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffff # initialize rs1
li x27, 0xffffffff # initialize rs2
bne x10, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x17, 0x7ca05116 # initialize rs1
li x10, 0xfffffffe # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffe # initialize rs1
li x10, 0xfffffffe # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x23, 0x66e83d09 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc8872 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x15, 0x105fbd2f # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
bne x15, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaa # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
bne x15, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x22, 0x65b08426 # initialize rs1
li x28, 0x55555555 # initialize rs2
bne x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x28, 0x55555555 # initialize rs2
bne x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x17, 0x00000000 # initialize rs1
li x10, 0x00000000 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000 # initialize rs1
li x10, 0x00000000 # initialize rs2
bne x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x9, 0x00000000 # initialize rs1
li x22, 0x00000001 # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x29, 0x00000000 # initialize rs1
li x17, 0x00000002 # initialize rs2
bne x29, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000002 # initialize rs1
li x17, 0x00000002 # initialize rs2
bne x29, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x21, 0x00000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x22, 0x00000000 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x22, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000001 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x22, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x23, 0x00000000 # initialize rs1
li x17, 0x7fffffff # initialize rs2
bne x23, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffff # initialize rs1
li x17, 0x7fffffff # initialize rs2
bne x23, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x26, 0x00000000 # initialize rs1
li x11, 0x7ffffffe # initialize rs2
bne x26, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
bne x26, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x6, 0x00000000 # initialize rs1
li x27, 0xffffffff # initialize rs2
bne x6, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffff # initialize rs1
li x27, 0xffffffff # initialize rs2
bne x6, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x17, 0x00000000 # initialize rs1
li x2, 0xfffffffe # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfffffffe # initialize rs1
li x2, 0xfffffffe # initialize rs2
bne x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x9, 0x00000000 # initialize rs1
li x28, 0x5bbc8872 # initialize rs2
bne x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc8872 # initialize rs1
li x28, 0x5bbc8872 # initialize rs2
bne x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x14, 0x00000000 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
bne x14, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
bne x14, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x26, 0x00000000 # initialize rs1
li x13, 0x55555555 # initialize rs2
bne x26, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x55555555 # initialize rs1
li x13, 0x55555555 # initialize rs2
bne x26, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x29, 0x00000001 # initialize rs1
li x5, 0x00000000 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000 # initialize rs1
li x5, 0x00000000 # initialize rs2
bne x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x28, 0x00000001 # initialize rs1
li x25, 0x00000001 # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000001 # initialize rs1
li x25, 0x00000001 # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x25, 0x00000001 # initialize rs1
li x2, 0x00000002 # initialize rs2
bne x25, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bne x25, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x19, 0x00000001 # initialize rs1
li x2, 0x80000000 # initialize rs2
bne x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000000 # initialize rs1
li x2, 0x80000000 # initialize rs2
bne x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x17, 0x00000001 # initialize rs1
li x7, 0x80000001 # initialize rs2
bne x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x7, 0x80000001 # initialize rs2
bne x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x21, 0x00000001 # initialize rs1
li x12, 0x7fffffff # initialize rs2
bne x21, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
bne x21, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x30, 0x00000001 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
bne x30, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffe # initialize rs1
li x13, 0x7ffffffe # initialize rs2
bne x30, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x7, 0x00000001 # initialize rs1
li x10, 0xffffffff # initialize rs2
bne x7, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x10, 0xffffffff # initialize rs2
bne x7, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x20, 0x00000001 # initialize rs1
li x14, 0xfffffffe # initialize rs2
bne x20, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xfffffffe # initialize rs1
li x14, 0xfffffffe # initialize rs2
bne x20, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x7, 0x00000001 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bne x7, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc8872 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bne x7, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x13, 0x00000001 # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bne x13, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaa # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
bne x13, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x6, 0x00000001 # initialize rs1
li x26, 0x55555555 # initialize rs2
bne x6, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x55555555 # initialize rs1
li x26, 0x55555555 # initialize rs2
bne x6, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x21, 0x00000002 # initialize rs1
li x17, 0x00000000 # initialize rs2
bne x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000 # initialize rs1
li x17, 0x00000000 # initialize rs2
bne x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x3, 0x00000002 # initialize rs1
li x9, 0x00000001 # initialize rs2
bne x3, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000001 # initialize rs1
li x9, 0x00000001 # initialize rs2
bne x3, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x10, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bne x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bne x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x3, 0x00000002 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bne x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x8, 0x00000002 # initialize rs1
li x21, 0x80000001 # initialize rs2
bne x8, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x80000001 # initialize rs1
li x21, 0x80000001 # initialize rs2
bne x8, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x18, 0x00000002 # initialize rs1
li x15, 0x7fffffff # initialize rs2
bne x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffff # initialize rs1
li x15, 0x7fffffff # initialize rs2
bne x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x23, 0x00000002 # initialize rs1
li x2, 0x7ffffffe # initialize rs2
bne x23, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffe # initialize rs1
li x2, 0x7ffffffe # initialize rs2
bne x23, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x5, 0x00000002 # initialize rs1
li x10, 0xffffffff # initialize rs2
bne x5, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffff # initialize rs1
li x10, 0xffffffff # initialize rs2
bne x5, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x18, 0x00000002 # initialize rs1
li x23, 0xfffffffe # initialize rs2
bne x18, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xfffffffe # initialize rs1
li x23, 0xfffffffe # initialize rs2
bne x18, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x12, 0x00000002 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
bne x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc8872 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
bne x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x28, 0x00000002 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bne x28, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bne x28, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x3, 0x00000002 # initialize rs1
li x11, 0x55555555 # initialize rs2
bne x3, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x55555555 # initialize rs1
li x11, 0x55555555 # initialize rs2
bne x3, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x9, 0x80000000 # initialize rs1
li x25, 0x00000000 # initialize rs2
bne x9, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000 # initialize rs1
li x25, 0x00000000 # initialize rs2
bne x9, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x25, 0x80000000 # initialize rs1
li x20, 0x00000001 # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000001 # initialize rs1
li x20, 0x00000001 # initialize rs2
bne x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x2, 0x80000000 # initialize rs1
li x15, 0x00000002 # initialize rs2
bne x2, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000002 # initialize rs1
li x15, 0x00000002 # initialize rs2
bne x2, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x18, 0x80000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
bne x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x80000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
bne x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x23, 0x80000000 # initialize rs1
li x15, 0x80000001 # initialize rs2
bne x23, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000001 # initialize rs1
li x15, 0x80000001 # initialize rs2
bne x23, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x30, 0x80000000 # initialize rs1
li x16, 0x7fffffff # initialize rs2
bne x30, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7fffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bne x30, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x26, 0x80000000 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bne x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bne x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x30, 0x80000000 # initialize rs1
li x28, 0xffffffff # initialize rs2
bne x30, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xffffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
bne x30, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x3, 0x80000000 # initialize rs1
li x6, 0xfffffffe # initialize rs2
bne x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffe # initialize rs1
li x6, 0xfffffffe # initialize rs2
bne x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x20, 0x80000000 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
bne x20, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc8872 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
bne x20, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x6, 0x80000000 # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaa # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
bne x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x26, 0x80000000 # initialize rs1
li x2, 0x55555555 # initialize rs2
bne x26, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x55555555 # initialize rs1
li x2, 0x55555555 # initialize rs2
bne x26, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x20, 0x80000001 # initialize rs1
li x11, 0x00000000 # initialize rs2
bne x20, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000 # initialize rs1
li x11, 0x00000000 # initialize rs2
bne x20, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x26, 0x80000001 # initialize rs1
li x23, 0x00000001 # initialize rs2
bne x26, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000001 # initialize rs1
li x23, 0x00000001 # initialize rs2
bne x26, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x11, 0x80000001 # initialize rs1
li x26, 0x00000002 # initialize rs2
bne x11, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000002 # initialize rs1
li x26, 0x00000002 # initialize rs2
bne x11, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x31, 0x80000001 # initialize rs1
li x17, 0x80000000 # initialize rs2
bne x31, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x80000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
bne x31, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x21, 0x80000001 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x21, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000001 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x21, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x9, 0x80000001 # initialize rs1
li x22, 0x7fffffff # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x1, 0x80000001 # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bne x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bne x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x15, 0x80000001 # initialize rs1
li x13, 0xffffffff # initialize rs2
bne x15, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffff # initialize rs1
li x13, 0xffffffff # initialize rs2
bne x15, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x30, 0x80000001 # initialize rs1
li x3, 0xfffffffe # initialize rs2
bne x30, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffe # initialize rs1
li x3, 0xfffffffe # initialize rs2
bne x30, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x13, 0x80000001 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bne x13, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bne x13, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x23, 0x80000001 # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
bne x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x15, 0x80000001 # initialize rs1
li x23, 0x55555555 # initialize rs2
bne x15, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x23, 0x55555555 # initialize rs2
bne x15, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x29, 0x7fffffff # initialize rs1
li x18, 0x00000000 # initialize rs2
bne x29, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
bne x29, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x13, 0x7fffffff # initialize rs1
li x22, 0x00000001 # initialize rs2
bne x13, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
bne x13, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x17, 0x7fffffff # initialize rs1
li x30, 0x00000002 # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000002 # initialize rs1
li x30, 0x00000002 # initialize rs2
bne x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x5, 0x7fffffff # initialize rs1
li x15, 0x80000000 # initialize rs2
bne x5, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
bne x5, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x31, 0x7fffffff # initialize rs1
li x30, 0x80000001 # initialize rs2
bne x31, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x80000001 # initialize rs1
li x30, 0x80000001 # initialize rs2
bne x31, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x25, 0x7fffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
bne x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
bne x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x6, 0x7fffffff # initialize rs1
li x11, 0x7ffffffe # initialize rs2
bne x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
bne x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x16, 0x7fffffff # initialize rs1
li x20, 0xffffffff # initialize rs2
bne x16, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffff # initialize rs1
li x20, 0xffffffff # initialize rs2
bne x16, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x2, 0x7fffffff # initialize rs1
li x24, 0xfffffffe # initialize rs2
bne x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bne x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x19, 0x7fffffff # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x5bbc8872 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x30, 0x7fffffff # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
bne x30, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaa # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
bne x30, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x9, 0x7fffffff # initialize rs1
li x5, 0x55555555 # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x55555555 # initialize rs1
li x5, 0x55555555 # initialize rs2
bne x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x9, 0x7ffffffe # initialize rs1
li x18, 0x00000000 # initialize rs2
bne x9, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
bne x9, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x1, 0x7ffffffe # initialize rs1
li x24, 0x00000001 # initialize rs2
bne x1, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
bne x1, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x10, 0x7ffffffe # initialize rs1
li x6, 0x00000002 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000002 # initialize rs1
li x6, 0x00000002 # initialize rs2
bne x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x15, 0x7ffffffe # initialize rs1
li x10, 0x80000000 # initialize rs2
bne x15, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x80000000 # initialize rs1
li x10, 0x80000000 # initialize rs2
bne x15, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x25, 0x7ffffffe # initialize rs1
li x15, 0x80000001 # initialize rs2
bne x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x80000001 # initialize rs1
li x15, 0x80000001 # initialize rs2
bne x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x12, 0x7ffffffe # initialize rs1
li x3, 0x7fffffff # initialize rs2
bne x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffff # initialize rs1
li x3, 0x7fffffff # initialize rs2
bne x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x2, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
bne x2, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
bne x2, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x8, 0x7ffffffe # initialize rs1
li x29, 0xffffffff # initialize rs2
bne x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffff # initialize rs1
li x29, 0xffffffff # initialize rs2
bne x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x25, 0x7ffffffe # initialize rs1
li x31, 0xfffffffe # initialize rs2
bne x25, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffe # initialize rs1
li x31, 0xfffffffe # initialize rs2
bne x25, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x2, 0x7ffffffe # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc8872 # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
bne x2, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x13, 0x7ffffffe # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x6, 0x7ffffffe # initialize rs1
li x19, 0x55555555 # initialize rs2
bne x6, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x55555555 # initialize rs1
li x19, 0x55555555 # initialize rs2
bne x6, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x27, 0xffffffff # initialize rs1
li x15, 0x00000000 # initialize rs2
bne x27, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
bne x27, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x14, 0xffffffff # initialize rs1
li x2, 0x00000001 # initialize rs2
bne x14, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x2, 0x00000001 # initialize rs2
bne x14, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x15, 0xffffffff # initialize rs1
li x5, 0x00000002 # initialize rs2
bne x15, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000002 # initialize rs1
li x5, 0x00000002 # initialize rs2
bne x15, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x15, 0xffffffff # initialize rs1
li x17, 0x80000000 # initialize rs2
bne x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x80000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
bne x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x27, 0xffffffff # initialize rs1
li x3, 0x80000001 # initialize rs2
bne x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
bne x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x1, 0xffffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
bne x1, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
bne x1, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x6, 0xffffffff # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bne x6, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
bne x6, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x28, 0xffffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xffffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
bne x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x22, 0xffffffff # initialize rs1
li x28, 0xfffffffe # initialize rs2
bne x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
bne x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x31, 0xffffffff # initialize rs1
li x22, 0x5bbc8872 # initialize rs2
bne x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc8872 # initialize rs1
li x22, 0x5bbc8872 # initialize rs2
bne x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x9, 0xffffffff # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bne x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x25, 0xffffffff # initialize rs1
li x7, 0x55555555 # initialize rs2
bne x25, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x55555555 # initialize rs1
li x7, 0x55555555 # initialize rs2
bne x25, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x23, 0xfffffffe # initialize rs1
li x6, 0x00000000 # initialize rs2
bne x23, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
bne x23, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x7, 0xfffffffe # initialize rs1
li x12, 0x00000001 # initialize rs2
bne x7, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
bne x7, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x23, 0xfffffffe # initialize rs1
li x14, 0x00000002 # initialize rs2
bne x23, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000002 # initialize rs1
li x14, 0x00000002 # initialize rs2
bne x23, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x12, 0xfffffffe # initialize rs1
li x7, 0x80000000 # initialize rs2
bne x12, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x7, 0x80000000 # initialize rs2
bne x12, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x17, 0xfffffffe # initialize rs1
li x6, 0x80000001 # initialize rs2
bne x17, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x6, 0x80000001 # initialize rs2
bne x17, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x2, 0xfffffffe # initialize rs1
li x8, 0x7fffffff # initialize rs2
bne x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7fffffff # initialize rs1
li x8, 0x7fffffff # initialize rs2
bne x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x26, 0xfffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bne x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
bne x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x7, 0xfffffffe # initialize rs1
li x3, 0xffffffff # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x3, 0xffffffff # initialize rs2
bne x7, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x1, 0xfffffffe # initialize rs1
li x3, 0xfffffffe # initialize rs2
bne x1, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffe # initialize rs1
li x3, 0xfffffffe # initialize rs2
bne x1, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x15, 0xfffffffe # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
bne x15, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x5bbc8872 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
bne x15, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x31, 0xfffffffe # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
bne x31, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
bne x31, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x10, 0xfffffffe # initialize rs1
li x30, 0x55555555 # initialize rs2
bne x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x55555555 # initialize rs1
li x30, 0x55555555 # initialize rs2
bne x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x25, 0x5bbc8872 # initialize rs1
li x21, 0x00000000 # initialize rs2
bne x25, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000 # initialize rs1
li x21, 0x00000000 # initialize rs2
bne x25, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x19, 0x5bbc8872 # initialize rs1
li x21, 0x00000001 # initialize rs2
bne x19, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000001 # initialize rs1
li x21, 0x00000001 # initialize rs2
bne x19, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x13, 0x5bbc8872 # initialize rs1
li x10, 0x00000002 # initialize rs2
bne x13, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000002 # initialize rs1
li x10, 0x00000002 # initialize rs2
bne x13, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x17, 0x5bbc8872 # initialize rs1
li x13, 0x80000000 # initialize rs2
bne x17, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000000 # initialize rs1
li x13, 0x80000000 # initialize rs2
bne x17, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x6, 0x5bbc8872 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x6, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x80000001 # initialize rs1
li x29, 0x80000001 # initialize rs2
bne x6, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x17, 0x5bbc8872 # initialize rs1
li x28, 0x7fffffff # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7fffffff # initialize rs1
li x28, 0x7fffffff # initialize rs2
bne x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x20, 0x5bbc8872 # initialize rs1
li x23, 0x7ffffffe # initialize rs2
bne x20, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x23, 0x7ffffffe # initialize rs2
bne x20, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x12, 0x5bbc8872 # initialize rs1
li x1, 0xffffffff # initialize rs2
bne x12, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xffffffff # initialize rs1
li x1, 0xffffffff # initialize rs2
bne x12, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x2, 0x5bbc8872 # initialize rs1
li x19, 0xfffffffe # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfffffffe # initialize rs1
li x19, 0xfffffffe # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x9, 0x5bbc8872 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bne x9, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x5bbc8872 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bne x9, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x18, 0x5bbc8872 # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
bne x18, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x22, 0x5bbc8872 # initialize rs1
li x11, 0x55555555 # initialize rs2
bne x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x11, 0x55555555 # initialize rs2
bne x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x1, 0xaaaaaaaa # initialize rs1
li x16, 0x00000000 # initialize rs2
bne x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000 # initialize rs1
li x16, 0x00000000 # initialize rs2
bne x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x14, 0xaaaaaaaa # initialize rs1
li x18, 0x00000001 # initialize rs2
bne x14, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
bne x14, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x23, 0xaaaaaaaa # initialize rs1
li x20, 0x00000002 # initialize rs2
bne x23, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
bne x23, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x24, 0xaaaaaaaa # initialize rs1
li x1, 0x80000000 # initialize rs2
bne x24, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x80000000 # initialize rs1
li x1, 0x80000000 # initialize rs2
bne x24, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x28, 0xaaaaaaaa # initialize rs1
li x3, 0x80000001 # initialize rs2
bne x28, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x80000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
bne x28, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x19, 0xaaaaaaaa # initialize rs1
li x16, 0x7fffffff # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bne x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x9, 0xaaaaaaaa # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bne x9, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bne x9, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x13, 0xaaaaaaaa # initialize rs1
li x30, 0xffffffff # initialize rs2
bne x13, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xffffffff # initialize rs1
li x30, 0xffffffff # initialize rs2
bne x13, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x3, 0xaaaaaaaa # initialize rs1
li x30, 0xfffffffe # initialize rs2
bne x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffe # initialize rs1
li x30, 0xfffffffe # initialize rs2
bne x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x21, 0xaaaaaaaa # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
bne x21, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5bbc8872 # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
bne x21, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x17, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x15, 0xaaaaaaaa # initialize rs1
li x21, 0x55555555 # initialize rs2
bne x15, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x21, 0x55555555 # initialize rs2
bne x15, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x19, 0x55555555 # initialize rs1
li x31, 0x00000000 # initialize rs2
bne x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x00000000 # initialize rs1
li x31, 0x00000000 # initialize rs2
bne x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x5, 0x55555555 # initialize rs1
li x7, 0x00000001 # initialize rs2
bne x5, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000001 # initialize rs1
li x7, 0x00000001 # initialize rs2
bne x5, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x20, 0x55555555 # initialize rs1
li x12, 0x00000002 # initialize rs2
bne x20, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000002 # initialize rs1
li x12, 0x00000002 # initialize rs2
bne x20, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x19, 0x55555555 # initialize rs1
li x26, 0x80000000 # initialize rs2
bne x19, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000000 # initialize rs1
li x26, 0x80000000 # initialize rs2
bne x19, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x13, 0x55555555 # initialize rs1
li x20, 0x80000001 # initialize rs2
bne x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
bne x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x18, 0x55555555 # initialize rs1
li x27, 0x7fffffff # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffff # initialize rs1
li x27, 0x7fffffff # initialize rs2
bne x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x19, 0x55555555 # initialize rs1
li x20, 0x7ffffffe # initialize rs2
bne x19, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffe # initialize rs1
li x20, 0x7ffffffe # initialize rs2
bne x19, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x23, 0x55555555 # initialize rs1
li x19, 0xffffffff # initialize rs2
bne x23, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffff # initialize rs1
li x19, 0xffffffff # initialize rs2
bne x23, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x16, 0x55555555 # initialize rs1
li x28, 0xfffffffe # initialize rs2
bne x16, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
bne x16, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x13, 0x55555555 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bne x13, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bne x13, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x30, 0x55555555 # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x30, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bne x30, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x2, 0x55555555 # initialize rs1
li x19, 0x55555555 # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x55555555 # initialize rs1
li x19, 0x55555555 # initialize rs2
bne x2, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x295becef # initialize rs1
li x0, 0x2e365882 # initialize rs2
bne x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x2e365882 # initialize rs1
li x0, 0x2e365882 # initialize rs2
bne x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x0be50c52 # initialize rs1
li x1, 0x1d96d3e5 # initialize rs2
bne x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x1d96d3e5 # initialize rs1
li x1, 0x1d96d3e5 # initialize rs2
bne x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xff531a1d # initialize rs1
li x2, 0x5579b738 # initialize rs2
bne x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5579b738 # initialize rs1
li x2, 0x5579b738 # initialize rs2
bne x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x56e7d404 # initialize rs1
li x3, 0x90fef709 # initialize rs2
bne x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x90fef709 # initialize rs1
li x3, 0x90fef709 # initialize rs2
bne x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x086c6cdf # initialize rs1
li x4, 0x3e49e57a # initialize rs2
bne x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x3e49e57a # initialize rs1
li x4, 0x3e49e57a # initialize rs2
bne x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x4e6616f2 # initialize rs1
li x5, 0x3778b1fc # initialize rs2
bne x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x3778b1fc # initialize rs1
li x5, 0x3778b1fc # initialize rs2
bne x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc04b9a24 # initialize rs1
li x6, 0x159d9e71 # initialize rs2
bne x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x159d9e71 # initialize rs1
li x6, 0x159d9e71 # initialize rs2
bne x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x9cea179e # initialize rs1
li x7, 0x12aba36d # initialize rs2
bne x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x12aba36d # initialize rs1
li x7, 0x12aba36d # initialize rs2
bne x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x6b3b95f5 # initialize rs1
li x8, 0xcae83ce6 # initialize rs2
bne x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xcae83ce6 # initialize rs1
li x8, 0xcae83ce6 # initialize rs2
bne x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xe95ccedc # initialize rs1
li x9, 0xbe290fc8 # initialize rs2
bne x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xbe290fc8 # initialize rs1
li x9, 0xbe290fc8 # initialize rs2
bne x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x64f61ef2 # initialize rs1
li x10, 0x551d3893 # initialize rs2
bne x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x551d3893 # initialize rs1
li x10, 0x551d3893 # initialize rs2
bne x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x3784c90e # initialize rs1
li x11, 0xce0806e7 # initialize rs2
bne x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xce0806e7 # initialize rs1
li x11, 0xce0806e7 # initialize rs2
bne x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xb5b652c9 # initialize rs1
li x12, 0x434df5a3 # initialize rs2
bne x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x434df5a3 # initialize rs1
li x12, 0x434df5a3 # initialize rs2
bne x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x062ee5a1 # initialize rs1
li x13, 0x82dea8e5 # initialize rs2
bne x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x82dea8e5 # initialize rs1
li x13, 0x82dea8e5 # initialize rs2
bne x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xada288fa # initialize rs1
li x14, 0xeb8cd1a2 # initialize rs2
bne x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xeb8cd1a2 # initialize rs1
li x14, 0xeb8cd1a2 # initialize rs2
bne x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x8233bf1f # initialize rs1
li x15, 0x2b7a4df7 # initialize rs2
bne x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x2b7a4df7 # initialize rs1
li x15, 0x2b7a4df7 # initialize rs2
bne x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xfdb22e07 # initialize rs1
li x16, 0xd34e3b70 # initialize rs2
bne x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xd34e3b70 # initialize rs1
li x16, 0xd34e3b70 # initialize rs2
bne x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xbeaeb161 # initialize rs1
li x17, 0x7cd17770 # initialize rs2
bne x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7cd17770 # initialize rs1
li x17, 0x7cd17770 # initialize rs2
bne x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xdc042d32 # initialize rs1
li x18, 0xb6c3a001 # initialize rs2
bne x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xb6c3a001 # initialize rs1
li x18, 0xb6c3a001 # initialize rs2
bne x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xffe76d83 # initialize rs1
li x19, 0xa0894803 # initialize rs2
bne x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xa0894803 # initialize rs1
li x19, 0xa0894803 # initialize rs2
bne x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x4ce19989 # initialize rs1
li x20, 0xce6a5f77 # initialize rs2
bne x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xce6a5f77 # initialize rs1
li x20, 0xce6a5f77 # initialize rs2
bne x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x52ab3a97 # initialize rs1
li x21, 0xfdf3597e # initialize rs2
bne x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfdf3597e # initialize rs1
li x21, 0xfdf3597e # initialize rs2
bne x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x80fcc255 # initialize rs1
li x22, 0x9962d03b # initialize rs2
bne x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x9962d03b # initialize rs1
li x22, 0x9962d03b # initialize rs2
bne x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x804c1d7e # initialize rs1
li x23, 0xdeb890ca # initialize rs2
bne x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xdeb890ca # initialize rs1
li x23, 0xdeb890ca # initialize rs2
bne x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x99b2b70a # initialize rs1
li x24, 0x6fc8a888 # initialize rs2
bne x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x6fc8a888 # initialize rs1
li x24, 0x6fc8a888 # initialize rs2
bne x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x79a136d1 # initialize rs1
li x25, 0x046f67fd # initialize rs2
bne x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x046f67fd # initialize rs1
li x25, 0x046f67fd # initialize rs2
bne x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x3176d584 # initialize rs1
li x26, 0x4c76c9d7 # initialize rs2
bne x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x4c76c9d7 # initialize rs1
li x26, 0x4c76c9d7 # initialize rs2
bne x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x9ca02c49 # initialize rs1
li x27, 0x5e5e382a # initialize rs2
bne x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x5e5e382a # initialize rs1
li x27, 0x5e5e382a # initialize rs2
bne x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x439b64f5 # initialize rs1
li x28, 0x3b0b6579 # initialize rs2
bne x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x3b0b6579 # initialize rs1
li x28, 0x3b0b6579 # initialize rs2
bne x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xf9af026a # initialize rs1
li x29, 0xa3e04eca # initialize rs2
bne x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xa3e04eca # initialize rs1
li x29, 0xa3e04eca # initialize rs2
bne x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xfbe01912 # initialize rs1
li x30, 0xd79152de # initialize rs2
bne x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xd79152de # initialize rs1
li x30, 0xd79152de # initialize rs2
bne x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x6d660e8b # initialize rs1
li x31, 0x8870d797 # initialize rs2
bne x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8870d797 # initialize rs1
li x31, 0x8870d797 # initialize rs2
bne x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bne x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x24, x23 # perform first operation
bne x12, x18, arbitraryLabel31
nop
arbitraryLabel31:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x6, x8 # perform first operation
bne x9, x25, arbitraryLabel32
nop
arbitraryLabel32:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x31, x22 # perform first operation
bne x3, x2, arbitraryLabel33
nop
arbitraryLabel33:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x15, x10, x13 # perform first operation
bne x15, x17, arbitraryLabel34
nop
arbitraryLabel34:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x22, x24 # perform first operation
bne x10, x17, arbitraryLabel35
nop
arbitraryLabel35:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x19, x30, x6 # perform first operation
bne x7, x26, arbitraryLabel36
nop
arbitraryLabel36:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-andi.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x45f1efea # initialize rs1
andi x29, x0, 1272 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5cc50e1a # initialize rs1
andi x22, x1, 1151 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x7f779f91 # initialize rs1
andi x28, x2, 1915 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x85eb0051 # initialize rs1
andi x21, x3, 1970 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x851bbd5a # initialize rs1
andi x30, x4, -1962 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xda3d6e4a # initialize rs1
andi x16, x5, -418 # perform operation
RVTEST_SIGUPD(x6, x0, x16, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x0b378969 # initialize rs1
andi x5, x6, 1669 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x703c22e4 # initialize rs1
andi x15, x7, -714 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xec24f9de # initialize rs1
andi x6, x8, 527 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x943c02f5 # initialize rs1
andi x14, x9, -1923 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x8542a7b0 # initialize rs1
andi x17, x10, -493 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x203dd178 # initialize rs1
andi x22, x11, -31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x304ceb52 # initialize rs1
andi x5, x12, -1784 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa4c7fc44 # initialize rs1
andi x24, x13, 1192 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x658354de # initialize rs1
andi x12, x14, -1538 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x59732c36 # initialize rs1
andi x20, x15, -1268 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xb042f939 # initialize rs1
andi x29, x16, 1665 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x36b0517a # initialize rs1
andi x27, x17, 917 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x346f67db # initialize rs1
andi x13, x18, 1637 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xbe5d7aef # initialize rs1
andi x11, x19, 1662 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x9e66a6f3 # initialize rs1
andi x30, x20, -390 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x3ceb947d # initialize rs1
andi x1, x21, 2006 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xd236d7bf # initialize rs1
andi x12, x22, 1345 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x90f10368 # initialize rs1
andi x7, x23, -2032 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xf6193393 # initialize rs1
andi x10, x24, -1258 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x45aeca57 # initialize rs1
andi x3, x25, -1260 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xb5579fde # initialize rs1
andi x5, x26, -225 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x8874878c # initialize rs1
andi x8, x27, 274 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x7e63da99 # initialize rs1
andi x30, x28, -233 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xb9b6e2e5 # initialize rs1
andi x17, x29, -1079 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xf7a4325d # initialize rs1
andi x8, x30, -1000 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x8a4f9fab # initialize rs1
andi x23, x31, -620 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 124)

# Testcase cp_rd (Test destination rd = x0)
li x24, 0x358c204e # initialize rs1
andi x0, x24, -825 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x28, 0x2aa1190d # initialize rs1
andi x1, x28, -1648 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x2, 0x6d049eb3 # initialize rs1
andi x2, x2, 1914 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x5, 0xdaa9defa # initialize rs1
andi x3, x5, -940 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x5, 0xb08e15ad # initialize rs1
andi x4, x5, -752 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
li x4, 0xa161d5b7 # initialize rs1
andi x5, x4, 471 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0x45db1f6d # initialize rs1
andi x6, x13, 410 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x9, 0x5b15f3bf # initialize rs1
andi x7, x9, 1232 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x7, 0xfb37cd9e # initialize rs1
andi x8, x7, 953 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x18, 0x195bbed1 # initialize rs1
andi x9, x18, 1233 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x17, 0xa74ad2b5 # initialize rs1
andi x10, x17, 321 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x30, 0xb5060d7d # initialize rs1
andi x11, x30, -23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x9, 0xe832cd26 # initialize rs1
andi x12, x9, -364 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x22, 0x2cbcef97 # initialize rs1
andi x13, x22, -851 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x27, 0x198184bb # initialize rs1
andi x14, x27, 1603 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x15, 0x19ba9fb1 # initialize rs1
andi x15, x15, -259 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x30, 0x629d2057 # initialize rs1
andi x16, x30, 1771 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x23, 0x1e10a4cb # initialize rs1
andi x17, x23, -370 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x12, 0xfe019d85 # initialize rs1
andi x18, x12, 557 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x21, 0x65503267 # initialize rs1
andi x19, x21, -1187 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x31, 0xc4e0719d # initialize rs1
andi x20, x31, 693 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x29, 0xc518499c # initialize rs1
andi x21, x29, -1066 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x27, 0x1f681a20 # initialize rs1
andi x22, x27, -1256 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x27, 0x5a6d8a4f # initialize rs1
andi x23, x27, -392 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x25, 0x3743b097 # initialize rs1
andi x24, x25, 1293 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x12, 0x752e7af8 # initialize rs1
andi x25, x12, -429 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x23, 0xd7e149bd # initialize rs1
andi x26, x23, -830 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x17, 0xc49fe5d1 # initialize rs1
andi x27, x17, 109 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x25, 0xed2f70ce # initialize rs1
andi x28, x25, 592 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x5, 0xe9cb2d66 # initialize rs1
andi x29, x5, 119 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x23, 0x3d32cfd9 # initialize rs1
andi x30, x23, 1703 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x10, 0xfa9ac0e9 # initialize rs1
andi x31, x10, 1147 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x2, 0x00000000 # initialize rs1
andi x24, x2, 118 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x30, 0x00000001 # initialize rs1
andi x7, x30, -1653 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x20, 0x00000002 # initialize rs1
andi x12, x20, 1156 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x18, 0x80000000 # initialize rs1
andi x26, x18, 1215 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x22, 0x80000001 # initialize rs1
andi x26, x22, -1494 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x17, 0x7fffffff # initialize rs1
andi x20, x17, -974 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x2, 0x7ffffffe # initialize rs1
andi x22, x2, 1048 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x25, 0xffffffff # initialize rs1
andi x16, x25, 1769 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x6, 0xfffffffe # initialize rs1
andi x11, x6, 665 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x9, 0x5bbc8872 # initialize rs1
andi x1, x9, 1187 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x19, 0xaaaaaaaa # initialize rs1
andi x24, x19, 269 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x9, 0x55555555 # initialize rs1
andi x3, x9, -888 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 300)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000 # initialize rs1
andi x18, x17, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 304)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000 # initialize rs1
andi x8, x30, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 308)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
andi x17, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 312)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
andi x21, x15, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 316)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000 # initialize rs1
andi x21, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 320)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000 # initialize rs1
andi x30, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 324)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000 # initialize rs1
andi x13, x19, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 328)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000 # initialize rs1
andi x21, x5, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
andi x8, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 336)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000 # initialize rs1
andi x24, x13, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 340)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000 # initialize rs1
andi x18, x14, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 344)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000 # initialize rs1
andi x6, x25, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 348)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000 # initialize rs1
andi x14, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 352)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000 # initialize rs1
andi x19, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 356)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000 # initialize rs1
andi x29, x9, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 360)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000 # initialize rs1
andi x2, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 364)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
andi x8, x10, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 368)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000 # initialize rs1
andi x8, x25, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 372)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000 # initialize rs1
andi x19, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 376)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000 # initialize rs1
andi x22, x27, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 380)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
andi x27, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 384)

# Testcase cr_rs1_imm_corners
li x6, 0x00000001 # initialize rs1
andi x22, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 388)

# Testcase cr_rs1_imm_corners
li x13, 0x00000001 # initialize rs1
andi x15, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 392)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
andi x29, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 396)

# Testcase cr_rs1_imm_corners
li x6, 0x00000001 # initialize rs1
andi x21, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 400)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
andi x18, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 404)

# Testcase cr_rs1_imm_corners
li x11, 0x00000001 # initialize rs1
andi x17, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 408)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
andi x1, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 412)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
andi x25, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 416)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
andi x25, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 420)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
andi x16, x15, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 424)

# Testcase cr_rs1_imm_corners
li x20, 0x00000001 # initialize rs1
andi x8, x20, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 428)

# Testcase cr_rs1_imm_corners
li x11, 0x00000001 # initialize rs1
andi x13, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 432)

# Testcase cr_rs1_imm_corners
li x8, 0x00000001 # initialize rs1
andi x19, x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 436)

# Testcase cr_rs1_imm_corners
li x12, 0x00000001 # initialize rs1
andi x9, x12, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 440)

# Testcase cr_rs1_imm_corners
li x19, 0x00000001 # initialize rs1
andi x10, x19, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 444)

# Testcase cr_rs1_imm_corners
li x3, 0x00000001 # initialize rs1
andi x7, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 448)

# Testcase cr_rs1_imm_corners
li x11, 0x00000001 # initialize rs1
andi x14, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 452)

# Testcase cr_rs1_imm_corners
li x25, 0x00000001 # initialize rs1
andi x26, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
andi x28, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 460)

# Testcase cr_rs1_imm_corners
li x30, 0x00000002 # initialize rs1
andi x28, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 464)

# Testcase cr_rs1_imm_corners
li x22, 0x00000002 # initialize rs1
andi x24, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 468)

# Testcase cr_rs1_imm_corners
li x18, 0x00000002 # initialize rs1
andi x11, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 472)

# Testcase cr_rs1_imm_corners
li x23, 0x00000002 # initialize rs1
andi x6, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 476)

# Testcase cr_rs1_imm_corners
li x26, 0x00000002 # initialize rs1
andi x19, x26, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 480)

# Testcase cr_rs1_imm_corners
li x24, 0x00000002 # initialize rs1
andi x17, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 484)

# Testcase cr_rs1_imm_corners
li x9, 0x00000002 # initialize rs1
andi x27, x9, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 488)

# Testcase cr_rs1_imm_corners
li x9, 0x00000002 # initialize rs1
andi x19, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 492)

# Testcase cr_rs1_imm_corners
li x11, 0x00000002 # initialize rs1
andi x17, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 496)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
andi x20, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 500)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
andi x29, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 504)

# Testcase cr_rs1_imm_corners
li x30, 0x00000002 # initialize rs1
andi x22, x30, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 508)

# Testcase cr_rs1_imm_corners
li x30, 0x00000002 # initialize rs1
andi x17, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 512)

# Testcase cr_rs1_imm_corners
li x15, 0x00000002 # initialize rs1
andi x22, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 516)

# Testcase cr_rs1_imm_corners
li x18, 0x00000002 # initialize rs1
andi x24, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 520)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
andi x8, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 524)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
andi x31, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 528)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
andi x10, x16, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 532)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
andi x6, x3, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cr_rs1_imm_corners
li x23, 0x00000002 # initialize rs1
andi x30, x23, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 540)

# Testcase cr_rs1_imm_corners
li x27, 0x80000000 # initialize rs1
andi x17, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 544)

# Testcase cr_rs1_imm_corners
li x19, 0x80000000 # initialize rs1
andi x20, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 548)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
andi x3, x30, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 552)

# Testcase cr_rs1_imm_corners
li x9, 0x80000000 # initialize rs1
andi x1, x9, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 556)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
andi x15, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 560)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
andi x15, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 564)

# Testcase cr_rs1_imm_corners
li x20, 0x80000000 # initialize rs1
andi x23, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 568)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
andi x9, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 572)

# Testcase cr_rs1_imm_corners
li x31, 0x80000000 # initialize rs1
andi x23, x31, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 576)

# Testcase cr_rs1_imm_corners
li x23, 0x80000000 # initialize rs1
andi x28, x23, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 580)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
andi x3, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 584)

# Testcase cr_rs1_imm_corners
li x5, 0x80000000 # initialize rs1
andi x15, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 588)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
andi x20, x22, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 592)

# Testcase cr_rs1_imm_corners
li x27, 0x80000000 # initialize rs1
andi x18, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 596)

# Testcase cr_rs1_imm_corners
li x7, 0x80000000 # initialize rs1
andi x5, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 600)

# Testcase cr_rs1_imm_corners
li x14, 0x80000000 # initialize rs1
andi x30, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 604)

# Testcase cr_rs1_imm_corners
li x17, 0x80000000 # initialize rs1
andi x2, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 608)

# Testcase cr_rs1_imm_corners
li x6, 0x80000000 # initialize rs1
andi x24, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 612)

# Testcase cr_rs1_imm_corners
li x23, 0x80000000 # initialize rs1
andi x16, x23, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 616)

# Testcase cr_rs1_imm_corners
li x1, 0x80000000 # initialize rs1
andi x17, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 620)

# Testcase cr_rs1_imm_corners
li x23, 0x80000001 # initialize rs1
andi x20, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 624)

# Testcase cr_rs1_imm_corners
li x16, 0x80000001 # initialize rs1
andi x19, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 628)

# Testcase cr_rs1_imm_corners
li x29, 0x80000001 # initialize rs1
andi x31, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 632)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
andi x19, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 636)

# Testcase cr_rs1_imm_corners
li x23, 0x80000001 # initialize rs1
andi x22, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 640)

# Testcase cr_rs1_imm_corners
li x27, 0x80000001 # initialize rs1
andi x17, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 644)

# Testcase cr_rs1_imm_corners
li x15, 0x80000001 # initialize rs1
andi x16, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 648)

# Testcase cr_rs1_imm_corners
li x29, 0x80000001 # initialize rs1
andi x31, x29, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 652)

# Testcase cr_rs1_imm_corners
li x29, 0x80000001 # initialize rs1
andi x12, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 656)

# Testcase cr_rs1_imm_corners
li x21, 0x80000001 # initialize rs1
andi x25, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 660)

# Testcase cr_rs1_imm_corners
li x5, 0x80000001 # initialize rs1
andi x22, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 664)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
andi x13, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 668)

# Testcase cr_rs1_imm_corners
li x21, 0x80000001 # initialize rs1
andi x7, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 672)

# Testcase cr_rs1_imm_corners
li x31, 0x80000001 # initialize rs1
andi x28, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 676)

# Testcase cr_rs1_imm_corners
li x5, 0x80000001 # initialize rs1
andi x22, x5, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 680)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
andi x28, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 684)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
andi x15, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 688)

# Testcase cr_rs1_imm_corners
li x15, 0x80000001 # initialize rs1
andi x20, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 692)

# Testcase cr_rs1_imm_corners
li x1, 0x80000001 # initialize rs1
andi x22, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 696)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
andi x16, x18, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 700)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffff # initialize rs1
andi x11, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 704)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffff # initialize rs1
andi x20, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 708)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
andi x1, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 712)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffff # initialize rs1
andi x31, x8, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 716)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffff # initialize rs1
andi x2, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 720)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffff # initialize rs1
andi x12, x31, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 724)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
andi x1, x2, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 728)

# Testcase cr_rs1_imm_corners
li x28, 0x7fffffff # initialize rs1
andi x21, x28, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 732)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
andi x22, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 736)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffff # initialize rs1
andi x31, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 740)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
andi x25, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 744)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffff # initialize rs1
andi x14, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 748)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffff # initialize rs1
andi x11, x1, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 752)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffff # initialize rs1
andi x14, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 756)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffff # initialize rs1
andi x29, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 760)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffff # initialize rs1
andi x30, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 764)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffff # initialize rs1
andi x25, x5, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 768)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffff # initialize rs1
andi x21, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 772)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffff # initialize rs1
andi x16, x15, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 776)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
andi x7, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 780)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffe # initialize rs1
andi x6, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffe # initialize rs1
andi x12, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 788)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffe # initialize rs1
andi x27, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 792)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
andi x18, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 796)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
andi x5, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 800)

# Testcase cr_rs1_imm_corners
li x1, 0x7ffffffe # initialize rs1
andi x6, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 804)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffe # initialize rs1
andi x31, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 808)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffe # initialize rs1
andi x14, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 812)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffe # initialize rs1
andi x25, x23, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 816)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
andi x24, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 820)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffe # initialize rs1
andi x14, x9, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 824)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffe # initialize rs1
andi x19, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 828)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffe # initialize rs1
andi x23, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffe # initialize rs1
andi x20, x26, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 836)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
andi x27, x19, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 840)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffe # initialize rs1
andi x22, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 844)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
andi x2, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 848)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
andi x21, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 852)

# Testcase cr_rs1_imm_corners
li x18, 0x7ffffffe # initialize rs1
andi x3, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 856)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffe # initialize rs1
andi x7, x5, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 860)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffff # initialize rs1
andi x23, x10, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 864)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffff # initialize rs1
andi x8, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 868)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
andi x23, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 872)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
andi x20, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 876)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffff # initialize rs1
andi x31, x20, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 880)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
andi x2, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 884)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffff # initialize rs1
andi x11, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 888)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
andi x9, x12, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 892)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffff # initialize rs1
andi x27, x5, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 896)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffff # initialize rs1
andi x1, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 900)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffff # initialize rs1
andi x6, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 904)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
andi x26, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 908)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffff # initialize rs1
andi x31, x14, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 912)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffff # initialize rs1
andi x30, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 916)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffff # initialize rs1
andi x14, x19, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 920)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffff # initialize rs1
andi x25, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 924)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffff # initialize rs1
andi x24, x9, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 928)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
andi x3, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 932)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffff # initialize rs1
andi x21, x14, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 936)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffff # initialize rs1
andi x23, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 940)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffe # initialize rs1
andi x2, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 944)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffe # initialize rs1
andi x14, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 948)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
andi x8, x11, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 952)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffe # initialize rs1
andi x1, x31, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 956)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
andi x8, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 960)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffe # initialize rs1
andi x17, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 964)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffe # initialize rs1
andi x9, x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 968)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffe # initialize rs1
andi x28, x26, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 972)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffe # initialize rs1
andi x14, x23, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 976)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffe # initialize rs1
andi x24, x31, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 980)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffe # initialize rs1
andi x8, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 984)

# Testcase cr_rs1_imm_corners
li x1, 0xfffffffe # initialize rs1
andi x20, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 988)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
andi x23, x14, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 992)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
andi x5, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 996)

# Testcase cr_rs1_imm_corners
li x18, 0xfffffffe # initialize rs1
andi x12, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1000)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffe # initialize rs1
andi x18, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1004)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffe # initialize rs1
andi x12, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1008)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffe # initialize rs1
andi x17, x31, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1012)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffe # initialize rs1
andi x29, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1016)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
andi x23, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1020)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc8872 # initialize rs1
andi x23, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1024)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
andi x6, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1028)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
andi x26, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1032)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc8872 # initialize rs1
andi x14, x31, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1036)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc8872 # initialize rs1
andi x20, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1040)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
andi x15, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1044)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc8872 # initialize rs1
andi x6, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1048)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc8872 # initialize rs1
andi x16, x24, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1052)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc8872 # initialize rs1
andi x2, x31, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1056)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
andi x11, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1060)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc8872 # initialize rs1
andi x10, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1064)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc8872 # initialize rs1
andi x17, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1068)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc8872 # initialize rs1
andi x23, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1072)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc8872 # initialize rs1
andi x19, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1076)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc8872 # initialize rs1
andi x11, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1080)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
andi x16, x19, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1084)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc8872 # initialize rs1
andi x9, x14, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1088)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc8872 # initialize rs1
andi x10, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1092)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
andi x24, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1096)

# Testcase cr_rs1_imm_corners
li x24, 0x5bbc8872 # initialize rs1
andi x19, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1100)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaa # initialize rs1
andi x31, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1104)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
andi x16, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1108)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
andi x19, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1112)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
andi x17, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1116)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaa # initialize rs1
andi x21, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1120)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
andi x10, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1124)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaa # initialize rs1
andi x14, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1128)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
andi x20, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1132)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
andi x5, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1136)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaa # initialize rs1
andi x18, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1140)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaa # initialize rs1
andi x10, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1144)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaa # initialize rs1
andi x7, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1148)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaa # initialize rs1
andi x29, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1152)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
andi x22, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1156)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
andi x12, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1160)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaa # initialize rs1
andi x23, x7, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1164)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
andi x5, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1168)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaa # initialize rs1
andi x31, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1172)

# Testcase cr_rs1_imm_corners
li x28, 0xaaaaaaaa # initialize rs1
andi x3, x28, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1176)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaa # initialize rs1
andi x26, x30, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1180)

# Testcase cr_rs1_imm_corners
li x15, 0x55555555 # initialize rs1
andi x27, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1184)

# Testcase cr_rs1_imm_corners
li x30, 0x55555555 # initialize rs1
andi x15, x30, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1188)

# Testcase cr_rs1_imm_corners
li x2, 0x55555555 # initialize rs1
andi x15, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1192)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
andi x1, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1196)

# Testcase cr_rs1_imm_corners
li x24, 0x55555555 # initialize rs1
andi x11, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1200)

# Testcase cr_rs1_imm_corners
li x29, 0x55555555 # initialize rs1
andi x8, x29, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1204)

# Testcase cr_rs1_imm_corners
li x29, 0x55555555 # initialize rs1
andi x23, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1208)

# Testcase cr_rs1_imm_corners
li x6, 0x55555555 # initialize rs1
andi x26, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1212)

# Testcase cr_rs1_imm_corners
li x19, 0x55555555 # initialize rs1
andi x13, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1216)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
andi x5, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1220)

# Testcase cr_rs1_imm_corners
li x28, 0x55555555 # initialize rs1
andi x24, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1224)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
andi x29, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1228)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
andi x19, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1232)

# Testcase cr_rs1_imm_corners
li x19, 0x55555555 # initialize rs1
andi x2, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1236)

# Testcase cr_rs1_imm_corners
li x30, 0x55555555 # initialize rs1
andi x10, x30, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1240)

# Testcase cr_rs1_imm_corners
li x7, 0x55555555 # initialize rs1
andi x10, x7, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1244)

# Testcase cr_rs1_imm_corners
li x30, 0x55555555 # initialize rs1
andi x28, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1248)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
andi x18, x10, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1252)

# Testcase cr_rs1_imm_corners
li x1, 0x55555555 # initialize rs1
andi x3, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1256)

# Testcase cr_rs1_imm_corners
li x1, 0x55555555 # initialize rs1
andi x2, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x865f2852 # initialize rs1
andi x0, x0, -763 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x4d60a32a # initialize rs1
andi x1, x1, 348 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x27263be9 # initialize rs1
andi x2, x2, 1549 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x30be9220 # initialize rs1
andi x3, x3, -1087 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x74fb55a7 # initialize rs1
andi x4, x4, 1849 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0e4ee273 # initialize rs1
andi x5, x5, 42 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x35d78585 # initialize rs1
andi x6, x6, -1688 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x4347d534 # initialize rs1
andi x7, x7, -1067 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x8f3e06c3 # initialize rs1
andi x8, x8, -1471 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x4ef88538 # initialize rs1
andi x9, x9, 2037 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xc704b04a # initialize rs1
andi x10, x10, 485 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xaa4f341c # initialize rs1
andi x11, x11, -165 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xd27b710e # initialize rs1
andi x12, x12, -1651 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xe4ca954c # initialize rs1
andi x13, x13, -775 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xbf2af12d # initialize rs1
andi x14, x14, 1362 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x8d954e73 # initialize rs1
andi x15, x15, 599 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x29322e34 # initialize rs1
andi x16, x16, -885 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x0dce7344 # initialize rs1
andi x17, x17, 1711 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xa0f509a8 # initialize rs1
andi x18, x18, -290 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xf093ba18 # initialize rs1
andi x19, x19, -1230 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x3eef931a # initialize rs1
andi x20, x20, 949 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xd37f3c71 # initialize rs1
andi x21, x21, 1843 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x92885ce7 # initialize rs1
andi x22, x22, -286 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x245efca4 # initialize rs1
andi x23, x23, -902 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x8e91d29e # initialize rs1
andi x24, x24, -1898 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x8e9bef67 # initialize rs1
andi x25, x25, 1880 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xdfa70f03 # initialize rs1
andi x26, x26, -453 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x293eadf0 # initialize rs1
andi x27, x27, -1060 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x115257fa # initialize rs1
andi x28, x28, -945 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x6174ffdb # initialize rs1
andi x29, x29, -328 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x4fba7b58 # initialize rs1
andi x30, x30, -1039 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x42025545 # initialize rs1
andi x31, x31, 580 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x19, 0x4650d143 # initialize rs1
andi x18, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1392)

# Testcase cp_imm_corners
li x25, 0x12abd10d # initialize rs1
andi x16, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1396)

# Testcase cp_imm_corners
li x23, 0x1dd0059e # initialize rs1
andi x26, x23, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1400)

# Testcase cp_imm_corners
li x23, 0xe3dbc101 # initialize rs1
andi x26, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1404)

# Testcase cp_imm_corners
li x21, 0x87f08772 # initialize rs1
andi x24, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cp_imm_corners
li x3, 0xb9f558ea # initialize rs1
andi x10, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1412)

# Testcase cp_imm_corners
li x31, 0xf45704b5 # initialize rs1
andi x11, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1416)

# Testcase cp_imm_corners
li x31, 0x852311a9 # initialize rs1
andi x19, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1420)

# Testcase cp_imm_corners
li x1, 0x5545db19 # initialize rs1
andi x15, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1424)

# Testcase cp_imm_corners
li x27, 0xdc294a39 # initialize rs1
andi x20, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1428)

# Testcase cp_imm_corners
li x3, 0x94e1ed40 # initialize rs1
andi x24, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1432)

# Testcase cp_imm_corners
li x13, 0xcfd5f762 # initialize rs1
andi x2, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1436)

# Testcase cp_imm_corners
li x11, 0x80376ef0 # initialize rs1
andi x17, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1440)

# Testcase cp_imm_corners
li x17, 0xbf80665f # initialize rs1
andi x12, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1444)

# Testcase cp_imm_corners
li x29, 0x26f6ad65 # initialize rs1
andi x22, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1448)

# Testcase cp_imm_corners
li x17, 0x159765f9 # initialize rs1
andi x15, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1452)

# Testcase cp_imm_corners
li x7, 0x623c703a # initialize rs1
andi x18, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1456)

# Testcase cp_imm_corners
li x9, 0x304b0d83 # initialize rs1
andi x11, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1460)

# Testcase cp_imm_corners
li x2, 0x00a225af # initialize rs1
andi x9, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1464)

# Testcase cp_imm_corners
li x6, 0xff37d929 # initialize rs1
andi x19, x6, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x17, x5 # perform first operation
andi x11, x23, 401 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x18, x9 # perform first operation
andi x12, x31, 81 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x9, x23 # perform first operation
andi x16, x3, 328 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x16, x24 # perform first operation
andi x16, x26, -615 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x22, x3, x23 # perform first operation
andi x1, x7, 843 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x21, x25 # perform first operation
andi x26, x1, -1038 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x12, x10 # perform first operation
andi x22, x19, 1725 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x20, x10 # perform first operation
andi x24, x16, -1709 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x2, x29, x7 # perform first operation
andi x2, x10, -1999 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x11, x13, x28 # perform first operation
andi x13, x12, -253 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x15, x19 # perform first operation
andi x19, x29, -291 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x15, x21 # perform first operation
andi x12, x24, 1772 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-lb.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x18, 0x9041aa4b # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1124 # sub immediate from rs1 to counter offset
sw x18, -1124 (x1) # store value to put something in memory
lb x7, -1124(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x13, 0x4d33593a # initialize rs2
la x2, scratch # base address 
addi x2, x2, -915 # sub immediate from rs1 to counter offset
sw x13, 915 (x2) # store value to put something in memory
lb x21, 915(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 4)

# Testcase cp_rs1 (Test source rs1 = x3)
li x17, 0xee8efa4d # initialize rs2
la x3, scratch # base address 
addi x3, x3, -340 # sub immediate from rs1 to counter offset
sw x17, 340 (x3) # store value to put something in memory
lb x2, 340(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 8)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x28, 0xab819047 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1066 # sub immediate from rs1 to counter offset
sw x28, 1066 (x4) # store value to put something in memory
lb x29, 1066(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 12)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0x9b9b1278 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -587 # sub immediate from rs1 to counter offset
sw x27, 587 (x5) # store value to put something in memory
lb x10, 587(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x10, 16)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0x79d93156 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -29 # sub immediate from rs1 to counter offset
sw x17, 29 (x6) # store value to put something in memory
lb x12, 29(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x12, 20)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x30275d7d # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1164 # sub immediate from rs1 to counter offset
sw x11, 1164 (x7) # store value to put something in memory
lb x24, 1164(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 24)

# Testcase cp_rs1 (Test source rs1 = x8)
li x14, 0x4e2bdbb9 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1796 # sub immediate from rs1 to counter offset
sw x14, 1796 (x8) # store value to put something in memory
lb x15, 1796(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 28)

# Testcase cp_rs1 (Test source rs1 = x9)
li x29, 0x8b815b4b # initialize rs2
la x9, scratch # base address 
addi x9, x9, 244 # sub immediate from rs1 to counter offset
sw x29, -244 (x9) # store value to put something in memory
lb x10, -244(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 32)

# Testcase cp_rs1 (Test source rs1 = x10)
li x1, 0x433e8c13 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -667 # sub immediate from rs1 to counter offset
sw x1, 667 (x10) # store value to put something in memory
lb x8, 667(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 36)

# Testcase cp_rs1 (Test source rs1 = x11)
li x13, 0x8340c3c7 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -777 # sub immediate from rs1 to counter offset
sw x13, 777 (x11) # store value to put something in memory
lb x24, 777(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 40)

# Testcase cp_rs1 (Test source rs1 = x12)
li x30, 0x906482c2 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 119 # sub immediate from rs1 to counter offset
sw x30, -119 (x12) # store value to put something in memory
lb x24, -119(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 44)

# Testcase cp_rs1 (Test source rs1 = x13)
li x3, 0xe9cf1d07 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -121 # sub immediate from rs1 to counter offset
sw x3, 121 (x13) # store value to put something in memory
lb x9, 121(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 48)

# Testcase cp_rs1 (Test source rs1 = x14)
li x5, 0xa95009d8 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1799 # sub immediate from rs1 to counter offset
sw x5, 1799 (x14) # store value to put something in memory
lb x31, 1799(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 52)

# Testcase cp_rs1 (Test source rs1 = x15)
li x20, 0x339f5ff3 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -732 # sub immediate from rs1 to counter offset
sw x20, 732 (x15) # store value to put something in memory
lb x12, 732(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x16)
li x2, 0xdb2eb666 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -720 # sub immediate from rs1 to counter offset
sw x2, 720 (x16) # store value to put something in memory
lb x5, 720(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 60)

# Testcase cp_rs1 (Test source rs1 = x17)
li x14, 0xfa5b4731 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1770 # sub immediate from rs1 to counter offset
sw x14, -1770 (x17) # store value to put something in memory
lb x30, -1770(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x18)
li x22, 0x6ca72605 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -239 # sub immediate from rs1 to counter offset
sw x22, 239 (x18) # store value to put something in memory
lb x25, 239(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 68)

# Testcase cp_rs1 (Test source rs1 = x19)
li x30, 0x45ccfc14 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 624 # sub immediate from rs1 to counter offset
sw x30, -624 (x19) # store value to put something in memory
lb x2, -624(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cp_rs1 (Test source rs1 = x20)
li x13, 0x0d664505 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -446 # sub immediate from rs1 to counter offset
sw x13, 446 (x20) # store value to put something in memory
lb x1, 446(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 76)

# Testcase cp_rs1 (Test source rs1 = x21)
li x9, 0xadac433b # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1538 # sub immediate from rs1 to counter offset
sw x9, 1538 (x21) # store value to put something in memory
lb x11, 1538(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cp_rs1 (Test source rs1 = x22)
li x27, 0xc718a705 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1964 # sub immediate from rs1 to counter offset
sw x27, 1964 (x22) # store value to put something in memory
lb x5, 1964(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 84)

# Testcase cp_rs1 (Test source rs1 = x23)
li x8, 0xe6a9cdbb # initialize rs2
la x23, scratch # base address 
addi x23, x23, 417 # sub immediate from rs1 to counter offset
sw x8, -417 (x23) # store value to put something in memory
lb x22, -417(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 88)

# Testcase cp_rs1 (Test source rs1 = x24)
li x18, 0x97746dcf # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1260 # sub immediate from rs1 to counter offset
sw x18, 1260 (x24) # store value to put something in memory
lb x6, 1260(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 92)

# Testcase cp_rs1 (Test source rs1 = x25)
li x21, 0xbd0d6c40 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1923 # sub immediate from rs1 to counter offset
sw x21, -1923 (x25) # store value to put something in memory
lb x3, -1923(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x26)
li x23, 0x995f6ecd # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1862 # sub immediate from rs1 to counter offset
sw x23, 1862 (x26) # store value to put something in memory
lb x29, 1862(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 100)

# Testcase cp_rs1 (Test source rs1 = x27)
li x15, 0x1b848634 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 809 # sub immediate from rs1 to counter offset
sw x15, -809 (x27) # store value to put something in memory
lb x20, -809(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 104)

# Testcase cp_rs1 (Test source rs1 = x28)
li x15, 0xe09f1fb9 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1216 # sub immediate from rs1 to counter offset
sw x15, 1216 (x28) # store value to put something in memory
lb x7, 1216(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 108)

# Testcase cp_rs1 (Test source rs1 = x29)
li x5, 0x6f35adb8 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1363 # sub immediate from rs1 to counter offset
sw x5, 1363 (x29) # store value to put something in memory
lb x7, 1363(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 112)

# Testcase cp_rs1 (Test source rs1 = x30)
li x9, 0xee88762b # initialize rs2
la x30, scratch # base address 
addi x30, x30, -394 # sub immediate from rs1 to counter offset
sw x9, 394 (x30) # store value to put something in memory
lb x24, 394(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 116)

# Testcase cp_rs1 (Test source rs1 = x31)
li x6, 0x17bc439b # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1597 # sub immediate from rs1 to counter offset
sw x6, 1597 (x31) # store value to put something in memory
lb x26, 1597(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 120)

# Testcase cp_rd (Test destination rd = x0)
li x24, 0x850d1f98 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1253 # sub immediate from rs1 to counter offset
sw x24, -1253 (x17) # store value to put something in memory
lb x0, -1253(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 124)

# Testcase cp_rd (Test destination rd = x1)
li x7, 0x3fc72d12 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1303 # sub immediate from rs1 to counter offset
sw x7, 1303 (x28) # store value to put something in memory
lb x1, 1303(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rd (Test destination rd = x2)
li x27, 0x5fdf97be # initialize rs2
la x28, scratch # base address 
addi x28, x28, 574 # sub immediate from rs1 to counter offset
sw x27, -574 (x28) # store value to put something in memory
lb x2, -574(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 132)

# Testcase cp_rd (Test destination rd = x3)
li x24, 0xbbc329c3 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1300 # sub immediate from rs1 to counter offset
sw x24, -1300 (x11) # store value to put something in memory
lb x3, -1300(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x11, 0x3eda2267 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1822 # sub immediate from rs1 to counter offset
sw x11, 1822 (x14) # store value to put something in memory
lb x4, 1822(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 140)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0x10d9c75e # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1562 # sub immediate from rs1 to counter offset
sw x22, 1562 (x11) # store value to put something in memory
lb x5, 1562(x11) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x28, 0x407c74f8 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -372 # sub immediate from rs1 to counter offset
sw x28, 372 (x16) # store value to put something in memory
lb x6, 372(x16) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 148)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0xa726553a # initialize rs2
la x14, scratch # base address 
addi x14, x14, 409 # sub immediate from rs1 to counter offset
sw x24, -409 (x14) # store value to put something in memory
lb x7, -409(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rd (Test destination rd = x8)
li x24, 0xda044e1d # initialize rs2
la x7, scratch # base address 
addi x7, x7, -565 # sub immediate from rs1 to counter offset
sw x24, 565 (x7) # store value to put something in memory
lb x8, 565(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rd (Test destination rd = x9)
li x14, 0x89fd5b1c # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1612 # sub immediate from rs1 to counter offset
sw x14, -1612 (x10) # store value to put something in memory
lb x9, -1612(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rd (Test destination rd = x10)
li x5, 0xdb8474c2 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1962 # sub immediate from rs1 to counter offset
sw x5, 1962 (x1) # store value to put something in memory
lb x10, 1962(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 164)

# Testcase cp_rd (Test destination rd = x11)
li x18, 0xd2ab8e51 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1286 # sub immediate from rs1 to counter offset
sw x18, 1286 (x19) # store value to put something in memory
lb x11, 1286(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rd (Test destination rd = x12)
li x12, 0xa78cd9d7 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 494 # sub immediate from rs1 to counter offset
sw x12, -494 (x8) # store value to put something in memory
lb x12, -494(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rd (Test destination rd = x13)
li x23, 0x68d290ea # initialize rs2
la x17, scratch # base address 
addi x17, x17, -613 # sub immediate from rs1 to counter offset
sw x23, 613 (x17) # store value to put something in memory
lb x13, 613(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rd (Test destination rd = x14)
li x7, 0xc423eb6b # initialize rs2
la x30, scratch # base address 
addi x30, x30, 106 # sub immediate from rs1 to counter offset
sw x7, -106 (x30) # store value to put something in memory
lb x14, -106(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rd (Test destination rd = x15)
li x12, 0x8c4fcd7b # initialize rs2
la x26, scratch # base address 
addi x26, x26, -371 # sub immediate from rs1 to counter offset
sw x12, 371 (x26) # store value to put something in memory
lb x15, 371(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rd (Test destination rd = x16)
li x11, 0x053e165c # initialize rs2
la x27, scratch # base address 
addi x27, x27, 1400 # sub immediate from rs1 to counter offset
sw x11, -1400 (x27) # store value to put something in memory
lb x16, -1400(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 188)

# Testcase cp_rd (Test destination rd = x17)
li x15, 0x82715c9c # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1338 # sub immediate from rs1 to counter offset
sw x15, 1338 (x16) # store value to put something in memory
lb x17, 1338(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rd (Test destination rd = x18)
li x5, 0x18857dd8 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -528 # sub immediate from rs1 to counter offset
sw x5, 528 (x11) # store value to put something in memory
lb x18, 528(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 196)

# Testcase cp_rd (Test destination rd = x19)
li x8, 0xfdff9e43 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1612 # sub immediate from rs1 to counter offset
sw x8, -1612 (x26) # store value to put something in memory
lb x19, -1612(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cp_rd (Test destination rd = x20)
li x8, 0x339549f7 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -532 # sub immediate from rs1 to counter offset
sw x8, 532 (x15) # store value to put something in memory
lb x20, 532(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 204)

# Testcase cp_rd (Test destination rd = x21)
li x14, 0x8cdc254f # initialize rs2
la x10, scratch # base address 
addi x10, x10, 242 # sub immediate from rs1 to counter offset
sw x14, -242 (x10) # store value to put something in memory
lb x21, -242(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rd (Test destination rd = x22)
li x7, 0x0a351a57 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -591 # sub immediate from rs1 to counter offset
sw x7, 591 (x11) # store value to put something in memory
lb x22, 591(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_rd (Test destination rd = x23)
li x7, 0x5804139e # initialize rs2
la x17, scratch # base address 
addi x17, x17, 974 # sub immediate from rs1 to counter offset
sw x7, -974 (x17) # store value to put something in memory
lb x23, -974(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rd (Test destination rd = x24)
li x7, 0x07eb10ed # initialize rs2
la x15, scratch # base address 
addi x15, x15, 520 # sub immediate from rs1 to counter offset
sw x7, -520 (x15) # store value to put something in memory
lb x24, -520(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 220)

# Testcase cp_rd (Test destination rd = x25)
li x10, 0xacfd7bc6 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1744 # sub immediate from rs1 to counter offset
sw x10, -1744 (x14) # store value to put something in memory
lb x25, -1744(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cp_rd (Test destination rd = x26)
li x28, 0x2a8c63b5 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1781 # sub immediate from rs1 to counter offset
sw x28, -1781 (x12) # store value to put something in memory
lb x26, -1781(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 228)

# Testcase cp_rd (Test destination rd = x27)
li x5, 0x03930b69 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1546 # sub immediate from rs1 to counter offset
sw x5, -1546 (x23) # store value to put something in memory
lb x27, -1546(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rd (Test destination rd = x28)
li x26, 0x033fb3c3 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1115 # sub immediate from rs1 to counter offset
sw x26, -1115 (x19) # store value to put something in memory
lb x28, -1115(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rd (Test destination rd = x29)
li x6, 0xcc4f642f # initialize rs2
la x16, scratch # base address 
addi x16, x16, 496 # sub immediate from rs1 to counter offset
sw x6, -496 (x16) # store value to put something in memory
lb x29, -496(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rd (Test destination rd = x30)
li x30, 0x44865a60 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1898 # sub immediate from rs1 to counter offset
sw x30, -1898 (x29) # store value to put something in memory
lb x30, -1898(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rd (Test destination rd = x31)
li x29, 0x892975b8 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1117 # sub immediate from rs1 to counter offset
sw x29, 1117 (x6) # store value to put something in memory
lb x31, 1117(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x8, 0xed2e624e # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1060 # sub immediate from rs1 to counter offset
sw x8, -1060 (x1) # store value to put something in memory
lb x1, -1060(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x9, 0x312c5bca # initialize rs2
la x2, scratch # base address 
addi x2, x2, -735 # sub immediate from rs1 to counter offset
sw x9, 735 (x2) # store value to put something in memory
lb x2, 735(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x30, 0x542bf020 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1476 # sub immediate from rs1 to counter offset
sw x30, 1476 (x3) # store value to put something in memory
lb x3, 1476(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x25, 0x1da0ae6a # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1774 # sub immediate from rs1 to counter offset
sw x25, 1774 (x4) # store value to put something in memory
lb x4, 1774(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x15, 0x76bf8648 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 698 # sub immediate from rs1 to counter offset
sw x15, -698 (x5) # store value to put something in memory
lb x5, -698(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0x199f6f2f # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1280 # sub immediate from rs1 to counter offset
sw x22, 1280 (x6) # store value to put something in memory
lb x6, 1280(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x6, 0x7cce804d # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1191 # sub immediate from rs1 to counter offset
sw x6, 1191 (x7) # store value to put something in memory
lb x7, 1191(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x3, 0xa37c3b32 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1716 # sub immediate from rs1 to counter offset
sw x3, -1716 (x8) # store value to put something in memory
lb x8, -1716(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x13, 0x15fd6ec9 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -303 # sub immediate from rs1 to counter offset
sw x13, 303 (x9) # store value to put something in memory
lb x9, 303(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x6, 0xf07ecd77 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 2012 # sub immediate from rs1 to counter offset
sw x6, -2012 (x10) # store value to put something in memory
lb x10, -2012(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x27, 0xd022096b # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1476 # sub immediate from rs1 to counter offset
sw x27, 1476 (x11) # store value to put something in memory
lb x11, 1476(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x15, 0x815dede9 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1553 # sub immediate from rs1 to counter offset
sw x15, -1553 (x12) # store value to put something in memory
lb x12, -1553(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x29, 0xdb98c02d # initialize rs2
la x13, scratch # base address 
addi x13, x13, -587 # sub immediate from rs1 to counter offset
sw x29, 587 (x13) # store value to put something in memory
lb x13, 587(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x24, 0xff00703b # initialize rs2
la x14, scratch # base address 
addi x14, x14, -536 # sub immediate from rs1 to counter offset
sw x24, 536 (x14) # store value to put something in memory
lb x14, 536(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x14, 0x470897f1 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1342 # sub immediate from rs1 to counter offset
sw x14, 1342 (x15) # store value to put something in memory
lb x15, 1342(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x24, 0x3790823c # initialize rs2
la x16, scratch # base address 
addi x16, x16, 656 # sub immediate from rs1 to counter offset
sw x24, -656 (x16) # store value to put something in memory
lb x16, -656(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x8, 0xc97b11a6 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -519 # sub immediate from rs1 to counter offset
sw x8, 519 (x17) # store value to put something in memory
lb x17, 519(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x23, 0x11824b76 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1094 # sub immediate from rs1 to counter offset
sw x23, 1094 (x18) # store value to put something in memory
lb x18, 1094(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x28, 0x64e754e5 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -975 # sub immediate from rs1 to counter offset
sw x28, 975 (x19) # store value to put something in memory
lb x19, 975(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x23, 0x8a181c2e # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1397 # sub immediate from rs1 to counter offset
sw x23, -1397 (x20) # store value to put something in memory
lb x20, -1397(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x18, 0x88f5b9b2 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1082 # sub immediate from rs1 to counter offset
sw x18, -1082 (x21) # store value to put something in memory
lb x21, -1082(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x29, 0xd993b6c2 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -474 # sub immediate from rs1 to counter offset
sw x29, 474 (x22) # store value to put something in memory
lb x22, 474(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x3, 0x36ff1437 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1175 # sub immediate from rs1 to counter offset
sw x3, -1175 (x23) # store value to put something in memory
lb x23, -1175(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x1, 0xbd36edcb # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1938 # sub immediate from rs1 to counter offset
sw x1, -1938 (x24) # store value to put something in memory
lb x24, -1938(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x1, 0x65135976 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -559 # sub immediate from rs1 to counter offset
sw x1, 559 (x25) # store value to put something in memory
lb x25, 559(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x3, 0x72f687cd # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1310 # sub immediate from rs1 to counter offset
sw x3, 1310 (x26) # store value to put something in memory
lb x26, 1310(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x28, 0x085b54b7 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -432 # sub immediate from rs1 to counter offset
sw x28, 432 (x27) # store value to put something in memory
lb x27, 432(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x16, 0x99b471e8 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -666 # sub immediate from rs1 to counter offset
sw x16, 666 (x28) # store value to put something in memory
lb x28, 666(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x8, 0x823b1381 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1720 # sub immediate from rs1 to counter offset
sw x8, 1720 (x29) # store value to put something in memory
lb x29, 1720(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x2, 0x33df499f # initialize rs2
la x30, scratch # base address 
addi x30, x30, -395 # sub immediate from rs1 to counter offset
sw x2, 395 (x30) # store value to put something in memory
lb x30, 395(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x11, 0xb51d1fab # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1594 # sub immediate from rs1 to counter offset
sw x11, 1594 (x31) # store value to put something in memory
lb x31, 1594(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 372)

# Testcase cp_imm_corners
li x14, 0x47460ddf # initialize rs2
la x6, scratch # base address 
addi x6, x6, 0 # sub immediate from rs1 to counter offset
sw x14, 0 (x6) # store value to put something in memory
lb x16, 0(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_imm_corners
li x29, 0x57db3756 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1 # sub immediate from rs1 to counter offset
sw x29, 1 (x16) # store value to put something in memory
lb x11, 1(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 380)

# Testcase cp_imm_corners
li x22, 0x1a864a7c # initialize rs2
la x8, scratch # base address 
addi x8, x8, -2 # sub immediate from rs1 to counter offset
sw x22, 2 (x8) # store value to put something in memory
lb x14, 2(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 384)

# Testcase cp_imm_corners
li x23, 0x06cf17f9 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -3 # sub immediate from rs1 to counter offset
sw x23, 3 (x22) # store value to put something in memory
lb x27, 3(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 388)

# Testcase cp_imm_corners
li x13, 0x70bcad4b # initialize rs2
la x26, scratch # base address 
addi x26, x26, -4 # sub immediate from rs1 to counter offset
sw x13, 4 (x26) # store value to put something in memory
lb x28, 4(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 392)

# Testcase cp_imm_corners
li x15, 0x092eab35 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -8 # sub immediate from rs1 to counter offset
sw x15, 8 (x16) # store value to put something in memory
lb x9, 8(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 396)

# Testcase cp_imm_corners
li x10, 0xde8b3de4 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -16 # sub immediate from rs1 to counter offset
sw x10, 16 (x9) # store value to put something in memory
lb x8, 16(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 400)

# Testcase cp_imm_corners
li x1, 0xae9d211f # initialize rs2
la x9, scratch # base address 
addi x9, x9, -32 # sub immediate from rs1 to counter offset
sw x1, 32 (x9) # store value to put something in memory
lb x19, 32(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 404)

# Testcase cp_imm_corners
li x31, 0xbf89dfd9 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -64 # sub immediate from rs1 to counter offset
sw x31, 64 (x25) # store value to put something in memory
lb x28, 64(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 408)

# Testcase cp_imm_corners
li x26, 0x3dd163bd # initialize rs2
la x20, scratch # base address 
addi x20, x20, -128 # sub immediate from rs1 to counter offset
sw x26, 128 (x20) # store value to put something in memory
lb x15, 128(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 412)

# Testcase cp_imm_corners
li x20, 0x357314fd # initialize rs2
la x14, scratch # base address 
addi x14, x14, -256 # sub immediate from rs1 to counter offset
sw x20, 256 (x14) # store value to put something in memory
lb x1, 256(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 416)

# Testcase cp_imm_corners
li x26, 0x9c6bc7fc # initialize rs2
la x3, scratch # base address 
addi x3, x3, -512 # sub immediate from rs1 to counter offset
sw x26, 512 (x3) # store value to put something in memory
lb x19, 512(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 420)

# Testcase cp_imm_corners
li x27, 0x51d835b6 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1023 # sub immediate from rs1 to counter offset
sw x27, 1023 (x18) # store value to put something in memory
lb x6, 1023(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 424)

# Testcase cp_imm_corners
li x16, 0x1c3a79af # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1024 # sub immediate from rs1 to counter offset
sw x16, 1024 (x20) # store value to put something in memory
lb x29, 1024(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 428)

# Testcase cp_imm_corners
li x6, 0x8625265b # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1795 # sub immediate from rs1 to counter offset
sw x6, 1795 (x22) # store value to put something in memory
lb x13, 1795(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 432)

# Testcase cp_imm_corners
li x3, 0xc2ebc436 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2047 # sub immediate from rs1 to counter offset
sw x3, 2047 (x17) # store value to put something in memory
lb x13, 2047(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 436)

# Testcase cp_imm_corners
li x29, 0xc7b391ce # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2047 # increment rs1 by 2047 
addi x1, x1, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x29, -2048 (x1) # store value to put something in memory
lb x2, -2048(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 440)

# Testcase cp_imm_corners
li x22, 0x64c97e65 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 2047 # sub immediate from rs1 to counter offset
sw x22, -2047 (x20) # store value to put something in memory
lb x1, -2047(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 444)

# Testcase cp_imm_corners
li x15, 0xd5d1f941 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 2 # sub immediate from rs1 to counter offset
sw x15, -2 (x13) # store value to put something in memory
lb x14, -2(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 448)

# Testcase cp_imm_corners
li x12, 0x77b5ed27 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1 # sub immediate from rs1 to counter offset
sw x12, -1 (x8) # store value to put something in memory
lb x23, -1(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 452)

# Testcase cp_gpr/fpr_hazard nohaz test
la x24, scratch
addi x24, x24, -609
add x26, x11, x23 # perform first operation
lb x18, 609(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x15, scratch
addi x15, x15, -1530
add x28, x22, x24 # perform first operation
lb x2, 1530(x15) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x28, scratch
addi x28, x28, 1808
add x6, x5, x26 # perform first operation
lb x18, -1808(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x22, scratch
addi x22, x22, 971
add x22, x22, x0 # perform first operation
lb x20, -971(x22) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x23, scratch
addi x23, x23, 2016
add x23, x23, x0 # perform first operation
lb x31, -2016(x23) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x26, scratch
addi x26, x26, -15
add x26, x26, x0 # perform first operation
lb x24, 15(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x21, scratch
addi x21, x21, 1051
add x26, x2, x29 # perform first operation
lb x26, -1051(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x2, scratch
addi x2, x2, -1065
add x23, x6, x7 # perform first operation
lb x23, 1065(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x25, scratch
addi x25, x25, -1843
add x27, x7, x26 # perform first operation
lb x27, 1843(x25) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x17, scratch
addi x17, x17, -1404
add x16, x9, x25 # perform first operation
lb x9, 1404(x17) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x9, scratch
addi x9, x9, -377
add x31, x25, x13 # perform first operation
lb x13, 377(x9) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x24, scratch
addi x24, x24, 1421
add x14, x27, x29 # perform first operation
lb x26, -1421(x24) # perform second (triggering) operation

#.EQU SIGSIZE,456


// ******************
// Tests from: WALLY-COV-bge.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2579d099 # initialize rs1
li x14, 0x56652e1c # initialize rs2
bge x0, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x56652e1c # initialize rs1
li x14, 0x56652e1c # initialize rs2
bge x0, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xc0762d46 # initialize rs1
li x28, 0xfc45a6de # initialize rs2
bge x1, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfc45a6de # initialize rs1
li x28, 0xfc45a6de # initialize rs2
bge x1, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xee29cb17 # initialize rs1
li x16, 0xcd6321bc # initialize rs2
bge x2, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xcd6321bc # initialize rs1
li x16, 0xcd6321bc # initialize rs2
bge x2, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x23bef9b5 # initialize rs1
li x24, 0x2ddc6dd7 # initialize rs2
bge x3, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x2ddc6dd7 # initialize rs1
li x24, 0x2ddc6dd7 # initialize rs2
bge x3, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x18f56c3a # initialize rs1
li x30, 0xf0802ea6 # initialize rs2
bge x4, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xf0802ea6 # initialize rs1
li x30, 0xf0802ea6 # initialize rs2
bge x4, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xfb156d4c # initialize rs1
li x14, 0x26768108 # initialize rs2
bge x5, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x26768108 # initialize rs1
li x14, 0x26768108 # initialize rs2
bge x5, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe3b19fe4 # initialize rs1
li x9, 0xdfaaf7c6 # initialize rs2
bge x6, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xdfaaf7c6 # initialize rs1
li x9, 0xdfaaf7c6 # initialize rs2
bge x6, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x825e853d # initialize rs1
li x22, 0x2adc0c76 # initialize rs2
bge x7, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x2adc0c76 # initialize rs1
li x22, 0x2adc0c76 # initialize rs2
bge x7, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xab7b7d45 # initialize rs1
li x3, 0x53ecf55d # initialize rs2
bge x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x53ecf55d # initialize rs1
li x3, 0x53ecf55d # initialize rs2
bge x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x29efe089 # initialize rs1
li x15, 0x3b7a63c5 # initialize rs2
bge x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x3b7a63c5 # initialize rs1
li x15, 0x3b7a63c5 # initialize rs2
bge x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x9266f8a6 # initialize rs1
li x28, 0xce0146b9 # initialize rs2
bge x10, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xce0146b9 # initialize rs1
li x28, 0xce0146b9 # initialize rs2
bge x10, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x2e078943 # initialize rs1
li x25, 0x856c3502 # initialize rs2
bge x11, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x856c3502 # initialize rs1
li x25, 0x856c3502 # initialize rs2
bge x11, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xc1550bd3 # initialize rs1
li x18, 0x58a8450c # initialize rs2
bge x12, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x58a8450c # initialize rs1
li x18, 0x58a8450c # initialize rs2
bge x12, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xdc2041f5 # initialize rs1
li x23, 0x2e9df91d # initialize rs2
bge x13, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x2e9df91d # initialize rs1
li x23, 0x2e9df91d # initialize rs2
bge x13, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xebc2ba1b # initialize rs1
li x30, 0x7f6d3537 # initialize rs2
bge x14, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7f6d3537 # initialize rs1
li x30, 0x7f6d3537 # initialize rs2
bge x14, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x58977d9e # initialize rs1
li x8, 0x51f6ff85 # initialize rs2
bge x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x51f6ff85 # initialize rs1
li x8, 0x51f6ff85 # initialize rs2
bge x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x62587012 # initialize rs1
li x24, 0xedc8b63e # initialize rs2
bge x16, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xedc8b63e # initialize rs1
li x24, 0xedc8b63e # initialize rs2
bge x16, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xddc2307a # initialize rs1
li x9, 0x353a76ba # initialize rs2
bge x17, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x353a76ba # initialize rs1
li x9, 0x353a76ba # initialize rs2
bge x17, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xab74d431 # initialize rs1
li x11, 0x35532b80 # initialize rs2
bge x18, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x35532b80 # initialize rs1
li x11, 0x35532b80 # initialize rs2
bge x18, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe3858c0c # initialize rs1
li x9, 0xe074a012 # initialize rs2
bge x19, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xe074a012 # initialize rs1
li x9, 0xe074a012 # initialize rs2
bge x19, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x83b8f6c5 # initialize rs1
li x27, 0x57bd084c # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x57bd084c # initialize rs1
li x27, 0x57bd084c # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x7e1edaae # initialize rs1
li x23, 0x02bffa96 # initialize rs2
bge x21, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x02bffa96 # initialize rs1
li x23, 0x02bffa96 # initialize rs2
bge x21, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x5b6ecfd0 # initialize rs1
li x31, 0xdbf9c9f5 # initialize rs2
bge x22, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xdbf9c9f5 # initialize rs1
li x31, 0xdbf9c9f5 # initialize rs2
bge x22, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x0b2b0fff # initialize rs1
li x13, 0x50bf9d00 # initialize rs2
bge x23, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x50bf9d00 # initialize rs1
li x13, 0x50bf9d00 # initialize rs2
bge x23, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x8a0aca01 # initialize rs1
li x28, 0xfafa8526 # initialize rs2
bge x24, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xfafa8526 # initialize rs1
li x28, 0xfafa8526 # initialize rs2
bge x24, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x1f468e18 # initialize rs1
li x31, 0x7cda142a # initialize rs2
bge x25, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7cda142a # initialize rs1
li x31, 0x7cda142a # initialize rs2
bge x25, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9e6a48de # initialize rs1
li x18, 0x40d06e65 # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x40d06e65 # initialize rs1
li x18, 0x40d06e65 # initialize rs2
bge x26, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x3e025344 # initialize rs1
li x23, 0x8f01ffd6 # initialize rs2
bge x27, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x8f01ffd6 # initialize rs1
li x23, 0x8f01ffd6 # initialize rs2
bge x27, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xb6e85467 # initialize rs1
li x8, 0x418ffa7f # initialize rs2
bge x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x418ffa7f # initialize rs1
li x8, 0x418ffa7f # initialize rs2
bge x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x906daeb2 # initialize rs1
li x16, 0x74903b46 # initialize rs2
bge x29, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x74903b46 # initialize rs1
li x16, 0x74903b46 # initialize rs2
bge x29, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x553379c8 # initialize rs1
li x26, 0xa162c245 # initialize rs2
bge x30, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xa162c245 # initialize rs1
li x26, 0xa162c245 # initialize rs2
bge x30, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x664a2cfe # initialize rs1
li x13, 0x5234bf86 # initialize rs2
bge x31, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5234bf86 # initialize rs1
li x13, 0x5234bf86 # initialize rs2
bge x31, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x5, 0x45330571 # initialize rs1
li x0, 0x5c52c751 # initialize rs2
bge x5, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x5c52c751 # initialize rs1
li x0, 0x5c52c751 # initialize rs2
bge x5, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x27, 0xe33e977c # initialize rs1
li x1, 0x23ef8fc9 # initialize rs2
bge x27, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x23ef8fc9 # initialize rs1
li x1, 0x23ef8fc9 # initialize rs2
bge x27, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x28, 0x392666d9 # initialize rs1
li x2, 0x72299c90 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x72299c90 # initialize rs1
li x2, 0x72299c90 # initialize rs2
bge x28, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x25, 0x298f82ca # initialize rs1
li x3, 0x08b63974 # initialize rs2
bge x25, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x08b63974 # initialize rs1
li x3, 0x08b63974 # initialize rs2
bge x25, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0x47fde0ee # initialize rs1
li x4, 0xfd866e3c # initialize rs2
bge x22, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfd866e3c # initialize rs1
li x4, 0xfd866e3c # initialize rs2
bge x22, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x1, 0x27bf5941 # initialize rs1
li x5, 0xac48714d # initialize rs2
bge x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xac48714d # initialize rs1
li x5, 0xac48714d # initialize rs2
bge x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x12, 0xe9e7012b # initialize rs1
li x6, 0xed011d89 # initialize rs2
bge x12, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xed011d89 # initialize rs1
li x6, 0xed011d89 # initialize rs2
bge x12, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x26, 0x3e78b532 # initialize rs1
li x7, 0x090df37d # initialize rs2
bge x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x090df37d # initialize rs1
li x7, 0x090df37d # initialize rs2
bge x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x14, 0xfdbffc6a # initialize rs1
li x8, 0xd443af06 # initialize rs2
bge x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xd443af06 # initialize rs1
li x8, 0xd443af06 # initialize rs2
bge x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x16, 0xf9192576 # initialize rs1
li x9, 0x09ee9fe7 # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x09ee9fe7 # initialize rs1
li x9, 0x09ee9fe7 # initialize rs2
bge x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x29, 0x5c9de837 # initialize rs1
li x10, 0x9ef01603 # initialize rs2
bge x29, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x9ef01603 # initialize rs1
li x10, 0x9ef01603 # initialize rs2
bge x29, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x31, 0xc8f1c4b4 # initialize rs1
li x11, 0xb0d088b5 # initialize rs2
bge x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xb0d088b5 # initialize rs1
li x11, 0xb0d088b5 # initialize rs2
bge x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x7, 0xd009ac4d # initialize rs1
li x12, 0x51e20213 # initialize rs2
bge x7, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x51e20213 # initialize rs1
li x12, 0x51e20213 # initialize rs2
bge x7, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x9, 0xea7d7593 # initialize rs1
li x13, 0xd3c0b9a5 # initialize rs2
bge x9, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xd3c0b9a5 # initialize rs1
li x13, 0xd3c0b9a5 # initialize rs2
bge x9, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x26, 0x65767898 # initialize rs1
li x14, 0x2979cf34 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x2979cf34 # initialize rs1
li x14, 0x2979cf34 # initialize rs2
bge x26, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x5, 0x232af13d # initialize rs1
li x15, 0x70bdbc09 # initialize rs2
bge x5, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x70bdbc09 # initialize rs1
li x15, 0x70bdbc09 # initialize rs2
bge x5, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x13, 0x8cc737c1 # initialize rs1
li x16, 0x8988b3fd # initialize rs2
bge x13, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8988b3fd # initialize rs1
li x16, 0x8988b3fd # initialize rs2
bge x13, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x20, 0x98a17398 # initialize rs1
li x17, 0x43708dc2 # initialize rs2
bge x20, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x43708dc2 # initialize rs1
li x17, 0x43708dc2 # initialize rs2
bge x20, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x22, 0xcd46a346 # initialize rs1
li x18, 0x7117492e # initialize rs2
bge x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7117492e # initialize rs1
li x18, 0x7117492e # initialize rs2
bge x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x15, 0xd312f9f2 # initialize rs1
li x19, 0xd96ff911 # initialize rs2
bge x15, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xd96ff911 # initialize rs1
li x19, 0xd96ff911 # initialize rs2
bge x15, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x12, 0x5a5bce4b # initialize rs1
li x20, 0x844507e0 # initialize rs2
bge x12, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x844507e0 # initialize rs1
li x20, 0x844507e0 # initialize rs2
bge x12, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x23, 0x0f62031c # initialize rs1
li x21, 0x4a9affa2 # initialize rs2
bge x23, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x4a9affa2 # initialize rs1
li x21, 0x4a9affa2 # initialize rs2
bge x23, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x11, 0xe9cd192c # initialize rs1
li x22, 0x18631122 # initialize rs2
bge x11, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x18631122 # initialize rs1
li x22, 0x18631122 # initialize rs2
bge x11, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x26, 0xe1fc434a # initialize rs1
li x23, 0x4d409153 # initialize rs2
bge x26, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x4d409153 # initialize rs1
li x23, 0x4d409153 # initialize rs2
bge x26, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x25, 0x6d0172a2 # initialize rs1
li x24, 0x186925b2 # initialize rs2
bge x25, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x186925b2 # initialize rs1
li x24, 0x186925b2 # initialize rs2
bge x25, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x17, 0x360f4c41 # initialize rs1
li x25, 0xb922c47d # initialize rs2
bge x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xb922c47d # initialize rs1
li x25, 0xb922c47d # initialize rs2
bge x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x18, 0x94c83c60 # initialize rs1
li x26, 0x6a3fa8b2 # initialize rs2
bge x18, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x6a3fa8b2 # initialize rs1
li x26, 0x6a3fa8b2 # initialize rs2
bge x18, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x6, 0x366363bf # initialize rs1
li x27, 0x2fb2c058 # initialize rs2
bge x6, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x2fb2c058 # initialize rs1
li x27, 0x2fb2c058 # initialize rs2
bge x6, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x22, 0x5fbbe960 # initialize rs1
li x28, 0xc68848ba # initialize rs2
bge x22, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xc68848ba # initialize rs1
li x28, 0xc68848ba # initialize rs2
bge x22, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x26, 0x756fb401 # initialize rs1
li x29, 0xc567aef4 # initialize rs2
bge x26, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xc567aef4 # initialize rs1
li x29, 0xc567aef4 # initialize rs2
bge x26, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x6, 0x1b45ee23 # initialize rs1
li x30, 0xccafd82c # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xccafd82c # initialize rs1
li x30, 0xccafd82c # initialize rs2
bge x6, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x11, 0x9f76b624 # initialize rs1
li x31, 0x8e0bcd02 # initialize rs2
bge x11, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x8e0bcd02 # initialize rs1
li x31, 0x8e0bcd02 # initialize rs2
bge x11, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x14, 0x00000000 # initialize rs1
li x5, 0x7629c0d1 # initialize rs2
bge x14, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7629c0d1 # initialize rs1
li x5, 0x7629c0d1 # initialize rs2
bge x14, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x24, 0x00000001 # initialize rs1
li x2, 0x16dc73b7 # initialize rs2
bge x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x16dc73b7 # initialize rs1
li x2, 0x16dc73b7 # initialize rs2
bge x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x31, 0x00000002 # initialize rs1
li x3, 0x9056cb1f # initialize rs2
bge x31, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x9056cb1f # initialize rs1
li x3, 0x9056cb1f # initialize rs2
bge x31, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x14, 0x80000000 # initialize rs1
li x16, 0x47c0cdf7 # initialize rs2
bge x14, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x47c0cdf7 # initialize rs1
li x16, 0x47c0cdf7 # initialize rs2
bge x14, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x9, 0x80000001 # initialize rs1
li x14, 0xdea01186 # initialize rs2
bge x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xdea01186 # initialize rs1
li x14, 0xdea01186 # initialize rs2
bge x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x24, 0x7fffffff # initialize rs1
li x3, 0xae52a100 # initialize rs2
bge x24, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xae52a100 # initialize rs1
li x3, 0xae52a100 # initialize rs2
bge x24, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x6, 0x7ffffffe # initialize rs1
li x13, 0xbeecaa59 # initialize rs2
bge x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xbeecaa59 # initialize rs1
li x13, 0xbeecaa59 # initialize rs2
bge x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0xffffffff # initialize rs1
li x6, 0xb707add4 # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xb707add4 # initialize rs1
li x6, 0xb707add4 # initialize rs2
bge x9, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x8, 0xfffffffe # initialize rs1
li x14, 0x59d330cc # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x59d330cc # initialize rs1
li x14, 0x59d330cc # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x25, 0x5bbc8872 # initialize rs1
li x1, 0x5804b966 # initialize rs2
bge x25, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5804b966 # initialize rs1
li x1, 0x5804b966 # initialize rs2
bge x25, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x25, 0xaaaaaaaa # initialize rs1
li x12, 0x18768962 # initialize rs2
bge x25, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x18768962 # initialize rs1
li x12, 0x18768962 # initialize rs2
bge x25, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x10, 0x55555555 # initialize rs1
li x5, 0x86035dd7 # initialize rs2
bge x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x86035dd7 # initialize rs1
li x5, 0x86035dd7 # initialize rs2
bge x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x11, 0xb2a9f0ed # initialize rs1
li x20, 0x00000000 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
bge x11, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x14, 0xee3af287 # initialize rs1
li x15, 0x00000001 # initialize rs2
bge x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
bge x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x26, 0xbc6e6218 # initialize rs1
li x27, 0x00000002 # initialize rs2
bge x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000002 # initialize rs1
li x27, 0x00000002 # initialize rs2
bge x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x23, 0x42798e4a # initialize rs1
li x12, 0x80000000 # initialize rs2
bge x23, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000000 # initialize rs1
li x12, 0x80000000 # initialize rs2
bge x23, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x11, 0xbfc9b39f # initialize rs1
li x5, 0x80000001 # initialize rs2
bge x11, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x80000001 # initialize rs1
li x5, 0x80000001 # initialize rs2
bge x11, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x24, 0xf22e5c8c # initialize rs1
li x8, 0x7fffffff # initialize rs2
bge x24, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffff # initialize rs1
li x8, 0x7fffffff # initialize rs2
bge x24, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x28, 0x116d942d # initialize rs1
li x25, 0x7ffffffe # initialize rs2
bge x28, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffe # initialize rs1
li x25, 0x7ffffffe # initialize rs2
bge x28, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x21, 0x8f777529 # initialize rs1
li x9, 0xffffffff # initialize rs2
bge x21, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xffffffff # initialize rs1
li x9, 0xffffffff # initialize rs2
bge x21, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x31, 0x86a918ef # initialize rs1
li x5, 0xfffffffe # initialize rs2
bge x31, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bge x31, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x10, 0x0ac057e7 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bge x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bge x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x13, 0x7a8d962e # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
bge x13, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
bge x13, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x22, 0x2bbc6ac9 # initialize rs1
li x30, 0x55555555 # initialize rs2
bge x22, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x30, 0x55555555 # initialize rs2
bge x22, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x30, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bge x30, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bge x30, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x17, 0x00000000 # initialize rs1
li x11, 0x00000001 # initialize rs2
bge x17, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000001 # initialize rs1
li x11, 0x00000001 # initialize rs2
bge x17, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x3, 0x00000000 # initialize rs1
li x9, 0x00000002 # initialize rs2
bge x3, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000002 # initialize rs1
li x9, 0x00000002 # initialize rs2
bge x3, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x29, 0x00000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x29, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x29, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x23, 0x00000000 # initialize rs1
li x12, 0x80000001 # initialize rs2
bge x23, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000001 # initialize rs1
li x12, 0x80000001 # initialize rs2
bge x23, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x12, 0x00000000 # initialize rs1
li x3, 0x7fffffff # initialize rs2
bge x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x7fffffff # initialize rs1
li x3, 0x7fffffff # initialize rs2
bge x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x28, 0x00000000 # initialize rs1
li x20, 0x7ffffffe # initialize rs2
bge x28, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffe # initialize rs1
li x20, 0x7ffffffe # initialize rs2
bge x28, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x23, 0x00000000 # initialize rs1
li x3, 0xffffffff # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffff # initialize rs1
li x3, 0xffffffff # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x16, 0x00000000 # initialize rs1
li x11, 0xfffffffe # initialize rs2
bge x16, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
bge x16, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x6, 0x00000000 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bge x6, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5bbc8872 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
bge x6, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x27, 0x00000000 # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
bge x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
bge x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x25, 0x00000000 # initialize rs1
li x5, 0x55555555 # initialize rs2
bge x25, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x55555555 # initialize rs1
li x5, 0x55555555 # initialize rs2
bge x25, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x22, 0x00000001 # initialize rs1
li x17, 0x00000000 # initialize rs2
bge x22, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000000 # initialize rs1
li x17, 0x00000000 # initialize rs2
bge x22, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x29, 0x00000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
bge x29, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
bge x29, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x11, 0x00000001 # initialize rs1
li x6, 0x00000002 # initialize rs2
bge x11, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000002 # initialize rs1
li x6, 0x00000002 # initialize rs2
bge x11, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x6, 0x00000001 # initialize rs1
li x14, 0x80000000 # initialize rs2
bge x6, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x80000000 # initialize rs1
li x14, 0x80000000 # initialize rs2
bge x6, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x22, 0x00000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
bge x22, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x10, 0x00000001 # initialize rs1
li x11, 0x7fffffff # initialize rs2
bge x10, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffff # initialize rs1
li x11, 0x7fffffff # initialize rs2
bge x10, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x17, 0x00000001 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
bge x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffe # initialize rs1
li x10, 0x7ffffffe # initialize rs2
bge x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x17, 0x00000001 # initialize rs1
li x1, 0xffffffff # initialize rs2
bge x17, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffff # initialize rs1
li x1, 0xffffffff # initialize rs2
bge x17, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x8, 0x00000001 # initialize rs1
li x22, 0xfffffffe # initialize rs2
bge x8, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffe # initialize rs1
li x22, 0xfffffffe # initialize rs2
bge x8, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x22, 0x00000001 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x5bbc8872 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x10, 0x00000001 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bge x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
bge x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x10, 0x00000001 # initialize rs1
li x26, 0x55555555 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x55555555 # initialize rs1
li x26, 0x55555555 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x21, 0x00000002 # initialize rs1
li x20, 0x00000000 # initialize rs2
bge x21, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
bge x21, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x31, 0x00000002 # initialize rs1
li x22, 0x00000001 # initialize rs2
bge x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
bge x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x14, 0x00000002 # initialize rs1
li x15, 0x00000002 # initialize rs2
bge x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000002 # initialize rs1
li x15, 0x00000002 # initialize rs2
bge x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x12, 0x00000002 # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x12, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x12, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x17, 0x00000002 # initialize rs1
li x21, 0x80000001 # initialize rs2
bge x17, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x21, 0x80000001 # initialize rs2
bge x17, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x27, 0x00000002 # initialize rs1
li x14, 0x7fffffff # initialize rs2
bge x27, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7fffffff # initialize rs1
li x14, 0x7fffffff # initialize rs2
bge x27, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x3, 0x00000002 # initialize rs1
li x25, 0x7ffffffe # initialize rs2
bge x3, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7ffffffe # initialize rs1
li x25, 0x7ffffffe # initialize rs2
bge x3, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x7, 0x00000002 # initialize rs1
li x23, 0xffffffff # initialize rs2
bge x7, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x23, 0xffffffff # initialize rs2
bge x7, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x20, 0x00000002 # initialize rs1
li x8, 0xfffffffe # initialize rs2
bge x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xfffffffe # initialize rs1
li x8, 0xfffffffe # initialize rs2
bge x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x10, 0x00000002 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc8872 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
bge x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x9, 0x00000002 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bge x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bge x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x11, 0x00000002 # initialize rs1
li x10, 0x55555555 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x55555555 # initialize rs1
li x10, 0x55555555 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x24, 0x80000000 # initialize rs1
li x1, 0x00000000 # initialize rs2
bge x24, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000 # initialize rs1
li x1, 0x00000000 # initialize rs2
bge x24, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x8, 0x80000000 # initialize rs1
li x30, 0x00000001 # initialize rs2
bge x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000001 # initialize rs1
li x30, 0x00000001 # initialize rs2
bge x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x3, 0x80000000 # initialize rs1
li x29, 0x00000002 # initialize rs2
bge x3, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000002 # initialize rs1
li x29, 0x00000002 # initialize rs2
bge x3, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x19, 0x80000000 # initialize rs1
li x7, 0x80000000 # initialize rs2
bge x19, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000000 # initialize rs1
li x7, 0x80000000 # initialize rs2
bge x19, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x8, 0x80000000 # initialize rs1
li x14, 0x80000001 # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x80000001 # initialize rs1
li x14, 0x80000001 # initialize rs2
bge x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x20, 0x80000000 # initialize rs1
li x22, 0x7fffffff # initialize rs2
bge x20, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
bge x20, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x23, 0x80000000 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x9, 0x80000000 # initialize rs1
li x14, 0xffffffff # initialize rs2
bge x9, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xffffffff # initialize rs1
li x14, 0xffffffff # initialize rs2
bge x9, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x15, 0x80000000 # initialize rs1
li x5, 0xfffffffe # initialize rs2
bge x15, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bge x15, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x14, 0x80000000 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
bge x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc8872 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
bge x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x13, 0x80000000 # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
bge x13, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaa # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
bge x13, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x14, 0x80000000 # initialize rs1
li x24, 0x55555555 # initialize rs2
bge x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x55555555 # initialize rs1
li x24, 0x55555555 # initialize rs2
bge x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x24, 0x80000001 # initialize rs1
li x15, 0x00000000 # initialize rs2
bge x24, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
bge x24, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x21, 0x80000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
bge x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
bge x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x12, 0x80000001 # initialize rs1
li x15, 0x00000002 # initialize rs2
bge x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000002 # initialize rs1
li x15, 0x00000002 # initialize rs2
bge x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x7, 0x80000001 # initialize rs1
li x5, 0x80000000 # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000000 # initialize rs1
li x5, 0x80000000 # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x3, 0x80000001 # initialize rs1
li x31, 0x80000001 # initialize rs2
bge x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x80000001 # initialize rs1
li x31, 0x80000001 # initialize rs2
bge x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x9, 0x80000001 # initialize rs1
li x5, 0x7fffffff # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffff # initialize rs1
li x5, 0x7fffffff # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x20, 0x80000001 # initialize rs1
li x28, 0x7ffffffe # initialize rs2
bge x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x28, 0x7ffffffe # initialize rs2
bge x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x21, 0x80000001 # initialize rs1
li x6, 0xffffffff # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xffffffff # initialize rs1
li x6, 0xffffffff # initialize rs2
bge x21, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x21, 0x80000001 # initialize rs1
li x25, 0xfffffffe # initialize rs2
bge x21, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffe # initialize rs1
li x25, 0xfffffffe # initialize rs2
bge x21, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x11, 0x80000001 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
bge x11, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc8872 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
bge x11, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x2, 0x80000001 # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
bge x2, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
bge x2, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x8, 0x80000001 # initialize rs1
li x11, 0x55555555 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x55555555 # initialize rs1
li x11, 0x55555555 # initialize rs2
bge x8, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x1, 0x7fffffff # initialize rs1
li x29, 0x00000000 # initialize rs2
bge x1, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000 # initialize rs1
li x29, 0x00000000 # initialize rs2
bge x1, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x5, 0x7fffffff # initialize rs1
li x22, 0x00000001 # initialize rs2
bge x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
bge x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x9, 0x7fffffff # initialize rs1
li x10, 0x00000002 # initialize rs2
bge x9, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000002 # initialize rs1
li x10, 0x00000002 # initialize rs2
bge x9, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x19, 0x7fffffff # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x19, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
bge x19, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x10, 0x7fffffff # initialize rs1
li x26, 0x80000001 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000001 # initialize rs1
li x26, 0x80000001 # initialize rs2
bge x10, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x13, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bge x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bge x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x22, 0x7fffffff # initialize rs1
li x31, 0x7ffffffe # initialize rs2
bge x22, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7ffffffe # initialize rs1
li x31, 0x7ffffffe # initialize rs2
bge x22, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x26, 0x7fffffff # initialize rs1
li x9, 0xffffffff # initialize rs2
bge x26, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffff # initialize rs1
li x9, 0xffffffff # initialize rs2
bge x26, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x23, 0x7fffffff # initialize rs1
li x26, 0xfffffffe # initialize rs2
bge x23, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x26, 0xfffffffe # initialize rs2
bge x23, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x1, 0x7fffffff # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
bge x1, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc8872 # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
bge x1, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x25, 0x7fffffff # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
bge x25, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x25, 0x7fffffff # initialize rs1
li x26, 0x55555555 # initialize rs2
bge x25, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x55555555 # initialize rs1
li x26, 0x55555555 # initialize rs2
bge x25, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x2, 0x7ffffffe # initialize rs1
li x3, 0x00000000 # initialize rs2
bge x2, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000000 # initialize rs1
li x3, 0x00000000 # initialize rs2
bge x2, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x13, 0x7ffffffe # initialize rs1
li x24, 0x00000001 # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x7, 0x7ffffffe # initialize rs1
li x1, 0x00000002 # initialize rs2
bge x7, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000002 # initialize rs1
li x1, 0x00000002 # initialize rs2
bge x7, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x6, 0x7ffffffe # initialize rs1
li x7, 0x80000000 # initialize rs2
bge x6, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x80000000 # initialize rs1
li x7, 0x80000000 # initialize rs2
bge x6, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x27, 0x7ffffffe # initialize rs1
li x18, 0x80000001 # initialize rs2
bge x27, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
bge x27, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x10, 0x7ffffffe # initialize rs1
li x9, 0x7fffffff # initialize rs2
bge x10, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
bge x10, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x20, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bge x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x15, 0x7ffffffe # initialize rs1
li x11, 0xffffffff # initialize rs2
bge x15, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffff # initialize rs1
li x11, 0xffffffff # initialize rs2
bge x15, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x13, 0x7ffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bge x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x8, 0x7ffffffe # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x1, 0x7ffffffe # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
bge x1, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xaaaaaaaa # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
bge x1, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x24, 0x7ffffffe # initialize rs1
li x14, 0x55555555 # initialize rs2
bge x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55555555 # initialize rs1
li x14, 0x55555555 # initialize rs2
bge x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x8, 0xffffffff # initialize rs1
li x31, 0x00000000 # initialize rs2
bge x8, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000 # initialize rs1
li x31, 0x00000000 # initialize rs2
bge x8, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x7, 0xffffffff # initialize rs1
li x12, 0x00000001 # initialize rs2
bge x7, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
bge x7, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x15, 0xffffffff # initialize rs1
li x31, 0x00000002 # initialize rs2
bge x15, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000002 # initialize rs1
li x31, 0x00000002 # initialize rs2
bge x15, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x31, 0xffffffff # initialize rs1
li x12, 0x80000000 # initialize rs2
bge x31, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x80000000 # initialize rs1
li x12, 0x80000000 # initialize rs2
bge x31, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x3, 0xffffffff # initialize rs1
li x19, 0x80000001 # initialize rs2
bge x3, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x80000001 # initialize rs1
li x19, 0x80000001 # initialize rs2
bge x3, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x14, 0xffffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bge x14, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bge x14, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x15, 0xffffffff # initialize rs1
li x19, 0x7ffffffe # initialize rs2
bge x15, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffe # initialize rs1
li x19, 0x7ffffffe # initialize rs2
bge x15, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x7, 0xffffffff # initialize rs1
li x20, 0xffffffff # initialize rs2
bge x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x20, 0xffffffff # initialize rs2
bge x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x21, 0xffffffff # initialize rs1
li x27, 0xfffffffe # initialize rs2
bge x21, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffe # initialize rs1
li x27, 0xfffffffe # initialize rs2
bge x21, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x11, 0xffffffff # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc8872 # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
bge x11, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x14, 0xffffffff # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
bge x14, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
bge x14, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x28, 0xffffffff # initialize rs1
li x11, 0x55555555 # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x55555555 # initialize rs1
li x11, 0x55555555 # initialize rs2
bge x28, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x9, 0xfffffffe # initialize rs1
li x28, 0x00000000 # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000 # initialize rs1
li x28, 0x00000000 # initialize rs2
bge x9, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x15, 0xfffffffe # initialize rs1
li x30, 0x00000001 # initialize rs2
bge x15, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000001 # initialize rs1
li x30, 0x00000001 # initialize rs2
bge x15, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x16, 0xfffffffe # initialize rs1
li x17, 0x00000002 # initialize rs2
bge x16, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000002 # initialize rs1
li x17, 0x00000002 # initialize rs2
bge x16, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x7, 0xfffffffe # initialize rs1
li x25, 0x80000000 # initialize rs2
bge x7, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000000 # initialize rs1
li x25, 0x80000000 # initialize rs2
bge x7, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x25, 0xfffffffe # initialize rs1
li x30, 0x80000001 # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x80000001 # initialize rs1
li x30, 0x80000001 # initialize rs2
bge x25, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x1, 0xfffffffe # initialize rs1
li x2, 0x7fffffff # initialize rs2
bge x1, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7fffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
bge x1, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x22, 0xfffffffe # initialize rs1
li x13, 0x7ffffffe # initialize rs2
bge x22, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7ffffffe # initialize rs1
li x13, 0x7ffffffe # initialize rs2
bge x22, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x23, 0xfffffffe # initialize rs1
li x3, 0xffffffff # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffff # initialize rs1
li x3, 0xffffffff # initialize rs2
bge x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x19, 0xfffffffe # initialize rs1
li x29, 0xfffffffe # initialize rs2
bge x19, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffe # initialize rs1
li x29, 0xfffffffe # initialize rs2
bge x19, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x7, 0xfffffffe # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
bge x7, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc8872 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
bge x7, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x19, 0xfffffffe # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bge x19, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bge x19, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x24, 0xfffffffe # initialize rs1
li x13, 0x55555555 # initialize rs2
bge x24, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55555555 # initialize rs1
li x13, 0x55555555 # initialize rs2
bge x24, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x14, 0x5bbc8872 # initialize rs1
li x29, 0x00000000 # initialize rs2
bge x14, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000 # initialize rs1
li x29, 0x00000000 # initialize rs2
bge x14, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x2, 0x5bbc8872 # initialize rs1
li x21, 0x00000001 # initialize rs2
bge x2, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000001 # initialize rs1
li x21, 0x00000001 # initialize rs2
bge x2, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x6, 0x5bbc8872 # initialize rs1
li x25, 0x00000002 # initialize rs2
bge x6, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000002 # initialize rs1
li x25, 0x00000002 # initialize rs2
bge x6, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x2, 0x5bbc8872 # initialize rs1
li x28, 0x80000000 # initialize rs2
bge x2, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x80000000 # initialize rs1
li x28, 0x80000000 # initialize rs2
bge x2, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x12, 0x5bbc8872 # initialize rs1
li x28, 0x80000001 # initialize rs2
bge x12, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000001 # initialize rs1
li x28, 0x80000001 # initialize rs2
bge x12, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x1, 0x5bbc8872 # initialize rs1
li x17, 0x7fffffff # initialize rs2
bge x1, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7fffffff # initialize rs1
li x17, 0x7fffffff # initialize rs2
bge x1, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x5, 0x5bbc8872 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bge x5, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
bge x5, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x18, 0x5bbc8872 # initialize rs1
li x16, 0xffffffff # initialize rs2
bge x18, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffff # initialize rs1
li x16, 0xffffffff # initialize rs2
bge x18, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x21, 0x5bbc8872 # initialize rs1
li x1, 0xfffffffe # initialize rs2
bge x21, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xfffffffe # initialize rs1
li x1, 0xfffffffe # initialize rs2
bge x21, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x3, 0x5bbc8872 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bge x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc8872 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
bge x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x19, 0x5bbc8872 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
bge x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
bge x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x11, 0x5bbc8872 # initialize rs1
li x27, 0x55555555 # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x55555555 # initialize rs1
li x27, 0x55555555 # initialize rs2
bge x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x18, 0xaaaaaaaa # initialize rs1
li x16, 0x00000000 # initialize rs2
bge x18, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x16, 0x00000000 # initialize rs2
bge x18, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x12, 0xaaaaaaaa # initialize rs1
li x5, 0x00000001 # initialize rs2
bge x12, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000001 # initialize rs1
li x5, 0x00000001 # initialize rs2
bge x12, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x18, 0xaaaaaaaa # initialize rs1
li x29, 0x00000002 # initialize rs2
bge x18, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000002 # initialize rs1
li x29, 0x00000002 # initialize rs2
bge x18, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x22, 0xaaaaaaaa # initialize rs1
li x24, 0x80000000 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bge x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x12, 0xaaaaaaaa # initialize rs1
li x11, 0x80000001 # initialize rs2
bge x12, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000001 # initialize rs1
li x11, 0x80000001 # initialize rs2
bge x12, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x17, 0xaaaaaaaa # initialize rs1
li x30, 0x7fffffff # initialize rs2
bge x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7fffffff # initialize rs1
li x30, 0x7fffffff # initialize rs2
bge x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x10, 0xaaaaaaaa # initialize rs1
li x12, 0x7ffffffe # initialize rs2
bge x10, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7ffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
bge x10, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x16, 0xaaaaaaaa # initialize rs1
li x13, 0xffffffff # initialize rs2
bge x16, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xffffffff # initialize rs1
li x13, 0xffffffff # initialize rs2
bge x16, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x1, 0xaaaaaaaa # initialize rs1
li x16, 0xfffffffe # initialize rs2
bge x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xfffffffe # initialize rs1
li x16, 0xfffffffe # initialize rs2
bge x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x8, 0xaaaaaaaa # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
bge x8, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x9, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bge x9, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x7, 0xaaaaaaaa # initialize rs1
li x5, 0x55555555 # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x55555555 # initialize rs1
li x5, 0x55555555 # initialize rs2
bge x7, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x24, 0x55555555 # initialize rs1
li x22, 0x00000000 # initialize rs2
bge x24, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000 # initialize rs1
li x22, 0x00000000 # initialize rs2
bge x24, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x28, 0x55555555 # initialize rs1
li x29, 0x00000001 # initialize rs2
bge x28, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000001 # initialize rs1
li x29, 0x00000001 # initialize rs2
bge x28, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x28, 0x55555555 # initialize rs1
li x20, 0x00000002 # initialize rs2
bge x28, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
bge x28, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x21, 0x55555555 # initialize rs1
li x22, 0x80000000 # initialize rs2
bge x21, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000000 # initialize rs1
li x22, 0x80000000 # initialize rs2
bge x21, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x20, 0x55555555 # initialize rs1
li x14, 0x80000001 # initialize rs2
bge x20, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x80000001 # initialize rs1
li x14, 0x80000001 # initialize rs2
bge x20, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x13, 0x55555555 # initialize rs1
li x26, 0x7fffffff # initialize rs2
bge x13, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffff # initialize rs1
li x26, 0x7fffffff # initialize rs2
bge x13, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x22, 0x55555555 # initialize rs1
li x1, 0x7ffffffe # initialize rs2
bge x22, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7ffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
bge x22, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x10, 0x55555555 # initialize rs1
li x17, 0xffffffff # initialize rs2
bge x10, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffff # initialize rs1
li x17, 0xffffffff # initialize rs2
bge x10, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x16, 0x55555555 # initialize rs1
li x17, 0xfffffffe # initialize rs2
bge x16, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffe # initialize rs1
li x17, 0xfffffffe # initialize rs2
bge x16, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x10, 0x55555555 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
bge x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc8872 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
bge x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x27, 0x55555555 # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
bge x27, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
bge x27, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x15, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
bge x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
bge x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x6c4826d7 # initialize rs1
li x0, 0xa2915901 # initialize rs2
bge x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xa2915901 # initialize rs1
li x0, 0xa2915901 # initialize rs2
bge x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xea121e4b # initialize rs1
li x1, 0x8f7139e6 # initialize rs2
bge x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x8f7139e6 # initialize rs1
li x1, 0x8f7139e6 # initialize rs2
bge x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xa744562b # initialize rs1
li x2, 0x904a6439 # initialize rs2
bge x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x904a6439 # initialize rs1
li x2, 0x904a6439 # initialize rs2
bge x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xa585af2c # initialize rs1
li x3, 0x1571d6af # initialize rs2
bge x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x1571d6af # initialize rs1
li x3, 0x1571d6af # initialize rs2
bge x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xdbb35b16 # initialize rs1
li x4, 0x71e89f9b # initialize rs2
bge x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x71e89f9b # initialize rs1
li x4, 0x71e89f9b # initialize rs2
bge x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8861a295 # initialize rs1
li x5, 0xce274342 # initialize rs2
bge x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xce274342 # initialize rs1
li x5, 0xce274342 # initialize rs2
bge x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x36416314 # initialize rs1
li x6, 0xb4e8e7e4 # initialize rs2
bge x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xb4e8e7e4 # initialize rs1
li x6, 0xb4e8e7e4 # initialize rs2
bge x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf8f99923 # initialize rs1
li x7, 0x1d7dc677 # initialize rs2
bge x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x1d7dc677 # initialize rs1
li x7, 0x1d7dc677 # initialize rs2
bge x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xb8c87ce5 # initialize rs1
li x8, 0x9dbbbb58 # initialize rs2
bge x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x9dbbbb58 # initialize rs1
li x8, 0x9dbbbb58 # initialize rs2
bge x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x7e4bd87e # initialize rs1
li x9, 0x04a6856a # initialize rs2
bge x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x04a6856a # initialize rs1
li x9, 0x04a6856a # initialize rs2
bge x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x2d9bd9bc # initialize rs1
li x10, 0xa77ac5f0 # initialize rs2
bge x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xa77ac5f0 # initialize rs1
li x10, 0xa77ac5f0 # initialize rs2
bge x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x56bb271b # initialize rs1
li x11, 0x6c087086 # initialize rs2
bge x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x6c087086 # initialize rs1
li x11, 0x6c087086 # initialize rs2
bge x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x5a751af2 # initialize rs1
li x12, 0x48077a6a # initialize rs2
bge x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x48077a6a # initialize rs1
li x12, 0x48077a6a # initialize rs2
bge x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x459c0c32 # initialize rs1
li x13, 0x7b463107 # initialize rs2
bge x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7b463107 # initialize rs1
li x13, 0x7b463107 # initialize rs2
bge x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x2dcd93fe # initialize rs1
li x14, 0x06d5fa73 # initialize rs2
bge x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x06d5fa73 # initialize rs1
li x14, 0x06d5fa73 # initialize rs2
bge x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x79be023e # initialize rs1
li x15, 0xe320ecc2 # initialize rs2
bge x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xe320ecc2 # initialize rs1
li x15, 0xe320ecc2 # initialize rs2
bge x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xbc5f6a45 # initialize rs1
li x16, 0xe9c2c6b2 # initialize rs2
bge x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xe9c2c6b2 # initialize rs1
li x16, 0xe9c2c6b2 # initialize rs2
bge x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xfd887a56 # initialize rs1
li x17, 0x65c2a258 # initialize rs2
bge x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x65c2a258 # initialize rs1
li x17, 0x65c2a258 # initialize rs2
bge x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x4b13e526 # initialize rs1
li x18, 0xb4ca3489 # initialize rs2
bge x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xb4ca3489 # initialize rs1
li x18, 0xb4ca3489 # initialize rs2
bge x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x5ad88368 # initialize rs1
li x19, 0x6d691f91 # initialize rs2
bge x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x6d691f91 # initialize rs1
li x19, 0x6d691f91 # initialize rs2
bge x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x7058aa3e # initialize rs1
li x20, 0xc102b492 # initialize rs2
bge x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xc102b492 # initialize rs1
li x20, 0xc102b492 # initialize rs2
bge x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xd99cc866 # initialize rs1
li x21, 0x41382ab4 # initialize rs2
bge x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x41382ab4 # initialize rs1
li x21, 0x41382ab4 # initialize rs2
bge x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x2f1712a2 # initialize rs1
li x22, 0x4c5f5a49 # initialize rs2
bge x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x4c5f5a49 # initialize rs1
li x22, 0x4c5f5a49 # initialize rs2
bge x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x595d5bde # initialize rs1
li x23, 0x9a6ac160 # initialize rs2
bge x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x9a6ac160 # initialize rs1
li x23, 0x9a6ac160 # initialize rs2
bge x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x6e1639c3 # initialize rs1
li x24, 0xa1db6413 # initialize rs2
bge x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xa1db6413 # initialize rs1
li x24, 0xa1db6413 # initialize rs2
bge x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x08841d5e # initialize rs1
li x25, 0x9a6029a2 # initialize rs2
bge x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x9a6029a2 # initialize rs1
li x25, 0x9a6029a2 # initialize rs2
bge x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x217c1b9b # initialize rs1
li x26, 0xe1607069 # initialize rs2
bge x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe1607069 # initialize rs1
li x26, 0xe1607069 # initialize rs2
bge x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xc50270b9 # initialize rs1
li x27, 0xd8dec931 # initialize rs2
bge x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xd8dec931 # initialize rs1
li x27, 0xd8dec931 # initialize rs2
bge x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x4569cbf2 # initialize rs1
li x28, 0x6f2fcb72 # initialize rs2
bge x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x6f2fcb72 # initialize rs1
li x28, 0x6f2fcb72 # initialize rs2
bge x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xc972f280 # initialize rs1
li x29, 0xf8d0aa6d # initialize rs2
bge x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xf8d0aa6d # initialize rs1
li x29, 0xf8d0aa6d # initialize rs2
bge x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x77f81cf3 # initialize rs1
li x30, 0x876bd1b6 # initialize rs2
bge x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x876bd1b6 # initialize rs1
li x30, 0x876bd1b6 # initialize rs2
bge x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xe752cae8 # initialize rs1
li x31, 0x073fc6c5 # initialize rs2
bge x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x073fc6c5 # initialize rs1
li x31, 0x073fc6c5 # initialize rs2
bge x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bge x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x2, x30 # perform first operation
bge x15, x3, arbitraryLabel7
nop
arbitraryLabel7:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x8, x7, x3 # perform first operation
bge x18, x10, arbitraryLabel8
nop
arbitraryLabel8:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x3, x1 # perform first operation
bge x10, x20, arbitraryLabel9
nop
arbitraryLabel9:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x12, x3 # perform first operation
bge x26, x14, arbitraryLabel10
nop
arbitraryLabel10:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x24, x23, x11 # perform first operation
bge x26, x22, arbitraryLabel11
nop
arbitraryLabel11:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x16, x8 # perform first operation
bge x10, x1, arbitraryLabel12
nop
arbitraryLabel12:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lui.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
lui x0, 623228 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 0)

# Testcase cp_rd (Test destination rd = x1)
lui x1, 692428 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 4)

# Testcase cp_rd (Test destination rd = x2)
lui x2, 15160 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 8)

# Testcase cp_rd (Test destination rd = x3)
lui x3, 794055 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 12)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
lui x4, 518996 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
lui x5, 877279 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 20)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
lui x6, 437732 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 24)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
lui x7, 347556 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 28)

# Testcase cp_rd (Test destination rd = x8)
lui x8, 855134 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 32)

# Testcase cp_rd (Test destination rd = x9)
lui x9, 77038 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 36)

# Testcase cp_rd (Test destination rd = x10)
lui x10, 260241 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 40)

# Testcase cp_rd (Test destination rd = x11)
lui x11, 957447 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 44)

# Testcase cp_rd (Test destination rd = x12)
lui x12, 425990 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cp_rd (Test destination rd = x13)
lui x13, 761231 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 52)

# Testcase cp_rd (Test destination rd = x14)
lui x14, 32441 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 56)

# Testcase cp_rd (Test destination rd = x15)
lui x15, 1048008 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 60)

# Testcase cp_rd (Test destination rd = x16)
lui x16, 767637 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 64)

# Testcase cp_rd (Test destination rd = x17)
lui x17, 439910 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 68)

# Testcase cp_rd (Test destination rd = x18)
lui x18, 992321 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cp_rd (Test destination rd = x19)
lui x19, 126643 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 76)

# Testcase cp_rd (Test destination rd = x20)
lui x20, 72413 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 80)

# Testcase cp_rd (Test destination rd = x21)
lui x21, 222049 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 84)

# Testcase cp_rd (Test destination rd = x22)
lui x22, 668042 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 88)

# Testcase cp_rd (Test destination rd = x23)
lui x23, 621650 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 92)

# Testcase cp_rd (Test destination rd = x24)
lui x24, 262879 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 96)

# Testcase cp_rd (Test destination rd = x25)
lui x25, 724276 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 100)

# Testcase cp_rd (Test destination rd = x26)
lui x26, 319201 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 104)

# Testcase cp_rd (Test destination rd = x27)
lui x27, 762244 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 108)

# Testcase cp_rd (Test destination rd = x28)
lui x28, 866158 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cp_rd (Test destination rd = x29)
lui x29, 709381 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 116)

# Testcase cp_rd (Test destination rd = x30)
lui x30, 783076 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 120)

# Testcase cp_rd (Test destination rd = x31)
lui x31, 748639 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 124)

# Testcase cp_imm_corners
lui x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 128)

# Testcase cp_imm_corners
lui x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 132)

# Testcase cp_imm_corners
lui x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 136)

# Testcase cp_imm_corners
lui x19, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 140)

# Testcase cp_imm_corners
lui x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 144)

# Testcase cp_imm_corners
lui x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 148)

# Testcase cp_imm_corners
lui x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 152)

# Testcase cp_imm_corners
lui x21, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 156)

# Testcase cp_imm_corners
lui x24, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 160)

# Testcase cp_imm_corners
lui x26, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 164)

# Testcase cp_imm_corners
lui x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cp_imm_corners
lui x28, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 172)

# Testcase cp_imm_corners
lui x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 176)

# Testcase cp_imm_corners
lui x12, 2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 180)

# Testcase cp_imm_corners
lui x18, 4096 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 184)

# Testcase cp_imm_corners
lui x27, 8192 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 188)

# Testcase cp_imm_corners
lui x25, 16384 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 192)

# Testcase cp_imm_corners
lui x10, 32768 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 196)

# Testcase cp_imm_corners
lui x27, 65536 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 200)

# Testcase cp_imm_corners
lui x6, 131072 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 204)

# Testcase cp_imm_corners
lui x2, 262144 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 208)

# Testcase cp_imm_corners
lui x12, 524286 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 212)

# Testcase cp_imm_corners
lui x23, 524287 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_imm_corners
lui x23, 524288 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_imm_corners
lui x30, 524289 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cp_imm_corners
lui x1, 1048574 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 228)

# Testcase cp_imm_corners
lui x2, 1048575 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 232)

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x24, x29 # perform first operation
lui x7, 754621 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x3, x23, x21 # perform first operation
lui x28, 309131 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x5, x17, x24 # perform first operation
lui x31, 632010 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x5, x24, x26 # perform first operation
lui x5, 501287 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x13, x31 # perform first operation
lui x19, 587287 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x28, x30, x27 # perform first operation
lui x28, 664345 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x20, x9 # perform first operation
lui x20, 632440 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x21, x7 # perform first operation
lui x7, 578709 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x29, x12, x6 # perform first operation
lui x30, 551417 # perform second (triggering) operation

#.EQU SIGSIZE,236


// ******************
// Tests from: WALLY-COV-srl.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x08e604d4 # initialize rs1
li x22, 0xa23ae617 # initialize rs2
srl x31, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xd2767c89 # initialize rs1
li x26, 0x7ebf4c6b # initialize rs2
srl x10, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x5abd5d69 # initialize rs1
li x31, 0x0d2c518d # initialize rs2
srl x5, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xcbc6ce69 # initialize rs1
li x19, 0xe6a64b0d # initialize rs2
srl x17, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x14d6b91f # initialize rs1
li x10, 0x807c7cdd # initialize rs2
srl x31, x4, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x14691635 # initialize rs1
li x20, 0x2920d19b # initialize rs2
srl x19, x5, x20 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xe4490a08 # initialize rs1
li x19, 0x24b29a74 # initialize rs2
srl x7, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
li x7, 0xb15d0961 # initialize rs1
li x10, 0x7f46d087 # initialize rs2
srl x17, x7, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xe4469428 # initialize rs1
li x25, 0xda207657 # initialize rs2
srl x17, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x4f9adba5 # initialize rs1
li x18, 0xfd12a7eb # initialize rs2
srl x31, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x4e65371c # initialize rs1
li x2, 0x1531dc53 # initialize rs2
srl x11, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xefbccdd6 # initialize rs1
li x9, 0x0c5d078d # initialize rs2
srl x1, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x46763983 # initialize rs1
li x17, 0x0b90de33 # initialize rs2
srl x8, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x14ca954a # initialize rs1
li x18, 0x9fb83a4c # initialize rs2
srl x27, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xd78761f4 # initialize rs1
li x24, 0xd83d3a32 # initialize rs2
srl x11, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x6fbc6930 # initialize rs1
li x25, 0xaad2043b # initialize rs2
srl x27, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xf3c201ab # initialize rs1
li x25, 0x1ace2df2 # initialize rs2
srl x11, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x8472f693 # initialize rs1
li x14, 0x0ed6cb23 # initialize rs2
srl x7, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x612f1431 # initialize rs1
li x15, 0x3bbb893c # initialize rs2
srl x2, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x43506556 # initialize rs1
li x18, 0x5df0996b # initialize rs2
srl x23, x19, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xff45f48b # initialize rs1
li x6, 0xc4b4c409 # initialize rs2
srl x18, x20, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xb15cbb97 # initialize rs1
li x19, 0x25ccedad # initialize rs2
srl x2, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x41831e54 # initialize rs1
li x28, 0x96c8ab2f # initialize rs2
srl x15, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x5621818f # initialize rs1
li x1, 0x4cdfca74 # initialize rs2
srl x13, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xb18e0e36 # initialize rs1
li x31, 0xd338cd0d # initialize rs2
srl x19, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xcce652f5 # initialize rs1
li x27, 0x1b16a7e7 # initialize rs2
srl x21, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x9392abb2 # initialize rs1
li x15, 0xbcfa83c1 # initialize rs2
srl x3, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x961182f4 # initialize rs1
li x23, 0x1b60419b # initialize rs2
srl x22, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x836e8eee # initialize rs1
li x27, 0xae5e8d63 # initialize rs2
srl x6, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x0d5f2152 # initialize rs1
li x31, 0x8b9889e0 # initialize rs2
srl x2, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x43737b0a # initialize rs1
li x17, 0x1d743381 # initialize rs2
srl x6, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xd5ee1f07 # initialize rs1
li x11, 0x8780342c # initialize rs2
srl x10, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x31, 0xf3f474e7 # initialize rs1
li x0, 0xe602974a # initialize rs2
srl x13, x31, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x5, 0x78423a1b # initialize rs1
li x1, 0x06965e68 # initialize rs2
srl x31, x5, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x1, 0x9c05bd1d # initialize rs1
li x2, 0x8c8b0c1a # initialize rs2
srl x7, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x6, 0xfcdfdcb0 # initialize rs1
li x3, 0x323c7ec1 # initialize rs2
srl x24, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x19, 0xdfadeda3 # initialize rs1
li x4, 0x1b219bcc # initialize rs2
srl x12, x19, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x25, 0xf394b876 # initialize rs1
li x5, 0x9a27d976 # initialize rs2
srl x27, x25, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x27, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0xedc0eb8e # initialize rs1
li x6, 0x15601fda # initialize rs2
srl x17, x14, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x17, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0xf7455303 # initialize rs1
li x7, 0xd4afd528 # initialize rs2
srl x8, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x13, 0xf5f74acc # initialize rs1
li x8, 0x47f95443 # initialize rs2
srl x10, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x16, 0x15ffc994 # initialize rs1
li x9, 0xfd06a1f8 # initialize rs2
srl x7, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x30, 0x82d1cedb # initialize rs1
li x10, 0x9edff4ae # initialize rs2
srl x24, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x2, 0xffdde2d3 # initialize rs1
li x11, 0x96bc5657 # initialize rs2
srl x17, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x9, 0x806cdd09 # initialize rs1
li x12, 0xe76c92c1 # initialize rs2
srl x19, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x11, 0x06d8980a # initialize rs1
li x13, 0xe19cbf7d # initialize rs2
srl x3, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x30, 0x5729551d # initialize rs1
li x14, 0xcb9ff55f # initialize rs2
srl x15, x30, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x6, 0x2a1dd5ef # initialize rs1
li x15, 0xf2140b85 # initialize rs2
srl x22, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x7, 0x728d9b43 # initialize rs1
li x16, 0x26dd54c2 # initialize rs2
srl x17, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x24, 0x4574e6ac # initialize rs1
li x17, 0xfdeeb826 # initialize rs2
srl x12, x24, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x23, 0x7903ba28 # initialize rs1
li x18, 0x9809cf1e # initialize rs2
srl x31, x23, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x29, 0x65526419 # initialize rs1
li x19, 0x3ce0e874 # initialize rs2
srl x1, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x1, 0xd9e48521 # initialize rs1
li x20, 0xb421e08c # initialize rs2
srl x18, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x2, 0x8e482c9e # initialize rs1
li x21, 0x8fc0b293 # initialize rs2
srl x3, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x27, 0xba7d981c # initialize rs1
li x22, 0x80cf8f2a # initialize rs2
srl x6, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x14, 0x4b558b2e # initialize rs1
li x23, 0x1b8ff2af # initialize rs2
srl x21, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x10, 0x7b52bff6 # initialize rs1
li x24, 0x1d16fbb9 # initialize rs2
srl x30, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x7, 0xa57555dc # initialize rs1
li x25, 0x52deffc4 # initialize rs2
srl x31, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x23, 0x8adc3458 # initialize rs1
li x26, 0xc9523b97 # initialize rs2
srl x5, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x15, 0x8f0bde92 # initialize rs1
li x27, 0xd6b75e40 # initialize rs2
srl x28, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x19, 0x77b96800 # initialize rs1
li x28, 0xe63fc907 # initialize rs2
srl x3, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x10, 0xad61b2e1 # initialize rs1
li x29, 0xc7acffe9 # initialize rs2
srl x27, x10, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x26, 0x52d88a46 # initialize rs1
li x30, 0x157edc7b # initialize rs2
srl x14, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x17, 0x54befb22 # initialize rs1
li x31, 0xe68a52f1 # initialize rs2
srl x6, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 252)

# Testcase cp_rd (Test destination rd = x0)
li x27, 0x545d6dfb # initialize rs1
li x15, 0x405b17fb # initialize rs2
srl x0, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x5, 0x45c78b63 # initialize rs1
li x15, 0xa699da94 # initialize rs2
srl x1, x5, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x13, 0x25696279 # initialize rs1
li x16, 0x2c191728 # initialize rs2
srl x2, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x7, 0x33bb2e3d # initialize rs1
li x21, 0x3f497128 # initialize rs2
srl x3, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0xcec3480e # initialize rs1
li x13, 0x83ea8688 # initialize rs2
srl x4, x12, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x8, 0x5ae8a101 # initialize rs1
li x17, 0xdd30b6e0 # initialize rs2
srl x5, x8, x17 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0xd7b762b0 # initialize rs1
li x13, 0xa1b90fe4 # initialize rs2
srl x6, x17, x13 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x0b22737d # initialize rs1
li x18, 0x2cb1a57f # initialize rs2
srl x7, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x7, 0x3d3c95fc # initialize rs1
li x3, 0x9a34d1e6 # initialize rs2
srl x8, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0x98d8bd06 # initialize rs1
li x26, 0x1193812c # initialize rs2
srl x9, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x8, 0x54899f9a # initialize rs1
li x2, 0x7b1639ad # initialize rs2
srl x10, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x24, 0x07e30e9e # initialize rs1
li x28, 0x62242fa9 # initialize rs2
srl x11, x24, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x7, 0x54477d39 # initialize rs1
li x27, 0x6958c11d # initialize rs2
srl x12, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x8, 0x53592252 # initialize rs1
li x6, 0x88919095 # initialize rs2
srl x13, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x29, 0x9e8e4187 # initialize rs1
li x3, 0x2cc48e02 # initialize rs2
srl x14, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x29, 0xffc12e0e # initialize rs1
li x24, 0x532e0357 # initialize rs2
srl x15, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x8, 0x170a4983 # initialize rs1
li x5, 0x4f5aeaeb # initialize rs2
srl x16, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x7, 0x774dfcb5 # initialize rs1
li x26, 0x1053c1a8 # initialize rs2
srl x17, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x20, 0x3a98fdbc # initialize rs1
li x30, 0x41b6e080 # initialize rs2
srl x18, x20, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x1, 0xb41bf099 # initialize rs1
li x9, 0x301696a6 # initialize rs2
srl x19, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x13, 0x13f2fca6 # initialize rs1
li x7, 0x88bb6c9d # initialize rs2
srl x20, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x15, 0xae1cf13c # initialize rs1
li x7, 0x11d0cabb # initialize rs2
srl x21, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x20, 0x3b6bf98b # initialize rs1
li x22, 0x0e4f15ee # initialize rs2
srl x22, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x10, 0x6cd08c60 # initialize rs1
li x26, 0x1962bf0f # initialize rs2
srl x23, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x29, 0xdcf7cd1d # initialize rs1
li x3, 0xedf55b50 # initialize rs2
srl x24, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x21, 0xa4d83bd3 # initialize rs1
li x27, 0xd94fdbc9 # initialize rs2
srl x25, x21, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x26, 0x2a38d3fd # initialize rs1
li x25, 0xec13895f # initialize rs2
srl x26, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x21, 0xf5ab09f5 # initialize rs1
li x5, 0xa12a882a # initialize rs2
srl x27, x21, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x9, 0x13ee5e52 # initialize rs1
li x15, 0x93bb9ba7 # initialize rs2
srl x28, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x20, 0x6240352a # initialize rs1
li x28, 0xaad111d0 # initialize rs2
srl x29, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0xc83a4232 # initialize rs1
li x25, 0x9fabe6e4 # initialize rs2
srl x30, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x20, 0x2ff8bc2c # initialize rs1
li x7, 0xea6043c2 # initialize rs2
srl x31, x20, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x18, 0x00000000 # initialize rs1
li x19, 0xd72d1fbd # initialize rs2
srl x15, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x22, 0x00000001 # initialize rs1
li x9, 0xa59b1df1 # initialize rs2
srl x19, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x28, 0x00000002 # initialize rs1
li x18, 0x9db0d720 # initialize rs2
srl x10, x28, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x1, 0x80000000 # initialize rs1
li x14, 0x5ab3d5b4 # initialize rs2
srl x17, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x30, 0x80000001 # initialize rs1
li x18, 0xed7c84e2 # initialize rs2
srl x6, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x11, 0x7fffffff # initialize rs1
li x8, 0x0edb58d3 # initialize rs2
srl x14, x11, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x5, 0x7ffffffe # initialize rs1
li x27, 0x9a5b5b6d # initialize rs2
srl x26, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x2, 0xffffffff # initialize rs1
li x11, 0x5f65d22e # initialize rs2
srl x15, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x10, 0xfffffffe # initialize rs1
li x3, 0x6a23c62c # initialize rs2
srl x5, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x14, 0x5bbc8872 # initialize rs1
li x11, 0xe17b7422 # initialize rs2
srl x13, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x27, 0xaaaaaaaa # initialize rs1
li x15, 0xc35ede87 # initialize rs2
srl x23, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x29, 0x55555555 # initialize rs1
li x11, 0x264bdc23 # initialize rs2
srl x15, x29, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x21, 0x4487facf # initialize rs1
li x31, 0x00000000 # initialize rs2
srl x12, x21, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x25, 0x6cc933f7 # initialize rs1
li x13, 0x00000001 # initialize rs2
srl x16, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x27, 0xc7d32b69 # initialize rs1
li x7, 0x00000002 # initialize rs2
srl x11, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x29, 0x7eca810b # initialize rs1
li x31, 0x80000000 # initialize rs2
srl x20, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x12, 0x8e82f8ef # initialize rs1
li x13, 0x80000001 # initialize rs2
srl x15, x12, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x17, 0xba4eaaac # initialize rs1
li x29, 0x7fffffff # initialize rs2
srl x30, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x14, 0x838a2b03 # initialize rs1
li x23, 0x7ffffffe # initialize rs2
srl x22, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x19, 0x708f4763 # initialize rs1
li x17, 0xffffffff # initialize rs2
srl x3, x19, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x2, 0x4813caae # initialize rs1
li x29, 0xfffffffe # initialize rs2
srl x18, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x13, 0xf010994f # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
srl x16, x13, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x25, 0x90db4bc9 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
srl x16, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x5, 0xbe6ae6be # initialize rs1
li x9, 0x55555555 # initialize rs2
srl x30, x5, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x16, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
srl x2, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x12, 0x00000000 # initialize rs1
li x17, 0x00000001 # initialize rs2
srl x22, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x31, 0x00000000 # initialize rs1
li x29, 0x00000002 # initialize rs2
srl x13, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x22, 0x00000000 # initialize rs1
li x29, 0x80000000 # initialize rs2
srl x5, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x22, 0x00000000 # initialize rs1
li x2, 0x80000001 # initialize rs2
srl x15, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x12, 0x00000000 # initialize rs1
li x24, 0x7fffffff # initialize rs2
srl x26, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x10, 0x00000000 # initialize rs1
li x9, 0x7ffffffe # initialize rs2
srl x2, x10, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x20, 0x00000000 # initialize rs1
li x1, 0xffffffff # initialize rs2
srl x31, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x2, 0x00000000 # initialize rs1
li x19, 0xfffffffe # initialize rs2
srl x9, x2, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x3, 0x00000000 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
srl x6, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x1, 0x00000000 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
srl x17, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x6, 0x00000000 # initialize rs1
li x11, 0x55555555 # initialize rs2
srl x14, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x15, 0x00000001 # initialize rs1
li x28, 0x00000000 # initialize rs2
srl x29, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x6, 0x00000001 # initialize rs1
li x16, 0x00000001 # initialize rs2
srl x27, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x13, 0x00000001 # initialize rs1
li x19, 0x00000002 # initialize rs2
srl x20, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x28, 0x00000001 # initialize rs1
li x3, 0x80000000 # initialize rs2
srl x14, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x30, 0x00000001 # initialize rs1
li x31, 0x80000001 # initialize rs2
srl x10, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x29, 0x00000001 # initialize rs1
li x18, 0x7fffffff # initialize rs2
srl x19, x29, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x17, 0x00000001 # initialize rs1
li x30, 0x7ffffffe # initialize rs2
srl x5, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x31, 0x00000001 # initialize rs1
li x13, 0xffffffff # initialize rs2
srl x25, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x25, 0x00000001 # initialize rs1
li x21, 0xfffffffe # initialize rs2
srl x29, x25, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x2, 0x00000001 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
srl x15, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x22, 0x00000001 # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
srl x11, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x11, 0x00000001 # initialize rs1
li x17, 0x55555555 # initialize rs2
srl x27, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x6, 0x00000002 # initialize rs1
li x22, 0x00000000 # initialize rs2
srl x7, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x17, 0x00000002 # initialize rs1
li x25, 0x00000001 # initialize rs2
srl x9, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x23, 0x00000002 # initialize rs1
li x14, 0x00000002 # initialize rs2
srl x30, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x3, 0x00000002 # initialize rs1
li x18, 0x80000000 # initialize rs2
srl x15, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x30, 0x00000002 # initialize rs1
li x9, 0x80000001 # initialize rs2
srl x27, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x13, 0x00000002 # initialize rs1
li x25, 0x7fffffff # initialize rs2
srl x20, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x10, 0x00000002 # initialize rs1
li x28, 0x7ffffffe # initialize rs2
srl x20, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x7, 0x00000002 # initialize rs1
li x26, 0xffffffff # initialize rs2
srl x18, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x27, 0x00000002 # initialize rs1
li x17, 0xfffffffe # initialize rs2
srl x24, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x27, 0x00000002 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
srl x29, x27, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x22, 0x00000002 # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
srl x8, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x3, 0x00000002 # initialize rs1
li x29, 0x55555555 # initialize rs2
srl x28, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x22, 0x80000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
srl x19, x22, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x28, 0x80000000 # initialize rs1
li x6, 0x00000001 # initialize rs2
srl x15, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x2, 0x80000000 # initialize rs1
li x31, 0x00000002 # initialize rs2
srl x6, x2, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x5, 0x80000000 # initialize rs1
li x8, 0x80000000 # initialize rs2
srl x22, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x29, 0x80000000 # initialize rs1
li x3, 0x80000001 # initialize rs2
srl x2, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x6, 0x80000000 # initialize rs1
li x14, 0x7fffffff # initialize rs2
srl x26, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x30, 0x80000000 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
srl x12, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x17, 0x80000000 # initialize rs1
li x29, 0xffffffff # initialize rs2
srl x27, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x1, 0x80000000 # initialize rs1
li x26, 0xfffffffe # initialize rs2
srl x2, x1, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x6, 0x80000000 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
srl x24, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x11, 0x80000000 # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
srl x29, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x14, 0x80000000 # initialize rs1
li x16, 0x55555555 # initialize rs2
srl x3, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x14, 0x80000001 # initialize rs1
li x18, 0x00000000 # initialize rs2
srl x17, x14, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x28, 0x80000001 # initialize rs1
li x5, 0x00000001 # initialize rs2
srl x29, x28, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x19, 0x80000001 # initialize rs1
li x11, 0x00000002 # initialize rs2
srl x7, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x23, 0x80000001 # initialize rs1
li x29, 0x80000000 # initialize rs2
srl x17, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x17, 0x80000001 # initialize rs1
li x1, 0x80000001 # initialize rs2
srl x15, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x7, 0x80000001 # initialize rs1
li x27, 0x7fffffff # initialize rs2
srl x11, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x27, 0x80000001 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
srl x20, x27, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x5, 0x80000001 # initialize rs1
li x18, 0xffffffff # initialize rs2
srl x28, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x13, 0x80000001 # initialize rs1
li x2, 0xfffffffe # initialize rs2
srl x21, x13, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x27, 0x80000001 # initialize rs1
li x5, 0x5bbc8872 # initialize rs2
srl x21, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x17, 0x80000001 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
srl x29, x17, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x13, 0x80000001 # initialize rs1
li x16, 0x55555555 # initialize rs2
srl x10, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x19, 0x7fffffff # initialize rs1
li x28, 0x00000000 # initialize rs2
srl x29, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x6, 0x7fffffff # initialize rs1
li x29, 0x00000001 # initialize rs2
srl x21, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x24, 0x7fffffff # initialize rs1
li x7, 0x00000002 # initialize rs2
srl x29, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x3, 0x7fffffff # initialize rs1
li x28, 0x80000000 # initialize rs2
srl x19, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x21, 0x7fffffff # initialize rs1
li x7, 0x80000001 # initialize rs2
srl x3, x21, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x28, 0x7fffffff # initialize rs1
li x13, 0x7fffffff # initialize rs2
srl x11, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x28, 0x7fffffff # initialize rs1
li x9, 0x7ffffffe # initialize rs2
srl x6, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x29, 0x7fffffff # initialize rs1
li x6, 0xffffffff # initialize rs2
srl x9, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x25, 0x7fffffff # initialize rs1
li x6, 0xfffffffe # initialize rs2
srl x31, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x29, 0x7fffffff # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
srl x30, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x21, 0x7fffffff # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
srl x3, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x5, 0x7fffffff # initialize rs1
li x22, 0x55555555 # initialize rs2
srl x27, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x15, 0x7ffffffe # initialize rs1
li x2, 0x00000000 # initialize rs2
srl x13, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x17, 0x7ffffffe # initialize rs1
li x15, 0x00000001 # initialize rs2
srl x12, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x17, 0x7ffffffe # initialize rs1
li x30, 0x00000002 # initialize rs2
srl x3, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x12, 0x7ffffffe # initialize rs1
li x1, 0x80000000 # initialize rs2
srl x5, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x10, 0x7ffffffe # initialize rs1
li x28, 0x80000001 # initialize rs2
srl x17, x10, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x10, 0x7ffffffe # initialize rs1
li x8, 0x7fffffff # initialize rs2
srl x1, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x2, 0x7ffffffe # initialize rs1
li x13, 0x7ffffffe # initialize rs2
srl x17, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x22, 0x7ffffffe # initialize rs1
li x28, 0xffffffff # initialize rs2
srl x19, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x3, 0x7ffffffe # initialize rs1
li x7, 0xfffffffe # initialize rs2
srl x23, x3, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x27, 0x7ffffffe # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
srl x3, x27, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x28, 0x7ffffffe # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
srl x10, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x1, 0x7ffffffe # initialize rs1
li x22, 0x55555555 # initialize rs2
srl x31, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x7, 0xffffffff # initialize rs1
li x3, 0x00000000 # initialize rs2
srl x24, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x18, 0xffffffff # initialize rs1
li x8, 0x00000001 # initialize rs2
srl x13, x18, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x16, 0xffffffff # initialize rs1
li x13, 0x00000002 # initialize rs2
srl x22, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x11, 0xffffffff # initialize rs1
li x12, 0x80000000 # initialize rs2
srl x22, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x22, 0xffffffff # initialize rs1
li x2, 0x80000001 # initialize rs2
srl x18, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x15, 0xffffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
srl x6, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x30, 0xffffffff # initialize rs1
li x28, 0x7ffffffe # initialize rs2
srl x20, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x21, 0xffffffff # initialize rs1
li x15, 0xffffffff # initialize rs2
srl x6, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x16, 0xffffffff # initialize rs1
li x15, 0xfffffffe # initialize rs2
srl x25, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x22, 0xffffffff # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
srl x20, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x28, 0xffffffff # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
srl x12, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x13, 0xffffffff # initialize rs1
li x1, 0x55555555 # initialize rs2
srl x23, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x7, 0xfffffffe # initialize rs1
li x12, 0x00000000 # initialize rs2
srl x6, x7, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x12, 0xfffffffe # initialize rs1
li x6, 0x00000001 # initialize rs2
srl x1, x12, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x8, 0xfffffffe # initialize rs1
li x3, 0x00000002 # initialize rs2
srl x14, x8, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x16, 0xfffffffe # initialize rs1
li x17, 0x80000000 # initialize rs2
srl x21, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x20, 0xfffffffe # initialize rs1
li x5, 0x80000001 # initialize rs2
srl x21, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x9, 0xfffffffe # initialize rs1
li x28, 0x7fffffff # initialize rs2
srl x8, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x21, 0xfffffffe # initialize rs1
li x14, 0x7ffffffe # initialize rs2
srl x9, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x26, 0xfffffffe # initialize rs1
li x18, 0xffffffff # initialize rs2
srl x21, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x2, 0xfffffffe # initialize rs1
li x10, 0xfffffffe # initialize rs2
srl x6, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x18, 0xfffffffe # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
srl x19, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x22, 0xfffffffe # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
srl x26, x22, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x24, 0xfffffffe # initialize rs1
li x1, 0x55555555 # initialize rs2
srl x21, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x20, 0x5bbc8872 # initialize rs1
li x5, 0x00000000 # initialize rs2
srl x26, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x20, 0x5bbc8872 # initialize rs1
li x18, 0x00000001 # initialize rs2
srl x2, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x19, 0x5bbc8872 # initialize rs1
li x23, 0x00000002 # initialize rs2
srl x13, x19, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x6, 0x5bbc8872 # initialize rs1
li x21, 0x80000000 # initialize rs2
srl x8, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x5, 0x5bbc8872 # initialize rs1
li x6, 0x80000001 # initialize rs2
srl x7, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x28, 0x5bbc8872 # initialize rs1
li x2, 0x7fffffff # initialize rs2
srl x10, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x8, 0x5bbc8872 # initialize rs1
li x2, 0x7ffffffe # initialize rs2
srl x25, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x14, 0x5bbc8872 # initialize rs1
li x6, 0xffffffff # initialize rs2
srl x5, x14, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x30, 0x5bbc8872 # initialize rs1
li x13, 0xfffffffe # initialize rs2
srl x5, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x26, 0x5bbc8872 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
srl x11, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x18, 0x5bbc8872 # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
srl x7, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x19, 0x5bbc8872 # initialize rs1
li x26, 0x55555555 # initialize rs2
srl x25, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x24, 0xaaaaaaaa # initialize rs1
li x20, 0x00000000 # initialize rs2
srl x9, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x28, 0xaaaaaaaa # initialize rs1
li x21, 0x00000001 # initialize rs2
srl x24, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x26, 0xaaaaaaaa # initialize rs1
li x20, 0x00000002 # initialize rs2
srl x19, x26, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x23, 0xaaaaaaaa # initialize rs1
li x25, 0x80000000 # initialize rs2
srl x14, x23, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x6, 0xaaaaaaaa # initialize rs1
li x23, 0x80000001 # initialize rs2
srl x20, x6, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x16, 0xaaaaaaaa # initialize rs1
li x23, 0x7fffffff # initialize rs2
srl x30, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x23, 0xaaaaaaaa # initialize rs1
li x2, 0x7ffffffe # initialize rs2
srl x22, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x22, 0xaaaaaaaa # initialize rs1
li x12, 0xffffffff # initialize rs2
srl x9, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x7, 0xaaaaaaaa # initialize rs1
li x11, 0xfffffffe # initialize rs2
srl x9, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x22, 0xaaaaaaaa # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
srl x16, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x15, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
srl x28, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x24, 0xaaaaaaaa # initialize rs1
li x7, 0x55555555 # initialize rs2
srl x28, x24, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x20, 0x55555555 # initialize rs1
li x22, 0x00000000 # initialize rs2
srl x29, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x15, 0x55555555 # initialize rs1
li x29, 0x00000001 # initialize rs2
srl x23, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x8, 0x55555555 # initialize rs1
li x31, 0x00000002 # initialize rs2
srl x24, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x15, 0x55555555 # initialize rs1
li x11, 0x80000000 # initialize rs2
srl x26, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x27, 0x55555555 # initialize rs1
li x14, 0x80000001 # initialize rs2
srl x28, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x11, 0x55555555 # initialize rs1
li x21, 0x7fffffff # initialize rs2
srl x7, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x5, 0x55555555 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
srl x18, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x11, 0x55555555 # initialize rs1
li x20, 0xffffffff # initialize rs2
srl x28, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x24, 0x55555555 # initialize rs1
li x6, 0xfffffffe # initialize rs2
srl x5, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x23, 0x55555555 # initialize rs1
li x12, 0x5bbc8872 # initialize rs2
srl x31, x23, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x1, 0x55555555 # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
srl x23, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x29, 0x55555555 # initialize rs1
li x25, 0x55555555 # initialize rs2
srl x13, x29, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x4b0dfdc9 # initialize rs1
li x0, 0x31c57a46 # initialize rs2
srl x20, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x6825c49e # initialize rs1
li x1, 0xc7771e72 # initialize rs2
srl x5, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xf44e4185 # initialize rs1
li x2, 0x8c154da3 # initialize rs2
srl x15, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xed2905d4 # initialize rs1
li x3, 0x20804b68 # initialize rs2
srl x8, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb1c68a52 # initialize rs1
li x4, 0x0a14b5b3 # initialize rs2
srl x20, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x25e45873 # initialize rs1
li x5, 0xbb7ad379 # initialize rs2
srl x28, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x2a7c3b0b # initialize rs1
li x6, 0x2c9b7222 # initialize rs2
srl x15, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x15, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x4914d815 # initialize rs1
li x7, 0xc5362e1d # initialize rs2
srl x3, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x18a426e9 # initialize rs1
li x8, 0x46919b08 # initialize rs2
srl x5, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x2250dc63 # initialize rs1
li x9, 0x5cbc6065 # initialize rs2
srl x26, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x3bdf4b75 # initialize rs1
li x10, 0x9f99b23c # initialize rs2
srl x29, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xf7db3881 # initialize rs1
li x11, 0x976bc965 # initialize rs2
srl x14, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xdeb458bf # initialize rs1
li x12, 0x392ffc17 # initialize rs2
srl x3, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x12f6a358 # initialize rs1
li x13, 0xc37ea6ab # initialize rs2
srl x16, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x9b722409 # initialize rs1
li x14, 0x21eb220d # initialize rs2
srl x17, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x33796b05 # initialize rs1
li x15, 0x08e16b4e # initialize rs2
srl x18, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x41093c3d # initialize rs1
li x16, 0x7f593268 # initialize rs2
srl x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xe596085e # initialize rs1
li x17, 0xf8877c43 # initialize rs2
srl x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xc451e474 # initialize rs1
li x18, 0xf548f0cb # initialize rs2
srl x17, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x1942c53a # initialize rs1
li x19, 0xc7dca2d6 # initialize rs2
srl x8, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x89de9af2 # initialize rs1
li x20, 0xac697413 # initialize rs2
srl x10, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x93c1297e # initialize rs1
li x21, 0xd2cbae24 # initialize rs2
srl x18, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x41b79b73 # initialize rs1
li x22, 0x34688a54 # initialize rs2
srl x11, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x0f131b21 # initialize rs1
li x23, 0x004a87cf # initialize rs2
srl x31, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x4f1fc3f2 # initialize rs1
li x24, 0x46b37105 # initialize rs2
srl x25, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x688b113f # initialize rs1
li x25, 0x2a8b6bda # initialize rs2
srl x14, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xa1d4b156 # initialize rs1
li x26, 0x5fb5113a # initialize rs2
srl x8, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xee6a2fb7 # initialize rs1
li x27, 0xfdb76551 # initialize rs2
srl x30, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xf2437284 # initialize rs1
li x28, 0x8575febb # initialize rs2
srl x27, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x5b11175c # initialize rs1
li x29, 0xd99387d0 # initialize rs2
srl x3, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x71316fa6 # initialize rs1
li x30, 0x02b531df # initialize rs2
srl x24, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xda9a826e # initialize rs1
li x31, 0x18c3b2fd # initialize rs2
srl x5, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xb5caa14d # initialize rs1
li x16, 0x9baf57bd # initialize rs2
srl x0, x0, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x30054307 # initialize rs1
li x1, 0xeb191d17 # initialize rs2
srl x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x05574e07 # initialize rs1
li x27, 0x933bc0d1 # initialize rs2
srl x2, x2, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xb9a18c41 # initialize rs1
li x3, 0x250ea981 # initialize rs2
srl x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9fa2509d # initialize rs1
li x15, 0xcb7dbb8d # initialize rs2
srl x4, x4, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdf7a7773 # initialize rs1
li x7, 0x052b31d4 # initialize rs2
srl x5, x5, x7 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x6683007b # initialize rs1
li x9, 0xd6b32ddf # initialize rs2
srl x6, x6, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x44b5c64f # initialize rs1
li x1, 0x672aa12e # initialize rs2
srl x7, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xeeecd050 # initialize rs1
li x29, 0x2f631de9 # initialize rs2
srl x8, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x8f473db1 # initialize rs1
li x13, 0x4f5040ab # initialize rs2
srl x9, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x065a1561 # initialize rs1
li x10, 0x8206b40e # initialize rs2
srl x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xdee2b216 # initialize rs1
li x2, 0x01583658 # initialize rs2
srl x11, x11, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x5860b60e # initialize rs1
li x31, 0x8ce44039 # initialize rs2
srl x12, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x8c1d8bc7 # initialize rs1
li x12, 0xbf10d0a7 # initialize rs2
srl x13, x13, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x8f4abab4 # initialize rs1
li x10, 0x96807721 # initialize rs2
srl x14, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x689498e7 # initialize rs1
li x12, 0x8a098e23 # initialize rs2
srl x15, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xfbd36010 # initialize rs1
li x13, 0x17f0f8f6 # initialize rs2
srl x16, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xc66c6181 # initialize rs1
li x14, 0x74175803 # initialize rs2
srl x17, x17, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x746dd855 # initialize rs1
li x20, 0xf26856c4 # initialize rs2
srl x18, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x422105ad # initialize rs1
li x25, 0x8a6db370 # initialize rs2
srl x19, x19, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x9c022603 # initialize rs1
li x28, 0xe929748c # initialize rs2
srl x20, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x652b0b89 # initialize rs1
li x19, 0xd24d1004 # initialize rs2
srl x21, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xa247bdb4 # initialize rs1
li x9, 0xc5d48056 # initialize rs2
srl x22, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xe54b7433 # initialize rs1
li x3, 0xa96ce72f # initialize rs2
srl x23, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x1f838e12 # initialize rs1
li x12, 0x91e490bf # initialize rs2
srl x24, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xa293e0de # initialize rs1
li x15, 0x642d0eaa # initialize rs2
srl x25, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3f8e4d90 # initialize rs1
li x9, 0xb587f805 # initialize rs2
srl x26, x26, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x59fec408 # initialize rs1
li x11, 0x51905511 # initialize rs2
srl x27, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x41b18789 # initialize rs1
li x28, 0x3af1e6ba # initialize rs2
srl x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x22cd2173 # initialize rs1
li x15, 0x33d01f52 # initialize rs2
srl x29, x29, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x8fa3b67c # initialize rs1
li x25, 0x407abe1a # initialize rs2
srl x30, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x73d462af # initialize rs1
li x7, 0x97df6dcf # initialize rs2
srl x31, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x7, 0x4626bc72 # initialize rs1
li x0, 0xf53fdd0d # initialize rs2
srl x0, x7, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x9, 0xd3425d8a # initialize rs1
li x1, 0xd3de9e71 # initialize rs2
srl x1, x9, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x8, 0x3056e78c # initialize rs1
li x2, 0xae686581 # initialize rs2
srl x2, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x10, 0xac046f18 # initialize rs1
li x3, 0xa5a1a8b8 # initialize rs2
srl x3, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0x47991683 # initialize rs1
li x4, 0x83c83c3d # initialize rs2
srl x4, x22, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x16, 0xeb07eea4 # initialize rs1
li x5, 0x83b3c354 # initialize rs2
srl x5, x16, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0x433176b6 # initialize rs1
li x6, 0x0b88e2ed # initialize rs2
srl x6, x17, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0x74be2e3f # initialize rs1
li x7, 0xeb4d490e # initialize rs2
srl x7, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x25, 0x5b64222b # initialize rs1
li x8, 0x1188b49a # initialize rs2
srl x8, x25, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x7, 0x662c08b0 # initialize rs1
li x9, 0x9de7bd80 # initialize rs2
srl x9, x7, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x11, 0x0c07c15d # initialize rs1
li x10, 0x9aef445f # initialize rs2
srl x10, x11, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x29, 0x7f813315 # initialize rs1
li x11, 0xc518309b # initialize rs2
srl x11, x29, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x15, 0xcf46efaa # initialize rs1
li x12, 0x841e9412 # initialize rs2
srl x12, x15, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x3, 0x751acb28 # initialize rs1
li x13, 0xef275506 # initialize rs2
srl x13, x3, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x9, 0xc75c09c9 # initialize rs1
li x14, 0xa5f707b1 # initialize rs2
srl x14, x9, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x2, 0x0a02fe17 # initialize rs1
li x15, 0x3a0d308e # initialize rs2
srl x15, x2, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x22, 0x39a7eedf # initialize rs1
li x16, 0x4a9d8682 # initialize rs2
srl x16, x22, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x8, 0x92a34742 # initialize rs1
li x17, 0x52e9560d # initialize rs2
srl x17, x8, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x4, 0xa0e8a6b1 # initialize rs1
li x18, 0xd13ae2ec # initialize rs2
srl x18, x4, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x11, 0xe1dcfb10 # initialize rs1
li x19, 0x49efa9a0 # initialize rs2
srl x19, x11, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x8, 0x19b66545 # initialize rs1
li x20, 0x9d321621 # initialize rs2
srl x20, x8, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x8, 0x09d856c9 # initialize rs1
li x21, 0xfd237d57 # initialize rs2
srl x21, x8, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x28, 0x7f46a6af # initialize rs1
li x22, 0xe8f81913 # initialize rs2
srl x22, x28, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x20, 0x3fbd0362 # initialize rs1
li x23, 0x2df2ea57 # initialize rs2
srl x23, x20, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x20, 0xfdd978eb # initialize rs1
li x24, 0xea2b76ca # initialize rs2
srl x24, x20, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x4, 0xc896ccbd # initialize rs1
li x25, 0xfff2f3f0 # initialize rs2
srl x25, x4, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x31, 0x432e48b1 # initialize rs1
li x26, 0xa1a7a158 # initialize rs2
srl x26, x31, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x18, 0x1b6d3a2e # initialize rs1
li x27, 0x84399336 # initialize rs2
srl x27, x18, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x20, 0x6ebe07c6 # initialize rs1
li x28, 0x5f1be683 # initialize rs2
srl x28, x20, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x10, 0x33684858 # initialize rs1
li x29, 0x476e9a04 # initialize rs2
srl x29, x10, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x15, 0x07131fc8 # initialize rs1
li x30, 0x1bd6853a # initialize rs2
srl x30, x15, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x3, 0xecc385e9 # initialize rs1
li x31, 0x8d8367dc # initialize rs2
srl x31, x3, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x835de515 # initialize rs1
li x0, 0x3685b0c6 # initialize rs2
srl x0, x0, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xfa847ceb # initialize rs1
li x1, 0x936bbbb9 # initialize rs2
srl x1, x1, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x4a378f80 # initialize rs1
li x2, 0x0a25f846 # initialize rs2
srl x2, x2, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x01fb6fb6 # initialize rs1
li x3, 0x7b6bf532 # initialize rs2
srl x3, x3, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
li x4, 0xeee4473b # initialize rs1
li x4, 0xe30a87d1 # initialize rs2
srl x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdb5e1176 # initialize rs1
li x5, 0x6ba31301 # initialize rs2
srl x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc045bee8 # initialize rs1
li x6, 0x2f8476d3 # initialize rs2
srl x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xc219e16d # initialize rs1
li x7, 0xf13bc197 # initialize rs2
srl x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xb308c3c9 # initialize rs1
li x8, 0x4a27e74e # initialize rs2
srl x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x69d055b9 # initialize rs1
li x9, 0xbb315748 # initialize rs2
srl x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x4dfb00b5 # initialize rs1
li x10, 0xe21d797b # initialize rs2
srl x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x434f4df6 # initialize rs1
li x11, 0xbd5be0dc # initialize rs2
srl x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x0d49e607 # initialize rs1
li x12, 0xb2154553 # initialize rs2
srl x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x02fcbb39 # initialize rs1
li x13, 0x81241e29 # initialize rs2
srl x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x2c6ef6da # initialize rs1
li x14, 0x43cde75d # initialize rs2
srl x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xfac0aca0 # initialize rs1
li x15, 0x4d85f530 # initialize rs2
srl x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xdd244c1b # initialize rs1
li x16, 0x57c22273 # initialize rs2
srl x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xd719ebeb # initialize rs1
li x17, 0x32c81657 # initialize rs2
srl x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x2dfbfc48 # initialize rs1
li x18, 0x27ae1a09 # initialize rs2
srl x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x0f2725d6 # initialize rs1
li x19, 0x843f6080 # initialize rs2
srl x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0x458a3a5b # initialize rs1
li x20, 0xd3a22fef # initialize rs2
srl x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xedc858b6 # initialize rs1
li x21, 0x7fa8ebc5 # initialize rs2
srl x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xa586a9df # initialize rs1
li x22, 0x2ecb2dbe # initialize rs2
srl x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x4859b7b5 # initialize rs1
li x23, 0x986ff502 # initialize rs2
srl x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xdd2910cf # initialize rs1
li x24, 0xf8f0ed03 # initialize rs2
srl x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x08085db4 # initialize rs1
li x25, 0xaf83927e # initialize rs2
srl x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x21ad6c62 # initialize rs1
li x26, 0xf4a691f8 # initialize rs2
srl x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x5a74c015 # initialize rs1
li x27, 0xfdb408a5 # initialize rs2
srl x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x326fd373 # initialize rs1
li x28, 0xdd2328de # initialize rs2
srl x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xad4aa3dc # initialize rs1
li x29, 0x2b315a7a # initialize rs2
srl x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x968e2051 # initialize rs1
li x30, 0xb136bd61 # initialize rs2
srl x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xf7420d99 # initialize rs1
li x31, 0x5df087b7 # initialize rs2
srl x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x18, x30, x28 # perform first operation
srl x15, x12, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x1, x29 # perform first operation
srl x2, x23, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x22, x24 # perform first operation
srl x10, x27, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x25, x2 # perform first operation
srl x25, x26, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x7, x14 # perform first operation
srl x14, x20, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x27, x14 # perform first operation
srl x14, x23, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x14, x11, x26 # perform first operation
srl x14, x3, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x2, x26, x8 # perform first operation
srl x2, x13, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x25, x15, x18 # perform first operation
srl x25, x13, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x9, x31 # perform first operation
srl x9, x19, x5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x25, x18, x5 # perform first operation
srl x5, x28, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x8, x14, x18 # perform first operation
srl x21, x23, x2 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-sll.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2ace426a # initialize rs1
li x2, 0x0a05af93 # initialize rs2
sll x30, x0, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xa77f1358 # initialize rs1
li x18, 0x3a9dff77 # initialize rs2
sll x31, x1, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x0b8ce01f # initialize rs1
li x24, 0x6b250c91 # initialize rs2
sll x12, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x27d184bb # initialize rs1
li x28, 0x1be14edb # initialize rs2
sll x17, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x81dcb75f # initialize rs1
li x31, 0x57327f30 # initialize rs2
sll x15, x4, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0912f944 # initialize rs1
li x13, 0x1aa9246d # initialize rs2
sll x31, x5, x13 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xbe421b5d # initialize rs1
li x26, 0x31cc8e37 # initialize rs2
sll x19, x6, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x19, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x7cdd2ebb # initialize rs1
li x18, 0x5e84e21b # initialize rs2
sll x26, x7, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x626af42b # initialize rs1
li x20, 0xc7bdb495 # initialize rs2
sll x18, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xc69d33c3 # initialize rs1
li x25, 0x4c566aa6 # initialize rs2
sll x7, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x66184568 # initialize rs1
li x27, 0xdd5e023a # initialize rs2
sll x14, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x309c207a # initialize rs1
li x25, 0x7ab57ac9 # initialize rs2
sll x5, x11, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x13893425 # initialize rs1
li x17, 0xa6d2ca82 # initialize rs2
sll x13, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x50652221 # initialize rs1
li x31, 0x147d9f0c # initialize rs2
sll x19, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x86ebe42a # initialize rs1
li x3, 0xc92ff320 # initialize rs2
sll x10, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xef68d259 # initialize rs1
li x20, 0xe60284a7 # initialize rs2
sll x2, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x1501efbe # initialize rs1
li x14, 0x18372430 # initialize rs2
sll x30, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x82e76a64 # initialize rs1
li x19, 0xd2a8cd50 # initialize rs2
sll x3, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x1f204420 # initialize rs1
li x10, 0x00385db6 # initialize rs2
sll x24, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x59ea4cf7 # initialize rs1
li x13, 0x1de0fde2 # initialize rs2
sll x17, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x4fa9b340 # initialize rs1
li x5, 0x55ac5018 # initialize rs2
sll x31, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xfff0aa83 # initialize rs1
li x10, 0x52c24530 # initialize rs2
sll x29, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x2d6968ad # initialize rs1
li x30, 0x48748315 # initialize rs2
sll x29, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xfd89d868 # initialize rs1
li x3, 0xcd8a3b8e # initialize rs2
sll x31, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x4b30386c # initialize rs1
li x31, 0xf91ec9c2 # initialize rs2
sll x3, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x525b021e # initialize rs1
li x29, 0x4644906c # initialize rs2
sll x23, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xd7b1af36 # initialize rs1
li x18, 0x41a8006f # initialize rs2
sll x14, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xf8bf3184 # initialize rs1
li x11, 0x31e5eed7 # initialize rs2
sll x7, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x680eac4a # initialize rs1
li x1, 0xd6002882 # initialize rs2
sll x15, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xea0917ae # initialize rs1
li x6, 0xe1e843f0 # initialize rs2
sll x16, x29, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x8b94c087 # initialize rs1
li x29, 0xf2c08836 # initialize rs2
sll x5, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xed21f4c2 # initialize rs1
li x30, 0xe031035b # initialize rs2
sll x19, x31, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x24, 0x609180e9 # initialize rs1
li x0, 0xbed5f949 # initialize rs2
sll x5, x24, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x7, 0x0df135bf # initialize rs1
li x1, 0x888317b4 # initialize rs2
sll x16, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x10, 0x507867f9 # initialize rs1
li x2, 0xe5d21955 # initialize rs2
sll x31, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x16, 0xf2eee015 # initialize rs1
li x3, 0xd6ed988a # initialize rs2
sll x6, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xcbaa3929 # initialize rs1
li x4, 0xb43c4487 # initialize rs2
sll x5, x15, x4 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
li x21, 0x0d96d310 # initialize rs1
li x5, 0x0a990c20 # initialize rs2
sll x10, x21, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x2, 0xcf3fddf8 # initialize rs1
li x6, 0xe7b4c884 # initialize rs2
sll x25, x2, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x25, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x28, 0x3531afad # initialize rs1
li x7, 0xf386de76 # initialize rs2
sll x18, x28, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x28, 0x6822ea08 # initialize rs1
li x8, 0xfbb8f2eb # initialize rs2
sll x20, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x2, 0x96605087 # initialize rs1
li x9, 0xf206dbcb # initialize rs2
sll x24, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x6, 0x984494d5 # initialize rs1
li x10, 0x11412225 # initialize rs2
sll x24, x6, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x2, 0x03a813a5 # initialize rs1
li x11, 0x92696180 # initialize rs2
sll x28, x2, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x16, 0xd5724077 # initialize rs1
li x12, 0x9eda63ac # initialize rs2
sll x29, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x31, 0xd012cf1f # initialize rs1
li x13, 0x012740b8 # initialize rs2
sll x28, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x10, 0xcb279957 # initialize rs1
li x14, 0xf426ca8f # initialize rs2
sll x2, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x30, 0xa8994092 # initialize rs1
li x15, 0x9a4e8baa # initialize rs2
sll x8, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x23, 0x246f180b # initialize rs1
li x16, 0xebd78e63 # initialize rs2
sll x17, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x11, 0xef14885c # initialize rs1
li x17, 0x34016dc5 # initialize rs2
sll x8, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x21, 0xf694f449 # initialize rs1
li x18, 0xccb0006d # initialize rs2
sll x11, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x31, 0x764a4bed # initialize rs1
li x19, 0x2cf3bad6 # initialize rs2
sll x23, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x19, 0xd70b22bc # initialize rs1
li x20, 0x722cb495 # initialize rs2
sll x10, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x23, 0x5ec32af1 # initialize rs1
li x21, 0x47e8e3c7 # initialize rs2
sll x10, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x6, 0xea4c3a2e # initialize rs1
li x22, 0x8dd44874 # initialize rs2
sll x24, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x13, 0x39bf1819 # initialize rs1
li x23, 0x8edb2423 # initialize rs2
sll x15, x13, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x17, 0x53c220ef # initialize rs1
li x24, 0x543df6e4 # initialize rs2
sll x28, x17, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x5, 0x85983130 # initialize rs1
li x25, 0x65c0db3e # initialize rs2
sll x6, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x17, 0xb9e1bf86 # initialize rs1
li x26, 0x768f4c77 # initialize rs2
sll x27, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x26, 0x04c3d3b0 # initialize rs1
li x27, 0x9312be90 # initialize rs2
sll x22, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x23, 0x67e16952 # initialize rs1
li x28, 0x50c95bb2 # initialize rs2
sll x14, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x9, 0x2db17360 # initialize rs1
li x29, 0x8ac7d1e2 # initialize rs2
sll x30, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x15, 0xa5ddc8f9 # initialize rs1
li x30, 0xa52ddb4a # initialize rs2
sll x11, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x5, 0x352c13fc # initialize rs1
li x31, 0xe5752fe3 # initialize rs2
sll x23, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 252)

# Testcase cp_rd (Test destination rd = x0)
li x22, 0x9e1eddd1 # initialize rs1
li x29, 0x3f5401ca # initialize rs2
sll x0, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x18, 0x989eef13 # initialize rs1
li x21, 0x00f1fe36 # initialize rs2
sll x1, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x6, 0x51402e29 # initialize rs1
li x8, 0x80fb9805 # initialize rs2
sll x2, x6, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x28, 0x3b32a06f # initialize rs1
li x1, 0x48831cd4 # initialize rs2
sll x3, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0xd3192a50 # initialize rs1
li x27, 0x4d1f51f5 # initialize rs2
sll x4, x12, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x31, 0x69b44353 # initialize rs1
li x30, 0x05ff4d22 # initialize rs2
sll x5, x31, x30 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x4e617ba3 # initialize rs1
li x28, 0x7d6e81d2 # initialize rs2
sll x6, x24, x28 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x13, 0x56dad312 # initialize rs1
li x29, 0x3783b83f # initialize rs2
sll x7, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x28, 0x5ce181be # initialize rs1
li x29, 0x0ab1e350 # initialize rs2
sll x8, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0xd52138fb # initialize rs1
li x2, 0x087a297c # initialize rs2
sll x9, x27, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x22, 0x881a9c09 # initialize rs1
li x28, 0xce6a8f80 # initialize rs2
sll x10, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x8, 0xc04a67d3 # initialize rs1
li x11, 0xaeb1a641 # initialize rs2
sll x11, x8, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x14, 0xf0af984d # initialize rs1
li x10, 0xaed6fab1 # initialize rs2
sll x12, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x20, 0x54f050ec # initialize rs1
li x14, 0x7ef83d52 # initialize rs2
sll x13, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x22, 0x674c8a7e # initialize rs1
li x7, 0xfd7758bb # initialize rs2
sll x14, x22, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x30, 0x1a44b76e # initialize rs1
li x27, 0xa36ba928 # initialize rs2
sll x15, x30, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x5, 0xdc5cbc95 # initialize rs1
li x11, 0x57f5a7da # initialize rs2
sll x16, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x9, 0x70a872a2 # initialize rs1
li x28, 0x7fc81f22 # initialize rs2
sll x17, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x12, 0x0c089009 # initialize rs1
li x8, 0x53bf7185 # initialize rs2
sll x18, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x29, 0xc45b431b # initialize rs1
li x24, 0xd95289b3 # initialize rs2
sll x19, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x30, 0x8c9fa725 # initialize rs1
li x31, 0x95176c06 # initialize rs2
sll x20, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x20, 0xed7833b2 # initialize rs1
li x27, 0xbf452244 # initialize rs2
sll x21, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x22, 0xdbb4c91a # initialize rs1
li x13, 0xd783bbdd # initialize rs2
sll x22, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x9, 0xc0c58fba # initialize rs1
li x18, 0x5dc6cbe8 # initialize rs2
sll x23, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x13, 0xe9112f00 # initialize rs1
li x24, 0x4b21b69d # initialize rs2
sll x24, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x29, 0xf55f9007 # initialize rs1
li x8, 0x6ddb3608 # initialize rs2
sll x25, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x5, 0x9e09bb18 # initialize rs1
li x27, 0x1c04d377 # initialize rs2
sll x26, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x6, 0x9597da87 # initialize rs1
li x9, 0xc01db013 # initialize rs2
sll x27, x6, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x2, 0x36d07d68 # initialize rs1
li x12, 0xb9693872 # initialize rs2
sll x28, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x10, 0xf28e76c6 # initialize rs1
li x26, 0x5e8f44b6 # initialize rs2
sll x29, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x12, 0x4a82c982 # initialize rs1
li x8, 0x94c43529 # initialize rs2
sll x30, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x22, 0xa0419ca4 # initialize rs1
li x30, 0xd6fc4146 # initialize rs2
sll x31, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x00000000 # initialize rs1
li x28, 0x2d6c8cb7 # initialize rs2
sll x13, x20, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x18, 0x00000001 # initialize rs1
li x15, 0xc4dd948d # initialize rs2
sll x8, x18, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x9, 0x00000002 # initialize rs1
li x25, 0x1a185a23 # initialize rs2
sll x23, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x14, 0x80000000 # initialize rs1
li x3, 0x92e53fcf # initialize rs2
sll x18, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x31, 0x80000001 # initialize rs1
li x11, 0xf7c08d90 # initialize rs2
sll x19, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x27, 0x7fffffff # initialize rs1
li x24, 0x8aae9856 # initialize rs2
sll x16, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x7, 0x7ffffffe # initialize rs1
li x20, 0x43a2d2b1 # initialize rs2
sll x26, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x1, 0xffffffff # initialize rs1
li x28, 0x66483eb6 # initialize rs2
sll x14, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x24, 0xfffffffe # initialize rs1
li x20, 0xdffe6bee # initialize rs2
sll x7, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x5, 0x5bbc8872 # initialize rs1
li x18, 0xa774c983 # initialize rs2
sll x28, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x2, 0xaaaaaaaa # initialize rs1
li x23, 0xcda878f4 # initialize rs2
sll x5, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x12, 0x55555555 # initialize rs1
li x10, 0xaa634e95 # initialize rs2
sll x6, x12, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x18, 0x6136f9f1 # initialize rs1
li x1, 0x00000000 # initialize rs2
sll x7, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0xcb1254a7 # initialize rs1
li x18, 0x00000001 # initialize rs2
sll x24, x6, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x10, 0x3b1988e2 # initialize rs1
li x6, 0x00000002 # initialize rs2
sll x5, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x21, 0x7f9336c0 # initialize rs1
li x22, 0x80000000 # initialize rs2
sll x15, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x24, 0x4e990dfc # initialize rs1
li x12, 0x80000001 # initialize rs2
sll x14, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x16, 0xc1ababec # initialize rs1
li x29, 0x7fffffff # initialize rs2
sll x25, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x24, 0x628e2851 # initialize rs1
li x12, 0x7ffffffe # initialize rs2
sll x15, x24, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x6, 0xd0c4d7d1 # initialize rs1
li x28, 0xffffffff # initialize rs2
sll x9, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x21, 0xc4c24c6b # initialize rs1
li x30, 0xfffffffe # initialize rs2
sll x27, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x6, 0xe458a0dd # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
sll x24, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x26, 0x8c2cc8a7 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
sll x10, x26, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x23, 0x2ebd3128 # initialize rs1
li x1, 0x55555555 # initialize rs2
sll x28, x23, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x24, 0x00000000 # initialize rs1
li x20, 0x00000000 # initialize rs2
sll x12, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x5, 0x00000000 # initialize rs1
li x25, 0x00000001 # initialize rs2
sll x18, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x22, 0x00000000 # initialize rs1
li x17, 0x00000002 # initialize rs2
sll x5, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x25, 0x00000000 # initialize rs1
li x26, 0x80000000 # initialize rs2
sll x5, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x23, 0x00000000 # initialize rs1
li x21, 0x80000001 # initialize rs2
sll x2, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x25, 0x00000000 # initialize rs1
li x11, 0x7fffffff # initialize rs2
sll x10, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x22, 0x00000000 # initialize rs1
li x9, 0x7ffffffe # initialize rs2
sll x6, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x8, 0x00000000 # initialize rs1
li x5, 0xffffffff # initialize rs2
sll x18, x8, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x27, 0x00000000 # initialize rs1
li x14, 0xfffffffe # initialize rs2
sll x12, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x11, 0x00000000 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
sll x26, x11, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x29, 0x00000000 # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
sll x10, x29, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x1, 0x00000000 # initialize rs1
li x2, 0x55555555 # initialize rs2
sll x14, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x11, 0x00000001 # initialize rs1
li x7, 0x00000000 # initialize rs2
sll x1, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x20, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
sll x17, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x8, 0x00000001 # initialize rs1
li x14, 0x00000002 # initialize rs2
sll x19, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x23, 0x00000001 # initialize rs1
li x7, 0x80000000 # initialize rs2
sll x18, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x26, 0x00000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
sll x25, x26, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x28, 0x00000001 # initialize rs1
li x2, 0x7fffffff # initialize rs2
sll x24, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x3, 0x00000001 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
sll x8, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x22, 0x00000001 # initialize rs1
li x20, 0xffffffff # initialize rs2
sll x1, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x10, 0x00000001 # initialize rs1
li x15, 0xfffffffe # initialize rs2
sll x7, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x28, 0x00000001 # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
sll x21, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x23, 0x00000001 # initialize rs1
li x10, 0xaaaaaaaa # initialize rs2
sll x6, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x2, 0x00000001 # initialize rs1
li x10, 0x55555555 # initialize rs2
sll x16, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x2, 0x00000002 # initialize rs1
li x5, 0x00000000 # initialize rs2
sll x31, x2, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x29, 0x00000002 # initialize rs1
li x28, 0x00000001 # initialize rs2
sll x11, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x24, 0x00000002 # initialize rs1
li x26, 0x00000002 # initialize rs2
sll x30, x24, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x23, 0x00000002 # initialize rs1
li x28, 0x80000000 # initialize rs2
sll x1, x23, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x15, 0x00000002 # initialize rs1
li x25, 0x80000001 # initialize rs2
sll x20, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x14, 0x00000002 # initialize rs1
li x27, 0x7fffffff # initialize rs2
sll x26, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x20, 0x00000002 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
sll x25, x20, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x22, 0x00000002 # initialize rs1
li x30, 0xffffffff # initialize rs2
sll x29, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x21, 0x00000002 # initialize rs1
li x1, 0xfffffffe # initialize rs2
sll x24, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x2, 0x00000002 # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
sll x19, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x19, 0x00000002 # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
sll x31, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x9, 0x00000002 # initialize rs1
li x29, 0x55555555 # initialize rs2
sll x8, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x9, 0x80000000 # initialize rs1
li x27, 0x00000000 # initialize rs2
sll x2, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x16, 0x80000000 # initialize rs1
li x25, 0x00000001 # initialize rs2
sll x17, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x1, 0x80000000 # initialize rs1
li x2, 0x00000002 # initialize rs2
sll x31, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x31, 0x80000000 # initialize rs1
li x29, 0x80000000 # initialize rs2
sll x10, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x12, 0x80000000 # initialize rs1
li x19, 0x80000001 # initialize rs2
sll x24, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x14, 0x80000000 # initialize rs1
li x27, 0x7fffffff # initialize rs2
sll x3, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x30, 0x80000000 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
sll x9, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x18, 0x80000000 # initialize rs1
li x29, 0xffffffff # initialize rs2
sll x9, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x10, 0x80000000 # initialize rs1
li x2, 0xfffffffe # initialize rs2
sll x7, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x16, 0x80000000 # initialize rs1
li x28, 0x5bbc8872 # initialize rs2
sll x30, x16, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x27, 0x80000000 # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
sll x30, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x23, 0x80000000 # initialize rs1
li x26, 0x55555555 # initialize rs2
sll x30, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x28, 0x80000001 # initialize rs1
li x13, 0x00000000 # initialize rs2
sll x12, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x6, 0x80000001 # initialize rs1
li x16, 0x00000001 # initialize rs2
sll x18, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x12, 0x80000001 # initialize rs1
li x19, 0x00000002 # initialize rs2
sll x11, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x10, 0x80000001 # initialize rs1
li x7, 0x80000000 # initialize rs2
sll x16, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x27, 0x80000001 # initialize rs1
li x24, 0x80000001 # initialize rs2
sll x1, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x29, 0x80000001 # initialize rs1
li x1, 0x7fffffff # initialize rs2
sll x23, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x21, 0x80000001 # initialize rs1
li x28, 0x7ffffffe # initialize rs2
sll x25, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x11, 0x80000001 # initialize rs1
li x27, 0xffffffff # initialize rs2
sll x23, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x3, 0x80000001 # initialize rs1
li x31, 0xfffffffe # initialize rs2
sll x25, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x7, 0x80000001 # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
sll x22, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x17, 0x80000001 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
sll x8, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x27, 0x80000001 # initialize rs1
li x30, 0x55555555 # initialize rs2
sll x20, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x14, 0x7fffffff # initialize rs1
li x28, 0x00000000 # initialize rs2
sll x19, x14, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x1, 0x7fffffff # initialize rs1
li x9, 0x00000001 # initialize rs2
sll x21, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x10, 0x7fffffff # initialize rs1
li x8, 0x00000002 # initialize rs2
sll x14, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x15, 0x7fffffff # initialize rs1
li x21, 0x80000000 # initialize rs2
sll x7, x15, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x2, 0x7fffffff # initialize rs1
li x1, 0x80000001 # initialize rs2
sll x10, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x31, 0x7fffffff # initialize rs1
li x21, 0x7fffffff # initialize rs2
sll x27, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x3, 0x7fffffff # initialize rs1
li x6, 0x7ffffffe # initialize rs2
sll x7, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x13, 0x7fffffff # initialize rs1
li x30, 0xffffffff # initialize rs2
sll x12, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x28, 0x7fffffff # initialize rs1
li x2, 0xfffffffe # initialize rs2
sll x20, x28, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x2, 0x7fffffff # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
sll x17, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x16, 0x7fffffff # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
sll x6, x16, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x16, 0x7fffffff # initialize rs1
li x9, 0x55555555 # initialize rs2
sll x7, x16, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x24, 0x7ffffffe # initialize rs1
li x13, 0x00000000 # initialize rs2
sll x21, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x9, 0x7ffffffe # initialize rs1
li x6, 0x00000001 # initialize rs2
sll x18, x9, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x9, 0x7ffffffe # initialize rs1
li x3, 0x00000002 # initialize rs2
sll x10, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x20, 0x7ffffffe # initialize rs1
li x24, 0x80000000 # initialize rs2
sll x23, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x7, 0x7ffffffe # initialize rs1
li x11, 0x80000001 # initialize rs2
sll x14, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x13, 0x7ffffffe # initialize rs1
li x6, 0x7fffffff # initialize rs2
sll x9, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x31, 0x7ffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
sll x19, x31, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x10, 0x7ffffffe # initialize rs1
li x6, 0xffffffff # initialize rs2
sll x16, x10, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x29, 0x7ffffffe # initialize rs1
li x2, 0xfffffffe # initialize rs2
sll x22, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x13, 0x7ffffffe # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
sll x7, x13, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x20, 0x7ffffffe # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
sll x29, x20, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x31, 0x7ffffffe # initialize rs1
li x17, 0x55555555 # initialize rs2
sll x2, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x20, 0xffffffff # initialize rs1
li x22, 0x00000000 # initialize rs2
sll x24, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x7, 0xffffffff # initialize rs1
li x3, 0x00000001 # initialize rs2
sll x16, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x25, 0xffffffff # initialize rs1
li x26, 0x00000002 # initialize rs2
sll x3, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x30, 0xffffffff # initialize rs1
li x25, 0x80000000 # initialize rs2
sll x24, x30, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x9, 0xffffffff # initialize rs1
li x13, 0x80000001 # initialize rs2
sll x15, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x11, 0xffffffff # initialize rs1
li x3, 0x7fffffff # initialize rs2
sll x17, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x10, 0xffffffff # initialize rs1
li x15, 0x7ffffffe # initialize rs2
sll x3, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x18, 0xffffffff # initialize rs1
li x24, 0xffffffff # initialize rs2
sll x15, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x14, 0xffffffff # initialize rs1
li x24, 0xfffffffe # initialize rs2
sll x21, x14, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x17, 0xffffffff # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
sll x23, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x21, 0xffffffff # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
sll x20, x21, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x22, 0xffffffff # initialize rs1
li x12, 0x55555555 # initialize rs2
sll x7, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x25, 0xfffffffe # initialize rs1
li x19, 0x00000000 # initialize rs2
sll x13, x25, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x18, 0xfffffffe # initialize rs1
li x30, 0x00000001 # initialize rs2
sll x25, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x7, 0xfffffffe # initialize rs1
li x1, 0x00000002 # initialize rs2
sll x23, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x26, 0xfffffffe # initialize rs1
li x15, 0x80000000 # initialize rs2
sll x18, x26, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x3, 0xfffffffe # initialize rs1
li x26, 0x80000001 # initialize rs2
sll x28, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x6, 0xfffffffe # initialize rs1
li x3, 0x7fffffff # initialize rs2
sll x28, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x15, 0xfffffffe # initialize rs1
li x14, 0x7ffffffe # initialize rs2
sll x12, x15, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x17, 0xfffffffe # initialize rs1
li x1, 0xffffffff # initialize rs2
sll x29, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x26, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
sll x31, x26, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x5, 0xfffffffe # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
sll x31, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x13, 0xfffffffe # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
sll x26, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x25, 0xfffffffe # initialize rs1
li x15, 0x55555555 # initialize rs2
sll x16, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x25, 0x5bbc8872 # initialize rs1
li x15, 0x00000000 # initialize rs2
sll x13, x25, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x22, 0x5bbc8872 # initialize rs1
li x18, 0x00000001 # initialize rs2
sll x28, x22, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x31, 0x5bbc8872 # initialize rs1
li x5, 0x00000002 # initialize rs2
sll x9, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x31, 0x5bbc8872 # initialize rs1
li x21, 0x80000000 # initialize rs2
sll x19, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x28, 0x5bbc8872 # initialize rs1
li x24, 0x80000001 # initialize rs2
sll x12, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x25, 0x5bbc8872 # initialize rs1
li x16, 0x7fffffff # initialize rs2
sll x19, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x19, 0x5bbc8872 # initialize rs1
li x5, 0x7ffffffe # initialize rs2
sll x7, x19, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x25, 0x5bbc8872 # initialize rs1
li x17, 0xffffffff # initialize rs2
sll x10, x25, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x30, 0x5bbc8872 # initialize rs1
li x11, 0xfffffffe # initialize rs2
sll x24, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
sll x24, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x19, 0x5bbc8872 # initialize rs1
li x8, 0xaaaaaaaa # initialize rs2
sll x6, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x12, 0x5bbc8872 # initialize rs1
li x3, 0x55555555 # initialize rs2
sll x8, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x31, 0xaaaaaaaa # initialize rs1
li x25, 0x00000000 # initialize rs2
sll x18, x31, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x20, 0xaaaaaaaa # initialize rs1
li x31, 0x00000001 # initialize rs2
sll x8, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x15, 0xaaaaaaaa # initialize rs1
li x27, 0x00000002 # initialize rs2
sll x21, x15, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x31, 0xaaaaaaaa # initialize rs1
li x28, 0x80000000 # initialize rs2
sll x21, x31, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x28, 0xaaaaaaaa # initialize rs1
li x25, 0x80000001 # initialize rs2
sll x20, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x1, 0xaaaaaaaa # initialize rs1
li x5, 0x7fffffff # initialize rs2
sll x30, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x19, 0xaaaaaaaa # initialize rs1
li x25, 0x7ffffffe # initialize rs2
sll x21, x19, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x24, 0xaaaaaaaa # initialize rs1
li x19, 0xffffffff # initialize rs2
sll x28, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x25, 0xaaaaaaaa # initialize rs1
li x16, 0xfffffffe # initialize rs2
sll x28, x25, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x25, 0xaaaaaaaa # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
sll x27, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x18, 0xaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
sll x28, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x1, 0xaaaaaaaa # initialize rs1
li x7, 0x55555555 # initialize rs2
sll x5, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x27, 0x55555555 # initialize rs1
li x30, 0x00000000 # initialize rs2
sll x26, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x31, 0x55555555 # initialize rs1
li x6, 0x00000001 # initialize rs2
sll x28, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x25, 0x55555555 # initialize rs1
li x12, 0x00000002 # initialize rs2
sll x29, x25, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x7, 0x55555555 # initialize rs1
li x20, 0x80000000 # initialize rs2
sll x29, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x9, 0x55555555 # initialize rs1
li x7, 0x80000001 # initialize rs2
sll x10, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x19, 0x55555555 # initialize rs1
li x1, 0x7fffffff # initialize rs2
sll x31, x19, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x29, 0x55555555 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
sll x16, x29, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x1, 0x55555555 # initialize rs1
li x16, 0xffffffff # initialize rs2
sll x22, x1, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x10, 0x55555555 # initialize rs1
li x13, 0xfffffffe # initialize rs2
sll x28, x10, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x19, 0x55555555 # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
sll x10, x19, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x1, 0x55555555 # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
sll x20, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x16, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
sll x29, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xab828af9 # initialize rs1
li x0, 0xa0030e7f # initialize rs2
sll x14, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xea139575 # initialize rs1
li x1, 0x7639ea67 # initialize rs2
sll x14, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xb1adcf13 # initialize rs1
li x2, 0x35ef6940 # initialize rs2
sll x29, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xc5b6a60c # initialize rs1
li x3, 0xbc7ab025 # initialize rs2
sll x25, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x47089cc3 # initialize rs1
li x4, 0x848ea37b # initialize rs2
sll x6, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdf8e4ab5 # initialize rs1
li x5, 0x5d00b1b0 # initialize rs2
sll x12, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x12, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc0f50da5 # initialize rs1
li x6, 0xa5b20b5e # initialize rs2
sll x10, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa5b97e0d # initialize rs1
li x7, 0x83e70867 # initialize rs2
sll x10, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x940c9f91 # initialize rs1
li x8, 0x09d9d43a # initialize rs2
sll x7, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xca962f39 # initialize rs1
li x9, 0x09e133e2 # initialize rs2
sll x5, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x3ee2f4c4 # initialize rs1
li x10, 0x7b6bf888 # initialize rs2
sll x12, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xbe7f5fc7 # initialize rs1
li x11, 0xce93e204 # initialize rs2
sll x16, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xacf4e2d0 # initialize rs1
li x12, 0x5e0b6ddb # initialize rs2
sll x9, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x58375c21 # initialize rs1
li x13, 0x4c7d861f # initialize rs2
sll x27, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x9a7e1d68 # initialize rs1
li x14, 0xb929e9a1 # initialize rs2
sll x31, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xdb9b851b # initialize rs1
li x15, 0x383bea78 # initialize rs2
sll x14, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x1df71a40 # initialize rs1
li x16, 0x966895eb # initialize rs2
sll x13, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x4bdaed6e # initialize rs1
li x17, 0x76ae9380 # initialize rs2
sll x20, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x6c3c1263 # initialize rs1
li x18, 0x5677c028 # initialize rs2
sll x20, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x9af5a52f # initialize rs1
li x19, 0xe2181621 # initialize rs2
sll x15, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x2d40dc92 # initialize rs1
li x20, 0xaf79fb96 # initialize rs2
sll x12, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x1822e623 # initialize rs1
li x21, 0xb63d18b1 # initialize rs2
sll x10, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xb0ab074f # initialize rs1
li x22, 0xe85dfabb # initialize rs2
sll x27, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xedc90a74 # initialize rs1
li x23, 0x7fb72aa8 # initialize rs2
sll x16, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x0915b325 # initialize rs1
li x24, 0x7793870e # initialize rs2
sll x20, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x2d271542 # initialize rs1
li x25, 0xa66f94e1 # initialize rs2
sll x3, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xe3d54538 # initialize rs1
li x26, 0xa328cc67 # initialize rs2
sll x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x2f12e916 # initialize rs1
li x27, 0x4d8c8657 # initialize rs2
sll x24, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x1c1c6435 # initialize rs1
li x28, 0x79a4618a # initialize rs2
sll x8, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x08aa08c6 # initialize rs1
li x29, 0x1de357ac # initialize rs2
sll x27, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xcbb05014 # initialize rs1
li x30, 0x1d6f12a9 # initialize rs2
sll x7, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xd452e83b # initialize rs1
li x31, 0x3b8ff1b0 # initialize rs2
sll x7, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xc9896b18 # initialize rs1
li x10, 0x7403ffde # initialize rs2
sll x0, x0, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x5c6a5726 # initialize rs1
li x14, 0x384deca4 # initialize rs2
sll x1, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x98b606d1 # initialize rs1
li x23, 0x024547f9 # initialize rs2
sll x2, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x172f833c # initialize rs1
li x18, 0x45b345a5 # initialize rs2
sll x3, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4c40a454 # initialize rs1
li x25, 0xa28b6460 # initialize rs2
sll x4, x4, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x54fc0e90 # initialize rs1
li x31, 0x10255337 # initialize rs2
sll x5, x5, x31 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xd346e7c2 # initialize rs1
li x18, 0x2e24b4b0 # initialize rs2
sll x6, x6, x18 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x68c57652 # initialize rs1
li x25, 0x6302249a # initialize rs2
sll x7, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xd2eda563 # initialize rs1
li x7, 0x24dc9672 # initialize rs2
sll x8, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xf0365455 # initialize rs1
li x18, 0x7200bb0f # initialize rs2
sll x9, x9, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x759714aa # initialize rs1
li x30, 0x8607302d # initialize rs2
sll x10, x10, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x4229a925 # initialize rs1
li x18, 0x4defaeee # initialize rs2
sll x11, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x0221b438 # initialize rs1
li x31, 0x9e22994b # initialize rs2
sll x12, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x863e839b # initialize rs1
li x16, 0x3d83a43b # initialize rs2
sll x13, x13, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x526c95f7 # initialize rs1
li x15, 0x26f5e6e5 # initialize rs2
sll x14, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x6023aaad # initialize rs1
li x30, 0x472197a7 # initialize rs2
sll x15, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x0b660710 # initialize rs1
li x25, 0xb4b61131 # initialize rs2
sll x16, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xf2adcde6 # initialize rs1
li x19, 0xfb9b9fcb # initialize rs2
sll x17, x17, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xa828e3cd # initialize rs1
li x11, 0x5881fa74 # initialize rs2
sll x18, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x373744e3 # initialize rs1
li x3, 0x945ee3ae # initialize rs2
sll x19, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xa9866f09 # initialize rs1
li x1, 0x1aa6bd1f # initialize rs2
sll x20, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xd80902d7 # initialize rs1
li x13, 0x0594170b # initialize rs2
sll x21, x21, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x750e9806 # initialize rs1
li x2, 0xcdae3df4 # initialize rs2
sll x22, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xf206fe4e # initialize rs1
li x26, 0xb8836faf # initialize rs2
sll x23, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xf7b87e07 # initialize rs1
li x20, 0x19bbab34 # initialize rs2
sll x24, x24, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xeddc70e4 # initialize rs1
li x23, 0x4e1ab2ce # initialize rs2
sll x25, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x79a32f49 # initialize rs1
li x30, 0xf358985d # initialize rs2
sll x26, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xdeca4218 # initialize rs1
li x5, 0x044bc680 # initialize rs2
sll x27, x27, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xa6427aa2 # initialize rs1
li x22, 0xa17e6183 # initialize rs2
sll x28, x28, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xf8c71c95 # initialize rs1
li x17, 0x3d76c3f2 # initialize rs2
sll x29, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xbe293b07 # initialize rs1
li x28, 0x90acfedb # initialize rs2
sll x30, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x67cf4605 # initialize rs1
li x7, 0x0e87bba5 # initialize rs2
sll x31, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x3, 0xdf7089df # initialize rs1
li x0, 0x2b92d42e # initialize rs2
sll x0, x3, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x15, 0xcb0a637b # initialize rs1
li x1, 0xe56e2ff6 # initialize rs2
sll x1, x15, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x30, 0xa0699f8c # initialize rs1
li x2, 0x668361ba # initialize rs2
sll x2, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x10, 0x39192c2d # initialize rs1
li x3, 0x793ea865 # initialize rs2
sll x3, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x7, 0x5986d45b # initialize rs1
li x4, 0xbbaccbed # initialize rs2
sll x4, x7, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x500f05ed # initialize rs1
li x5, 0x295cb5c1 # initialize rs2
sll x5, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0xf33c92e8 # initialize rs1
li x6, 0xb63c0006 # initialize rs2
sll x6, x5, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0x98a7dd71 # initialize rs1
li x7, 0x576c6c94 # initialize rs2
sll x7, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x10, 0xe968284a # initialize rs1
li x8, 0x9d4eb424 # initialize rs2
sll x8, x10, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x30, 0xcc23fd36 # initialize rs1
li x9, 0x549358ae # initialize rs2
sll x9, x30, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x13, 0x0b37d5cf # initialize rs1
li x10, 0xa2fc670c # initialize rs2
sll x10, x13, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x6, 0x8fc15b86 # initialize rs1
li x11, 0x4f63feee # initialize rs2
sll x11, x6, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x31, 0x64a971bf # initialize rs1
li x12, 0xfd1ded1e # initialize rs2
sll x12, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x2, 0x7ae048fc # initialize rs1
li x13, 0x59daba55 # initialize rs2
sll x13, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x28, 0x98339ac4 # initialize rs1
li x14, 0x742e2bc1 # initialize rs2
sll x14, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x30, 0x7d67e41c # initialize rs1
li x15, 0x8cd2e737 # initialize rs2
sll x15, x30, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x7, 0x60c55d14 # initialize rs1
li x16, 0x6029f472 # initialize rs2
sll x16, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x15, 0x0b062810 # initialize rs1
li x17, 0xd1a86de4 # initialize rs2
sll x17, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x30, 0x60959835 # initialize rs1
li x18, 0x147e4ad8 # initialize rs2
sll x18, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x11, 0x89652d32 # initialize rs1
li x19, 0xc2147f2d # initialize rs2
sll x19, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x7, 0xf1d45064 # initialize rs1
li x20, 0xd1fd8051 # initialize rs2
sll x20, x7, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x5, 0x3ba346d0 # initialize rs1
li x21, 0x6e8bb161 # initialize rs2
sll x21, x5, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x21, 0x8b4de1b9 # initialize rs1
li x22, 0x0f25ac51 # initialize rs2
sll x22, x21, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x15, 0xe6d4f167 # initialize rs1
li x23, 0x3bb427f6 # initialize rs2
sll x23, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x3, 0x1148892b # initialize rs1
li x24, 0xe7d2c371 # initialize rs2
sll x24, x3, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x7, 0xd8da346d # initialize rs1
li x25, 0xfb8a8a6a # initialize rs2
sll x25, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x25, 0x327819b4 # initialize rs1
li x26, 0x2ae8e17e # initialize rs2
sll x26, x25, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x18, 0x5a999a73 # initialize rs1
li x27, 0x57a4000a # initialize rs2
sll x27, x18, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x21, 0xe5c7405c # initialize rs1
li x28, 0xc719700e # initialize rs2
sll x28, x21, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x5, 0x1964ffbb # initialize rs1
li x29, 0x0c71e393 # initialize rs2
sll x29, x5, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x17, 0x454d8042 # initialize rs1
li x30, 0xb0dbefca # initialize rs2
sll x30, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x3, 0x5052ca74 # initialize rs1
li x31, 0x6f5e213d # initialize rs2
sll x31, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xa5e6321f # initialize rs1
li x0, 0xa29f77a0 # initialize rs2
sll x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xdfc4c559 # initialize rs1
li x1, 0x871952ff # initialize rs2
sll x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x99b3998a # initialize rs1
li x2, 0xbd96a331 # initialize rs2
sll x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x5cea8b37 # initialize rs1
li x3, 0xb51a0ac3 # initialize rs2
sll x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x9a3dfa94 # initialize rs1
li x4, 0x0efed169 # initialize rs2
sll x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x49eb90fd # initialize rs1
li x5, 0xbaad9194 # initialize rs2
sll x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9288d979 # initialize rs1
li x6, 0x929e2349 # initialize rs2
sll x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xdee4ce7f # initialize rs1
li x7, 0x2092feb0 # initialize rs2
sll x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x4982fcce # initialize rs1
li x8, 0xec0783b6 # initialize rs2
sll x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xa89c39de # initialize rs1
li x9, 0xc797a3cd # initialize rs2
sll x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xff7c73b6 # initialize rs1
li x10, 0x4fbe529d # initialize rs2
sll x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0x11059020 # initialize rs1
li x11, 0xd6712fa9 # initialize rs2
sll x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x4b54c9fa # initialize rs1
li x12, 0x86631965 # initialize rs2
sll x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x6394fe81 # initialize rs1
li x13, 0x44e11126 # initialize rs2
sll x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x40c83b85 # initialize rs1
li x14, 0xba55878f # initialize rs2
sll x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x13688f71 # initialize rs1
li x15, 0x272802a2 # initialize rs2
sll x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x8195213c # initialize rs1
li x16, 0x2ebb1ffa # initialize rs2
sll x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x0423b26a # initialize rs1
li x17, 0xd2fe184d # initialize rs2
sll x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xcd19b5d4 # initialize rs1
li x18, 0x20f6f3fd # initialize rs2
sll x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xed5aa8cf # initialize rs1
li x19, 0x124642a3 # initialize rs2
sll x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xe542cfad # initialize rs1
li x20, 0x47ff2d0c # initialize rs2
sll x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x513b2931 # initialize rs1
li x21, 0xf866aebf # initialize rs2
sll x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xa234146b # initialize rs1
li x22, 0xb5ecc5ea # initialize rs2
sll x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x4e8a7cdb # initialize rs1
li x23, 0x9337ebd9 # initialize rs2
sll x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x257d1849 # initialize rs1
li x24, 0xc8095bcb # initialize rs2
sll x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xf632350b # initialize rs1
li x25, 0xd7dea422 # initialize rs2
sll x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xa65a1fbe # initialize rs1
li x26, 0x0ea5e695 # initialize rs2
sll x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xefbb5ee5 # initialize rs1
li x27, 0x42511b64 # initialize rs2
sll x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x6d11789b # initialize rs1
li x28, 0x9362b071 # initialize rs2
sll x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x40e1113d # initialize rs1
li x29, 0xe2880677 # initialize rs2
sll x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xeadff080 # initialize rs1
li x30, 0x581b8ddd # initialize rs2
sll x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xfdb07a21 # initialize rs1
li x31, 0x5311654d # initialize rs2
sll x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x8, x15 # perform first operation
sll x6, x31, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x21, x20 # perform first operation
sll x29, x17, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x10, x21, x19 # perform first operation
sll x7, x28, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x22, x13 # perform first operation
sll x13, x9, x30 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x20, x6 # perform first operation
sll x20, x22, x21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x12, x15, x27 # perform first operation
sll x27, x5, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x21, x26 # perform first operation
sll x19, x29, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x26, x27, x31 # perform first operation
sll x26, x5, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x3, x31 # perform first operation
sll x19, x17, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x5, x19 # perform first operation
sll x5, x26, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x26, x13 # perform first operation
sll x13, x24, x8 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x15, x19 # perform first operation
sll x27, x7, x13 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-sltiu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xe703df0d # initialize rs1
sltiu x12, x0, -2005 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xa98259d3 # initialize rs1
sltiu x23, x1, -689 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xa54c4a76 # initialize rs1
sltiu x6, x2, 145 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xffa51180 # initialize rs1
sltiu x15, x3, -1163 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc510a2e3 # initialize rs1
sltiu x14, x4, -247 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0a0f409d # initialize rs1
sltiu x31, x5, 360 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x6b87f155 # initialize rs1
sltiu x8, x6, 1070 # perform operation
RVTEST_SIGUPD(x7, x0, x8, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xdb312cb8 # initialize rs1
sltiu x14, x7, 1602 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xd0451747 # initialize rs1
sltiu x15, x8, -1206 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x78f39a1a # initialize rs1
sltiu x21, x9, 1099 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x48b408aa # initialize rs1
sltiu x31, x10, 1222 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x24ce06fb # initialize rs1
sltiu x8, x11, 243 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xef129606 # initialize rs1
sltiu x26, x12, 930 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x94cad9d2 # initialize rs1
sltiu x11, x13, 1784 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xa5aae4f4 # initialize rs1
sltiu x12, x14, -1741 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xc0064fce # initialize rs1
sltiu x24, x15, -1002 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x8ee3b108 # initialize rs1
sltiu x12, x16, 625 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x7ff6e6f3 # initialize rs1
sltiu x15, x17, -436 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x2d5cf83f # initialize rs1
sltiu x14, x18, 1276 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xb30d3c38 # initialize rs1
sltiu x28, x19, -1104 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x73087828 # initialize rs1
sltiu x25, x20, 1937 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x8a88f04f # initialize rs1
sltiu x9, x21, 379 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x2221ba6d # initialize rs1
sltiu x26, x22, -1469 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x63d98bdf # initialize rs1
sltiu x27, x23, 1316 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xd1efba1e # initialize rs1
sltiu x25, x24, 1868 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xcd06ea9c # initialize rs1
sltiu x17, x25, -224 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xbbfaca2b # initialize rs1
sltiu x23, x26, -820 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xa74e9470 # initialize rs1
sltiu x10, x27, -189 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x8c6b6407 # initialize rs1
sltiu x25, x28, 200 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x7b3b70ed # initialize rs1
sltiu x30, x29, 783 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x576659a0 # initialize rs1
sltiu x11, x30, 1109 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x3d984117 # initialize rs1
sltiu x6, x31, 663 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 124)

# Testcase cp_rd (Test destination rd = x0)
li x2, 0x52494f9b # initialize rs1
sltiu x0, x2, -686 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x24, 0x8572aacb # initialize rs1
sltiu x1, x24, -910 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x29, 0x7bfe258b # initialize rs1
sltiu x2, x29, -1547 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x6, 0x9304a98b # initialize rs1
sltiu x3, x6, -878 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0x92fef087 # initialize rs1
sltiu x4, x24, -921 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x30, 0x84aa926d # initialize rs1
sltiu x5, x30, -1137 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x7, 0xd99b0962 # initialize rs1
sltiu x6, x7, -1179 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
li x31, 0xcd214c31 # initialize rs1
sltiu x7, x31, 1226 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0x32d19f71 # initialize rs1
sltiu x8, x27, 1450 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x72198489 # initialize rs1
sltiu x9, x27, -840 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x27, 0xe053cfc9 # initialize rs1
sltiu x10, x27, -1664 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x21, 0x2ebf35ae # initialize rs1
sltiu x11, x21, 1596 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x1, 0xa34c5f11 # initialize rs1
sltiu x12, x1, -1006 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x25, 0x87f4fe87 # initialize rs1
sltiu x13, x25, 1690 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x3, 0x3f265659 # initialize rs1
sltiu x14, x3, -780 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x15, 0xb4ba91a7 # initialize rs1
sltiu x15, x15, 1037 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x18, 0xf1174328 # initialize rs1
sltiu x16, x18, 1157 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x31, 0x1e54187e # initialize rs1
sltiu x17, x31, 203 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x14, 0x6f4cb895 # initialize rs1
sltiu x18, x14, -1899 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x15, 0xd3272428 # initialize rs1
sltiu x19, x15, -1513 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x27, 0x17464a35 # initialize rs1
sltiu x20, x27, 1307 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x21, 0x175dca8b # initialize rs1
sltiu x21, x21, -1135 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x29, 0x7f5cad3d # initialize rs1
sltiu x22, x29, 345 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x16, 0xc5feb8ce # initialize rs1
sltiu x23, x16, -344 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x20, 0x12d797ab # initialize rs1
sltiu x24, x20, 2011 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0x34da7873 # initialize rs1
sltiu x25, x7, -492 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x18, 0x45c10291 # initialize rs1
sltiu x26, x18, 691 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x11, 0x76fc9132 # initialize rs1
sltiu x27, x11, 1355 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x31, 0xc8795dd2 # initialize rs1
sltiu x28, x31, 1362 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x29, 0x84859b0f # initialize rs1
sltiu x29, x29, -1254 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x9, 0xf6336162 # initialize rs1
sltiu x30, x9, 1959 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x30, 0x7df5b894 # initialize rs1
sltiu x31, x30, -441 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x00000000 # initialize rs1
sltiu x20, x30, 1247 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x3, 0x00000001 # initialize rs1
sltiu x19, x3, 1041 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x11, 0x00000002 # initialize rs1
sltiu x21, x11, 1420 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x27, 0x80000000 # initialize rs1
sltiu x25, x27, 1908 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x18, 0x80000001 # initialize rs1
sltiu x19, x18, 139 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x5, 0x7fffffff # initialize rs1
sltiu x25, x5, -1263 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x10, 0x7ffffffe # initialize rs1
sltiu x23, x10, 1670 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x6, 0xffffffff # initialize rs1
sltiu x17, x6, -863 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x22, 0xfffffffe # initialize rs1
sltiu x11, x22, -958 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x11, 0x5bbc8872 # initialize rs1
sltiu x18, x11, -964 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x2, 0xaaaaaaaa # initialize rs1
sltiu x21, x2, 1104 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x16, 0x55555555 # initialize rs1
sltiu x21, x16, 596 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 300)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000 # initialize rs1
sltiu x10, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 304)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
sltiu x10, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 308)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000 # initialize rs1
sltiu x3, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 312)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000 # initialize rs1
sltiu x5, x9, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 316)

# Testcase cr_rs1_imm_corners
li x26, 0x00000000 # initialize rs1
sltiu x25, x26, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 320)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
sltiu x17, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cr_rs1_imm_corners
li x3, 0x00000000 # initialize rs1
sltiu x27, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 328)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000 # initialize rs1
sltiu x30, x27, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 332)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
sltiu x14, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 336)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000 # initialize rs1
sltiu x31, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 340)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000 # initialize rs1
sltiu x13, x8, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 344)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000 # initialize rs1
sltiu x28, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 348)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
sltiu x10, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 352)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000 # initialize rs1
sltiu x22, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 356)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
sltiu x10, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 360)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000 # initialize rs1
sltiu x14, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 364)

# Testcase cr_rs1_imm_corners
li x22, 0x00000000 # initialize rs1
sltiu x26, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 368)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000 # initialize rs1
sltiu x24, x5, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 372)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000 # initialize rs1
sltiu x18, x11, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 376)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000 # initialize rs1
sltiu x25, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 380)

# Testcase cr_rs1_imm_corners
li x23, 0x00000001 # initialize rs1
sltiu x14, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 384)

# Testcase cr_rs1_imm_corners
li x23, 0x00000001 # initialize rs1
sltiu x14, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 388)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
sltiu x23, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
sltiu x25, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 396)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
sltiu x31, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 400)

# Testcase cr_rs1_imm_corners
li x17, 0x00000001 # initialize rs1
sltiu x14, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 404)

# Testcase cr_rs1_imm_corners
li x29, 0x00000001 # initialize rs1
sltiu x22, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 408)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
sltiu x3, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 412)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
sltiu x20, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 416)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
sltiu x26, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 420)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
sltiu x2, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 424)

# Testcase cr_rs1_imm_corners
li x14, 0x00000001 # initialize rs1
sltiu x29, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 428)

# Testcase cr_rs1_imm_corners
li x29, 0x00000001 # initialize rs1
sltiu x27, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 432)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
sltiu x13, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 436)

# Testcase cr_rs1_imm_corners
li x17, 0x00000001 # initialize rs1
sltiu x27, x17, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 440)

# Testcase cr_rs1_imm_corners
li x26, 0x00000001 # initialize rs1
sltiu x28, x26, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 444)

# Testcase cr_rs1_imm_corners
li x26, 0x00000001 # initialize rs1
sltiu x3, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 448)

# Testcase cr_rs1_imm_corners
li x9, 0x00000001 # initialize rs1
sltiu x23, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 452)

# Testcase cr_rs1_imm_corners
li x17, 0x00000001 # initialize rs1
sltiu x22, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 456)

# Testcase cr_rs1_imm_corners
li x3, 0x00000001 # initialize rs1
sltiu x26, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 460)

# Testcase cr_rs1_imm_corners
li x18, 0x00000002 # initialize rs1
sltiu x6, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 464)

# Testcase cr_rs1_imm_corners
li x24, 0x00000002 # initialize rs1
sltiu x15, x24, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 468)

# Testcase cr_rs1_imm_corners
li x8, 0x00000002 # initialize rs1
sltiu x19, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 472)

# Testcase cr_rs1_imm_corners
li x28, 0x00000002 # initialize rs1
sltiu x10, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 476)

# Testcase cr_rs1_imm_corners
li x18, 0x00000002 # initialize rs1
sltiu x31, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 480)

# Testcase cr_rs1_imm_corners
li x28, 0x00000002 # initialize rs1
sltiu x7, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 484)

# Testcase cr_rs1_imm_corners
li x6, 0x00000002 # initialize rs1
sltiu x3, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 488)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
sltiu x24, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 492)

# Testcase cr_rs1_imm_corners
li x11, 0x00000002 # initialize rs1
sltiu x2, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 496)

# Testcase cr_rs1_imm_corners
li x15, 0x00000002 # initialize rs1
sltiu x11, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 500)

# Testcase cr_rs1_imm_corners
li x8, 0x00000002 # initialize rs1
sltiu x10, x8, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 504)

# Testcase cr_rs1_imm_corners
li x19, 0x00000002 # initialize rs1
sltiu x10, x19, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 508)

# Testcase cr_rs1_imm_corners
li x24, 0x00000002 # initialize rs1
sltiu x22, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 512)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
sltiu x11, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 516)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
sltiu x27, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 520)

# Testcase cr_rs1_imm_corners
li x23, 0x00000002 # initialize rs1
sltiu x18, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 524)

# Testcase cr_rs1_imm_corners
li x5, 0x00000002 # initialize rs1
sltiu x3, x5, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 528)

# Testcase cr_rs1_imm_corners
li x15, 0x00000002 # initialize rs1
sltiu x27, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 532)

# Testcase cr_rs1_imm_corners
li x2, 0x00000002 # initialize rs1
sltiu x10, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 536)

# Testcase cr_rs1_imm_corners
li x31, 0x00000002 # initialize rs1
sltiu x11, x31, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 540)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
sltiu x23, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 544)

# Testcase cr_rs1_imm_corners
li x29, 0x80000000 # initialize rs1
sltiu x31, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 548)

# Testcase cr_rs1_imm_corners
li x28, 0x80000000 # initialize rs1
sltiu x24, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 552)

# Testcase cr_rs1_imm_corners
li x29, 0x80000000 # initialize rs1
sltiu x28, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 556)

# Testcase cr_rs1_imm_corners
li x19, 0x80000000 # initialize rs1
sltiu x25, x19, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 560)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
sltiu x25, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 564)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
sltiu x31, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 568)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
sltiu x14, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 572)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
sltiu x29, x22, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 576)

# Testcase cr_rs1_imm_corners
li x3, 0x80000000 # initialize rs1
sltiu x22, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 580)

# Testcase cr_rs1_imm_corners
li x31, 0x80000000 # initialize rs1
sltiu x21, x31, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 584)

# Testcase cr_rs1_imm_corners
li x6, 0x80000000 # initialize rs1
sltiu x16, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 588)

# Testcase cr_rs1_imm_corners
li x31, 0x80000000 # initialize rs1
sltiu x6, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 592)

# Testcase cr_rs1_imm_corners
li x18, 0x80000000 # initialize rs1
sltiu x5, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 596)

# Testcase cr_rs1_imm_corners
li x2, 0x80000000 # initialize rs1
sltiu x31, x2, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 600)

# Testcase cr_rs1_imm_corners
li x15, 0x80000000 # initialize rs1
sltiu x6, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 604)

# Testcase cr_rs1_imm_corners
li x7, 0x80000000 # initialize rs1
sltiu x5, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 608)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
sltiu x10, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 612)

# Testcase cr_rs1_imm_corners
li x3, 0x80000000 # initialize rs1
sltiu x21, x3, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 616)

# Testcase cr_rs1_imm_corners
li x14, 0x80000000 # initialize rs1
sltiu x26, x14, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 620)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
sltiu x15, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_imm_corners
li x2, 0x80000001 # initialize rs1
sltiu x27, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 628)

# Testcase cr_rs1_imm_corners
li x25, 0x80000001 # initialize rs1
sltiu x6, x25, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 632)

# Testcase cr_rs1_imm_corners
li x29, 0x80000001 # initialize rs1
sltiu x13, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 636)

# Testcase cr_rs1_imm_corners
li x24, 0x80000001 # initialize rs1
sltiu x15, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 640)

# Testcase cr_rs1_imm_corners
li x19, 0x80000001 # initialize rs1
sltiu x11, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 644)

# Testcase cr_rs1_imm_corners
li x6, 0x80000001 # initialize rs1
sltiu x20, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 648)

# Testcase cr_rs1_imm_corners
li x2, 0x80000001 # initialize rs1
sltiu x12, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 652)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
sltiu x19, x28, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 656)

# Testcase cr_rs1_imm_corners
li x16, 0x80000001 # initialize rs1
sltiu x18, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 660)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
sltiu x19, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 664)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
sltiu x10, x26, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 668)

# Testcase cr_rs1_imm_corners
li x27, 0x80000001 # initialize rs1
sltiu x9, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 672)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
sltiu x27, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 676)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
sltiu x31, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 680)

# Testcase cr_rs1_imm_corners
li x23, 0x80000001 # initialize rs1
sltiu x9, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 684)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
sltiu x8, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 688)

# Testcase cr_rs1_imm_corners
li x21, 0x80000001 # initialize rs1
sltiu x12, x21, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 692)

# Testcase cr_rs1_imm_corners
li x16, 0x80000001 # initialize rs1
sltiu x21, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 696)

# Testcase cr_rs1_imm_corners
li x1, 0x80000001 # initialize rs1
sltiu x14, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 700)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffff # initialize rs1
sltiu x27, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 704)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffff # initialize rs1
sltiu x1, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 708)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
sltiu x26, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 712)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffff # initialize rs1
sltiu x20, x13, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 716)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffff # initialize rs1
sltiu x20, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 720)

# Testcase cr_rs1_imm_corners
li x22, 0x7fffffff # initialize rs1
sltiu x8, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 724)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
sltiu x13, x3, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 728)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffff # initialize rs1
sltiu x1, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 732)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffff # initialize rs1
sltiu x16, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 736)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffff # initialize rs1
sltiu x18, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 740)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
sltiu x6, x17, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 744)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffff # initialize rs1
sltiu x25, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 748)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffff # initialize rs1
sltiu x25, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 752)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffff # initialize rs1
sltiu x25, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 756)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
sltiu x23, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 760)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
sltiu x27, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 764)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffff # initialize rs1
sltiu x11, x9, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 768)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffff # initialize rs1
sltiu x23, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 772)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
sltiu x18, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 776)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffff # initialize rs1
sltiu x27, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 780)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
sltiu x7, x27, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 784)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffe # initialize rs1
sltiu x6, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 788)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
sltiu x10, x27, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 792)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffe # initialize rs1
sltiu x10, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 796)

# Testcase cr_rs1_imm_corners
li x2, 0x7ffffffe # initialize rs1
sltiu x26, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 800)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
sltiu x10, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 804)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
sltiu x10, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 808)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
sltiu x6, x14, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 812)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffe # initialize rs1
sltiu x9, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 816)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffe # initialize rs1
sltiu x21, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 820)

# Testcase cr_rs1_imm_corners
li x18, 0x7ffffffe # initialize rs1
sltiu x29, x18, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 824)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
sltiu x19, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 828)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
sltiu x23, x7, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 832)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
sltiu x30, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 836)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
sltiu x30, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 840)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
sltiu x15, x7, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 844)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffe # initialize rs1
sltiu x21, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 848)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
sltiu x28, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 852)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffe # initialize rs1
sltiu x10, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 856)

# Testcase cr_rs1_imm_corners
li x26, 0x7ffffffe # initialize rs1
sltiu x24, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 860)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffff # initialize rs1
sltiu x31, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 864)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffff # initialize rs1
sltiu x27, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 868)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffff # initialize rs1
sltiu x11, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 872)

# Testcase cr_rs1_imm_corners
li x2, 0xffffffff # initialize rs1
sltiu x26, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 876)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffff # initialize rs1
sltiu x30, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffff # initialize rs1
sltiu x25, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 884)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffff # initialize rs1
sltiu x28, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 888)

# Testcase cr_rs1_imm_corners
li x23, 0xffffffff # initialize rs1
sltiu x18, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 892)

# Testcase cr_rs1_imm_corners
li x15, 0xffffffff # initialize rs1
sltiu x13, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 896)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffff # initialize rs1
sltiu x17, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 900)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffff # initialize rs1
sltiu x7, x24, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 904)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffff # initialize rs1
sltiu x12, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 908)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffff # initialize rs1
sltiu x13, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 912)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
sltiu x8, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 916)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffff # initialize rs1
sltiu x25, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 920)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffff # initialize rs1
sltiu x30, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 924)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffff # initialize rs1
sltiu x29, x31, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 928)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
sltiu x30, x18, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 932)

# Testcase cr_rs1_imm_corners
li x17, 0xffffffff # initialize rs1
sltiu x1, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 936)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffff # initialize rs1
sltiu x13, x11, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 940)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffe # initialize rs1
sltiu x13, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 944)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffe # initialize rs1
sltiu x29, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 948)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
sltiu x14, x24, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 952)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffe # initialize rs1
sltiu x26, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 956)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
sltiu x25, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 960)

# Testcase cr_rs1_imm_corners
li x9, 0xfffffffe # initialize rs1
sltiu x28, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 964)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
sltiu x27, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 968)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
sltiu x21, x24, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 972)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffe # initialize rs1
sltiu x24, x13, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 976)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffe # initialize rs1
sltiu x13, x22, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 980)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffe # initialize rs1
sltiu x30, x7, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 984)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffe # initialize rs1
sltiu x6, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 988)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffe # initialize rs1
sltiu x1, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 992)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffe # initialize rs1
sltiu x10, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 996)

# Testcase cr_rs1_imm_corners
li x28, 0xfffffffe # initialize rs1
sltiu x20, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1000)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
sltiu x25, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1004)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffe # initialize rs1
sltiu x18, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1008)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
sltiu x10, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1012)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffe # initialize rs1
sltiu x31, x12, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1016)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffe # initialize rs1
sltiu x6, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1020)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc8872 # initialize rs1
sltiu x19, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1024)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc8872 # initialize rs1
sltiu x27, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1028)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc8872 # initialize rs1
sltiu x16, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1032)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc8872 # initialize rs1
sltiu x14, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1036)

# Testcase cr_rs1_imm_corners
li x23, 0x5bbc8872 # initialize rs1
sltiu x15, x23, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1040)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc8872 # initialize rs1
sltiu x24, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1044)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc8872 # initialize rs1
sltiu x17, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1048)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
sltiu x10, x21, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1052)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc8872 # initialize rs1
sltiu x16, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1056)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc8872 # initialize rs1
sltiu x15, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1060)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
sltiu x11, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1064)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc8872 # initialize rs1
sltiu x17, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1068)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
sltiu x14, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1072)

# Testcase cr_rs1_imm_corners
li x31, 0x5bbc8872 # initialize rs1
sltiu x12, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1076)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc8872 # initialize rs1
sltiu x10, x2, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1080)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
sltiu x13, x15, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1084)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc8872 # initialize rs1
sltiu x16, x20, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1088)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc8872 # initialize rs1
sltiu x12, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1092)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc8872 # initialize rs1
sltiu x3, x25, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1096)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
sltiu x24, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1100)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaa # initialize rs1
sltiu x25, x13, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1104)

# Testcase cr_rs1_imm_corners
li x23, 0xaaaaaaaa # initialize rs1
sltiu x2, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1108)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaa # initialize rs1
sltiu x9, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1112)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaa # initialize rs1
sltiu x23, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1116)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
sltiu x30, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1120)

# Testcase cr_rs1_imm_corners
li x2, 0xaaaaaaaa # initialize rs1
sltiu x26, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1124)

# Testcase cr_rs1_imm_corners
li x5, 0xaaaaaaaa # initialize rs1
sltiu x7, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1128)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
sltiu x7, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1132)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaa # initialize rs1
sltiu x12, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1136)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
sltiu x17, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1140)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaa # initialize rs1
sltiu x10, x7, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1144)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
sltiu x19, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1148)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaa # initialize rs1
sltiu x1, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1152)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
sltiu x6, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1156)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaa # initialize rs1
sltiu x16, x8, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1160)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaa # initialize rs1
sltiu x31, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1164)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
sltiu x29, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1168)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaa # initialize rs1
sltiu x14, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1172)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaa # initialize rs1
sltiu x28, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1176)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaa # initialize rs1
sltiu x26, x30, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1180)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
sltiu x6, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1184)

# Testcase cr_rs1_imm_corners
li x15, 0x55555555 # initialize rs1
sltiu x16, x15, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1188)

# Testcase cr_rs1_imm_corners
li x9, 0x55555555 # initialize rs1
sltiu x11, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1192)

# Testcase cr_rs1_imm_corners
li x18, 0x55555555 # initialize rs1
sltiu x3, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cr_rs1_imm_corners
li x27, 0x55555555 # initialize rs1
sltiu x19, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1200)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
sltiu x13, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1204)

# Testcase cr_rs1_imm_corners
li x13, 0x55555555 # initialize rs1
sltiu x6, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1208)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
sltiu x31, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1212)

# Testcase cr_rs1_imm_corners
li x12, 0x55555555 # initialize rs1
sltiu x23, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1216)

# Testcase cr_rs1_imm_corners
li x31, 0x55555555 # initialize rs1
sltiu x6, x31, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1220)

# Testcase cr_rs1_imm_corners
li x1, 0x55555555 # initialize rs1
sltiu x11, x1, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1224)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
sltiu x7, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1228)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
sltiu x24, x20, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1232)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
sltiu x30, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1236)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
sltiu x11, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1240)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
sltiu x7, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1244)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
sltiu x3, x20, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1248)

# Testcase cr_rs1_imm_corners
li x19, 0x55555555 # initialize rs1
sltiu x12, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1252)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
sltiu x9, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1256)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
sltiu x25, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xd91b6375 # initialize rs1
sltiu x0, x0, 830 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x632a5ccd # initialize rs1
sltiu x1, x1, 1114 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x008e17b5 # initialize rs1
sltiu x2, x2, -1986 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x3059a501 # initialize rs1
sltiu x3, x3, -1207 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x8fc9121d # initialize rs1
sltiu x4, x4, 1227 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x008c9740 # initialize rs1
sltiu x5, x5, 749 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x95976a3a # initialize rs1
sltiu x6, x6, -890 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x513afbcd # initialize rs1
sltiu x7, x7, -1184 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xfce3a75c # initialize rs1
sltiu x8, x8, -373 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x466195bb # initialize rs1
sltiu x9, x9, 1226 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xc58b4017 # initialize rs1
sltiu x10, x10, -1304 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x807df05c # initialize rs1
sltiu x11, x11, -1263 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xd024dd68 # initialize rs1
sltiu x12, x12, 1886 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x25c62159 # initialize rs1
sltiu x13, x13, 1755 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x25eec24f # initialize rs1
sltiu x14, x14, 1980 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x426e7e3b # initialize rs1
sltiu x15, x15, 1075 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xc97fb499 # initialize rs1
sltiu x16, x16, 335 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x031f33a4 # initialize rs1
sltiu x17, x17, 1373 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x5b9eb1fa # initialize rs1
sltiu x18, x18, -803 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x3e7cb7a7 # initialize rs1
sltiu x19, x19, 1944 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x3a532637 # initialize rs1
sltiu x20, x20, 1006 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xf38c3725 # initialize rs1
sltiu x21, x21, -69 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x31aebc8a # initialize rs1
sltiu x22, x22, 1608 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xa70119af # initialize rs1
sltiu x23, x23, -954 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xe5c463e8 # initialize rs1
sltiu x24, x24, -883 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xa7b25954 # initialize rs1
sltiu x25, x25, 793 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x0c649b26 # initialize rs1
sltiu x26, x26, 1231 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x9a647045 # initialize rs1
sltiu x27, x27, 323 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xfa7e8e5f # initialize rs1
sltiu x28, x28, 511 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xc241f6c7 # initialize rs1
sltiu x29, x29, 1499 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x4bd66f0b # initialize rs1
sltiu x30, x30, -1815 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x98e95bb1 # initialize rs1
sltiu x31, x31, 58 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x21, 0xa717f481 # initialize rs1
sltiu x22, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1392)

# Testcase cp_imm_corners
li x21, 0x6486b71c # initialize rs1
sltiu x3, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1396)

# Testcase cp_imm_corners
li x5, 0x255029cd # initialize rs1
sltiu x10, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1400)

# Testcase cp_imm_corners
li x1, 0xc1a89397 # initialize rs1
sltiu x16, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1404)

# Testcase cp_imm_corners
li x11, 0x2e2eecde # initialize rs1
sltiu x24, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cp_imm_corners
li x30, 0x1aeb269b # initialize rs1
sltiu x28, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1412)

# Testcase cp_imm_corners
li x13, 0x5aa82fd9 # initialize rs1
sltiu x27, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1416)

# Testcase cp_imm_corners
li x16, 0x2566550c # initialize rs1
sltiu x6, x16, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1420)

# Testcase cp_imm_corners
li x9, 0x25f70b83 # initialize rs1
sltiu x11, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1424)

# Testcase cp_imm_corners
li x16, 0xb1353e43 # initialize rs1
sltiu x23, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1428)

# Testcase cp_imm_corners
li x5, 0x81551f8c # initialize rs1
sltiu x12, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1432)

# Testcase cp_imm_corners
li x3, 0xed68d42f # initialize rs1
sltiu x5, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1436)

# Testcase cp_imm_corners
li x6, 0x8838222b # initialize rs1
sltiu x27, x6, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1440)

# Testcase cp_imm_corners
li x6, 0x9f15dbe3 # initialize rs1
sltiu x23, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1444)

# Testcase cp_imm_corners
li x31, 0x17cd22d4 # initialize rs1
sltiu x8, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1448)

# Testcase cp_imm_corners
li x30, 0x629e1f3a # initialize rs1
sltiu x2, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1452)

# Testcase cp_imm_corners
li x22, 0xc5f7da8d # initialize rs1
sltiu x25, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1456)

# Testcase cp_imm_corners
li x23, 0x3ad7e86a # initialize rs1
sltiu x8, x23, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1460)

# Testcase cp_imm_corners
li x21, 0x310662c3 # initialize rs1
sltiu x30, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1464)

# Testcase cp_imm_corners
li x12, 0x8b9f9752 # initialize rs1
sltiu x31, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x30, x5 # perform first operation
sltiu x26, x28, 1916 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x24, x21, x7 # perform first operation
sltiu x17, x29, -1835 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x30, x29 # perform first operation
sltiu x16, x31, 1923 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x31, x27, x29 # perform first operation
sltiu x31, x20, 238 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x31, x5 # perform first operation
sltiu x5, x27, -1990 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x3, x16, x14 # perform first operation
sltiu x16, x25, -600 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x30, x16, x14 # perform first operation
sltiu x30, x31, -1078 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x10, x3, x15 # perform first operation
sltiu x10, x25, 1071 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x13, x1, x27 # perform first operation
sltiu x13, x15, 1417 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x20, x24, x11 # perform first operation
sltiu x24, x7, 1525 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x30, x12, x22 # perform first operation
sltiu x22, x10, 436 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x3, x5 # perform first operation
sltiu x18, x27, -546 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-sra.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x768d6c0c # initialize rs1
li x24, 0xae7b31a3 # initialize rs2
sra x19, x0, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xdfc3364c # initialize rs1
li x8, 0x2ab0890c # initialize rs2
sra x18, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x70f77233 # initialize rs1
li x15, 0xe408147a # initialize rs2
sra x30, x2, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x2cb67f1b # initialize rs1
li x2, 0x3def610c # initialize rs2
sra x7, x3, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x731b43f5 # initialize rs1
li x17, 0x0cc4ee38 # initialize rs2
sra x6, x4, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x5a3aaad5 # initialize rs1
li x30, 0x26e5aa25 # initialize rs2
sra x28, x5, x30 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x30e6035d # initialize rs1
li x11, 0x179d5990 # initialize rs2
sra x16, x6, x11 # perform operation
RVTEST_SIGUPD(x7, x0, x16, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x13aba15f # initialize rs1
li x2, 0x4fa19ba8 # initialize rs2
sra x22, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x2b0bad06 # initialize rs1
li x6, 0x1488dfd5 # initialize rs2
sra x21, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x973fec16 # initialize rs1
li x2, 0x86cf6c8e # initialize rs2
sra x29, x9, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x0da307be # initialize rs1
li x24, 0xcae05caf # initialize rs2
sra x9, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x89a74887 # initialize rs1
li x27, 0xd3b31057 # initialize rs2
sra x20, x11, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x150d76e2 # initialize rs1
li x21, 0x2501bbdb # initialize rs2
sra x8, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xe3baa011 # initialize rs1
li x21, 0x8d8bfac7 # initialize rs2
sra x28, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc202b2fb # initialize rs1
li x23, 0x92cf894a # initialize rs2
sra x1, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x9e77a6bf # initialize rs1
li x23, 0xe94b9888 # initialize rs2
sra x28, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x4d4b538c # initialize rs1
li x23, 0x43867766 # initialize rs2
sra x6, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x663d0eb8 # initialize rs1
li x21, 0x8c1600f2 # initialize rs2
sra x31, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xe333809d # initialize rs1
li x17, 0xb163c3e9 # initialize rs2
sra x5, x18, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xebd5dcea # initialize rs1
li x3, 0x9335c9d9 # initialize rs2
sra x23, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x9971e67d # initialize rs1
li x31, 0x86bb6209 # initialize rs2
sra x26, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x5e08c0a6 # initialize rs1
li x15, 0x2e622d8a # initialize rs2
sra x17, x21, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x077cbaac # initialize rs1
li x12, 0x7c2da70e # initialize rs2
sra x1, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x9f4a7462 # initialize rs1
li x11, 0x444ba035 # initialize rs2
sra x18, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x481a11d6 # initialize rs1
li x2, 0x4bfac4a1 # initialize rs2
sra x21, x24, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x1707059a # initialize rs1
li x21, 0x2c4c733c # initialize rs2
sra x11, x25, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xbf20b062 # initialize rs1
li x25, 0x30afc085 # initialize rs2
sra x13, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xd66f9072 # initialize rs1
li x15, 0xd6ba7a56 # initialize rs2
sra x26, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xa9ab98f6 # initialize rs1
li x3, 0x2a8f306e # initialize rs2
sra x17, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x553883dc # initialize rs1
li x16, 0x5e5f7659 # initialize rs2
sra x3, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x3ae79a91 # initialize rs1
li x5, 0x686ae9c2 # initialize rs2
sra x14, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xd060985c # initialize rs1
li x20, 0xa0e263a0 # initialize rs2
sra x24, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x20, 0x4e21d93b # initialize rs1
li x0, 0x9a3fa9d6 # initialize rs2
sra x22, x20, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x7, 0xb4dff5ba # initialize rs1
li x1, 0xcc485092 # initialize rs2
sra x23, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x26, 0xec00fd16 # initialize rs1
li x2, 0x65df5afe # initialize rs2
sra x29, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x5, 0x6922a4fd # initialize rs1
li x3, 0xd78835f5 # initialize rs2
sra x22, x5, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x26, 0x04e3be0b # initialize rs1
li x4, 0xfc5db039 # initialize rs2
sra x15, x26, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x26, 0x7fa7d455 # initialize rs1
li x5, 0xb850d09d # initialize rs2
sra x28, x26, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x28, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0x36fdc582 # initialize rs1
li x6, 0x05487e35 # initialize rs2
sra x10, x22, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x10, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0x2189c900 # initialize rs1
li x7, 0x9ed0cb68 # initialize rs2
sra x25, x12, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x30, 0x4ae2b351 # initialize rs1
li x8, 0xed747fca # initialize rs2
sra x24, x30, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x12, 0x14becafa # initialize rs1
li x9, 0x13433c6c # initialize rs2
sra x14, x12, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x5, 0xce0dbd40 # initialize rs1
li x10, 0xdfb8f03f # initialize rs2
sra x24, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x23, 0xae7fbc85 # initialize rs1
li x11, 0xfa1c37b5 # initialize rs2
sra x15, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x22, 0xdf82327a # initialize rs1
li x12, 0xad911aef # initialize rs2
sra x23, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x25, 0x967316e0 # initialize rs1
li x13, 0x6db511d7 # initialize rs2
sra x7, x25, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x1, 0xddbbf7c1 # initialize rs1
li x14, 0x80894741 # initialize rs2
sra x31, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x20, 0x1d743a14 # initialize rs1
li x15, 0x4484a37f # initialize rs2
sra x5, x20, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x19, 0xf58069b3 # initialize rs1
li x16, 0x923b51f9 # initialize rs2
sra x13, x19, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x3, 0x4bf7c2e1 # initialize rs1
li x17, 0x712dcbc5 # initialize rs2
sra x11, x3, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x31, 0xf9afd508 # initialize rs1
li x18, 0x1d7994a3 # initialize rs2
sra x8, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x24, 0xe93fb52c # initialize rs1
li x19, 0x803565ef # initialize rs2
sra x29, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x18, 0xff478f10 # initialize rs1
li x20, 0xe0dae1c5 # initialize rs2
sra x6, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x7, 0x890e1af2 # initialize rs1
li x21, 0x98ffe4dd # initialize rs2
sra x23, x7, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x31, 0x29c58596 # initialize rs1
li x22, 0x2a6fd313 # initialize rs2
sra x1, x31, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x29, 0xdab27a61 # initialize rs1
li x23, 0x6b255f84 # initialize rs2
sra x12, x29, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x6, 0xa3f3a8de # initialize rs1
li x24, 0xb42326d5 # initialize rs2
sra x9, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x6, 0x757c8ca0 # initialize rs1
li x25, 0xc4de386b # initialize rs2
sra x9, x6, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x19, 0x72203f85 # initialize rs1
li x26, 0x71cdadc2 # initialize rs2
sra x14, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x13, 0xe240491b # initialize rs1
li x27, 0x9e08b000 # initialize rs2
sra x24, x13, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x3, 0xbc92d2ad # initialize rs1
li x28, 0xea28ed76 # initialize rs2
sra x12, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x19, 0x4a892786 # initialize rs1
li x29, 0x301fe2db # initialize rs2
sra x26, x19, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x27, 0xc742be49 # initialize rs1
li x30, 0x2a260b4d # initialize rs2
sra x9, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x5, 0x141e0474 # initialize rs1
li x31, 0xad1c3124 # initialize rs2
sra x22, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 252)

# Testcase cp_rd (Test destination rd = x0)
li x7, 0x977a0c04 # initialize rs1
li x11, 0x59815d7e # initialize rs2
sra x0, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x10, 0x0fde4ec4 # initialize rs1
li x25, 0xa5c3bf5a # initialize rs2
sra x1, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x19, 0xe7c4d711 # initialize rs1
li x28, 0xc42b989e # initialize rs2
sra x2, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x9, 0x045fab80 # initialize rs1
li x20, 0x7c27eecd # initialize rs2
sra x3, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0xe5456386 # initialize rs1
li x31, 0x4b818744 # initialize rs2
sra x4, x24, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x28, 0xd99a0001 # initialize rs1
li x24, 0x5542ce5e # initialize rs2
sra x5, x28, x24 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0xe72dd4fe # initialize rs1
li x19, 0x99765f8a # initialize rs2
sra x6, x23, x19 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0x2879478c # initialize rs1
li x16, 0x528267c9 # initialize rs2
sra x7, x4, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x4, 0x124a74dc # initialize rs1
li x3, 0xda69a857 # initialize rs2
sra x8, x4, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0xf1ffcf6b # initialize rs1
li x7, 0x80f9bdf4 # initialize rs2
sra x9, x31, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x27, 0x4365082f # initialize rs1
li x17, 0xf30e9b30 # initialize rs2
sra x10, x27, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x14, 0x70c8b480 # initialize rs1
li x17, 0x28741812 # initialize rs2
sra x11, x14, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x25, 0x04d82964 # initialize rs1
li x1, 0x88f0c3a7 # initialize rs2
sra x12, x25, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x24, 0x8e7f9b87 # initialize rs1
li x22, 0x68ad6f02 # initialize rs2
sra x13, x24, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x2, 0xd341de81 # initialize rs1
li x11, 0x39f1bc95 # initialize rs2
sra x14, x2, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x29, 0x1c3f5cfa # initialize rs1
li x23, 0x71a9c327 # initialize rs2
sra x15, x29, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x3, 0x7e23117a # initialize rs1
li x17, 0x4b198bb7 # initialize rs2
sra x16, x3, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x18, 0x8355fb0b # initialize rs1
li x6, 0x596f9e88 # initialize rs2
sra x17, x18, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0xb890d536 # initialize rs1
li x28, 0x6552601b # initialize rs2
sra x18, x7, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x16, 0xbf8e9ca0 # initialize rs1
li x29, 0x77e207c6 # initialize rs2
sra x19, x16, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x16, 0x8b019521 # initialize rs1
li x21, 0xe9d0270b # initialize rs2
sra x20, x16, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x12, 0x306332cf # initialize rs1
li x11, 0x38853290 # initialize rs2
sra x21, x12, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x10, 0x31a22f5e # initialize rs1
li x2, 0x850a7baa # initialize rs2
sra x22, x10, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x22, 0xa15bc4af # initialize rs1
li x12, 0xd95b3e7f # initialize rs2
sra x23, x22, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x2, 0xe35164a0 # initialize rs1
li x8, 0xba0460b6 # initialize rs2
sra x24, x2, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x29, 0x663b3c59 # initialize rs1
li x7, 0x10d6b34b # initialize rs2
sra x25, x29, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x3, 0x7a554229 # initialize rs1
li x16, 0x80b5f357 # initialize rs2
sra x26, x3, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x9, 0x3cc55788 # initialize rs1
li x30, 0x28658da0 # initialize rs2
sra x27, x9, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x11, 0xe672dc15 # initialize rs1
li x28, 0x64935bfb # initialize rs2
sra x28, x11, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0xf4cd6b14 # initialize rs1
li x28, 0xcd045703 # initialize rs2
sra x29, x17, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x17, 0x53ed83ef # initialize rs1
li x8, 0xb4af7313 # initialize rs2
sra x30, x17, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x3, 0x333d812b # initialize rs1
li x18, 0x55870c84 # initialize rs2
sra x31, x3, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x00000000 # initialize rs1
li x10, 0x66153826 # initialize rs2
sra x12, x20, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x13, 0x00000001 # initialize rs1
li x27, 0xae731dc4 # initialize rs2
sra x24, x13, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x4, 0x00000002 # initialize rs1
li x27, 0x5926f28d # initialize rs2
sra x18, x4, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x11, 0x80000000 # initialize rs1
li x26, 0xcef89036 # initialize rs2
sra x10, x11, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x2, 0x80000001 # initialize rs1
li x31, 0x4840ae7b # initialize rs2
sra x3, x2, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x13, 0x7fffffff # initialize rs1
li x6, 0x40dcd47f # initialize rs2
sra x21, x13, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x28, 0x7ffffffe # initialize rs1
li x18, 0x4ac183dd # initialize rs2
sra x9, x28, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x26, 0xffffffff # initialize rs1
li x24, 0xa77c9aa3 # initialize rs2
sra x27, x26, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x12, 0xfffffffe # initialize rs1
li x6, 0x7371dcc0 # initialize rs2
sra x8, x12, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x11, 0x5bbc8872 # initialize rs1
li x7, 0xe522ade2 # initialize rs2
sra x31, x11, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x9, 0xaaaaaaaa # initialize rs1
li x6, 0x6c54ed4e # initialize rs2
sra x18, x9, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x1, 0x55555555 # initialize rs1
li x10, 0x32801895 # initialize rs2
sra x30, x1, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x25, 0x7dd4f376 # initialize rs1
li x9, 0x00000000 # initialize rs2
sra x11, x25, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x19, 0x618d6558 # initialize rs1
li x12, 0x00000001 # initialize rs2
sra x21, x19, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x2, 0x9b2c1006 # initialize rs1
li x6, 0x00000002 # initialize rs2
sra x29, x2, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x1, 0xb232d2b9 # initialize rs1
li x24, 0x80000000 # initialize rs2
sra x15, x1, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x16, 0x364b7e5b # initialize rs1
li x14, 0x80000001 # initialize rs2
sra x4, x16, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x14, 0x68cee31c # initialize rs1
li x27, 0x7fffffff # initialize rs2
sra x1, x14, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x2, 0xe392336c # initialize rs1
li x23, 0x7ffffffe # initialize rs2
sra x10, x2, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x11, 0xe3847dc7 # initialize rs1
li x20, 0xffffffff # initialize rs2
sra x7, x11, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x25, 0x4e382848 # initialize rs1
li x31, 0xfffffffe # initialize rs2
sra x11, x25, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x31, 0xbc1322c1 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
sra x26, x31, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x11, 0xaf972272 # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
sra x18, x11, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x29, 0x32d07e24 # initialize rs1
li x17, 0x55555555 # initialize rs2
sra x27, x29, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x8, 0x00000000 # initialize rs1
li x9, 0x00000000 # initialize rs2
sra x18, x8, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x3, 0x00000000 # initialize rs1
li x7, 0x00000001 # initialize rs2
sra x4, x3, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x19, 0x00000000 # initialize rs1
li x21, 0x00000002 # initialize rs2
sra x25, x19, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x1, 0x00000000 # initialize rs1
li x22, 0x80000000 # initialize rs2
sra x7, x1, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x15, 0x00000000 # initialize rs1
li x19, 0x80000001 # initialize rs2
sra x23, x15, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x20, 0x00000000 # initialize rs1
li x8, 0x7fffffff # initialize rs2
sra x17, x20, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x19, 0x00000000 # initialize rs1
li x9, 0x7ffffffe # initialize rs2
sra x1, x19, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x3, 0x00000000 # initialize rs1
li x15, 0xffffffff # initialize rs2
sra x14, x3, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x14, 0x00000000 # initialize rs1
li x19, 0xfffffffe # initialize rs2
sra x23, x14, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x10, 0x00000000 # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
sra x2, x10, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x29, 0x00000000 # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
sra x8, x29, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x13, 0x00000000 # initialize rs1
li x18, 0x55555555 # initialize rs2
sra x20, x13, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x8, 0x00000001 # initialize rs1
li x30, 0x00000000 # initialize rs2
sra x10, x8, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x26, 0x00000001 # initialize rs1
li x6, 0x00000001 # initialize rs2
sra x29, x26, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x12, 0x00000001 # initialize rs1
li x30, 0x00000002 # initialize rs2
sra x20, x12, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x18, 0x00000001 # initialize rs1
li x29, 0x80000000 # initialize rs2
sra x8, x18, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x23, 0x00000001 # initialize rs1
li x10, 0x80000001 # initialize rs2
sra x11, x23, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x6, 0x00000001 # initialize rs1
li x15, 0x7fffffff # initialize rs2
sra x16, x6, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x20, 0x00000001 # initialize rs1
li x31, 0x7ffffffe # initialize rs2
sra x16, x20, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x12, 0x00000001 # initialize rs1
li x9, 0xffffffff # initialize rs2
sra x4, x12, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x12, 0x00000001 # initialize rs1
li x20, 0xfffffffe # initialize rs2
sra x8, x12, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x24, 0x00000001 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
sra x10, x24, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x12, 0x00000001 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
sra x28, x12, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x14, 0x00000001 # initialize rs1
li x18, 0x55555555 # initialize rs2
sra x9, x14, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x2, 0x00000002 # initialize rs1
li x15, 0x00000000 # initialize rs2
sra x7, x2, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x24, 0x00000002 # initialize rs1
li x20, 0x00000001 # initialize rs2
sra x9, x24, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x16, 0x00000002 # initialize rs1
li x12, 0x00000002 # initialize rs2
sra x26, x16, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x9, 0x00000002 # initialize rs1
li x24, 0x80000000 # initialize rs2
sra x20, x9, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x24, 0x00000002 # initialize rs1
li x13, 0x80000001 # initialize rs2
sra x31, x24, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x21, 0x00000002 # initialize rs1
li x6, 0x7fffffff # initialize rs2
sra x28, x21, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x20, 0x00000002 # initialize rs1
li x31, 0x7ffffffe # initialize rs2
sra x28, x20, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x21, 0x00000002 # initialize rs1
li x6, 0xffffffff # initialize rs2
sra x30, x21, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x30, 0x00000002 # initialize rs1
li x31, 0xfffffffe # initialize rs2
sra x2, x30, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x10, 0x00000002 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
sra x20, x10, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x20, 0x00000002 # initialize rs1
li x16, 0xaaaaaaaa # initialize rs2
sra x3, x20, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x21, 0x00000002 # initialize rs1
li x30, 0x55555555 # initialize rs2
sra x2, x21, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x20, 0x80000000 # initialize rs1
li x21, 0x00000000 # initialize rs2
sra x24, x20, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x1, 0x80000000 # initialize rs1
li x24, 0x00000001 # initialize rs2
sra x28, x1, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x16, 0x80000000 # initialize rs1
li x9, 0x00000002 # initialize rs2
sra x28, x16, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x30, 0x80000000 # initialize rs1
li x18, 0x80000000 # initialize rs2
sra x1, x30, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x13, 0x80000000 # initialize rs1
li x11, 0x80000001 # initialize rs2
sra x25, x13, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x28, 0x80000000 # initialize rs1
li x15, 0x7fffffff # initialize rs2
sra x19, x28, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x2, 0x80000000 # initialize rs1
li x14, 0x7ffffffe # initialize rs2
sra x10, x2, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x24, 0x80000000 # initialize rs1
li x8, 0xffffffff # initialize rs2
sra x27, x24, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x3, 0x80000000 # initialize rs1
li x14, 0xfffffffe # initialize rs2
sra x21, x3, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x8, 0x80000000 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
sra x2, x8, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x7, 0x80000000 # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
sra x3, x7, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x22, 0x80000000 # initialize rs1
li x14, 0x55555555 # initialize rs2
sra x17, x22, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x10, 0x80000001 # initialize rs1
li x18, 0x00000000 # initialize rs2
sra x21, x10, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x26, 0x80000001 # initialize rs1
li x14, 0x00000001 # initialize rs2
sra x4, x26, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x31, 0x80000001 # initialize rs1
li x21, 0x00000002 # initialize rs2
sra x22, x31, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x17, 0x80000001 # initialize rs1
li x31, 0x80000000 # initialize rs2
sra x7, x17, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x19, 0x80000001 # initialize rs1
li x28, 0x80000001 # initialize rs2
sra x16, x19, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x6, 0x80000001 # initialize rs1
li x25, 0x7fffffff # initialize rs2
sra x28, x6, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x24, 0x80000001 # initialize rs1
li x15, 0x7ffffffe # initialize rs2
sra x2, x24, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x14, 0x80000001 # initialize rs1
li x22, 0xffffffff # initialize rs2
sra x11, x14, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x30, 0x80000001 # initialize rs1
li x23, 0xfffffffe # initialize rs2
sra x26, x30, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x7, 0x80000001 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
sra x19, x7, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x23, 0x80000001 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
sra x4, x23, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x6, 0x80000001 # initialize rs1
li x14, 0x55555555 # initialize rs2
sra x9, x6, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x2, 0x7fffffff # initialize rs1
li x29, 0x00000000 # initialize rs2
sra x8, x2, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x2, 0x7fffffff # initialize rs1
li x1, 0x00000001 # initialize rs2
sra x17, x2, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x26, 0x7fffffff # initialize rs1
li x22, 0x00000002 # initialize rs2
sra x27, x26, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x20, 0x7fffffff # initialize rs1
li x30, 0x80000000 # initialize rs2
sra x28, x20, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x23, 0x7fffffff # initialize rs1
li x28, 0x80000001 # initialize rs2
sra x27, x23, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x27, 0x7fffffff # initialize rs1
li x7, 0x7fffffff # initialize rs2
sra x29, x27, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x28, 0x7fffffff # initialize rs1
li x7, 0x7ffffffe # initialize rs2
sra x30, x28, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x23, 0x7fffffff # initialize rs1
li x13, 0xffffffff # initialize rs2
sra x4, x23, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x22, 0x7fffffff # initialize rs1
li x27, 0xfffffffe # initialize rs2
sra x9, x22, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x4, 0x7fffffff # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
sra x30, x4, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x19, 0x7fffffff # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
sra x8, x19, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x23, 0x7fffffff # initialize rs1
li x9, 0x55555555 # initialize rs2
sra x27, x23, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x19, 0x7ffffffe # initialize rs1
li x18, 0x00000000 # initialize rs2
sra x25, x19, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x22, 0x7ffffffe # initialize rs1
li x12, 0x00000001 # initialize rs2
sra x19, x22, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x29, 0x7ffffffe # initialize rs1
li x8, 0x00000002 # initialize rs2
sra x30, x29, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x1, 0x7ffffffe # initialize rs1
li x8, 0x80000000 # initialize rs2
sra x6, x1, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x11, 0x7ffffffe # initialize rs1
li x17, 0x80000001 # initialize rs2
sra x6, x11, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x24, 0x7ffffffe # initialize rs1
li x25, 0x7fffffff # initialize rs2
sra x28, x24, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x12, 0x7ffffffe # initialize rs1
li x25, 0x7ffffffe # initialize rs2
sra x28, x12, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x15, 0x7ffffffe # initialize rs1
li x18, 0xffffffff # initialize rs2
sra x9, x15, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x12, 0x7ffffffe # initialize rs1
li x13, 0xfffffffe # initialize rs2
sra x18, x12, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x3, 0x7ffffffe # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
sra x15, x3, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x8, 0x7ffffffe # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
sra x31, x8, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x7, 0x7ffffffe # initialize rs1
li x17, 0x55555555 # initialize rs2
sra x18, x7, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x9, 0xffffffff # initialize rs1
li x23, 0x00000000 # initialize rs2
sra x20, x9, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x27, 0xffffffff # initialize rs1
li x9, 0x00000001 # initialize rs2
sra x7, x27, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x19, 0xffffffff # initialize rs1
li x30, 0x00000002 # initialize rs2
sra x16, x19, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x28, 0xffffffff # initialize rs1
li x23, 0x80000000 # initialize rs2
sra x27, x28, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x8, 0xffffffff # initialize rs1
li x18, 0x80000001 # initialize rs2
sra x11, x8, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x26, 0xffffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
sra x19, x26, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x12, 0xffffffff # initialize rs1
li x2, 0x7ffffffe # initialize rs2
sra x22, x12, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x11, 0xffffffff # initialize rs1
li x21, 0xffffffff # initialize rs2
sra x2, x11, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x11, 0xffffffff # initialize rs1
li x12, 0xfffffffe # initialize rs2
sra x4, x11, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x9, 0xffffffff # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
sra x13, x9, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x16, 0xffffffff # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
sra x23, x16, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x16, 0xffffffff # initialize rs1
li x1, 0x55555555 # initialize rs2
sra x24, x16, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x1, 0xfffffffe # initialize rs1
li x19, 0x00000000 # initialize rs2
sra x31, x1, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x18, 0xfffffffe # initialize rs1
li x12, 0x00000001 # initialize rs2
sra x24, x18, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x22, 0xfffffffe # initialize rs1
li x23, 0x00000002 # initialize rs2
sra x11, x22, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x3, 0xfffffffe # initialize rs1
li x17, 0x80000000 # initialize rs2
sra x23, x3, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x27, 0xfffffffe # initialize rs1
li x14, 0x80000001 # initialize rs2
sra x4, x27, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x6, 0xfffffffe # initialize rs1
li x19, 0x7fffffff # initialize rs2
sra x13, x6, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x3, 0xfffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
sra x17, x3, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x24, 0xfffffffe # initialize rs1
li x20, 0xffffffff # initialize rs2
sra x19, x24, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x16, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
sra x3, x16, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x20, 0xfffffffe # initialize rs1
li x16, 0x5bbc8872 # initialize rs2
sra x29, x20, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x19, 0xfffffffe # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
sra x2, x19, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x27, 0xfffffffe # initialize rs1
li x21, 0x55555555 # initialize rs2
sra x8, x27, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x14, 0x5bbc8872 # initialize rs1
li x7, 0x00000000 # initialize rs2
sra x26, x14, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x30, 0x5bbc8872 # initialize rs1
li x26, 0x00000001 # initialize rs2
sra x28, x30, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x13, 0x5bbc8872 # initialize rs1
li x26, 0x00000002 # initialize rs2
sra x23, x13, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x24, 0x5bbc8872 # initialize rs1
li x12, 0x80000000 # initialize rs2
sra x31, x24, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x24, 0x5bbc8872 # initialize rs1
li x1, 0x80000001 # initialize rs2
sra x13, x24, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x6, 0x5bbc8872 # initialize rs1
li x22, 0x7fffffff # initialize rs2
sra x2, x6, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x7, 0x5bbc8872 # initialize rs1
li x4, 0x7ffffffe # initialize rs2
sra x23, x7, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x26, 0x5bbc8872 # initialize rs1
li x15, 0xffffffff # initialize rs2
sra x23, x26, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x30, 0x5bbc8872 # initialize rs1
li x31, 0xfffffffe # initialize rs2
sra x24, x30, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x28, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
sra x13, x28, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x13, 0x5bbc8872 # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
sra x18, x13, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x13, 0x5bbc8872 # initialize rs1
li x26, 0x55555555 # initialize rs2
sra x31, x13, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x19, 0xaaaaaaaa # initialize rs1
li x17, 0x00000000 # initialize rs2
sra x22, x19, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x22, 0xaaaaaaaa # initialize rs1
li x24, 0x00000001 # initialize rs2
sra x26, x22, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x27, 0xaaaaaaaa # initialize rs1
li x25, 0x00000002 # initialize rs2
sra x11, x27, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x31, 0xaaaaaaaa # initialize rs1
li x19, 0x80000000 # initialize rs2
sra x11, x31, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x17, 0xaaaaaaaa # initialize rs1
li x23, 0x80000001 # initialize rs2
sra x31, x17, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x25, 0xaaaaaaaa # initialize rs1
li x4, 0x7fffffff # initialize rs2
sra x9, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x6, 0xaaaaaaaa # initialize rs1
li x18, 0x7ffffffe # initialize rs2
sra x19, x6, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x10, 0xaaaaaaaa # initialize rs1
li x30, 0xffffffff # initialize rs2
sra x8, x10, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x11, 0xaaaaaaaa # initialize rs1
li x7, 0xfffffffe # initialize rs2
sra x2, x11, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x10, 0xaaaaaaaa # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
sra x4, x10, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x19, 0xaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
sra x1, x19, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x17, 0xaaaaaaaa # initialize rs1
li x8, 0x55555555 # initialize rs2
sra x11, x17, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x9, 0x55555555 # initialize rs1
li x28, 0x00000000 # initialize rs2
sra x18, x9, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x6, 0x55555555 # initialize rs1
li x3, 0x00000001 # initialize rs2
sra x22, x6, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x2, 0x55555555 # initialize rs1
li x15, 0x00000002 # initialize rs2
sra x7, x2, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x3, 0x55555555 # initialize rs1
li x24, 0x80000000 # initialize rs2
sra x11, x3, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x4, 0x55555555 # initialize rs1
li x2, 0x80000001 # initialize rs2
sra x16, x4, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x7, 0x55555555 # initialize rs1
li x12, 0x7fffffff # initialize rs2
sra x25, x7, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x10, 0x55555555 # initialize rs1
li x28, 0x7ffffffe # initialize rs2
sra x13, x10, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x18, 0x55555555 # initialize rs1
li x29, 0xffffffff # initialize rs2
sra x8, x18, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x31, 0x55555555 # initialize rs1
li x8, 0xfffffffe # initialize rs2
sra x27, x31, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x17, 0x55555555 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
sra x14, x17, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x10, 0x55555555 # initialize rs1
li x4, 0xaaaaaaaa # initialize rs2
sra x2, x10, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x15, 0x55555555 # initialize rs1
li x8, 0x55555555 # initialize rs2
sra x1, x15, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x02fb1fb3 # initialize rs1
li x0, 0x6e0fc4be # initialize rs2
sra x10, x0, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xa7f5565e # initialize rs1
li x1, 0x4d575977 # initialize rs2
sra x16, x1, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x30ec9d83 # initialize rs1
li x2, 0x34971e6a # initialize rs2
sra x12, x2, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xd666df31 # initialize rs1
li x3, 0x7215d32b # initialize rs2
sra x12, x3, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
li x4, 0x2fa35269 # initialize rs1
li x4, 0x10231f71 # initialize rs2
sra x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd2b68668 # initialize rs1
li x5, 0xfbc4fbe4 # initialize rs2
sra x3, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x3, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa3754e0d # initialize rs1
li x6, 0xb106f193 # initialize rs2
sra x24, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x24, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x478fdcd9 # initialize rs1
li x7, 0x2c181182 # initialize rs2
sra x21, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xed2cef26 # initialize rs1
li x8, 0xaa93f561 # initialize rs2
sra x30, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x4dc3d60e # initialize rs1
li x9, 0xc0a20ccc # initialize rs2
sra x30, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xd2930abb # initialize rs1
li x10, 0x44589e07 # initialize rs2
sra x3, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x15dae151 # initialize rs1
li x11, 0x0c132bf9 # initialize rs2
sra x22, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xc9b80a84 # initialize rs1
li x12, 0x462d173e # initialize rs2
sra x9, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x1a14d528 # initialize rs1
li x13, 0x52091d76 # initialize rs2
sra x31, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x9edb42cc # initialize rs1
li x14, 0x6da361ff # initialize rs2
sra x26, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x08076c63 # initialize rs1
li x15, 0x032154aa # initialize rs2
sra x14, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x00a2e5b1 # initialize rs1
li x16, 0x22760d91 # initialize rs2
sra x31, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x265ab30c # initialize rs1
li x17, 0x320e628f # initialize rs2
sra x23, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xfec5e942 # initialize rs1
li x18, 0x194974e0 # initialize rs2
sra x16, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x109a4dee # initialize rs1
li x19, 0x5e95e895 # initialize rs2
sra x5, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x94b110a4 # initialize rs1
li x20, 0x2d596e00 # initialize rs2
sra x23, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x651a49ab # initialize rs1
li x21, 0x9cae6715 # initialize rs2
sra x18, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x31a223fc # initialize rs1
li x22, 0x9a8d168e # initialize rs2
sra x18, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xaf191932 # initialize rs1
li x23, 0x16ce0964 # initialize rs2
sra x9, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x155e341d # initialize rs1
li x24, 0xb427163d # initialize rs2
sra x19, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xee3698f7 # initialize rs1
li x25, 0x0eef4425 # initialize rs2
sra x1, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x27fb9dec # initialize rs1
li x26, 0x2b515947 # initialize rs2
sra x20, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x33d1fccb # initialize rs1
li x27, 0x90e78fca # initialize rs2
sra x11, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x8c452038 # initialize rs1
li x28, 0x678991d7 # initialize rs2
sra x14, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x7e94dc09 # initialize rs1
li x29, 0x437328bc # initialize rs2
sra x24, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xc8c298e5 # initialize rs1
li x30, 0x92a7c9d0 # initialize rs2
sra x27, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xc169be67 # initialize rs1
li x31, 0xc443d2b8 # initialize rs2
sra x3, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x7750da4e # initialize rs1
li x17, 0x38928194 # initialize rs2
sra x0, x0, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x999486ca # initialize rs1
li x21, 0xdbabcdb9 # initialize rs2
sra x1, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x2afc0f3e # initialize rs1
li x3, 0xa7747152 # initialize rs2
sra x2, x2, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x431f0e00 # initialize rs1
li x5, 0xc98a72a7 # initialize rs2
sra x3, x3, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xa841ad97 # initialize rs1
li x17, 0x0e1713d6 # initialize rs2
sra x4, x4, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x88879038 # initialize rs1
li x31, 0xb6f957cc # initialize rs2
sra x5, x5, x31 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x2528d306 # initialize rs1
li x22, 0x123cb091 # initialize rs2
sra x6, x6, x22 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x738eeedb # initialize rs1
li x24, 0x27db7f4a # initialize rs2
sra x7, x7, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xf23e5f60 # initialize rs1
li x21, 0xf5ed659a # initialize rs2
sra x8, x8, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x09fc3fa9 # initialize rs1
li x7, 0x20307d38 # initialize rs2
sra x9, x9, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x07372e0e # initialize rs1
li x7, 0x67a5d9f0 # initialize rs2
sra x10, x10, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x696a4788 # initialize rs1
li x19, 0x939e2dcd # initialize rs2
sra x11, x11, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x2001cde9 # initialize rs1
li x23, 0x6339573e # initialize rs2
sra x12, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xe45630b2 # initialize rs1
li x18, 0xdaac462d # initialize rs2
sra x13, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xd1c580f1 # initialize rs1
li x27, 0x877f604b # initialize rs2
sra x14, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x8a38c39e # initialize rs1
li x30, 0x8654f91d # initialize rs2
sra x15, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xfc8f7e99 # initialize rs1
li x17, 0xa0cb3279 # initialize rs2
sra x16, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x8a0e5e8e # initialize rs1
li x25, 0xf91c39a0 # initialize rs2
sra x17, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x4a6505de # initialize rs1
li x25, 0x696ea2f7 # initialize rs2
sra x18, x18, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xe8e519de # initialize rs1
li x24, 0xa7d79ffe # initialize rs2
sra x19, x19, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xd0a6695d # initialize rs1
li x16, 0x71c8285d # initialize rs2
sra x20, x20, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x74af708c # initialize rs1
li x14, 0x0600b311 # initialize rs2
sra x21, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x870fc189 # initialize rs1
li x26, 0xa1396acf # initialize rs2
sra x22, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x69db90f5 # initialize rs1
li x21, 0xd1273b0e # initialize rs2
sra x23, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x6948be62 # initialize rs1
li x11, 0x77012bd5 # initialize rs2
sra x24, x24, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xd299f18d # initialize rs1
li x2, 0x438b454b # initialize rs2
sra x25, x25, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x26fea931 # initialize rs1
li x31, 0x11a7c26b # initialize rs2
sra x26, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x60e39fa5 # initialize rs1
li x28, 0x17062dda # initialize rs2
sra x27, x27, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xfb613ce2 # initialize rs1
li x16, 0x4b017426 # initialize rs2
sra x28, x28, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x8b68c63d # initialize rs1
li x19, 0x724e9f14 # initialize rs2
sra x29, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x663e5a39 # initialize rs1
li x5, 0x3434d522 # initialize rs2
sra x30, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x2e8ccf9b # initialize rs1
li x9, 0xb674f9a1 # initialize rs2
sra x31, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x19, 0x326756a0 # initialize rs1
li x0, 0xdc07d03d # initialize rs2
sra x0, x19, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x27, 0x1d232e64 # initialize rs1
li x1, 0x9e923f7d # initialize rs2
sra x1, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x15, 0xabcfc0f3 # initialize rs1
li x2, 0x2405888b # initialize rs2
sra x2, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x11, 0x4fcae020 # initialize rs1
li x3, 0x8837b671 # initialize rs2
sra x3, x11, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0xedc815a0 # initialize rs1
li x4, 0x93323d52 # initialize rs2
sra x4, x22, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x16, 0x377d37d6 # initialize rs1
li x5, 0x2eb566d4 # initialize rs2
sra x5, x16, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x956727eb # initialize rs1
li x6, 0xc38782aa # initialize rs2
sra x6, x4, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x13, 0x9827c74f # initialize rs1
li x7, 0xf9fb7fad # initialize rs2
sra x7, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x15, 0xc487d2bd # initialize rs1
li x8, 0x5d15addc # initialize rs2
sra x8, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x22, 0xa6e79f3d # initialize rs1
li x9, 0xc92efb3e # initialize rs2
sra x9, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x14, 0xe92948ef # initialize rs1
li x10, 0x30b94ca7 # initialize rs2
sra x10, x14, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x30, 0xdfbfecf5 # initialize rs1
li x11, 0x9edd12d7 # initialize rs2
sra x11, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x30, 0xdbcc0b03 # initialize rs1
li x12, 0x43c3a511 # initialize rs2
sra x12, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0x7ab1f3d3 # initialize rs1
li x13, 0xfc8583ef # initialize rs2
sra x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x9, 0x32329d30 # initialize rs1
li x14, 0x3ca58149 # initialize rs2
sra x14, x9, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x23, 0x1775f7a0 # initialize rs1
li x15, 0xb668e1a9 # initialize rs2
sra x15, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x14, 0x4c271409 # initialize rs1
li x16, 0xba785ff4 # initialize rs2
sra x16, x14, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x23, 0x408c97f3 # initialize rs1
li x17, 0xb6c9f667 # initialize rs2
sra x17, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x16, 0xabe99497 # initialize rs1
li x18, 0x3e8b6086 # initialize rs2
sra x18, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x30, 0x0f91bc88 # initialize rs1
li x19, 0x90d5ac07 # initialize rs2
sra x19, x30, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x12, 0x1db0cc59 # initialize rs1
li x20, 0xcd5d3d75 # initialize rs2
sra x20, x12, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x20, 0x5f71fd2c # initialize rs1
li x21, 0xf7ace6b5 # initialize rs2
sra x21, x20, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x23, 0x6b7cb72d # initialize rs1
li x22, 0x4cff2d21 # initialize rs2
sra x22, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x31, 0x0f8359c8 # initialize rs1
li x23, 0xcfb140a4 # initialize rs2
sra x23, x31, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x29, 0x31e46670 # initialize rs1
li x24, 0xee042e17 # initialize rs2
sra x24, x29, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x12, 0x687dc9a5 # initialize rs1
li x25, 0x09c84724 # initialize rs2
sra x25, x12, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x7, 0xd98bf1d2 # initialize rs1
li x26, 0x5dfd1ed9 # initialize rs2
sra x26, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x29, 0x8632827e # initialize rs1
li x27, 0x9e0be8d2 # initialize rs2
sra x27, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x12, 0xf0b4250e # initialize rs1
li x28, 0xb222bb32 # initialize rs2
sra x28, x12, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x2, 0x39401bf0 # initialize rs1
li x29, 0xc6287696 # initialize rs2
sra x29, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x23, 0xf1215159 # initialize rs1
li x30, 0x0aee814f # initialize rs2
sra x30, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x12, 0x840ba72d # initialize rs1
li x31, 0x15868027 # initialize rs2
sra x31, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x1c9e5fc4 # initialize rs1
li x0, 0x6d844f24 # initialize rs2
sra x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xff13824a # initialize rs1
li x1, 0xe925eb27 # initialize rs2
sra x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x9801d59b # initialize rs1
li x2, 0xc8854e11 # initialize rs2
sra x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xeabfc026 # initialize rs1
li x3, 0xdcfacd5a # initialize rs2
sra x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf8c9d057 # initialize rs1
li x4, 0x53a170db # initialize rs2
sra x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x937ccae3 # initialize rs1
li x5, 0x4a6979fb # initialize rs2
sra x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3698a9b9 # initialize rs1
li x6, 0xcef1e931 # initialize rs2
sra x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x65711ff0 # initialize rs1
li x7, 0xf30b062a # initialize rs2
sra x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xc06c143b # initialize rs1
li x8, 0x428ebec2 # initialize rs2
sra x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xf20fb495 # initialize rs1
li x9, 0x435a0753 # initialize rs2
sra x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x31ba62d3 # initialize rs1
li x10, 0xdb04387e # initialize rs2
sra x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xcc57bdc8 # initialize rs1
li x11, 0x6f8db32d # initialize rs2
sra x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x0934bb86 # initialize rs1
li x12, 0x0b388f34 # initialize rs2
sra x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x1dbcfc44 # initialize rs1
li x13, 0xb733ceb1 # initialize rs2
sra x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x3a344f74 # initialize rs1
li x14, 0x0dce50f0 # initialize rs2
sra x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x5f72190e # initialize rs1
li x15, 0xfdcd3b51 # initialize rs2
sra x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xf8b5b50e # initialize rs1
li x16, 0x28fe4bc7 # initialize rs2
sra x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x8cee22e4 # initialize rs1
li x17, 0xead9a30e # initialize rs2
sra x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xce37b9c4 # initialize rs1
li x18, 0x6ef69768 # initialize rs2
sra x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x83f64a84 # initialize rs1
li x19, 0x919e215c # initialize rs2
sra x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xe53f176c # initialize rs1
li x20, 0x57b7756c # initialize rs2
sra x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x2955641c # initialize rs1
li x21, 0xc219d57a # initialize rs2
sra x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x81f4052e # initialize rs1
li x22, 0xb1d5d33d # initialize rs2
sra x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0xde8ce90f # initialize rs1
li x23, 0x64f3594b # initialize rs2
sra x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x07bce09b # initialize rs1
li x24, 0xc503eaac # initialize rs2
sra x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x1512104f # initialize rs1
li x25, 0x3b57eb3a # initialize rs2
sra x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0x471b944f # initialize rs1
li x26, 0x3491ed04 # initialize rs2
sra x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xf0cbabe5 # initialize rs1
li x27, 0xc79fe54f # initialize rs2
sra x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x75bff48f # initialize rs1
li x28, 0xd841b2fc # initialize rs2
sra x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x5a855275 # initialize rs1
li x29, 0x6452cece # initialize rs2
sra x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x44f80c57 # initialize rs1
li x30, 0xd8513d1e # initialize rs2
sra x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0xd1bf1a30 # initialize rs1
li x31, 0x09f0bd04 # initialize rs2
sra x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x21, x11 # perform first operation
sra x24, x26, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x7, x23 # perform first operation
sra x31, x10, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x7, x2, x20 # perform first operation
sra x11, x19, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x27, x3 # perform first operation
sra x27, x2, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x11, x2, x9 # perform first operation
sra x31, x25, x11 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x11, x5, x2 # perform first operation
sra x2, x28, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x2, x27, x12 # perform first operation
sra x2, x19, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x16, x11 # perform first operation
sra x29, x9, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x2, x28 # perform first operation
sra x11, x14, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x10, x20, x25 # perform first operation
sra x20, x9, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x23, x17, x1 # perform first operation
sra x1, x12, x3 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x21, x28, x19 # perform first operation
sra x10, x9, x29 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-sw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x15, 0x1ec9c302 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -454 # sub immediate from rs1 to counter offset
sw x15, 454(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x7, 0x760a696f # initialize rs2
la x2, scratch # base address 
addi x2, x2, 89 # sub immediate from rs1 to counter offset
sw x7, -89(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x15, 0xd3e79e84 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 765 # sub immediate from rs1 to counter offset
sw x15, -765(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x30, 0x5a62b98b # initialize rs2
la x4, scratch # base address 
addi x4, x4, -678 # sub immediate from rs1 to counter offset
sw x30, 678(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
li x30, 0x02fc6094 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 60 # sub immediate from rs1 to counter offset
sw x30, -60(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x1345bd53 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1463 # sub immediate from rs1 to counter offset
sw x24, -1463(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0xf4dc0be9 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1378 # sub immediate from rs1 to counter offset
sw x3, -1378(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x3, 0xad85a6c8 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -2030 # sub immediate from rs1 to counter offset
sw x3, 2030(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x29, 0x8c31c85f # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1470 # sub immediate from rs1 to counter offset
sw x29, 1470(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x30, 0x73537511 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1735 # sub immediate from rs1 to counter offset
sw x30, 1735(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x28, 0xab4e0745 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1253 # sub immediate from rs1 to counter offset
sw x28, -1253(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x31, 0x3ebc9120 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1762 # sub immediate from rs1 to counter offset
sw x31, 1762(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x26, 0xd4f9d668 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -394 # sub immediate from rs1 to counter offset
sw x26, 394(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x5, 0xec9f636d # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1033 # sub immediate from rs1 to counter offset
sw x5, 1033(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x7, 0x6629dd50 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1106 # sub immediate from rs1 to counter offset
sw x7, -1106(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x9, 0x9a38fa63 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1644 # sub immediate from rs1 to counter offset
sw x9, -1644(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x10, 0xac0eb5e3 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 2037 # sub immediate from rs1 to counter offset
sw x10, -2037(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x22, 0x9fec4622 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1522 # sub immediate from rs1 to counter offset
sw x22, 1522(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x27, 0x431ad048 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1557 # sub immediate from rs1 to counter offset
sw x27, 1557(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x26, 0x5e9dad94 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -446 # sub immediate from rs1 to counter offset
sw x26, 446(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x8, 0x65134e8d # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1694 # sub immediate from rs1 to counter offset
sw x8, -1694(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x18, 0xde359ce2 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1071 # sub immediate from rs1 to counter offset
sw x18, 1071(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x28, 0x2ecbe2e9 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1291 # sub immediate from rs1 to counter offset
sw x28, -1291(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x26, 0x3df52242 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -423 # sub immediate from rs1 to counter offset
sw x26, 423(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x5, 0xc0efd703 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1084 # sub immediate from rs1 to counter offset
sw x5, 1084(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x6, 0xfea82cb6 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1100 # sub immediate from rs1 to counter offset
sw x6, 1100(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x24, 0xe34b5edd # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1522 # sub immediate from rs1 to counter offset
sw x24, 1522(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x22, 0x82ee546b # initialize rs2
la x28, scratch # base address 
addi x28, x28, -894 # sub immediate from rs1 to counter offset
sw x22, 894(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x30, 0x98190cfd # initialize rs2
la x29, scratch # base address 
addi x29, x29, 502 # sub immediate from rs1 to counter offset
sw x30, -502(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x31, 0x752e90a6 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 967 # sub immediate from rs1 to counter offset
sw x31, -967(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x7, 0x6dedbf6f # initialize rs2
la x31, scratch # base address 
addi x31, x31, -969 # sub immediate from rs1 to counter offset
sw x7, 969(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0x1a9800b7 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -24 # sub immediate from rs1 to counter offset
sw x0, 24(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x3e0bc484 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1349 # sub immediate from rs1 to counter offset
sw x1, -1349(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0xb50c5339 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 179 # sub immediate from rs1 to counter offset
sw x2, -179(x11) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0x92f744d9 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 564 # sub immediate from rs1 to counter offset
sw x3, -564(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x4ec1f7ec # initialize rs2
la x26, scratch # base address 
addi x26, x26, -895 # sub immediate from rs1 to counter offset
sw x4, 895(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x0c6947c0 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1304 # sub immediate from rs1 to counter offset
sw x5, 1304(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x5feb3a32 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -215 # sub immediate from rs1 to counter offset
sw x6, 215(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
li x7, 0x39672434 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 118 # sub immediate from rs1 to counter offset
sw x7, -118(x1) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0xa9cbd5b1 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -954 # sub immediate from rs1 to counter offset
sw x8, 954(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0x1f944934 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1235 # sub immediate from rs1 to counter offset
sw x9, 1235(x19) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0xd5a67381 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 723 # sub immediate from rs1 to counter offset
sw x10, -723(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0xe97aec28 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1055 # sub immediate from rs1 to counter offset
sw x11, -1055(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0xe9af0c06 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 648 # sub immediate from rs1 to counter offset
sw x12, -648(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0x108958c5 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1743 # sub immediate from rs1 to counter offset
sw x13, -1743(x24) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0xdf360834 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1280 # sub immediate from rs1 to counter offset
sw x14, 1280(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0x50a3dc83 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -2026 # sub immediate from rs1 to counter offset
sw x15, 2026(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0xb928116d # initialize rs2
la x21, scratch # base address 
addi x21, x21, 496 # sub immediate from rs1 to counter offset
sw x16, -496(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0xc4c9edd1 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1979 # sub immediate from rs1 to counter offset
sw x17, 1979(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x1429b876 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -406 # sub immediate from rs1 to counter offset
sw x18, 406(x19) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0xbfde4f01 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1683 # sub immediate from rs1 to counter offset
sw x19, -1683(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0xf4a84645 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -894 # sub immediate from rs1 to counter offset
sw x20, 894(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0x1cefdde0 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1486 # sub immediate from rs1 to counter offset
sw x21, -1486(x16) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0xd5356823 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 137 # sub immediate from rs1 to counter offset
sw x22, -137(x11) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0xb236d7b8 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1992 # sub immediate from rs1 to counter offset
sw x23, -1992(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0x679b13c9 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1284 # sub immediate from rs1 to counter offset
sw x24, -1284(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x55809462 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 608 # sub immediate from rs1 to counter offset
sw x25, -608(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0xf0388e52 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 2044 # sub immediate from rs1 to counter offset
sw x26, -2044(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x84a3fcfc # initialize rs2
la x1, scratch # base address 
addi x1, x1, -540 # sub immediate from rs1 to counter offset
sw x27, 540(x1) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0x60843eeb # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1452 # sub immediate from rs1 to counter offset
sw x28, -1452(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0x38e008f7 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1601 # sub immediate from rs1 to counter offset
sw x29, -1601(x1) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0x53f876d1 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1534 # sub immediate from rs1 to counter offset
sw x30, 1534(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0x7d41bbf4 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1333 # sub immediate from rs1 to counter offset
sw x31, 1333(x28) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x1, 0x00000000 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 835 # sub immediate from rs1 to counter offset
sw x1, -835(x3) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x9, 0x00000001 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 358 # sub immediate from rs1 to counter offset
sw x9, -358(x30) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x21, 0x00000002 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1903 # sub immediate from rs1 to counter offset
sw x21, -1903(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x9, 0x80000000 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1387 # sub immediate from rs1 to counter offset
sw x9, -1387(x12) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x29, 0x80000001 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1573 # sub immediate from rs1 to counter offset
sw x29, -1573(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x24, 0x7fffffff # initialize rs2
la x25, scratch # base address 
addi x25, x25, -675 # sub immediate from rs1 to counter offset
sw x24, 675(x25) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x28, 0x7ffffffe # initialize rs2
la x3, scratch # base address 
addi x3, x3, 545 # sub immediate from rs1 to counter offset
sw x28, -545(x3) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x2, 0xffffffff # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1806 # sub immediate from rs1 to counter offset
sw x2, -1806(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x18, 0xfffffffe # initialize rs2
la x20, scratch # base address 
addi x20, x20, -439 # sub immediate from rs1 to counter offset
sw x18, 439(x20) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x18, 0x5bbc8872 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1441 # sub immediate from rs1 to counter offset
sw x18, 1441(x5) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x16, 0xaaaaaaaa # initialize rs2
la x18, scratch # base address 
addi x18, x18, -409 # sub immediate from rs1 to counter offset
sw x16, 409(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x28, 0x55555555 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1235 # sub immediate from rs1 to counter offset
sw x28, -1235(x19) # perform operation 

# Testcase cp_imm_corners
li x14, 0x26c87c05 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 0 # sub immediate from rs1 to counter offset
sw x14, 0(x2) # perform operation 

# Testcase cp_imm_corners
li x10, 0x3d8845f8 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1 # sub immediate from rs1 to counter offset
sw x10, 1(x17) # perform operation 

# Testcase cp_imm_corners
li x13, 0xabc67eef # initialize rs2
la x24, scratch # base address 
addi x24, x24, -2 # sub immediate from rs1 to counter offset
sw x13, 2(x24) # perform operation 

# Testcase cp_imm_corners
li x29, 0x618858e0 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -3 # sub immediate from rs1 to counter offset
sw x29, 3(x27) # perform operation 

# Testcase cp_imm_corners
li x20, 0x9661dc0a # initialize rs2
la x30, scratch # base address 
addi x30, x30, -4 # sub immediate from rs1 to counter offset
sw x20, 4(x30) # perform operation 

# Testcase cp_imm_corners
li x20, 0xac6aceb3 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -8 # sub immediate from rs1 to counter offset
sw x20, 8(x15) # perform operation 

# Testcase cp_imm_corners
li x18, 0x525bb30c # initialize rs2
la x3, scratch # base address 
addi x3, x3, -16 # sub immediate from rs1 to counter offset
sw x18, 16(x3) # perform operation 

# Testcase cp_imm_corners
li x3, 0x7546a63e # initialize rs2
la x22, scratch # base address 
addi x22, x22, -32 # sub immediate from rs1 to counter offset
sw x3, 32(x22) # perform operation 

# Testcase cp_imm_corners
li x24, 0x6748695f # initialize rs2
la x1, scratch # base address 
addi x1, x1, -64 # sub immediate from rs1 to counter offset
sw x24, 64(x1) # perform operation 

# Testcase cp_imm_corners
li x22, 0xcf014752 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -128 # sub immediate from rs1 to counter offset
sw x22, 128(x2) # perform operation 

# Testcase cp_imm_corners
li x29, 0xe041b612 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -256 # sub immediate from rs1 to counter offset
sw x29, 256(x9) # perform operation 

# Testcase cp_imm_corners
li x7, 0xb2f7c279 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -512 # sub immediate from rs1 to counter offset
sw x7, 512(x8) # perform operation 

# Testcase cp_imm_corners
li x16, 0xcedb5ce4 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1023 # sub immediate from rs1 to counter offset
sw x16, 1023(x10) # perform operation 

# Testcase cp_imm_corners
li x18, 0xbbcd2bce # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1024 # sub immediate from rs1 to counter offset
sw x18, 1024(x25) # perform operation 

# Testcase cp_imm_corners
li x26, 0x4c4903e0 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1795 # sub immediate from rs1 to counter offset
sw x26, 1795(x10) # perform operation 

# Testcase cp_imm_corners
li x7, 0xd59b5317 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -2047 # sub immediate from rs1 to counter offset
sw x7, 2047(x18) # perform operation 

# Testcase cp_imm_corners
li x16, 0x6ebe1cd3 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 2047 # increment rs1 by 2047 
addi x3, x3, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x16, -2048(x3) # perform operation 

# Testcase cp_imm_corners
li x11, 0xe17bf501 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 2047 # sub immediate from rs1 to counter offset
sw x11, -2047(x14) # perform operation 

# Testcase cp_imm_corners
li x27, 0x23d6eb8f # initialize rs2
la x17, scratch # base address 
addi x17, x17, 2 # sub immediate from rs1 to counter offset
sw x27, -2(x17) # perform operation 

# Testcase cp_imm_corners
li x28, 0x995dadcb # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1 # sub immediate from rs1 to counter offset
sw x28, -1(x14) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x14, scratch
addi x14, x14, 451
add x3, x12, x19 # perform first operation
sw x1, -451(x14) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x3, scratch
addi x3, x3, 1213
add x9, x15, x13 # perform first operation
sw x22, -1213(x3) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x24, scratch
addi x24, x24, -286
add x15, x10, x29 # perform first operation
sw x17, 286(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x22, scratch
addi x22, x22, 849
add x22, x22, x0 # perform first operation
sw x19, -849(x22) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x14, scratch
addi x14, x14, 1982
add x3, x3, x0 # perform first operation
sw x3, -1982(x14) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x3, scratch
addi x3, x3, 801
add x25, x25, x0 # perform first operation
sw x14, -801(x3) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-xori.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x7f5c9c35 # initialize rs1
xori x11, x0, -1721 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xf51778ff # initialize rs1
xori x16, x1, 570 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x5714cc59 # initialize rs1
xori x17, x2, 1049 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x69cf1f53 # initialize rs1
xori x17, x3, 1157 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xaf3562a6 # initialize rs1
xori x31, x4, 169 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x6579afbf # initialize rs1
xori x4, x5, -21 # perform operation
RVTEST_SIGUPD(x6, x0, x4, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x28176393 # initialize rs1
xori x3, x6, -1739 # perform operation
RVTEST_SIGUPD(x7, x0, x3, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xaa2f3732 # initialize rs1
xori x18, x7, 538 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xbf991b29 # initialize rs1
xori x6, x8, -100 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x661cb8e0 # initialize rs1
xori x17, x9, -2030 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xb5a75929 # initialize rs1
xori x30, x10, 1259 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x4f6f86f3 # initialize rs1
xori x14, x11, 808 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xac405a1a # initialize rs1
xori x23, x12, -2006 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xc74ab742 # initialize rs1
xori x6, x13, 1988 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xb9d33fe7 # initialize rs1
xori x20, x14, -2024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xf62fb1d3 # initialize rs1
xori x1, x15, 1003 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xe4569f7f # initialize rs1
xori x9, x16, 1603 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x56c120cc # initialize rs1
xori x7, x17, 911 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x724bed75 # initialize rs1
xori x7, x18, 1334 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x20c4435c # initialize rs1
xori x27, x19, 823 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xc231eeac # initialize rs1
xori x1, x20, 1028 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x32f7ac5f # initialize rs1
xori x30, x21, 192 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x1d73ab80 # initialize rs1
xori x31, x22, 670 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x86a42b47 # initialize rs1
xori x21, x23, 112 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xdce1f24d # initialize rs1
xori x8, x24, 1156 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x779e88fa # initialize rs1
xori x1, x25, -884 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xb2c39f2e # initialize rs1
xori x27, x26, -1963 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x9062abcb # initialize rs1
xori x24, x27, 737 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x4541806d # initialize rs1
xori x9, x28, 760 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x3d94ae96 # initialize rs1
xori x24, x29, 789 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xceaa771a # initialize rs1
xori x13, x30, 1977 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xb83c8305 # initialize rs1
xori x13, x31, 1051 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 124)

# Testcase cp_rd (Test destination rd = x0)
li x1, 0x0c0de2b8 # initialize rs1
xori x0, x1, -1661 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x8, 0x700dd01e # initialize rs1
xori x1, x8, 1917 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x31, 0x8a0d0c6e # initialize rs1
xori x2, x31, -1286 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x7, 0x9425eed7 # initialize rs1
xori x3, x7, -1472 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0xe974472d # initialize rs1
xori x4, x12, 1322 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x30, 0x35721fe0 # initialize rs1
xori x5, x30, -1273 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x27, 0xe094cb2d # initialize rs1
xori x6, x27, 1039 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x29, 0xc8986100 # initialize rs1
xori x7, x29, -653 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x26, 0x7005432f # initialize rs1
xori x8, x26, -274 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x23, 0xa8f0496a # initialize rs1
xori x9, x23, -336 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x2, 0xfa9e4aad # initialize rs1
xori x10, x2, -239 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x19, 0x8cb446b9 # initialize rs1
xori x11, x19, 1012 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x29, 0xcd8d7364 # initialize rs1
xori x12, x29, 303 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x13, 0x42806431 # initialize rs1
xori x13, x13, -1768 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x26, 0x88f4f2bf # initialize rs1
xori x14, x26, -1872 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x1, 0x7a6e70f6 # initialize rs1
xori x15, x1, 1120 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x27, 0xe18a94b1 # initialize rs1
xori x16, x27, 1082 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x29, 0x1996e62b # initialize rs1
xori x17, x29, 990 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x26, 0x58c9f131 # initialize rs1
xori x18, x26, -401 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x1, 0xe523f90f # initialize rs1
xori x19, x1, -1213 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0x8971873a # initialize rs1
xori x20, x1, 1283 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x24, 0x086c2303 # initialize rs1
xori x21, x24, -1713 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x22, 0x8768d697 # initialize rs1
xori x22, x22, -722 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x10, 0x983f49f9 # initialize rs1
xori x23, x10, 199 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x12, 0x4785f132 # initialize rs1
xori x24, x12, 1661 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x18, 0xcc891868 # initialize rs1
xori x25, x18, -1624 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x20, 0x751dbe67 # initialize rs1
xori x26, x20, 1760 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x26, 0xadc80dde # initialize rs1
xori x27, x26, -229 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x20, 0xc388457e # initialize rs1
xori x28, x20, 436 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x20, 0xcbe6d8be # initialize rs1
xori x29, x20, 936 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x5, 0xdd0207dc # initialize rs1
xori x30, x5, -182 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x22, 0xb8926915 # initialize rs1
xori x31, x22, 1253 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x11, 0x00000000 # initialize rs1
xori x23, x11, -1963 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x15, 0x00000001 # initialize rs1
xori x9, x15, 1827 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x9, 0x00000002 # initialize rs1
xori x16, x9, 1856 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x10, 0x80000000 # initialize rs1
xori x14, x10, 1980 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x8, 0x80000001 # initialize rs1
xori x26, x8, 535 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x2, 0x7fffffff # initialize rs1
xori x11, x2, 1368 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x7, 0x7ffffffe # initialize rs1
xori x6, x7, 1651 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x22, 0xffffffff # initialize rs1
xori x1, x22, 1774 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x14, 0xfffffffe # initialize rs1
xori x12, x14, -1565 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x8, 0x5bbc8872 # initialize rs1
xori x6, x8, -1531 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x26, 0xaaaaaaaa # initialize rs1
xori x11, x26, 1519 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x27, 0x55555555 # initialize rs1
xori x2, x27, 297 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 300)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
xori x1, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 304)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
xori x28, x15, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 308)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000 # initialize rs1
xori x10, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 312)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
xori x16, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 316)

# Testcase cr_rs1_imm_corners
li x19, 0x00000000 # initialize rs1
xori x15, x19, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 320)

# Testcase cr_rs1_imm_corners
li x7, 0x00000000 # initialize rs1
xori x2, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 324)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000 # initialize rs1
xori x14, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 328)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000 # initialize rs1
xori x23, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 332)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000 # initialize rs1
xori x30, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 336)

# Testcase cr_rs1_imm_corners
li x13, 0x00000000 # initialize rs1
xori x11, x13, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 340)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000 # initialize rs1
xori x20, x28, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 344)

# Testcase cr_rs1_imm_corners
li x23, 0x00000000 # initialize rs1
xori x21, x23, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 348)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000 # initialize rs1
xori x22, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 352)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000 # initialize rs1
xori x16, x12, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 356)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
xori x10, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 360)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000 # initialize rs1
xori x1, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 364)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000 # initialize rs1
xori x10, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 368)

# Testcase cr_rs1_imm_corners
li x9, 0x00000000 # initialize rs1
xori x20, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 372)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000 # initialize rs1
xori x31, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 376)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
xori x11, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 380)

# Testcase cr_rs1_imm_corners
li x31, 0x00000001 # initialize rs1
xori x16, x31, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 384)

# Testcase cr_rs1_imm_corners
li x27, 0x00000001 # initialize rs1
xori x8, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 388)

# Testcase cr_rs1_imm_corners
li x26, 0x00000001 # initialize rs1
xori x28, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 392)

# Testcase cr_rs1_imm_corners
li x22, 0x00000001 # initialize rs1
xori x19, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 396)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
xori x13, x28, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 400)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
xori x9, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 404)

# Testcase cr_rs1_imm_corners
li x27, 0x00000001 # initialize rs1
xori x7, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 408)

# Testcase cr_rs1_imm_corners
li x22, 0x00000001 # initialize rs1
xori x25, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 412)

# Testcase cr_rs1_imm_corners
li x11, 0x00000001 # initialize rs1
xori x23, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 416)

# Testcase cr_rs1_imm_corners
li x29, 0x00000001 # initialize rs1
xori x22, x29, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 420)

# Testcase cr_rs1_imm_corners
li x17, 0x00000001 # initialize rs1
xori x10, x17, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
xori x22, x28, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 428)

# Testcase cr_rs1_imm_corners
li x31, 0x00000001 # initialize rs1
xori x26, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 432)

# Testcase cr_rs1_imm_corners
li x6, 0x00000001 # initialize rs1
xori x11, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 436)

# Testcase cr_rs1_imm_corners
li x29, 0x00000001 # initialize rs1
xori x19, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 440)

# Testcase cr_rs1_imm_corners
li x17, 0x00000001 # initialize rs1
xori x24, x17, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 444)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
xori x11, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 448)

# Testcase cr_rs1_imm_corners
li x7, 0x00000001 # initialize rs1
xori x28, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 452)

# Testcase cr_rs1_imm_corners
li x9, 0x00000001 # initialize rs1
xori x26, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cr_rs1_imm_corners
li x25, 0x00000001 # initialize rs1
xori x1, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 460)

# Testcase cr_rs1_imm_corners
li x30, 0x00000002 # initialize rs1
xori x21, x30, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 464)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
xori x8, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 468)

# Testcase cr_rs1_imm_corners
li x19, 0x00000002 # initialize rs1
xori x8, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 472)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
xori x2, x14, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 476)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
xori x24, x14, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 480)

# Testcase cr_rs1_imm_corners
li x19, 0x00000002 # initialize rs1
xori x9, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 484)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
xori x19, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 488)

# Testcase cr_rs1_imm_corners
li x6, 0x00000002 # initialize rs1
xori x10, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 492)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
xori x21, x13, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 496)

# Testcase cr_rs1_imm_corners
li x12, 0x00000002 # initialize rs1
xori x7, x12, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 500)

# Testcase cr_rs1_imm_corners
li x10, 0x00000002 # initialize rs1
xori x15, x10, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 504)

# Testcase cr_rs1_imm_corners
li x18, 0x00000002 # initialize rs1
xori x13, x18, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 508)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
xori x15, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 512)

# Testcase cr_rs1_imm_corners
li x10, 0x00000002 # initialize rs1
xori x25, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 516)

# Testcase cr_rs1_imm_corners
li x7, 0x00000002 # initialize rs1
xori x21, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 520)

# Testcase cr_rs1_imm_corners
li x23, 0x00000002 # initialize rs1
xori x15, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 524)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
xori x12, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 528)

# Testcase cr_rs1_imm_corners
li x30, 0x00000002 # initialize rs1
xori x25, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 532)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
xori x31, x14, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 536)

# Testcase cr_rs1_imm_corners
li x19, 0x00000002 # initialize rs1
xori x16, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 540)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
xori x27, x13, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 544)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
xori x6, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 548)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
xori x14, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 552)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
xori x2, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 556)

# Testcase cr_rs1_imm_corners
li x25, 0x80000000 # initialize rs1
xori x14, x25, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 560)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
xori x9, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 564)

# Testcase cr_rs1_imm_corners
li x17, 0x80000000 # initialize rs1
xori x29, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 568)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
xori x19, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 572)

# Testcase cr_rs1_imm_corners
li x27, 0x80000000 # initialize rs1
xori x20, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 576)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
xori x21, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 580)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
xori x2, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 584)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
xori x15, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 588)

# Testcase cr_rs1_imm_corners
li x26, 0x80000000 # initialize rs1
xori x18, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 592)

# Testcase cr_rs1_imm_corners
li x6, 0x80000000 # initialize rs1
xori x8, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 596)

# Testcase cr_rs1_imm_corners
li x3, 0x80000000 # initialize rs1
xori x23, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 600)

# Testcase cr_rs1_imm_corners
li x1, 0x80000000 # initialize rs1
xori x19, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 604)

# Testcase cr_rs1_imm_corners
li x7, 0x80000000 # initialize rs1
xori x22, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 608)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
xori x28, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 612)

# Testcase cr_rs1_imm_corners
li x19, 0x80000000 # initialize rs1
xori x2, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 616)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
xori x8, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 620)

# Testcase cr_rs1_imm_corners
li x22, 0x80000001 # initialize rs1
xori x25, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 624)

# Testcase cr_rs1_imm_corners
li x2, 0x80000001 # initialize rs1
xori x28, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 628)

# Testcase cr_rs1_imm_corners
li x16, 0x80000001 # initialize rs1
xori x14, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 632)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
xori x6, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 636)

# Testcase cr_rs1_imm_corners
li x15, 0x80000001 # initialize rs1
xori x25, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 640)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
xori x15, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 644)

# Testcase cr_rs1_imm_corners
li x13, 0x80000001 # initialize rs1
xori x15, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 648)

# Testcase cr_rs1_imm_corners
li x7, 0x80000001 # initialize rs1
xori x23, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 652)

# Testcase cr_rs1_imm_corners
li x27, 0x80000001 # initialize rs1
xori x19, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 656)

# Testcase cr_rs1_imm_corners
li x16, 0x80000001 # initialize rs1
xori x9, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 660)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
xori x17, x18, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 664)

# Testcase cr_rs1_imm_corners
li x22, 0x80000001 # initialize rs1
xori x11, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 668)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
xori x15, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 672)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
xori x24, x18, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 676)

# Testcase cr_rs1_imm_corners
li x31, 0x80000001 # initialize rs1
xori x24, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 680)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
xori x1, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 684)

# Testcase cr_rs1_imm_corners
li x24, 0x80000001 # initialize rs1
xori x28, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 688)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
xori x23, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 692)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
xori x8, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 696)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
xori x11, x18, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 700)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffff # initialize rs1
xori x18, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 704)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffff # initialize rs1
xori x23, x18, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 708)

# Testcase cr_rs1_imm_corners
li x28, 0x7fffffff # initialize rs1
xori x27, x28, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffff # initialize rs1
xori x5, x27, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 716)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffff # initialize rs1
xori x18, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 720)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
xori x25, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 724)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffff # initialize rs1
xori x16, x23, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 728)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffff # initialize rs1
xori x19, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 732)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffff # initialize rs1
xori x12, x7, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 736)

# Testcase cr_rs1_imm_corners
li x10, 0x7fffffff # initialize rs1
xori x12, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 740)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffff # initialize rs1
xori x7, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 744)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
xori x24, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 748)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
xori x12, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 752)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffff # initialize rs1
xori x31, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 756)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffff # initialize rs1
xori x29, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 760)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
xori x25, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 764)

# Testcase cr_rs1_imm_corners
li x9, 0x7fffffff # initialize rs1
xori x7, x9, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 768)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
xori x28, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 772)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffff # initialize rs1
xori x10, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 776)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffff # initialize rs1
xori x27, x29, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 780)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffe # initialize rs1
xori x29, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 784)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffe # initialize rs1
xori x2, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 788)

# Testcase cr_rs1_imm_corners
li x31, 0x7ffffffe # initialize rs1
xori x29, x31, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 792)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
xori x23, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 796)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
xori x27, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 800)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
xori x26, x15, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 804)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
xori x28, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 808)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
xori x8, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 812)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
xori x21, x7, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 816)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffe # initialize rs1
xori x2, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 820)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffe # initialize rs1
xori x21, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 824)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
xori x30, x16, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 828)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
xori x22, x3, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 832)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffe # initialize rs1
xori x19, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 836)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
xori x6, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 840)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffe # initialize rs1
xori x15, x9, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 844)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffe # initialize rs1
xori x3, x10, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 848)

# Testcase cr_rs1_imm_corners
li x6, 0x7ffffffe # initialize rs1
xori x26, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 852)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
xori x7, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 856)

# Testcase cr_rs1_imm_corners
li x1, 0x7ffffffe # initialize rs1
xori x18, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 860)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
xori x11, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 864)

# Testcase cr_rs1_imm_corners
li x14, 0xffffffff # initialize rs1
xori x20, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 868)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffff # initialize rs1
xori x9, x20, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 872)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffff # initialize rs1
xori x31, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 876)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
xori x11, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 880)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
xori x9, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 884)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffff # initialize rs1
xori x7, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 888)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffff # initialize rs1
xori x22, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 892)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
xori x22, x30, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 896)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffff # initialize rs1
xori x28, x9, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 900)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffff # initialize rs1
xori x13, x5, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 904)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffff # initialize rs1
xori x30, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 908)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffff # initialize rs1
xori x5, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 912)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffff # initialize rs1
xori x24, x7, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 916)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
xori x25, x26, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 920)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
xori x27, x21, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 924)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffff # initialize rs1
xori x11, x10, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 928)

# Testcase cr_rs1_imm_corners
li x25, 0xffffffff # initialize rs1
xori x5, x25, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 932)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffff # initialize rs1
xori x6, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 936)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
xori x15, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 940)

# Testcase cr_rs1_imm_corners
li x18, 0xfffffffe # initialize rs1
xori x14, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 944)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffe # initialize rs1
xori x25, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 948)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffe # initialize rs1
xori x26, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 952)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffe # initialize rs1
xori x21, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 956)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
xori x5, x14, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 960)

# Testcase cr_rs1_imm_corners
li x18, 0xfffffffe # initialize rs1
xori x6, x18, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 964)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffe # initialize rs1
xori x19, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 968)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffe # initialize rs1
xori x28, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 972)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffe # initialize rs1
xori x6, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 976)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffe # initialize rs1
xori x30, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 980)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
xori x25, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 984)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
xori x11, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 988)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffe # initialize rs1
xori x2, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 992)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
xori x11, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 996)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
xori x8, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1000)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffe # initialize rs1
xori x15, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1004)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
xori x14, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1008)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffe # initialize rs1
xori x22, x26, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1012)

# Testcase cr_rs1_imm_corners
li x1, 0xfffffffe # initialize rs1
xori x8, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1016)

# Testcase cr_rs1_imm_corners
li x2, 0xfffffffe # initialize rs1
xori x31, x2, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1020)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc8872 # initialize rs1
xori x23, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1024)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc8872 # initialize rs1
xori x16, x8, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1028)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
xori x23, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1032)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
xori x3, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1036)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc8872 # initialize rs1
xori x7, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1040)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
xori x18, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1044)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
xori x30, x29, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1048)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc8872 # initialize rs1
xori x6, x26, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1052)

# Testcase cr_rs1_imm_corners
li x27, 0x5bbc8872 # initialize rs1
xori x17, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1056)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
xori x31, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1060)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
xori x25, x29, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1064)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc8872 # initialize rs1
xori x17, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1068)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc8872 # initialize rs1
xori x20, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1072)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc8872 # initialize rs1
xori x24, x1, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1076)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc8872 # initialize rs1
xori x11, x20, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1080)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc8872 # initialize rs1
xori x6, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1084)

# Testcase cr_rs1_imm_corners
li x12, 0x5bbc8872 # initialize rs1
xori x14, x12, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1088)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc8872 # initialize rs1
xori x16, x26, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1092)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc8872 # initialize rs1
xori x31, x13, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1096)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc8872 # initialize rs1
xori x20, x7, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1100)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
xori x5, x18, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1104)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
xori x12, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1108)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaa # initialize rs1
xori x21, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1112)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
xori x2, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1116)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaa # initialize rs1
xori x12, x29, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1120)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaa # initialize rs1
xori x11, x8, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1124)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaa # initialize rs1
xori x2, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1128)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaa # initialize rs1
xori x5, x12, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1132)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaa # initialize rs1
xori x27, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1136)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaa # initialize rs1
xori x9, x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1140)

# Testcase cr_rs1_imm_corners
li x23, 0xaaaaaaaa # initialize rs1
xori x30, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1144)

# Testcase cr_rs1_imm_corners
li x20, 0xaaaaaaaa # initialize rs1
xori x14, x20, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1148)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaa # initialize rs1
xori x16, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1152)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaa # initialize rs1
xori x26, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1156)

# Testcase cr_rs1_imm_corners
li x2, 0xaaaaaaaa # initialize rs1
xori x26, x2, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1160)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaa # initialize rs1
xori x26, x27, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1164)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
xori x12, x25, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1168)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaa # initialize rs1
xori x20, x17, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1172)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
xori x5, x31, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1176)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaa # initialize rs1
xori x28, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1180)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
xori x7, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1184)

# Testcase cr_rs1_imm_corners
li x7, 0x55555555 # initialize rs1
xori x18, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1188)

# Testcase cr_rs1_imm_corners
li x19, 0x55555555 # initialize rs1
xori x6, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1192)

# Testcase cr_rs1_imm_corners
li x11, 0x55555555 # initialize rs1
xori x20, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1196)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
xori x20, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1200)

# Testcase cr_rs1_imm_corners
li x7, 0x55555555 # initialize rs1
xori x24, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1204)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
xori x7, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1208)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
xori x27, x25, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1212)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
xori x26, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1216)

# Testcase cr_rs1_imm_corners
li x18, 0x55555555 # initialize rs1
xori x16, x18, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1220)

# Testcase cr_rs1_imm_corners
li x24, 0x55555555 # initialize rs1
xori x20, x24, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1224)

# Testcase cr_rs1_imm_corners
li x31, 0x55555555 # initialize rs1
xori x5, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1228)

# Testcase cr_rs1_imm_corners
li x23, 0x55555555 # initialize rs1
xori x29, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1232)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
xori x11, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1236)

# Testcase cr_rs1_imm_corners
li x7, 0x55555555 # initialize rs1
xori x22, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1240)

# Testcase cr_rs1_imm_corners
li x16, 0x55555555 # initialize rs1
xori x28, x16, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1244)

# Testcase cr_rs1_imm_corners
li x15, 0x55555555 # initialize rs1
xori x6, x15, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1248)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
xori x2, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1252)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
xori x16, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1256)

# Testcase cr_rs1_imm_corners
li x15, 0x55555555 # initialize rs1
xori x2, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x2fe1bb94 # initialize rs1
xori x0, x0, 81 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x9f2ad56f # initialize rs1
xori x1, x1, 1559 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x2b8478d0 # initialize rs1
xori x2, x2, 1668 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xac57e129 # initialize rs1
xori x3, x3, 1563 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5ba85008 # initialize rs1
xori x4, x4, -346 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x507de1b0 # initialize rs1
xori x5, x5, 973 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x9b1c9daa # initialize rs1
xori x6, x6, -670 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x25fd3dae # initialize rs1
xori x7, x7, -582 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x88bbf1be # initialize rs1
xori x8, x8, -1387 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xf17233df # initialize rs1
xori x9, x9, 1457 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x2a4730ef # initialize rs1
xori x10, x10, 1277 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x53e85abf # initialize rs1
xori x11, x11, -1192 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x61857ff8 # initialize rs1
xori x12, x12, -802 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x65978a6f # initialize rs1
xori x13, x13, -1370 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x0856d785 # initialize rs1
xori x14, x14, -735 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x2e4b4d9f # initialize rs1
xori x15, x15, -1522 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xd00f743f # initialize rs1
xori x16, x16, -969 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xab65686a # initialize rs1
xori x17, x17, 1823 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xae6b156e # initialize rs1
xori x18, x18, 1180 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x44a0df03 # initialize rs1
xori x19, x19, 738 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x51aea9c4 # initialize rs1
xori x20, x20, 1461 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x680366db # initialize rs1
xori x21, x21, 655 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x873a285f # initialize rs1
xori x22, x22, 948 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x4127e422 # initialize rs1
xori x23, x23, -1533 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x0e0cb605 # initialize rs1
xori x24, x24, 409 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xeafd1ea6 # initialize rs1
xori x25, x25, 696 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x8a1b44a9 # initialize rs1
xori x26, x26, 1282 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x05061ffa # initialize rs1
xori x27, x27, 726 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xe56f5f28 # initialize rs1
xori x28, x28, -701 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xa3c7af92 # initialize rs1
xori x29, x29, 1139 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x213f9fd8 # initialize rs1
xori x30, x30, -813 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xc8cedb1b # initialize rs1
xori x31, x31, -1165 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x1, 0xd8cc99c8 # initialize rs1
xori x8, x1, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1392)

# Testcase cp_imm_corners
li x6, 0x3db66c54 # initialize rs1
xori x20, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1396)

# Testcase cp_imm_corners
li x20, 0x2a3e64ef # initialize rs1
xori x14, x20, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1400)

# Testcase cp_imm_corners
li x24, 0x55c787e0 # initialize rs1
xori x15, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1404)

# Testcase cp_imm_corners
li x2, 0x26c23181 # initialize rs1
xori x9, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1408)

# Testcase cp_imm_corners
li x11, 0xb84d7ea9 # initialize rs1
xori x16, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1412)

# Testcase cp_imm_corners
li x25, 0x4df2f427 # initialize rs1
xori x20, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1416)

# Testcase cp_imm_corners
li x23, 0x040be198 # initialize rs1
xori x30, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1420)

# Testcase cp_imm_corners
li x19, 0x8ea5d8b1 # initialize rs1
xori x20, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1424)

# Testcase cp_imm_corners
li x3, 0x3bd83b63 # initialize rs1
xori x10, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1428)

# Testcase cp_imm_corners
li x14, 0x48d70fee # initialize rs1
xori x23, x14, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1432)

# Testcase cp_imm_corners
li x29, 0xe809edbf # initialize rs1
xori x26, x29, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1436)

# Testcase cp_imm_corners
li x30, 0x65abaaee # initialize rs1
xori x9, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1440)

# Testcase cp_imm_corners
li x27, 0xaa70eb9c # initialize rs1
xori x24, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1444)

# Testcase cp_imm_corners
li x30, 0xae52d542 # initialize rs1
xori x24, x30, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1448)

# Testcase cp_imm_corners
li x28, 0xf2f38775 # initialize rs1
xori x15, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1452)

# Testcase cp_imm_corners
li x3, 0xf952b940 # initialize rs1
xori x9, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1456)

# Testcase cp_imm_corners
li x18, 0x73e57e5f # initialize rs1
xori x5, x18, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1460)

# Testcase cp_imm_corners
li x23, 0xb1fdb284 # initialize rs1
xori x14, x23, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1464)

# Testcase cp_imm_corners
li x28, 0xfd5d80ac # initialize rs1
xori x19, x28, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x6, x19, x10 # perform first operation
xori x31, x14, -1692 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x18, x30 # perform first operation
xori x13, x26, -760 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x26, x17, x7 # perform first operation
xori x9, x20, -447 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x25, x10 # perform first operation
xori x25, x21, -1316 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x5, x9 # perform first operation
xori x9, x24, -1532 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x22, x1 # perform first operation
xori x22, x19, 1802 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x22, x31, x26 # perform first operation
xori x22, x2, -595 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x6, x17 # perform first operation
xori x3, x16, 1159 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x16, x1, x19 # perform first operation
xori x16, x15, -1284 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x26, x24, x7 # perform first operation
xori x24, x1, -1535 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x9, x17 # perform first operation
xori x17, x8, -412 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x15, x21, x11 # perform first operation
xori x23, x28, -351 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-sb.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x15, 0xd878dded # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1238 # sub immediate from rs1 to counter offset
sb x15, -1238(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x31, 0x7c36145e # initialize rs2
la x2, scratch # base address 
addi x2, x2, -627 # sub immediate from rs1 to counter offset
sb x31, 627(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x27, 0x1f86545d # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1764 # sub immediate from rs1 to counter offset
sb x27, -1764(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x17, 0x7af272e2 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1000 # sub immediate from rs1 to counter offset
sb x17, -1000(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x25, 0x503ca7fc # initialize rs2
la x5, scratch # base address 
addi x5, x5, -888 # sub immediate from rs1 to counter offset
sb x25, 888(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
li x11, 0xecb7de20 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1278 # sub immediate from rs1 to counter offset
sb x11, -1278(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x13, 0x2c3990ba # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1653 # sub immediate from rs1 to counter offset
sb x13, 1653(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x1, 0xdbe871a2 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -688 # sub immediate from rs1 to counter offset
sb x1, 688(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x12, 0x17f8308b # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1417 # sub immediate from rs1 to counter offset
sb x12, 1417(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x23, 0xb7cbbdd7 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1895 # sub immediate from rs1 to counter offset
sb x23, -1895(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x7, 0xbe463505 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -725 # sub immediate from rs1 to counter offset
sb x7, 725(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x11, 0xbfb10976 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1753 # sub immediate from rs1 to counter offset
sb x11, 1753(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x25, 0x3f178d84 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1048 # sub immediate from rs1 to counter offset
sb x25, -1048(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x28, 0xeec5b6bb # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1695 # sub immediate from rs1 to counter offset
sb x28, -1695(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x21, 0xafebf017 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 367 # sub immediate from rs1 to counter offset
sb x21, -367(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x21, 0x45a6772f # initialize rs2
la x16, scratch # base address 
addi x16, x16, 606 # sub immediate from rs1 to counter offset
sb x21, -606(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x15, 0x0cc9e641 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1415 # sub immediate from rs1 to counter offset
sb x15, 1415(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x26, 0x220ab4e3 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1185 # sub immediate from rs1 to counter offset
sb x26, -1185(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x21, 0x935343d5 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1812 # sub immediate from rs1 to counter offset
sb x21, -1812(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x5, 0x112c7cc4 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 519 # sub immediate from rs1 to counter offset
sb x5, -519(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x29, 0xef657db4 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1959 # sub immediate from rs1 to counter offset
sb x29, -1959(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x15, 0x49ddddc6 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 363 # sub immediate from rs1 to counter offset
sb x15, -363(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x5, 0x9c775dcc # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1662 # sub immediate from rs1 to counter offset
sb x5, -1662(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x11, 0x5ff6c78a # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1311 # sub immediate from rs1 to counter offset
sb x11, -1311(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x22, 0x6dffe522 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1609 # sub immediate from rs1 to counter offset
sb x22, 1609(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x12, 0x67a38809 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -86 # sub immediate from rs1 to counter offset
sb x12, 86(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x21, 0x4d29f78d # initialize rs2
la x27, scratch # base address 
addi x27, x27, -563 # sub immediate from rs1 to counter offset
sb x21, 563(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x23, 0x21ffb79c # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1005 # sub immediate from rs1 to counter offset
sb x23, -1005(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x24, 0x783f5bc8 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 2034 # sub immediate from rs1 to counter offset
sb x24, -2034(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x26, 0x04860d44 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1291 # sub immediate from rs1 to counter offset
sb x26, 1291(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x13, 0x60a4a2bf # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1800 # sub immediate from rs1 to counter offset
sb x13, -1800(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0x5d4d52a7 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 577 # sub immediate from rs1 to counter offset
sb x0, -577(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x743733ed # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1297 # sub immediate from rs1 to counter offset
sb x1, 1297(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0x022e0aac # initialize rs2
la x10, scratch # base address 
addi x10, x10, -600 # sub immediate from rs1 to counter offset
sb x2, 600(x10) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0xb4180697 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -866 # sub immediate from rs1 to counter offset
sb x3, 866(x11) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xffdb7dcc # initialize rs2
la x6, scratch # base address 
addi x6, x6, -2013 # sub immediate from rs1 to counter offset
sb x4, 2013(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe50d28c4 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1506 # sub immediate from rs1 to counter offset
sb x5, -1506(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x17fa9fb8 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -19 # sub immediate from rs1 to counter offset
sb x6, 19(x27) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x02082b4a # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1325 # sub immediate from rs1 to counter offset
sb x7, -1325(x20) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0x6a790830 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 65 # sub immediate from rs1 to counter offset
sb x8, -65(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0xdd6ac5bf # initialize rs2
la x5, scratch # base address 
addi x5, x5, -177 # sub immediate from rs1 to counter offset
sb x9, 177(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0x619bf517 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 7 # sub immediate from rs1 to counter offset
sb x10, -7(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0xfa1da9e7 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -173 # sub immediate from rs1 to counter offset
sb x11, 173(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0xf1ca1b45 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 56 # sub immediate from rs1 to counter offset
sb x12, -56(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0x8312e1de # initialize rs2
la x22, scratch # base address 
addi x22, x22, 81 # sub immediate from rs1 to counter offset
sb x13, -81(x22) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0x4585a6f6 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 467 # sub immediate from rs1 to counter offset
sb x14, -467(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0xc18d1ee8 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 906 # sub immediate from rs1 to counter offset
sb x15, -906(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0x7da3fabe # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1419 # sub immediate from rs1 to counter offset
sb x16, 1419(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0x7c2c6f2c # initialize rs2
la x8, scratch # base address 
addi x8, x8, -142 # sub immediate from rs1 to counter offset
sb x17, 142(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x12068e7c # initialize rs2
la x7, scratch # base address 
addi x7, x7, -700 # sub immediate from rs1 to counter offset
sb x18, 700(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0xbeb80fa4 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -57 # sub immediate from rs1 to counter offset
sb x19, 57(x2) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0x6a356712 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1545 # sub immediate from rs1 to counter offset
sb x20, 1545(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0x637e107a # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1484 # sub immediate from rs1 to counter offset
sb x21, -1484(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x9248a44c # initialize rs2
la x12, scratch # base address 
addi x12, x12, -795 # sub immediate from rs1 to counter offset
sb x22, 795(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x2c27fa6d # initialize rs2
la x5, scratch # base address 
addi x5, x5, 131 # sub immediate from rs1 to counter offset
sb x23, -131(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0x2d913f4e # initialize rs2
la x5, scratch # base address 
addi x5, x5, -258 # sub immediate from rs1 to counter offset
sb x24, 258(x5) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x8975a52f # initialize rs2
la x30, scratch # base address 
addi x30, x30, 344 # sub immediate from rs1 to counter offset
sb x25, -344(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0x551ba70e # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1567 # sub immediate from rs1 to counter offset
sb x26, -1567(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x529750bc # initialize rs2
la x18, scratch # base address 
addi x18, x18, 57 # sub immediate from rs1 to counter offset
sb x27, -57(x18) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0xd9f4b29c # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1824 # sub immediate from rs1 to counter offset
sb x28, 1824(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0x18b306ee # initialize rs2
la x19, scratch # base address 
addi x19, x19, -654 # sub immediate from rs1 to counter offset
sb x29, 654(x19) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0xcb8f7bf3 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1389 # sub immediate from rs1 to counter offset
sb x30, -1389(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0x40d6ebec # initialize rs2
la x18, scratch # base address 
addi x18, x18, 2031 # sub immediate from rs1 to counter offset
sb x31, -2031(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x19, 0x00000000 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -877 # sub immediate from rs1 to counter offset
sb x19, 877(x10) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x26, 0x00000001 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1485 # sub immediate from rs1 to counter offset
sb x26, 1485(x30) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x8, 0x00000002 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1484 # sub immediate from rs1 to counter offset
sb x8, -1484(x5) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x9, 0x80000000 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1564 # sub immediate from rs1 to counter offset
sb x9, 1564(x15) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x31, 0x80000001 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -894 # sub immediate from rs1 to counter offset
sb x31, 894(x1) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x9, 0x7fffffff # initialize rs2
la x10, scratch # base address 
addi x10, x10, 288 # sub immediate from rs1 to counter offset
sb x9, -288(x10) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x1, 0x7ffffffe # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1404 # sub immediate from rs1 to counter offset
sb x1, -1404(x6) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x20, 0xffffffff # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1402 # sub immediate from rs1 to counter offset
sb x20, -1402(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x7, 0xfffffffe # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1883 # sub immediate from rs1 to counter offset
sb x7, 1883(x26) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x21, 0x5bbc8872 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1370 # sub immediate from rs1 to counter offset
sb x21, 1370(x12) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x11, 0xaaaaaaaa # initialize rs2
la x17, scratch # base address 
addi x17, x17, -363 # sub immediate from rs1 to counter offset
sb x11, 363(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x8, 0x55555555 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 1047 # sub immediate from rs1 to counter offset
sb x8, -1047(x2) # perform operation 

# Testcase cp_imm_corners
li x11, 0x48ae5640 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 0 # sub immediate from rs1 to counter offset
sb x11, 0(x18) # perform operation 

# Testcase cp_imm_corners
li x17, 0x7a77a582 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1 # sub immediate from rs1 to counter offset
sb x17, 1(x16) # perform operation 

# Testcase cp_imm_corners
li x12, 0x12c80020 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2 # sub immediate from rs1 to counter offset
sb x12, 2(x17) # perform operation 

# Testcase cp_imm_corners
li x25, 0xe6437158 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -3 # sub immediate from rs1 to counter offset
sb x25, 3(x9) # perform operation 

# Testcase cp_imm_corners
li x1, 0x9e6daeb3 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -4 # sub immediate from rs1 to counter offset
sb x1, 4(x9) # perform operation 

# Testcase cp_imm_corners
li x17, 0x4c3b3466 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -8 # sub immediate from rs1 to counter offset
sb x17, 8(x28) # perform operation 

# Testcase cp_imm_corners
li x14, 0x927dd827 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -16 # sub immediate from rs1 to counter offset
sb x14, 16(x25) # perform operation 

# Testcase cp_imm_corners
li x13, 0xb7e23b9a # initialize rs2
la x7, scratch # base address 
addi x7, x7, -32 # sub immediate from rs1 to counter offset
sb x13, 32(x7) # perform operation 

# Testcase cp_imm_corners
li x8, 0x73d3860d # initialize rs2
la x17, scratch # base address 
addi x17, x17, -64 # sub immediate from rs1 to counter offset
sb x8, 64(x17) # perform operation 

# Testcase cp_imm_corners
li x22, 0x5a6815b8 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -128 # sub immediate from rs1 to counter offset
sb x22, 128(x25) # perform operation 

# Testcase cp_imm_corners
li x7, 0x00dbe867 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -256 # sub immediate from rs1 to counter offset
sb x7, 256(x6) # perform operation 

# Testcase cp_imm_corners
li x5, 0x57ae2ebc # initialize rs2
la x15, scratch # base address 
addi x15, x15, -512 # sub immediate from rs1 to counter offset
sb x5, 512(x15) # perform operation 

# Testcase cp_imm_corners
li x26, 0x469c5aac # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1023 # sub immediate from rs1 to counter offset
sb x26, 1023(x15) # perform operation 

# Testcase cp_imm_corners
li x31, 0x1e649552 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1024 # sub immediate from rs1 to counter offset
sb x31, 1024(x20) # perform operation 

# Testcase cp_imm_corners
li x30, 0x22005720 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1795 # sub immediate from rs1 to counter offset
sb x30, 1795(x9) # perform operation 

# Testcase cp_imm_corners
li x31, 0xb70f2faf # initialize rs2
la x20, scratch # base address 
addi x20, x20, -2047 # sub immediate from rs1 to counter offset
sb x31, 2047(x20) # perform operation 

# Testcase cp_imm_corners
li x8, 0xef57a367 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 2047 # increment rs1 by 2047 
addi x12, x12, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sb x8, -2048(x12) # perform operation 

# Testcase cp_imm_corners
li x10, 0x63f6be93 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 2047 # sub immediate from rs1 to counter offset
sb x10, -2047(x12) # perform operation 

# Testcase cp_imm_corners
li x8, 0x66192493 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 2 # sub immediate from rs1 to counter offset
sb x8, -2(x26) # perform operation 

# Testcase cp_imm_corners
li x24, 0x6deb3198 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1 # sub immediate from rs1 to counter offset
sb x24, -1(x7) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x1, scratch
addi x1, x1, 597
add x6, x12, x24 # perform first operation
sb x7, -597(x1) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x10, scratch
addi x10, x10, 1608
add x12, x25, x2 # perform first operation
sb x27, -1608(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x13, scratch
addi x13, x13, 537
add x1, x3, x8 # perform first operation
sb x11, -537(x13) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x13, scratch
addi x13, x13, -1051
add x13, x13, x0 # perform first operation
sb x19, 1051(x13) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x11, scratch
addi x11, x11, 42
add x3, x3, x0 # perform first operation
sb x3, -42(x11) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x30, scratch
addi x30, x30, 0
add x19, x19, x0 # perform first operation
sb x6, 0(x30) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-sub.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xd54cc625 # initialize rs1
li x27, 0x8f82d8c0 # initialize rs2
sub x26, x0, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x0a174fc6 # initialize rs1
li x12, 0x7065a95c # initialize rs2
sub x16, x1, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x3612a486 # initialize rs1
li x7, 0x26bcb54b # initialize rs2
sub x29, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xbfb0fa12 # initialize rs1
li x9, 0x8f3a2478 # initialize rs2
sub x31, x3, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x6, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x13695800 # initialize rs1
li x22, 0x6d6d81d9 # initialize rs2
sub x5, x4, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
li x5, 0x3c074215 # initialize rs1
li x16, 0x869b17eb # initialize rs2
sub x2, x5, x16 # perform operation
RVTEST_SIGUPD(x6, x0, x2, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x82858110 # initialize rs1
li x19, 0xcce38cfc # initialize rs2
sub x12, x6, x19 # perform operation
RVTEST_SIGUPD(x7, x0, x12, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x379f277a # initialize rs1
li x9, 0xa335bea1 # initialize rs2
sub x18, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xf00bc6ee # initialize rs1
li x20, 0xeb043c3d # initialize rs2
sub x10, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xd145aa13 # initialize rs1
li x29, 0x836cb930 # initialize rs2
sub x15, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x12f7d37c # initialize rs1
li x11, 0xf657bfaf # initialize rs2
sub x1, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x63d998de # initialize rs1
li x7, 0x9c27ca40 # initialize rs2
sub x10, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xfbfbe2d6 # initialize rs1
li x29, 0x7ffa0b2c # initialize rs2
sub x20, x12, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x96a100b8 # initialize rs1
li x18, 0x83363b56 # initialize rs2
sub x3, x13, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xf170fbd5 # initialize rs1
li x20, 0xd5964622 # initialize rs2
sub x24, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x10a38481 # initialize rs1
li x30, 0x5400feab # initialize rs2
sub x14, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x64c7b8b6 # initialize rs1
li x2, 0x5fbe76da # initialize rs2
sub x19, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x67259c22 # initialize rs1
li x5, 0x42634772 # initialize rs2
sub x22, x17, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xcf812e8e # initialize rs1
li x23, 0x6f4e6a65 # initialize rs2
sub x14, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xe93242d7 # initialize rs1
li x31, 0xa87fe329 # initialize rs2
sub x17, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe1470b4c # initialize rs1
li x29, 0xcfd16a68 # initialize rs2
sub x1, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x327070a9 # initialize rs1
li x1, 0xacd3b7ab # initialize rs2
sub x22, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x922ca66c # initialize rs1
li x1, 0xc4c259ca # initialize rs2
sub x24, x22, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xd422a20b # initialize rs1
li x10, 0xbbef5c79 # initialize rs2
sub x22, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x5d0127c6 # initialize rs1
li x31, 0x722675a5 # initialize rs2
sub x22, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xdd357aea # initialize rs1
li x8, 0x9cc07c6b # initialize rs2
sub x6, x25, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x8304354d # initialize rs1
li x12, 0x1aa31253 # initialize rs2
sub x3, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe977bd68 # initialize rs1
li x10, 0x06afedee # initialize rs2
sub x26, x27, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x044d6003 # initialize rs1
li x21, 0xc3d2f3ad # initialize rs2
sub x11, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x4270a2b3 # initialize rs1
li x14, 0x9d87e81f # initialize rs2
sub x9, x29, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x55413dd6 # initialize rs1
li x17, 0x86fd268d # initialize rs2
sub x10, x30, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x473ba48f # initialize rs1
li x5, 0xa09ced1c # initialize rs2
sub x9, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x6, 0x29569575 # initialize rs1
li x0, 0xce6d8f31 # initialize rs2
sub x25, x6, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x17, 0x69f471a3 # initialize rs1
li x1, 0xb5642f10 # initialize rs2
sub x13, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x30, 0x3036ccdd # initialize rs1
li x2, 0xba851186 # initialize rs2
sub x20, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x19, 0xb796f060 # initialize rs1
li x3, 0xa1cfaae1 # initialize rs2
sub x2, x19, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x18, 0x1ee9a912 # initialize rs1
li x4, 0x7c345f09 # initialize rs2
sub x9, x18, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x23, 0x2a1e20d0 # initialize rs1
li x5, 0x2d2e3c7f # initialize rs2
sub x20, x23, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x20, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0xca855f39 # initialize rs1
li x6, 0xa8113e0b # initialize rs2
sub x9, x15, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x9, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x15, 0x0163d244 # initialize rs1
li x7, 0x678ccda1 # initialize rs2
sub x14, x15, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x14, 0x5d1277ce # initialize rs1
li x8, 0x0fedb538 # initialize rs2
sub x6, x14, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x8, 0x6bb6eb41 # initialize rs1
li x9, 0x0463026a # initialize rs2
sub x5, x8, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x28, 0x3f8b2dc8 # initialize rs1
li x10, 0x29c83323 # initialize rs2
sub x19, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x25, 0x010ded82 # initialize rs1
li x11, 0xc3e21050 # initialize rs2
sub x8, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x21, 0xcd974914 # initialize rs1
li x12, 0x23a2bc75 # initialize rs2
sub x15, x21, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x15, 0xaa589d8d # initialize rs1
li x13, 0x25d4e430 # initialize rs2
sub x14, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x19, 0xf78a7491 # initialize rs1
li x14, 0x0dbff178 # initialize rs2
sub x8, x19, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x14, 0xbe0873e7 # initialize rs1
li x15, 0xcc808527 # initialize rs2
sub x5, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x7, 0x1de2821d # initialize rs1
li x16, 0x2a4e7db3 # initialize rs2
sub x3, x7, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x23, 0xb77f287e # initialize rs1
li x17, 0x3832c644 # initialize rs2
sub x12, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x20, 0xcd4ea37b # initialize rs1
li x18, 0xb6f034cf # initialize rs2
sub x21, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x29, 0xaa28e521 # initialize rs1
li x19, 0xe1130ce7 # initialize rs2
sub x16, x29, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x6, 0x6cbd32e7 # initialize rs1
li x20, 0x1e71ce83 # initialize rs2
sub x1, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x2, 0xe3077183 # initialize rs1
li x21, 0xeae80092 # initialize rs2
sub x12, x2, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x7, 0x57c9c9dc # initialize rs1
li x22, 0x1356e413 # initialize rs2
sub x15, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x30, 0x78cb2351 # initialize rs1
li x23, 0x5f894e33 # initialize rs2
sub x12, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x28, 0x7c39b859 # initialize rs1
li x24, 0xab3f68f1 # initialize rs2
sub x21, x28, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x9, 0xf4eb3104 # initialize rs1
li x25, 0xc52f21e4 # initialize rs2
sub x3, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x28, 0xe6b0d1e5 # initialize rs1
li x26, 0x4f93d100 # initialize rs2
sub x6, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x29, 0x29f36609 # initialize rs1
li x27, 0xbdcdb800 # initialize rs2
sub x21, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x1, 0xec51666e # initialize rs1
li x28, 0x7d9c541d # initialize rs2
sub x5, x1, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x18, 0x995f643f # initialize rs1
li x29, 0x7db5dccb # initialize rs2
sub x3, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x26, 0x6f1f293c # initialize rs1
li x30, 0xea6d7442 # initialize rs2
sub x1, x26, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x11, 0xd9dc2036 # initialize rs1
li x31, 0x6dcc1501 # initialize rs2
sub x6, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 252)

# Testcase cp_rd (Test destination rd = x0)
li x10, 0xf0185ba0 # initialize rs1
li x31, 0x930efbee # initialize rs2
sub x0, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x3, 0x7c955067 # initialize rs1
li x31, 0x37f8bf04 # initialize rs2
sub x1, x3, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x7, 0xad2bd9d0 # initialize rs1
li x30, 0xa1bf7972 # initialize rs2
sub x2, x7, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x28, 0x39523266 # initialize rs1
li x8, 0x9c560e46 # initialize rs2
sub x3, x28, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x17, 0x214d5a68 # initialize rs1
li x16, 0xaf8f1431 # initialize rs2
sub x4, x17, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0x2b185be9 # initialize rs1
li x18, 0x90feaf4e # initialize rs2
sub x5, x17, x18 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x14, 0x746ee1be # initialize rs1
li x10, 0xdf817c56 # initialize rs2
sub x6, x14, x10 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x5, 0x2fb26b22 # initialize rs1
li x11, 0x3308df38 # initialize rs2
sub x7, x5, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x18, 0x6740bdc2 # initialize rs1
li x13, 0x25b54048 # initialize rs2
sub x8, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x28, 0x633cca57 # initialize rs1
li x10, 0x26c51350 # initialize rs2
sub x9, x28, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x19, 0x996466e5 # initialize rs1
li x6, 0xd3f69b81 # initialize rs2
sub x10, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x1, 0xb621cc62 # initialize rs1
li x21, 0x903a4ad3 # initialize rs2
sub x11, x1, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x19, 0x0947b572 # initialize rs1
li x31, 0xbf9788fe # initialize rs2
sub x12, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x9, 0x7ffb761e # initialize rs1
li x15, 0xc728dfba # initialize rs2
sub x13, x9, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x27, 0x42fe8e80 # initialize rs1
li x15, 0x9e83f83a # initialize rs2
sub x14, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x14, 0x8ae34eee # initialize rs1
li x20, 0x89b6f40f # initialize rs2
sub x15, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x1, 0x12a6560c # initialize rs1
li x11, 0xda0b0273 # initialize rs2
sub x16, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x14, 0x36c79d2a # initialize rs1
li x12, 0xa5ee8cf3 # initialize rs2
sub x17, x14, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x6, 0x2981d4d1 # initialize rs1
li x5, 0x9ec5570a # initialize rs2
sub x18, x6, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x15, 0x5596ec08 # initialize rs1
li x8, 0xdc62d8f9 # initialize rs2
sub x19, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0xb156d91f # initialize rs1
li x20, 0xfc224b2b # initialize rs2
sub x20, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x21, 0xc26d9bfe # initialize rs1
li x17, 0x2bb2ab1c # initialize rs2
sub x21, x21, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x9, 0x12312c25 # initialize rs1
li x20, 0x76e3c0af # initialize rs2
sub x22, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x15, 0x6f13c003 # initialize rs1
li x30, 0xdf110d4c # initialize rs2
sub x23, x15, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x30, 0x1a08b61b # initialize rs1
li x13, 0x44d29fd3 # initialize rs2
sub x24, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x15, 0x72a97294 # initialize rs1
li x9, 0xe5edee15 # initialize rs2
sub x25, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x28, 0x34426da8 # initialize rs1
li x23, 0x29318d8a # initialize rs2
sub x26, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x7, 0x193eefdf # initialize rs1
li x1, 0x5ddc0c85 # initialize rs2
sub x27, x7, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x22, 0x6991c666 # initialize rs1
li x5, 0x7f54afc9 # initialize rs2
sub x28, x22, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x8, 0xec5aef00 # initialize rs1
li x7, 0x24473a78 # initialize rs2
sub x29, x8, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x11, 0x89d05fd2 # initialize rs1
li x26, 0x5b1cdd41 # initialize rs2
sub x30, x11, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x15, 0xaa5d21bc # initialize rs1
li x18, 0x100a8ee9 # initialize rs2
sub x31, x15, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x27, 0x00000000 # initialize rs1
li x31, 0x5c33d330 # initialize rs2
sub x15, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x13, 0x00000001 # initialize rs1
li x1, 0x63b221a9 # initialize rs2
sub x28, x13, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x11, 0x00000002 # initialize rs1
li x16, 0xb3a5a80c # initialize rs2
sub x18, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x7, 0x80000000 # initialize rs1
li x22, 0xebb25d58 # initialize rs2
sub x1, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x28, 0x80000001 # initialize rs1
li x9, 0xd4069268 # initialize rs2
sub x26, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x1, 0x7fffffff # initialize rs1
li x30, 0xa3946d85 # initialize rs2
sub x23, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x9, 0x7ffffffe # initialize rs1
li x12, 0x9045cc12 # initialize rs2
sub x5, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0xffffffff # initialize rs1
li x12, 0xb225cfc1 # initialize rs2
sub x14, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x28, 0xfffffffe # initialize rs1
li x25, 0x6f285fa7 # initialize rs2
sub x9, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x18, 0x5bbc8872 # initialize rs1
li x21, 0x47e73b56 # initialize rs2
sub x3, x18, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x7, 0xaaaaaaaa # initialize rs1
li x25, 0xd20e9d26 # initialize rs2
sub x23, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x21, 0x55555555 # initialize rs1
li x2, 0xe4b75dc6 # initialize rs2
sub x23, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x2, 0xcd52a2a2 # initialize rs1
li x29, 0x00000000 # initialize rs2
sub x16, x2, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0xc876f990 # initialize rs1
li x3, 0x00000001 # initialize rs2
sub x31, x6, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x18, 0x88e88488 # initialize rs1
li x16, 0x00000002 # initialize rs2
sub x21, x18, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x27, 0x211f5b4f # initialize rs1
li x1, 0x80000000 # initialize rs2
sub x24, x27, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x24, 0x959eae01 # initialize rs1
li x10, 0x80000001 # initialize rs2
sub x19, x24, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x13, 0x43668989 # initialize rs1
li x29, 0x7fffffff # initialize rs2
sub x19, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x14, 0x60248e80 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
sub x5, x14, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x2, 0xdce60f0f # initialize rs1
li x16, 0xffffffff # initialize rs2
sub x10, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x21, 0x4b34a66c # initialize rs1
li x18, 0xfffffffe # initialize rs2
sub x6, x21, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x6, 0xe90edf64 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
sub x1, x6, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x14, 0x4939f66b # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
sub x23, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x6, 0xdcd6c593 # initialize rs1
li x16, 0x55555555 # initialize rs2
sub x28, x6, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x23, 0x00000000 # initialize rs1
li x22, 0x00000000 # initialize rs2
sub x20, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x1, 0x00000000 # initialize rs1
li x19, 0x00000001 # initialize rs2
sub x13, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x30, 0x00000000 # initialize rs1
li x21, 0x00000002 # initialize rs2
sub x1, x30, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x23, 0x00000000 # initialize rs1
li x19, 0x80000000 # initialize rs2
sub x25, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x1, 0x00000000 # initialize rs1
li x6, 0x80000001 # initialize rs2
sub x17, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x10, 0x00000000 # initialize rs1
li x14, 0x7fffffff # initialize rs2
sub x8, x10, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x8, 0x00000000 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
sub x22, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x30, 0x00000000 # initialize rs1
li x29, 0xffffffff # initialize rs2
sub x16, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x9, 0x00000000 # initialize rs1
li x10, 0xfffffffe # initialize rs2
sub x3, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x30, 0x00000000 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
sub x28, x30, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x7, 0x00000000 # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
sub x22, x7, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x13, 0x00000000 # initialize rs1
li x30, 0x55555555 # initialize rs2
sub x19, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x3, 0x00000001 # initialize rs1
li x19, 0x00000000 # initialize rs2
sub x12, x3, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x14, 0x00000001 # initialize rs1
li x3, 0x00000001 # initialize rs2
sub x6, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x14, 0x00000001 # initialize rs1
li x17, 0x00000002 # initialize rs2
sub x15, x14, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x22, 0x00000001 # initialize rs1
li x29, 0x80000000 # initialize rs2
sub x30, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x14, 0x00000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
sub x8, x14, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x5, 0x00000001 # initialize rs1
li x14, 0x7fffffff # initialize rs2
sub x25, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x12, 0x00000001 # initialize rs1
li x23, 0x7ffffffe # initialize rs2
sub x18, x12, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x16, 0x00000001 # initialize rs1
li x23, 0xffffffff # initialize rs2
sub x27, x16, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x5, 0x00000001 # initialize rs1
li x10, 0xfffffffe # initialize rs2
sub x28, x5, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x15, 0x00000001 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
sub x30, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x25, 0x00000001 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
sub x14, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x22, 0x00000001 # initialize rs1
li x13, 0x55555555 # initialize rs2
sub x19, x22, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x11, 0x00000002 # initialize rs1
li x24, 0x00000000 # initialize rs2
sub x7, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x26, 0x00000002 # initialize rs1
li x8, 0x00000001 # initialize rs2
sub x30, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x2, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
sub x3, x2, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x30, 0x00000002 # initialize rs1
li x13, 0x80000000 # initialize rs2
sub x21, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x29, 0x00000002 # initialize rs1
li x13, 0x80000001 # initialize rs2
sub x6, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x2, 0x00000002 # initialize rs1
li x24, 0x7fffffff # initialize rs2
sub x9, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x31, 0x00000002 # initialize rs1
li x26, 0x7ffffffe # initialize rs2
sub x25, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x11, 0x00000002 # initialize rs1
li x1, 0xffffffff # initialize rs2
sub x14, x11, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x5, 0x00000002 # initialize rs1
li x6, 0xfffffffe # initialize rs2
sub x26, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x30, 0x00000002 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
sub x9, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x22, 0x00000002 # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
sub x31, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x8, 0x00000002 # initialize rs1
li x27, 0x55555555 # initialize rs2
sub x30, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x7, 0x80000000 # initialize rs1
li x3, 0x00000000 # initialize rs2
sub x22, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x22, 0x80000000 # initialize rs1
li x24, 0x00000001 # initialize rs2
sub x14, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x7, 0x80000000 # initialize rs1
li x2, 0x00000002 # initialize rs2
sub x21, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x11, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
sub x19, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x23, 0x80000000 # initialize rs1
li x26, 0x80000001 # initialize rs2
sub x28, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x2, 0x80000000 # initialize rs1
li x16, 0x7fffffff # initialize rs2
sub x12, x2, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x24, 0x80000000 # initialize rs1
li x18, 0x7ffffffe # initialize rs2
sub x16, x24, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x11, 0x80000000 # initialize rs1
li x17, 0xffffffff # initialize rs2
sub x1, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x26, 0x80000000 # initialize rs1
li x7, 0xfffffffe # initialize rs2
sub x8, x26, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x13, 0x80000000 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
sub x18, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x17, 0x80000000 # initialize rs1
li x25, 0xaaaaaaaa # initialize rs2
sub x21, x17, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x9, 0x80000000 # initialize rs1
li x21, 0x55555555 # initialize rs2
sub x23, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x10, 0x80000001 # initialize rs1
li x5, 0x00000000 # initialize rs2
sub x30, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x11, 0x80000001 # initialize rs1
li x9, 0x00000001 # initialize rs2
sub x17, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x5, 0x80000001 # initialize rs1
li x30, 0x00000002 # initialize rs2
sub x27, x5, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x19, 0x80000001 # initialize rs1
li x6, 0x80000000 # initialize rs2
sub x21, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x13, 0x80000001 # initialize rs1
li x8, 0x80000001 # initialize rs2
sub x29, x13, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x5, 0x80000001 # initialize rs1
li x9, 0x7fffffff # initialize rs2
sub x29, x5, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x18, 0x80000001 # initialize rs1
li x19, 0x7ffffffe # initialize rs2
sub x3, x18, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x25, 0x80000001 # initialize rs1
li x3, 0xffffffff # initialize rs2
sub x27, x25, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x25, 0x80000001 # initialize rs1
li x29, 0xfffffffe # initialize rs2
sub x9, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x5, 0x80000001 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
sub x6, x5, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x9, 0x80000001 # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
sub x16, x9, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x14, 0x80000001 # initialize rs1
li x25, 0x55555555 # initialize rs2
sub x26, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x17, 0x7fffffff # initialize rs1
li x28, 0x00000000 # initialize rs2
sub x20, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x8, 0x7fffffff # initialize rs1
li x31, 0x00000001 # initialize rs2
sub x29, x8, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x15, 0x7fffffff # initialize rs1
li x31, 0x00000002 # initialize rs2
sub x30, x15, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x10, 0x7fffffff # initialize rs1
li x5, 0x80000000 # initialize rs2
sub x6, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x19, 0x7fffffff # initialize rs1
li x6, 0x80000001 # initialize rs2
sub x9, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x31, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
sub x26, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x20, 0x7fffffff # initialize rs1
li x23, 0x7ffffffe # initialize rs2
sub x18, x20, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x18, 0x7fffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
sub x21, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x23, 0x7fffffff # initialize rs1
li x2, 0xfffffffe # initialize rs2
sub x10, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x23, 0x7fffffff # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
sub x22, x23, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x24, 0x7fffffff # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
sub x6, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x5, 0x7fffffff # initialize rs1
li x8, 0x55555555 # initialize rs2
sub x28, x5, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x16, 0x7ffffffe # initialize rs1
li x18, 0x00000000 # initialize rs2
sub x9, x16, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x12, 0x7ffffffe # initialize rs1
li x22, 0x00000001 # initialize rs2
sub x21, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x28, 0x7ffffffe # initialize rs1
li x1, 0x00000002 # initialize rs2
sub x27, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x27, 0x7ffffffe # initialize rs1
li x29, 0x80000000 # initialize rs2
sub x24, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x30, 0x7ffffffe # initialize rs1
li x10, 0x80000001 # initialize rs2
sub x17, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x24, 0x7ffffffe # initialize rs1
li x21, 0x7fffffff # initialize rs2
sub x31, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x2, 0x7ffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
sub x25, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x17, 0x7ffffffe # initialize rs1
li x2, 0xffffffff # initialize rs2
sub x27, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x16, 0x7ffffffe # initialize rs1
li x1, 0xfffffffe # initialize rs2
sub x21, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x31, 0x7ffffffe # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
sub x19, x31, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x7, 0x7ffffffe # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
sub x22, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x31, 0x7ffffffe # initialize rs1
li x8, 0x55555555 # initialize rs2
sub x13, x31, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x27, 0xffffffff # initialize rs1
li x6, 0x00000000 # initialize rs2
sub x28, x27, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x21, 0xffffffff # initialize rs1
li x27, 0x00000001 # initialize rs2
sub x29, x21, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x15, 0xffffffff # initialize rs1
li x25, 0x00000002 # initialize rs2
sub x26, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x13, 0xffffffff # initialize rs1
li x11, 0x80000000 # initialize rs2
sub x20, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x13, 0xffffffff # initialize rs1
li x19, 0x80000001 # initialize rs2
sub x14, x13, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x15, 0xffffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
sub x27, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x24, 0xffffffff # initialize rs1
li x21, 0x7ffffffe # initialize rs2
sub x18, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x5, 0xffffffff # initialize rs1
li x19, 0xffffffff # initialize rs2
sub x13, x5, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x7, 0xffffffff # initialize rs1
li x6, 0xfffffffe # initialize rs2
sub x23, x7, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x16, 0xffffffff # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
sub x29, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x30, 0xffffffff # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
sub x22, x30, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x24, 0xffffffff # initialize rs1
li x29, 0x55555555 # initialize rs2
sub x28, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x6, 0xfffffffe # initialize rs1
li x22, 0x00000000 # initialize rs2
sub x16, x6, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x31, 0xfffffffe # initialize rs1
li x9, 0x00000001 # initialize rs2
sub x1, x31, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x8, 0xfffffffe # initialize rs1
li x6, 0x00000002 # initialize rs2
sub x26, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x31, 0xfffffffe # initialize rs1
li x13, 0x80000000 # initialize rs2
sub x2, x31, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x6, 0xfffffffe # initialize rs1
li x24, 0x80000001 # initialize rs2
sub x16, x6, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x9, 0xfffffffe # initialize rs1
li x29, 0x7fffffff # initialize rs2
sub x21, x9, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x14, 0xfffffffe # initialize rs1
li x2, 0x7ffffffe # initialize rs2
sub x3, x14, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x8, 0xfffffffe # initialize rs1
li x2, 0xffffffff # initialize rs2
sub x22, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x31, 0xfffffffe # initialize rs1
li x3, 0xfffffffe # initialize rs2
sub x10, x31, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x9, 0xfffffffe # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
sub x23, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x29, 0xfffffffe # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
sub x2, x29, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x16, 0xfffffffe # initialize rs1
li x1, 0x55555555 # initialize rs2
sub x21, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x26, 0x5bbc8872 # initialize rs1
li x24, 0x00000000 # initialize rs2
sub x28, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x23, 0x5bbc8872 # initialize rs1
li x2, 0x00000001 # initialize rs2
sub x1, x23, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x13, 0x5bbc8872 # initialize rs1
li x6, 0x00000002 # initialize rs2
sub x17, x13, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x18, 0x5bbc8872 # initialize rs1
li x31, 0x80000000 # initialize rs2
sub x5, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x5, 0x5bbc8872 # initialize rs1
li x6, 0x80000001 # initialize rs2
sub x2, x5, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x2, 0x5bbc8872 # initialize rs1
li x12, 0x7fffffff # initialize rs2
sub x21, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x16, 0x5bbc8872 # initialize rs1
li x12, 0x7ffffffe # initialize rs2
sub x23, x16, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x1, 0x5bbc8872 # initialize rs1
li x14, 0xffffffff # initialize rs2
sub x29, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x2, 0x5bbc8872 # initialize rs1
li x22, 0xfffffffe # initialize rs2
sub x23, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x8, 0x5bbc8872 # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
sub x13, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x22, 0x5bbc8872 # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
sub x12, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x11, 0x5bbc8872 # initialize rs1
li x24, 0x55555555 # initialize rs2
sub x10, x11, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x22, 0xaaaaaaaa # initialize rs1
li x30, 0x00000000 # initialize rs2
sub x29, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x5, 0xaaaaaaaa # initialize rs1
li x12, 0x00000001 # initialize rs2
sub x29, x5, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x15, 0xaaaaaaaa # initialize rs1
li x26, 0x00000002 # initialize rs2
sub x14, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x29, 0xaaaaaaaa # initialize rs1
li x16, 0x80000000 # initialize rs2
sub x3, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x12, 0xaaaaaaaa # initialize rs1
li x31, 0x80000001 # initialize rs2
sub x21, x12, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x8, 0xaaaaaaaa # initialize rs1
li x24, 0x7fffffff # initialize rs2
sub x9, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x26, 0xaaaaaaaa # initialize rs1
li x24, 0x7ffffffe # initialize rs2
sub x20, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x12, 0xaaaaaaaa # initialize rs1
li x18, 0xffffffff # initialize rs2
sub x26, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x8, 0xaaaaaaaa # initialize rs1
li x25, 0xfffffffe # initialize rs2
sub x10, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x28, 0xaaaaaaaa # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
sub x29, x28, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x31, 0xaaaaaaaa # initialize rs1
li x6, 0xaaaaaaaa # initialize rs2
sub x20, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x16, 0xaaaaaaaa # initialize rs1
li x14, 0x55555555 # initialize rs2
sub x29, x16, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x19, 0x55555555 # initialize rs1
li x28, 0x00000000 # initialize rs2
sub x30, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x30, 0x55555555 # initialize rs1
li x5, 0x00000001 # initialize rs2
sub x2, x30, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x12, 0x55555555 # initialize rs1
li x17, 0x00000002 # initialize rs2
sub x30, x12, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x28, 0x55555555 # initialize rs1
li x9, 0x80000000 # initialize rs2
sub x19, x28, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x2, 0x55555555 # initialize rs1
li x17, 0x80000001 # initialize rs2
sub x25, x2, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x1, 0x55555555 # initialize rs1
li x6, 0x7fffffff # initialize rs2
sub x5, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x20, 0x55555555 # initialize rs1
li x2, 0x7ffffffe # initialize rs2
sub x15, x20, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x11, 0x55555555 # initialize rs1
li x5, 0xffffffff # initialize rs2
sub x15, x11, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x30, 0x55555555 # initialize rs1
li x10, 0xfffffffe # initialize rs2
sub x19, x30, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x23, 0x55555555 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
sub x20, x23, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x1, 0x55555555 # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
sub x15, x1, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x5, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
sub x2, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x395c1b44 # initialize rs1
li x0, 0x9e899df6 # initialize rs2
sub x2, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xc8793f78 # initialize rs1
li x1, 0xe404335e # initialize rs2
sub x19, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x4145dd73 # initialize rs1
li x2, 0x4e7b2162 # initialize rs2
sub x15, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xd4fd88da # initialize rs1
li x3, 0xdbefae3d # initialize rs2
sub x29, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x063a216b # initialize rs1
li x4, 0x31faa4a8 # initialize rs2
sub x7, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd559829c # initialize rs1
li x5, 0x833ec556 # initialize rs2
sub x10, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x10, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x4ad0fbda # initialize rs1
li x6, 0xf623200c # initialize rs2
sub x18, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x18, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x58ec89b3 # initialize rs1
li x7, 0xc7334d58 # initialize rs2
sub x31, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x6937b3cd # initialize rs1
li x8, 0x2887bb51 # initialize rs2
sub x5, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xa677702d # initialize rs1
li x9, 0xf14f064c # initialize rs2
sub x21, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x184d4807 # initialize rs1
li x10, 0x7f61bf08 # initialize rs2
sub x20, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xf7188d27 # initialize rs1
li x11, 0xbdd8d833 # initialize rs2
sub x16, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xdca06420 # initialize rs1
li x12, 0x81bdc869 # initialize rs2
sub x30, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xfcda77c0 # initialize rs1
li x13, 0x40b09601 # initialize rs2
sub x28, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x8318965e # initialize rs1
li x14, 0xc0e4b3f0 # initialize rs2
sub x15, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0xc1fbf1eb # initialize rs1
li x15, 0x91dc5095 # initialize rs2
sub x22, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x734770a1 # initialize rs1
li x16, 0x6291a857 # initialize rs2
sub x30, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x0f8d517d # initialize rs1
li x17, 0x4dd0cb9d # initialize rs2
sub x9, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x5ebd2e85 # initialize rs1
li x18, 0xd4019c69 # initialize rs2
sub x13, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x031ee5bd # initialize rs1
li x19, 0xad4e3ff7 # initialize rs2
sub x5, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xf423c25c # initialize rs1
li x20, 0x6dbd40ea # initialize rs2
sub x29, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xde69a9cd # initialize rs1
li x21, 0x6c39235b # initialize rs2
sub x6, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x887f5399 # initialize rs1
li x22, 0xb8357d04 # initialize rs2
sub x18, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xe8935362 # initialize rs1
li x23, 0x708a0348 # initialize rs2
sub x11, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x4acbd7c6 # initialize rs1
li x24, 0x12da0f04 # initialize rs2
sub x1, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x11ec5107 # initialize rs1
li x25, 0xbb9ff533 # initialize rs2
sub x23, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xec20bb2f # initialize rs1
li x26, 0x4ebeb563 # initialize rs2
sub x29, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x102ab054 # initialize rs1
li x27, 0xe802579b # initialize rs2
sub x16, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xcd4eed90 # initialize rs1
li x28, 0x59e22a0c # initialize rs2
sub x16, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x9601dce9 # initialize rs1
li x29, 0x1c89a00a # initialize rs2
sub x17, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xc9c09b9d # initialize rs1
li x30, 0x22a68776 # initialize rs2
sub x27, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xff2b92af # initialize rs1
li x31, 0xd2dd5b94 # initialize rs2
sub x10, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x01181023 # initialize rs1
li x9, 0xeff036f4 # initialize rs2
sub x0, x0, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x6274e3f9 # initialize rs1
li x27, 0x4d3d3442 # initialize rs2
sub x1, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xc3825085 # initialize rs1
li x28, 0x07b7483f # initialize rs2
sub x2, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x5bba50ae # initialize rs1
li x1, 0x365992d8 # initialize rs2
sub x3, x3, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x7add16ad # initialize rs1
li x23, 0x04115c33 # initialize rs2
sub x4, x4, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1dcdb3d0 # initialize rs1
li x15, 0x8c9fabf1 # initialize rs2
sub x5, x5, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xee15e47b # initialize rs1
li x26, 0x1cd98f14 # initialize rs2
sub x6, x6, x26 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xdeeeb033 # initialize rs1
li x19, 0x5ef9392c # initialize rs2
sub x7, x7, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x3726f4f7 # initialize rs1
li x2, 0x1f24a373 # initialize rs2
sub x8, x8, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xcd02e29f # initialize rs1
li x12, 0x4f9991c3 # initialize rs2
sub x9, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xf393d719 # initialize rs1
li x11, 0xd6aee3c1 # initialize rs2
sub x10, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x64b1b72b # initialize rs1
li x31, 0xc4b510a3 # initialize rs2
sub x11, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x03cbb2e8 # initialize rs1
li x3, 0x60510272 # initialize rs2
sub x12, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x496ca9e9 # initialize rs1
li x3, 0x9a485fdf # initialize rs2
sub x13, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x468247f0 # initialize rs1
li x26, 0xbc60d5ff # initialize rs2
sub x14, x14, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x4f932f8a # initialize rs1
li x17, 0x6267ac98 # initialize rs2
sub x15, x15, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x3390b929 # initialize rs1
li x13, 0x05fbfc91 # initialize rs2
sub x16, x16, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x19ba877d # initialize rs1
li x2, 0x53994dec # initialize rs2
sub x17, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xe77d2cee # initialize rs1
li x30, 0xbbb228ed # initialize rs2
sub x18, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x7f02883a # initialize rs1
li x30, 0x9d21749a # initialize rs2
sub x19, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x3a8af956 # initialize rs1
li x26, 0xe7e23d32 # initialize rs2
sub x20, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x3d4daba7 # initialize rs1
li x1, 0x9dda3490 # initialize rs2
sub x21, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x20ada65b # initialize rs1
li x17, 0x82f2c2db # initialize rs2
sub x22, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x134b8971 # initialize rs1
li x11, 0x0a77fe0f # initialize rs2
sub x23, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x6405589b # initialize rs1
li x21, 0x507b12d8 # initialize rs2
sub x24, x24, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xff34b659 # initialize rs1
li x6, 0x80a97b0f # initialize rs2
sub x25, x25, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xc302aca4 # initialize rs1
li x24, 0x66cd3d93 # initialize rs2
sub x26, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x01ab0bc8 # initialize rs1
li x22, 0x447a670c # initialize rs2
sub x27, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xe7a1ef3f # initialize rs1
li x28, 0x3d61b8c9 # initialize rs2
sub x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x72baeed7 # initialize rs1
li x31, 0x26bcde4b # initialize rs2
sub x29, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x623eb139 # initialize rs1
li x28, 0xb9844875 # initialize rs2
sub x30, x30, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x8c08a759 # initialize rs1
li x5, 0x0ea41d26 # initialize rs2
sub x31, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x30, 0x69e19c47 # initialize rs1
li x0, 0x5f306af5 # initialize rs2
sub x0, x30, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x2, 0xa6afbbfa # initialize rs1
li x1, 0x064b4ea1 # initialize rs2
sub x1, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x16, 0xa120cf16 # initialize rs1
li x2, 0x273f0fcd # initialize rs2
sub x2, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x10, 0x5fa27349 # initialize rs1
li x3, 0x8b85fc63 # initialize rs2
sub x3, x10, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x14, 0x2cc4d608 # initialize rs1
li x4, 0xec6de9ed # initialize rs2
sub x4, x14, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0x1e86c537 # initialize rs1
li x5, 0x2f405d63 # initialize rs2
sub x5, x4, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0xd6347c35 # initialize rs1
li x6, 0x3ff4bec9 # initialize rs2
sub x6, x13, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x25, 0x84784f51 # initialize rs1
li x7, 0xab6d9796 # initialize rs2
sub x7, x25, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x26, 0x291ebea0 # initialize rs1
li x8, 0x6af34049 # initialize rs2
sub x8, x26, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x27, 0x57213940 # initialize rs1
li x9, 0x2060d056 # initialize rs2
sub x9, x27, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x1, 0x2024b30d # initialize rs1
li x10, 0x65beb78b # initialize rs2
sub x10, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x7, 0xc628a427 # initialize rs1
li x11, 0x04159cfb # initialize rs2
sub x11, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x26, 0x74e2a601 # initialize rs1
li x12, 0x87f01d87 # initialize rs2
sub x12, x26, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x24, 0x87c24e0d # initialize rs1
li x13, 0xf372a172 # initialize rs2
sub x13, x24, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x28, 0xf429cb1a # initialize rs1
li x14, 0x359a4a1c # initialize rs2
sub x14, x28, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x13, 0x1de4c513 # initialize rs1
li x15, 0xa57b27d1 # initialize rs2
sub x15, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x17, 0xe57070db # initialize rs1
li x16, 0xef886e11 # initialize rs2
sub x16, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x29, 0xdc9da77d # initialize rs1
li x17, 0x010fb915 # initialize rs2
sub x17, x29, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x10, 0xb58f02d7 # initialize rs1
li x18, 0xf9fc54f7 # initialize rs2
sub x18, x10, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x31, 0x5957c5c8 # initialize rs1
li x19, 0xddb2847d # initialize rs2
sub x19, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x6, 0x79aed5cc # initialize rs1
li x20, 0x7e7f0919 # initialize rs2
sub x20, x6, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x12, 0x7ff02938 # initialize rs1
li x21, 0xca8293f4 # initialize rs2
sub x21, x12, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x23, 0x5dbdaec0 # initialize rs1
li x22, 0x15b8b44b # initialize rs2
sub x22, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x24, 0x0e43567e # initialize rs1
li x23, 0x78d3d880 # initialize rs2
sub x23, x24, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x20, 0x7dfbdce8 # initialize rs1
li x24, 0x6fe9ef80 # initialize rs2
sub x24, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x16, 0x4ea6f6fb # initialize rs1
li x25, 0xeb4e66b1 # initialize rs2
sub x25, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x3, 0x5b4b0fb2 # initialize rs1
li x26, 0x1ca64e98 # initialize rs2
sub x26, x3, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x25, 0xb2ea036c # initialize rs1
li x27, 0x1fd8c826 # initialize rs2
sub x27, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x6, 0x721de9e6 # initialize rs1
li x28, 0x7dbb4de3 # initialize rs2
sub x28, x6, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x31, 0xed82b304 # initialize rs1
li x29, 0xabe223d6 # initialize rs2
sub x29, x31, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x27, 0xfdb9d370 # initialize rs1
li x30, 0x38e0ce99 # initialize rs2
sub x30, x27, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x19, 0x172baa3d # initialize rs1
li x31, 0x7e03c3db # initialize rs2
sub x31, x19, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xb53cb049 # initialize rs1
li x0, 0x3fd912ca # initialize rs2
sub x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xba82a772 # initialize rs1
li x1, 0x13ae3ba2 # initialize rs2
sub x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x5a9ca0aa # initialize rs1
li x2, 0xa3259234 # initialize rs2
sub x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x912cc99d # initialize rs1
li x3, 0x5db36f41 # initialize rs2
sub x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x7dca50ec # initialize rs1
li x4, 0x4abd7a67 # initialize rs2
sub x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa48a631d # initialize rs1
li x5, 0x71d90b09 # initialize rs2
sub x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa5d9fe0f # initialize rs1
li x6, 0x0d757a26 # initialize rs2
sub x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf72e4963 # initialize rs1
li x7, 0x50d435dd # initialize rs2
sub x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x55488f53 # initialize rs1
li x8, 0x0ab66918 # initialize rs2
sub x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x41e83764 # initialize rs1
li x9, 0x2f474203 # initialize rs2
sub x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0xbd536420 # initialize rs1
li x10, 0x7c910a54 # initialize rs2
sub x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xcd5902ef # initialize rs1
li x11, 0xd0ed443d # initialize rs2
sub x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x42877b15 # initialize rs1
li x12, 0x78d86cf6 # initialize rs2
sub x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x340fc8d5 # initialize rs1
li x13, 0x050952f4 # initialize rs2
sub x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x7b77bee7 # initialize rs1
li x14, 0x86c99cfa # initialize rs2
sub x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x5c007964 # initialize rs1
li x15, 0xa0c06b3e # initialize rs2
sub x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xd39f917b # initialize rs1
li x16, 0x98e6a6c3 # initialize rs2
sub x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xf00e9bb1 # initialize rs1
li x17, 0x0a30d236 # initialize rs2
sub x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xf52766ef # initialize rs1
li x18, 0x18f09d31 # initialize rs2
sub x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xf86bf1d3 # initialize rs1
li x19, 0xd883a9ce # initialize rs2
sub x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xe9f1864c # initialize rs1
li x20, 0x791c3478 # initialize rs2
sub x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xb3a70e97 # initialize rs1
li x21, 0x44964fce # initialize rs2
sub x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x2c12fd73 # initialize rs1
li x22, 0x2eb21c79 # initialize rs2
sub x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x6f093dfb # initialize rs1
li x23, 0xaf679cd5 # initialize rs2
sub x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xc0b016da # initialize rs1
li x24, 0xed65cf0d # initialize rs2
sub x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0xe05cab41 # initialize rs1
li x25, 0x6860e123 # initialize rs2
sub x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xb76c837f # initialize rs1
li x26, 0x3efac70a # initialize rs2
sub x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x6e318658 # initialize rs1
li x27, 0xfa35f701 # initialize rs2
sub x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x343bfd81 # initialize rs1
li x28, 0x63a09de1 # initialize rs2
sub x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x978b61ad # initialize rs1
li x29, 0x622a96df # initialize rs2
sub x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xcbd3f3fc # initialize rs1
li x30, 0xd3f842c9 # initialize rs2
sub x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x38fe520b # initialize rs1
li x31, 0xa045210a # initialize rs2
sub x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x17, x26 # perform first operation
sub x16, x18, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x15, x25 # perform first operation
sub x23, x31, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x31, x7 # perform first operation
sub x9, x24, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x25, x11 # perform first operation
sub x27, x27, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x31, x3 # perform first operation
sub x3, x18, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x14, x3, x25 # perform first operation
sub x14, x22, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x19, x14, x15 # perform first operation
sub x19, x21, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x14, x18 # perform first operation
sub x3, x28, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x30, x23 # perform first operation
sub x24, x22, x27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x11, x24 # perform first operation
sub x11, x22, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x19, x8, x26 # perform first operation
sub x26, x20, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x29, x23, x13 # perform first operation
sub x22, x14, x1 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-beq.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2947ca01 # initialize rs1
li x26, 0x895e02a2 # initialize rs2
beq x0, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x895e02a2 # initialize rs1
li x26, 0x895e02a2 # initialize rs2
beq x0, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xe0f39171 # initialize rs1
li x24, 0xc6f11093 # initialize rs2
beq x1, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xc6f11093 # initialize rs1
li x24, 0xc6f11093 # initialize rs2
beq x1, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x233f2b3f # initialize rs1
li x14, 0x8d81b25a # initialize rs2
beq x2, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8d81b25a # initialize rs1
li x14, 0x8d81b25a # initialize rs2
beq x2, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x512d4a9d # initialize rs1
li x17, 0x5037fd77 # initialize rs2
beq x3, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5037fd77 # initialize rs1
li x17, 0x5037fd77 # initialize rs2
beq x3, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x04483796 # initialize rs1
li x11, 0x2113945b # initialize rs2
beq x4, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x2113945b # initialize rs1
li x11, 0x2113945b # initialize rs2
beq x4, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xcc63796c # initialize rs1
li x11, 0x07ff3ec8 # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x07ff3ec8 # initialize rs1
li x11, 0x07ff3ec8 # initialize rs2
beq x5, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
li x6, 0xb212874a # initialize rs1
li x20, 0x57dc47c2 # initialize rs2
beq x6, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x57dc47c2 # initialize rs1
li x20, 0x57dc47c2 # initialize rs2
beq x6, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xb83888d7 # initialize rs1
li x2, 0x23e363ab # initialize rs2
beq x7, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x23e363ab # initialize rs1
li x2, 0x23e363ab # initialize rs2
beq x7, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x86dc0567 # initialize rs1
li x7, 0xf740fa79 # initialize rs2
beq x8, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xf740fa79 # initialize rs1
li x7, 0xf740fa79 # initialize rs2
beq x8, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x3f464a26 # initialize rs1
li x2, 0x2087636d # initialize rs2
beq x9, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x2087636d # initialize rs1
li x2, 0x2087636d # initialize rs2
beq x9, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x9a68fcb7 # initialize rs1
li x19, 0x41867ed6 # initialize rs2
beq x10, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x41867ed6 # initialize rs1
li x19, 0x41867ed6 # initialize rs2
beq x10, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xbf5b3207 # initialize rs1
li x29, 0xe11591fc # initialize rs2
beq x11, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xe11591fc # initialize rs1
li x29, 0xe11591fc # initialize rs2
beq x11, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x760608a6 # initialize rs1
li x29, 0xab0c7880 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xab0c7880 # initialize rs1
li x29, 0xab0c7880 # initialize rs2
beq x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xb0d7974c # initialize rs1
li x23, 0x60c274bb # initialize rs2
beq x13, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x60c274bb # initialize rs1
li x23, 0x60c274bb # initialize rs2
beq x13, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x1019aeaa # initialize rs1
li x8, 0x0605869e # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x0605869e # initialize rs1
li x8, 0x0605869e # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x1a902c2b # initialize rs1
li x26, 0xadac5a36 # initialize rs2
beq x15, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xadac5a36 # initialize rs1
li x26, 0xadac5a36 # initialize rs2
beq x15, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x4342f8c6 # initialize rs1
li x5, 0x8d1ccd9c # initialize rs2
beq x16, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x8d1ccd9c # initialize rs1
li x5, 0x8d1ccd9c # initialize rs2
beq x16, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x8d6abe33 # initialize rs1
li x20, 0x75121e85 # initialize rs2
beq x17, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x75121e85 # initialize rs1
li x20, 0x75121e85 # initialize rs2
beq x17, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x371ba9f0 # initialize rs1
li x13, 0x71a198ec # initialize rs2
beq x18, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x71a198ec # initialize rs1
li x13, 0x71a198ec # initialize rs2
beq x18, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x1832d296 # initialize rs1
li x16, 0xf493f7a4 # initialize rs2
beq x19, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xf493f7a4 # initialize rs1
li x16, 0xf493f7a4 # initialize rs2
beq x19, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xaae834db # initialize rs1
li x27, 0x216fbf8d # initialize rs2
beq x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x216fbf8d # initialize rs1
li x27, 0x216fbf8d # initialize rs2
beq x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xdc9de638 # initialize rs1
li x31, 0xd73adbc4 # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xd73adbc4 # initialize rs1
li x31, 0xd73adbc4 # initialize rs2
beq x21, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x5a5adf57 # initialize rs1
li x18, 0x43664ec5 # initialize rs2
beq x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x43664ec5 # initialize rs1
li x18, 0x43664ec5 # initialize rs2
beq x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x181efbc8 # initialize rs1
li x31, 0xa76e6cb5 # initialize rs2
beq x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xa76e6cb5 # initialize rs1
li x31, 0xa76e6cb5 # initialize rs2
beq x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x3844fa36 # initialize rs1
li x16, 0x669c0e84 # initialize rs2
beq x24, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x669c0e84 # initialize rs1
li x16, 0x669c0e84 # initialize rs2
beq x24, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xf7c655bc # initialize rs1
li x28, 0xd7c83c10 # initialize rs2
beq x25, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xd7c83c10 # initialize rs1
li x28, 0xd7c83c10 # initialize rs2
beq x25, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x65a72180 # initialize rs1
li x21, 0xa0f1b331 # initialize rs2
beq x26, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xa0f1b331 # initialize rs1
li x21, 0xa0f1b331 # initialize rs2
beq x26, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x7773b7a4 # initialize rs1
li x19, 0x6e1c59e3 # initialize rs2
beq x27, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x6e1c59e3 # initialize rs1
li x19, 0x6e1c59e3 # initialize rs2
beq x27, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x83069137 # initialize rs1
li x19, 0x8a10b9a9 # initialize rs2
beq x28, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x8a10b9a9 # initialize rs1
li x19, 0x8a10b9a9 # initialize rs2
beq x28, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x9976e7d9 # initialize rs1
li x21, 0xd10d5563 # initialize rs2
beq x29, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xd10d5563 # initialize rs1
li x21, 0xd10d5563 # initialize rs2
beq x29, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xadc00abf # initialize rs1
li x19, 0xe6ed243d # initialize rs2
beq x30, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xe6ed243d # initialize rs1
li x19, 0xe6ed243d # initialize rs2
beq x30, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x697bde7a # initialize rs1
li x18, 0xe7ffb2e8 # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xe7ffb2e8 # initialize rs1
li x18, 0xe7ffb2e8 # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x30, 0x3aca3c00 # initialize rs1
li x0, 0x02a33c7b # initialize rs2
beq x30, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x02a33c7b # initialize rs1
li x0, 0x02a33c7b # initialize rs2
beq x30, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x9, 0xc561393e # initialize rs1
li x1, 0xe542ebde # initialize rs2
beq x9, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xe542ebde # initialize rs1
li x1, 0xe542ebde # initialize rs2
beq x9, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x12, 0x09804702 # initialize rs1
li x2, 0x5bf712bf # initialize rs2
beq x12, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bf712bf # initialize rs1
li x2, 0x5bf712bf # initialize rs2
beq x12, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x29, 0xd463bdfd # initialize rs1
li x3, 0xb2910eac # initialize rs2
beq x29, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xb2910eac # initialize rs1
li x3, 0xb2910eac # initialize rs2
beq x29, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x17, 0x1634f459 # initialize rs1
li x4, 0x74e1f486 # initialize rs2
beq x17, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x74e1f486 # initialize rs1
li x4, 0x74e1f486 # initialize rs2
beq x17, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x19, 0xb8a3e20a # initialize rs1
li x5, 0x8ca69d97 # initialize rs2
beq x19, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x8ca69d97 # initialize rs1
li x5, 0x8ca69d97 # initialize rs2
beq x19, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x1, 0xbfd84346 # initialize rs1
li x6, 0x3d3d2873 # initialize rs2
beq x1, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x3d3d2873 # initialize rs1
li x6, 0x3d3d2873 # initialize rs2
beq x1, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x26, 0xb3c0744f # initialize rs1
li x7, 0x9327520d # initialize rs2
beq x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x9327520d # initialize rs1
li x7, 0x9327520d # initialize rs2
beq x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x11, 0x43ab9be9 # initialize rs1
li x8, 0xad0787aa # initialize rs2
beq x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xad0787aa # initialize rs1
li x8, 0xad0787aa # initialize rs2
beq x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x31, 0x9f0c4142 # initialize rs1
li x9, 0x507b41f4 # initialize rs2
beq x31, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x507b41f4 # initialize rs1
li x9, 0x507b41f4 # initialize rs2
beq x31, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x26, 0x2c87441f # initialize rs1
li x10, 0x9e5834ef # initialize rs2
beq x26, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x9e5834ef # initialize rs1
li x10, 0x9e5834ef # initialize rs2
beq x26, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x24, 0x6918276b # initialize rs1
li x11, 0xe71c0b1b # initialize rs2
beq x24, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xe71c0b1b # initialize rs1
li x11, 0xe71c0b1b # initialize rs2
beq x24, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x19, 0xd844e773 # initialize rs1
li x12, 0x6ee5f4c2 # initialize rs2
beq x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x6ee5f4c2 # initialize rs1
li x12, 0x6ee5f4c2 # initialize rs2
beq x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x25, 0xbeee05ab # initialize rs1
li x13, 0x28a22815 # initialize rs2
beq x25, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x28a22815 # initialize rs1
li x13, 0x28a22815 # initialize rs2
beq x25, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x8, 0x869b4830 # initialize rs1
li x14, 0x8112cd8b # initialize rs2
beq x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8112cd8b # initialize rs1
li x14, 0x8112cd8b # initialize rs2
beq x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x7, 0x0e28bb5b # initialize rs1
li x15, 0x54f2f53f # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x54f2f53f # initialize rs1
li x15, 0x54f2f53f # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x1, 0x600f83e6 # initialize rs1
li x16, 0xdd8637ca # initialize rs2
beq x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xdd8637ca # initialize rs1
li x16, 0xdd8637ca # initialize rs2
beq x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x28, 0xfc5ee0fb # initialize rs1
li x17, 0x52662668 # initialize rs2
beq x28, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x52662668 # initialize rs1
li x17, 0x52662668 # initialize rs2
beq x28, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x2, 0x16b70e23 # initialize rs1
li x18, 0x11e43614 # initialize rs2
beq x2, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x11e43614 # initialize rs1
li x18, 0x11e43614 # initialize rs2
beq x2, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x17, 0x076d381f # initialize rs1
li x19, 0xae2e45b3 # initialize rs2
beq x17, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xae2e45b3 # initialize rs1
li x19, 0xae2e45b3 # initialize rs2
beq x17, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x14, 0x72c98775 # initialize rs1
li x20, 0xc7e4aa08 # initialize rs2
beq x14, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xc7e4aa08 # initialize rs1
li x20, 0xc7e4aa08 # initialize rs2
beq x14, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x10, 0x99f685be # initialize rs1
li x21, 0x4869512c # initialize rs2
beq x10, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x4869512c # initialize rs1
li x21, 0x4869512c # initialize rs2
beq x10, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x5, 0x5fb3a172 # initialize rs1
li x22, 0x61fd9f46 # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x61fd9f46 # initialize rs1
li x22, 0x61fd9f46 # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x3, 0x62d306f6 # initialize rs1
li x23, 0x01dde89e # initialize rs2
beq x3, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x01dde89e # initialize rs1
li x23, 0x01dde89e # initialize rs2
beq x3, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x22, 0xcfce6012 # initialize rs1
li x24, 0xbe586421 # initialize rs2
beq x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xbe586421 # initialize rs1
li x24, 0xbe586421 # initialize rs2
beq x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x11, 0xdd6868b4 # initialize rs1
li x25, 0xb090e2d4 # initialize rs2
beq x11, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xb090e2d4 # initialize rs1
li x25, 0xb090e2d4 # initialize rs2
beq x11, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x9, 0x9fb27d3d # initialize rs1
li x26, 0x919d47cc # initialize rs2
beq x9, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x919d47cc # initialize rs1
li x26, 0x919d47cc # initialize rs2
beq x9, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x7, 0x2b5bf1b9 # initialize rs1
li x27, 0xa31a48e2 # initialize rs2
beq x7, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xa31a48e2 # initialize rs1
li x27, 0xa31a48e2 # initialize rs2
beq x7, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x29, 0xaddb7831 # initialize rs1
li x28, 0x03fff37a # initialize rs2
beq x29, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x03fff37a # initialize rs1
li x28, 0x03fff37a # initialize rs2
beq x29, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x18, 0x42ddeb1a # initialize rs1
li x29, 0xf013fbaa # initialize rs2
beq x18, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xf013fbaa # initialize rs1
li x29, 0xf013fbaa # initialize rs2
beq x18, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x8, 0xd1a976bd # initialize rs1
li x30, 0xe95e5aac # initialize rs2
beq x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xe95e5aac # initialize rs1
li x30, 0xe95e5aac # initialize rs2
beq x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x17, 0x3fdda9a7 # initialize rs1
li x31, 0x109a4c98 # initialize rs2
beq x17, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x109a4c98 # initialize rs1
li x31, 0x109a4c98 # initialize rs2
beq x17, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x16, 0x00000000 # initialize rs1
li x14, 0x0fd9a423 # initialize rs2
beq x16, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x0fd9a423 # initialize rs1
li x14, 0x0fd9a423 # initialize rs2
beq x16, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x22, 0x00000001 # initialize rs1
li x7, 0xd67b3600 # initialize rs2
beq x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xd67b3600 # initialize rs1
li x7, 0xd67b3600 # initialize rs2
beq x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x30, 0x00000002 # initialize rs1
li x23, 0x0c4eeb69 # initialize rs2
beq x30, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x0c4eeb69 # initialize rs1
li x23, 0x0c4eeb69 # initialize rs2
beq x30, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x26, 0x80000000 # initialize rs1
li x14, 0xeb7f8d23 # initialize rs2
beq x26, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xeb7f8d23 # initialize rs1
li x14, 0xeb7f8d23 # initialize rs2
beq x26, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x19, 0x80000001 # initialize rs1
li x21, 0x2a9341a7 # initialize rs2
beq x19, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2a9341a7 # initialize rs1
li x21, 0x2a9341a7 # initialize rs2
beq x19, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x12, 0x7fffffff # initialize rs1
li x5, 0x9c8071ca # initialize rs2
beq x12, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x9c8071ca # initialize rs1
li x5, 0x9c8071ca # initialize rs2
beq x12, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x23, 0x7ffffffe # initialize rs1
li x31, 0x6315728f # initialize rs2
beq x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x6315728f # initialize rs1
li x31, 0x6315728f # initialize rs2
beq x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x9, 0xffffffff # initialize rs1
li x22, 0xee04a96d # initialize rs2
beq x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xee04a96d # initialize rs1
li x22, 0xee04a96d # initialize rs2
beq x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x1, 0xfffffffe # initialize rs1
li x23, 0xbf747942 # initialize rs2
beq x1, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xbf747942 # initialize rs1
li x23, 0xbf747942 # initialize rs2
beq x1, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x25, 0x5bbc8872 # initialize rs1
li x17, 0xca2f25f9 # initialize rs2
beq x25, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xca2f25f9 # initialize rs1
li x17, 0xca2f25f9 # initialize rs2
beq x25, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x13, 0xaaaaaaaa # initialize rs1
li x26, 0x9308365f # initialize rs2
beq x13, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x9308365f # initialize rs1
li x26, 0x9308365f # initialize rs2
beq x13, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x31, 0x55555555 # initialize rs1
li x18, 0xe761f4ee # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xe761f4ee # initialize rs1
li x18, 0xe761f4ee # initialize rs2
beq x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x23, 0xca55b952 # initialize rs1
li x10, 0x00000000 # initialize rs2
beq x23, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000000 # initialize rs1
li x10, 0x00000000 # initialize rs2
beq x23, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x24, 0xcdb510fe # initialize rs1
li x21, 0x00000001 # initialize rs2
beq x24, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000001 # initialize rs1
li x21, 0x00000001 # initialize rs2
beq x24, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x11, 0xa9eed93f # initialize rs1
li x24, 0x00000002 # initialize rs2
beq x11, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000002 # initialize rs1
li x24, 0x00000002 # initialize rs2
beq x11, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x5, 0xfe990cb8 # initialize rs1
li x22, 0x80000000 # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x80000000 # initialize rs1
li x22, 0x80000000 # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x29, 0x7f0f87ce # initialize rs1
li x14, 0x80000001 # initialize rs2
beq x29, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000001 # initialize rs1
li x14, 0x80000001 # initialize rs2
beq x29, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x11, 0xb2df99d8 # initialize rs1
li x1, 0x7fffffff # initialize rs2
beq x11, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
beq x11, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x11, 0x290d2767 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
beq x11, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
beq x11, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x7, 0xb63e474d # initialize rs1
li x14, 0xffffffff # initialize rs2
beq x7, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x14, 0xffffffff # initialize rs2
beq x7, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x14, 0x13549efa # initialize rs1
li x10, 0xfffffffe # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xfffffffe # initialize rs1
li x10, 0xfffffffe # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x11, 0x0c5d5c1f # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
beq x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x5bbc8872 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
beq x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x24, 0x4994cedb # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
beq x24, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
beq x24, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x19, 0xc1d5ce60 # initialize rs1
li x5, 0x55555555 # initialize rs2
beq x19, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x55555555 # initialize rs1
li x5, 0x55555555 # initialize rs2
beq x19, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x15, 0x00000000 # initialize rs1
li x11, 0x00000000 # initialize rs2
beq x15, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000 # initialize rs1
li x11, 0x00000000 # initialize rs2
beq x15, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x2, 0x00000000 # initialize rs1
li x23, 0x00000001 # initialize rs2
beq x2, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000001 # initialize rs1
li x23, 0x00000001 # initialize rs2
beq x2, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x14, 0x00000000 # initialize rs1
li x7, 0x00000002 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000002 # initialize rs1
li x7, 0x00000002 # initialize rs2
beq x14, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x10, 0x00000000 # initialize rs1
li x28, 0x80000000 # initialize rs2
beq x10, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000000 # initialize rs1
li x28, 0x80000000 # initialize rs2
beq x10, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x14, 0x00000000 # initialize rs1
li x8, 0x80000001 # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x80000001 # initialize rs1
li x8, 0x80000001 # initialize rs2
beq x14, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x22, 0x00000000 # initialize rs1
li x13, 0x7fffffff # initialize rs2
beq x22, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7fffffff # initialize rs1
li x13, 0x7fffffff # initialize rs2
beq x22, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x13, 0x00000000 # initialize rs1
li x5, 0x7ffffffe # initialize rs2
beq x13, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffe # initialize rs1
li x5, 0x7ffffffe # initialize rs2
beq x13, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x21, 0x00000000 # initialize rs1
li x12, 0xffffffff # initialize rs2
beq x21, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xffffffff # initialize rs1
li x12, 0xffffffff # initialize rs2
beq x21, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x14, 0x00000000 # initialize rs1
li x28, 0xfffffffe # initialize rs2
beq x14, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
beq x14, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x20, 0x00000000 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
beq x20, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc8872 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
beq x20, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x26, 0x00000000 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x15, 0x00000000 # initialize rs1
li x17, 0x55555555 # initialize rs2
beq x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
beq x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x1, 0x00000001 # initialize rs1
li x30, 0x00000000 # initialize rs2
beq x1, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000000 # initialize rs1
li x30, 0x00000000 # initialize rs2
beq x1, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x16, 0x00000001 # initialize rs1
li x17, 0x00000001 # initialize rs2
beq x16, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000001 # initialize rs1
li x17, 0x00000001 # initialize rs2
beq x16, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x18, 0x00000001 # initialize rs1
li x9, 0x00000002 # initialize rs2
beq x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000002 # initialize rs1
li x9, 0x00000002 # initialize rs2
beq x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x10, 0x00000001 # initialize rs1
li x6, 0x80000000 # initialize rs2
beq x10, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
beq x10, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x22, 0x00000001 # initialize rs1
li x27, 0x80000001 # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000001 # initialize rs1
li x27, 0x80000001 # initialize rs2
beq x22, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x3, 0x00000001 # initialize rs1
li x7, 0x7fffffff # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x7fffffff # initialize rs1
li x7, 0x7fffffff # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x18, 0x00000001 # initialize rs1
li x11, 0x7ffffffe # initialize rs2
beq x18, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
beq x18, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x18, 0x00000001 # initialize rs1
li x13, 0xffffffff # initialize rs2
beq x18, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffff # initialize rs1
li x13, 0xffffffff # initialize rs2
beq x18, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x7, 0x00000001 # initialize rs1
li x28, 0xfffffffe # initialize rs2
beq x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
beq x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x6, 0x00000001 # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
beq x6, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5bbc8872 # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
beq x6, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x26, 0x00000001 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
beq x26, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x29, 0x00000001 # initialize rs1
li x7, 0x55555555 # initialize rs2
beq x29, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x55555555 # initialize rs1
li x7, 0x55555555 # initialize rs2
beq x29, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x26, 0x00000002 # initialize rs1
li x27, 0x00000000 # initialize rs2
beq x26, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000 # initialize rs1
li x27, 0x00000000 # initialize rs2
beq x26, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x28, 0x00000002 # initialize rs1
li x19, 0x00000001 # initialize rs2
beq x28, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000001 # initialize rs1
li x19, 0x00000001 # initialize rs2
beq x28, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x25, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
beq x25, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
beq x25, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x30, 0x00000002 # initialize rs1
li x24, 0x80000000 # initialize rs2
beq x30, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
beq x30, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x29, 0x00000002 # initialize rs1
li x18, 0x80000001 # initialize rs2
beq x29, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
beq x29, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x22, 0x00000002 # initialize rs1
li x2, 0x7fffffff # initialize rs2
beq x22, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7fffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
beq x22, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x29, 0x00000002 # initialize rs1
li x31, 0x7ffffffe # initialize rs2
beq x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffe # initialize rs1
li x31, 0x7ffffffe # initialize rs2
beq x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x5, 0x00000002 # initialize rs1
li x10, 0xffffffff # initialize rs2
beq x5, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffff # initialize rs1
li x10, 0xffffffff # initialize rs2
beq x5, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x26, 0x00000002 # initialize rs1
li x12, 0xfffffffe # initialize rs2
beq x26, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xfffffffe # initialize rs1
li x12, 0xfffffffe # initialize rs2
beq x26, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x14, 0x00000002 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
beq x14, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc8872 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
beq x14, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x21, 0x00000002 # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
beq x21, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaa # initialize rs1
li x7, 0xaaaaaaaa # initialize rs2
beq x21, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x12, 0x00000002 # initialize rs1
li x27, 0x55555555 # initialize rs2
beq x12, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x55555555 # initialize rs1
li x27, 0x55555555 # initialize rs2
beq x12, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x24, 0x80000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
beq x24, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
beq x24, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x7, 0x80000000 # initialize rs1
li x23, 0x00000001 # initialize rs2
beq x7, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000001 # initialize rs1
li x23, 0x00000001 # initialize rs2
beq x7, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x21, 0x80000000 # initialize rs1
li x18, 0x00000002 # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000002 # initialize rs1
li x18, 0x00000002 # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x16, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
beq x16, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
beq x16, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x29, 0x80000000 # initialize rs1
li x12, 0x80000001 # initialize rs2
beq x29, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000001 # initialize rs1
li x12, 0x80000001 # initialize rs2
beq x29, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x15, 0x80000000 # initialize rs1
li x10, 0x7fffffff # initialize rs2
beq x15, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
beq x15, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x24, 0x80000000 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
beq x24, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
beq x24, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x17, 0x80000000 # initialize rs1
li x28, 0xffffffff # initialize rs2
beq x17, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
beq x17, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x11, 0x80000000 # initialize rs1
li x6, 0xfffffffe # initialize rs2
beq x11, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffe # initialize rs1
li x6, 0xfffffffe # initialize rs2
beq x11, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x18, 0x80000000 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
beq x18, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
beq x18, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x8, 0x80000000 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
beq x8, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
beq x8, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x7, 0x80000000 # initialize rs1
li x15, 0x55555555 # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x55555555 # initialize rs1
li x15, 0x55555555 # initialize rs2
beq x7, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x8, 0x80000001 # initialize rs1
li x6, 0x00000000 # initialize rs2
beq x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
beq x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x29, 0x80000001 # initialize rs1
li x1, 0x00000001 # initialize rs2
beq x29, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000001 # initialize rs1
li x1, 0x00000001 # initialize rs2
beq x29, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x30, 0x80000001 # initialize rs1
li x29, 0x00000002 # initialize rs2
beq x30, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000002 # initialize rs1
li x29, 0x00000002 # initialize rs2
beq x30, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x19, 0x80000001 # initialize rs1
li x30, 0x80000000 # initialize rs2
beq x19, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000000 # initialize rs1
li x30, 0x80000000 # initialize rs2
beq x19, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x28, 0x80000001 # initialize rs1
li x10, 0x80000001 # initialize rs2
beq x28, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x80000001 # initialize rs1
li x10, 0x80000001 # initialize rs2
beq x28, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x14, 0x80000001 # initialize rs1
li x11, 0x7fffffff # initialize rs2
beq x14, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x11, 0x7fffffff # initialize rs2
beq x14, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x26, 0x80000001 # initialize rs1
li x21, 0x7ffffffe # initialize rs2
beq x26, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffe # initialize rs1
li x21, 0x7ffffffe # initialize rs2
beq x26, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x27, 0x80000001 # initialize rs1
li x30, 0xffffffff # initialize rs2
beq x27, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffff # initialize rs1
li x30, 0xffffffff # initialize rs2
beq x27, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x18, 0x80000001 # initialize rs1
li x27, 0xfffffffe # initialize rs2
beq x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xfffffffe # initialize rs1
li x27, 0xfffffffe # initialize rs2
beq x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x20, 0x80000001 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x17, 0x80000001 # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
beq x17, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xaaaaaaaa # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
beq x17, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x5, 0x80000001 # initialize rs1
li x14, 0x55555555 # initialize rs2
beq x5, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x55555555 # initialize rs1
li x14, 0x55555555 # initialize rs2
beq x5, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x27, 0x7fffffff # initialize rs1
li x16, 0x00000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000000 # initialize rs1
li x16, 0x00000000 # initialize rs2
beq x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x14, 0x7fffffff # initialize rs1
li x10, 0x00000001 # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x10, 0x00000001 # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x13, 0x7fffffff # initialize rs1
li x28, 0x00000002 # initialize rs2
beq x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000002 # initialize rs1
li x28, 0x00000002 # initialize rs2
beq x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x23, 0x7fffffff # initialize rs1
li x8, 0x80000000 # initialize rs2
beq x23, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000000 # initialize rs1
li x8, 0x80000000 # initialize rs2
beq x23, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x17, 0x7fffffff # initialize rs1
li x25, 0x80000001 # initialize rs2
beq x17, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
beq x17, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x2, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
beq x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
beq x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x28, 0x7fffffff # initialize rs1
li x8, 0x7ffffffe # initialize rs2
beq x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x7ffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
beq x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x8, 0x7fffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
beq x8, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
beq x8, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x30, 0x7fffffff # initialize rs1
li x11, 0xfffffffe # initialize rs2
beq x30, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
beq x30, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x24, 0x7fffffff # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
beq x24, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5bbc8872 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
beq x24, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x13, 0x7fffffff # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
beq x13, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xaaaaaaaa # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
beq x13, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x20, 0x7fffffff # initialize rs1
li x22, 0x55555555 # initialize rs2
beq x20, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x55555555 # initialize rs1
li x22, 0x55555555 # initialize rs2
beq x20, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x6, 0x7ffffffe # initialize rs1
li x18, 0x00000000 # initialize rs2
beq x6, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
beq x6, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x13, 0x7ffffffe # initialize rs1
li x2, 0x00000001 # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000001 # initialize rs1
li x2, 0x00000001 # initialize rs2
beq x13, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x8, 0x7ffffffe # initialize rs1
li x14, 0x00000002 # initialize rs2
beq x8, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000002 # initialize rs1
li x14, 0x00000002 # initialize rs2
beq x8, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x17, 0x7ffffffe # initialize rs1
li x3, 0x80000000 # initialize rs2
beq x17, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000000 # initialize rs1
li x3, 0x80000000 # initialize rs2
beq x17, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x21, 0x7ffffffe # initialize rs1
li x18, 0x80000001 # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
beq x21, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x19, 0x7ffffffe # initialize rs1
li x27, 0x7fffffff # initialize rs2
beq x19, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffff # initialize rs1
li x27, 0x7fffffff # initialize rs2
beq x19, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x29, 0x7ffffffe # initialize rs1
li x30, 0x7ffffffe # initialize rs2
beq x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffe # initialize rs1
li x30, 0x7ffffffe # initialize rs2
beq x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x6, 0x7ffffffe # initialize rs1
li x1, 0xffffffff # initialize rs2
beq x6, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffff # initialize rs1
li x1, 0xffffffff # initialize rs2
beq x6, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x30, 0x7ffffffe # initialize rs1
li x22, 0xfffffffe # initialize rs2
beq x30, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffe # initialize rs1
li x22, 0xfffffffe # initialize rs2
beq x30, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x10, 0x7ffffffe # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
beq x10, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x5bbc8872 # initialize rs1
li x25, 0x5bbc8872 # initialize rs2
beq x10, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x21, 0x7ffffffe # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
beq x21, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaa # initialize rs1
li x28, 0xaaaaaaaa # initialize rs2
beq x21, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x22, 0x7ffffffe # initialize rs1
li x21, 0x55555555 # initialize rs2
beq x22, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x21, 0x55555555 # initialize rs2
beq x22, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x28, 0xffffffff # initialize rs1
li x6, 0x00000000 # initialize rs2
beq x28, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
beq x28, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x15, 0xffffffff # initialize rs1
li x16, 0x00000001 # initialize rs2
beq x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000001 # initialize rs1
li x16, 0x00000001 # initialize rs2
beq x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x21, 0xffffffff # initialize rs1
li x17, 0x00000002 # initialize rs2
beq x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000002 # initialize rs1
li x17, 0x00000002 # initialize rs2
beq x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x25, 0xffffffff # initialize rs1
li x15, 0x80000000 # initialize rs2
beq x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
beq x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x19, 0xffffffff # initialize rs1
li x23, 0x80000001 # initialize rs2
beq x19, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000001 # initialize rs1
li x23, 0x80000001 # initialize rs2
beq x19, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x24, 0xffffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
beq x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
beq x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x31, 0xffffffff # initialize rs1
li x12, 0x7ffffffe # initialize rs2
beq x31, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
beq x31, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x8, 0xffffffff # initialize rs1
li x15, 0xffffffff # initialize rs2
beq x8, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xffffffff # initialize rs1
li x15, 0xffffffff # initialize rs2
beq x8, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x29, 0xffffffff # initialize rs1
li x27, 0xfffffffe # initialize rs2
beq x29, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xfffffffe # initialize rs1
li x27, 0xfffffffe # initialize rs2
beq x29, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x12, 0xffffffff # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
beq x12, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc8872 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
beq x12, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x16, 0xffffffff # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
beq x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
beq x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x29, 0xffffffff # initialize rs1
li x3, 0x55555555 # initialize rs2
beq x29, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x55555555 # initialize rs1
li x3, 0x55555555 # initialize rs2
beq x29, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x9, 0xfffffffe # initialize rs1
li x23, 0x00000000 # initialize rs2
beq x9, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000000 # initialize rs1
li x23, 0x00000000 # initialize rs2
beq x9, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x6, 0xfffffffe # initialize rs1
li x8, 0x00000001 # initialize rs2
beq x6, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
beq x6, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x15, 0xfffffffe # initialize rs1
li x13, 0x00000002 # initialize rs2
beq x15, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
beq x15, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x7, 0xfffffffe # initialize rs1
li x5, 0x80000000 # initialize rs2
beq x7, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000000 # initialize rs1
li x5, 0x80000000 # initialize rs2
beq x7, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x3, 0xfffffffe # initialize rs1
li x7, 0x80000001 # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x80000001 # initialize rs1
li x7, 0x80000001 # initialize rs2
beq x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x13, 0xfffffffe # initialize rs1
li x29, 0x7fffffff # initialize rs2
beq x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
beq x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x23, 0xfffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
beq x23, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffe # initialize rs1
li x12, 0x7ffffffe # initialize rs2
beq x23, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x5, 0xfffffffe # initialize rs1
li x22, 0xffffffff # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffff # initialize rs1
li x22, 0xffffffff # initialize rs2
beq x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x25, 0xfffffffe # initialize rs1
li x16, 0xfffffffe # initialize rs2
beq x25, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffe # initialize rs1
li x16, 0xfffffffe # initialize rs2
beq x25, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x6, 0xfffffffe # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
beq x6, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5bbc8872 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
beq x6, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x3, 0xfffffffe # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
beq x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaa # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
beq x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x9, 0xfffffffe # initialize rs1
li x12, 0x55555555 # initialize rs2
beq x9, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x55555555 # initialize rs1
li x12, 0x55555555 # initialize rs2
beq x9, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x12, 0x5bbc8872 # initialize rs1
li x22, 0x00000000 # initialize rs2
beq x12, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000 # initialize rs1
li x22, 0x00000000 # initialize rs2
beq x12, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x26, 0x5bbc8872 # initialize rs1
li x30, 0x00000001 # initialize rs2
beq x26, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000001 # initialize rs1
li x30, 0x00000001 # initialize rs2
beq x26, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x5, 0x5bbc8872 # initialize rs1
li x25, 0x00000002 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000002 # initialize rs1
li x25, 0x00000002 # initialize rs2
beq x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x1, 0x5bbc8872 # initialize rs1
li x26, 0x80000000 # initialize rs2
beq x1, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x80000000 # initialize rs1
li x26, 0x80000000 # initialize rs2
beq x1, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x16, 0x5bbc8872 # initialize rs1
li x5, 0x80000001 # initialize rs2
beq x16, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x80000001 # initialize rs1
li x5, 0x80000001 # initialize rs2
beq x16, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x18, 0x5bbc8872 # initialize rs1
li x12, 0x7fffffff # initialize rs2
beq x18, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffff # initialize rs1
li x12, 0x7fffffff # initialize rs2
beq x18, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x14, 0x5bbc8872 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
beq x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
beq x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x27, 0x5bbc8872 # initialize rs1
li x17, 0xffffffff # initialize rs2
beq x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xffffffff # initialize rs1
li x17, 0xffffffff # initialize rs2
beq x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x13, 0x5bbc8872 # initialize rs1
li x1, 0xfffffffe # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xfffffffe # initialize rs1
li x1, 0xfffffffe # initialize rs2
beq x13, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x2, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x2, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x2, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x12, 0x5bbc8872 # initialize rs1
li x14, 0xaaaaaaaa # initialize rs2
beq x12, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xaaaaaaaa # initialize rs1
li x14, 0xaaaaaaaa # initialize rs2
beq x12, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x7, 0x5bbc8872 # initialize rs1
li x24, 0x55555555 # initialize rs2
beq x7, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x55555555 # initialize rs1
li x24, 0x55555555 # initialize rs2
beq x7, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x12, 0xaaaaaaaa # initialize rs1
li x19, 0x00000000 # initialize rs2
beq x12, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000 # initialize rs1
li x19, 0x00000000 # initialize rs2
beq x12, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x6, 0xaaaaaaaa # initialize rs1
li x13, 0x00000001 # initialize rs2
beq x6, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000001 # initialize rs1
li x13, 0x00000001 # initialize rs2
beq x6, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x6, 0xaaaaaaaa # initialize rs1
li x23, 0x00000002 # initialize rs2
beq x6, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000002 # initialize rs1
li x23, 0x00000002 # initialize rs2
beq x6, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x18, 0xaaaaaaaa # initialize rs1
li x1, 0x80000000 # initialize rs2
beq x18, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x80000000 # initialize rs1
li x1, 0x80000000 # initialize rs2
beq x18, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x11, 0xaaaaaaaa # initialize rs1
li x26, 0x80000001 # initialize rs2
beq x11, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x80000001 # initialize rs1
li x26, 0x80000001 # initialize rs2
beq x11, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x14, 0xaaaaaaaa # initialize rs1
li x10, 0x7fffffff # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
beq x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x30, 0xaaaaaaaa # initialize rs1
li x21, 0x7ffffffe # initialize rs2
beq x30, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffe # initialize rs1
li x21, 0x7ffffffe # initialize rs2
beq x30, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x18, 0xaaaaaaaa # initialize rs1
li x23, 0xffffffff # initialize rs2
beq x18, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffff # initialize rs1
li x23, 0xffffffff # initialize rs2
beq x18, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x19, 0xaaaaaaaa # initialize rs1
li x31, 0xfffffffe # initialize rs2
beq x19, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffe # initialize rs1
li x31, 0xfffffffe # initialize rs2
beq x19, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x2, 0xaaaaaaaa # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
beq x2, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc8872 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
beq x2, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x12, 0xaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
beq x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xaaaaaaaa # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
beq x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x14, 0xaaaaaaaa # initialize rs1
li x26, 0x55555555 # initialize rs2
beq x14, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x55555555 # initialize rs1
li x26, 0x55555555 # initialize rs2
beq x14, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x21, 0x55555555 # initialize rs1
li x15, 0x00000000 # initialize rs2
beq x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000 # initialize rs1
li x15, 0x00000000 # initialize rs2
beq x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x27, 0x55555555 # initialize rs1
li x9, 0x00000001 # initialize rs2
beq x27, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000001 # initialize rs1
li x9, 0x00000001 # initialize rs2
beq x27, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x22, 0x55555555 # initialize rs1
li x30, 0x00000002 # initialize rs2
beq x22, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000002 # initialize rs1
li x30, 0x00000002 # initialize rs2
beq x22, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x29, 0x55555555 # initialize rs1
li x11, 0x80000000 # initialize rs2
beq x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x80000000 # initialize rs1
li x11, 0x80000000 # initialize rs2
beq x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x13, 0x55555555 # initialize rs1
li x6, 0x80000001 # initialize rs2
beq x13, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x6, 0x80000001 # initialize rs2
beq x13, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x9, 0x55555555 # initialize rs1
li x15, 0x7fffffff # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7fffffff # initialize rs1
li x15, 0x7fffffff # initialize rs2
beq x9, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x20, 0x55555555 # initialize rs1
li x3, 0x7ffffffe # initialize rs2
beq x20, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
beq x20, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x22, 0x55555555 # initialize rs1
li x11, 0xffffffff # initialize rs2
beq x22, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xffffffff # initialize rs1
li x11, 0xffffffff # initialize rs2
beq x22, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x10, 0x55555555 # initialize rs1
li x30, 0xfffffffe # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffe # initialize rs1
li x30, 0xfffffffe # initialize rs2
beq x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x28, 0x55555555 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x28, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
beq x28, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x15, 0x55555555 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
beq x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
beq x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x2, 0x55555555 # initialize rs1
li x6, 0x55555555 # initialize rs2
beq x2, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x55555555 # initialize rs1
li x6, 0x55555555 # initialize rs2
beq x2, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x5498f41d # initialize rs1
li x0, 0xb8c61f08 # initialize rs2
beq x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xb8c61f08 # initialize rs1
li x0, 0xb8c61f08 # initialize rs2
beq x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x989d8f8c # initialize rs1
li x1, 0x436bb3e8 # initialize rs2
beq x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x436bb3e8 # initialize rs1
li x1, 0x436bb3e8 # initialize rs2
beq x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x2a72a5a8 # initialize rs1
li x2, 0x43835542 # initialize rs2
beq x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x43835542 # initialize rs1
li x2, 0x43835542 # initialize rs2
beq x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x1cba397e # initialize rs1
li x3, 0xcc91d0ab # initialize rs2
beq x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xcc91d0ab # initialize rs1
li x3, 0xcc91d0ab # initialize rs2
beq x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xf010def6 # initialize rs1
li x4, 0x1f31219d # initialize rs2
beq x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x1f31219d # initialize rs1
li x4, 0x1f31219d # initialize rs2
beq x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe865bbcb # initialize rs1
li x5, 0x9cc152c4 # initialize rs2
beq x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x9cc152c4 # initialize rs1
li x5, 0x9cc152c4 # initialize rs2
beq x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb58ffa22 # initialize rs1
li x6, 0x67d6b0d6 # initialize rs2
beq x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x67d6b0d6 # initialize rs1
li x6, 0x67d6b0d6 # initialize rs2
beq x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8dfb0b1a # initialize rs1
li x7, 0xb8da9300 # initialize rs2
beq x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xb8da9300 # initialize rs1
li x7, 0xb8da9300 # initialize rs2
beq x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xe589320a # initialize rs1
li x8, 0x94bce016 # initialize rs2
beq x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x94bce016 # initialize rs1
li x8, 0x94bce016 # initialize rs2
beq x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x5555679d # initialize rs1
li x9, 0xf3a4e0e6 # initialize rs2
beq x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xf3a4e0e6 # initialize rs1
li x9, 0xf3a4e0e6 # initialize rs2
beq x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x7404bab1 # initialize rs1
li x10, 0x13321a81 # initialize rs2
beq x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x13321a81 # initialize rs1
li x10, 0x13321a81 # initialize rs2
beq x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x2f038f88 # initialize rs1
li x11, 0xba52e168 # initialize rs2
beq x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xba52e168 # initialize rs1
li x11, 0xba52e168 # initialize rs2
beq x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x9e304822 # initialize rs1
li x12, 0xce3e9c0c # initialize rs2
beq x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xce3e9c0c # initialize rs1
li x12, 0xce3e9c0c # initialize rs2
beq x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xa4054ed4 # initialize rs1
li x13, 0x43867aa6 # initialize rs2
beq x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x43867aa6 # initialize rs1
li x13, 0x43867aa6 # initialize rs2
beq x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x3969dfae # initialize rs1
li x14, 0xc55fa59d # initialize rs2
beq x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xc55fa59d # initialize rs1
li x14, 0xc55fa59d # initialize rs2
beq x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x9fe08277 # initialize rs1
li x15, 0xa4a0de11 # initialize rs2
beq x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xa4a0de11 # initialize rs1
li x15, 0xa4a0de11 # initialize rs2
beq x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x0ed8c469 # initialize rs1
li x16, 0x237e9ecb # initialize rs2
beq x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x237e9ecb # initialize rs1
li x16, 0x237e9ecb # initialize rs2
beq x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x8114e81d # initialize rs1
li x17, 0x5701f975 # initialize rs2
beq x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5701f975 # initialize rs1
li x17, 0x5701f975 # initialize rs2
beq x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x4d129b7a # initialize rs1
li x18, 0xa1c4091b # initialize rs2
beq x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xa1c4091b # initialize rs1
li x18, 0xa1c4091b # initialize rs2
beq x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x63aa20b5 # initialize rs1
li x19, 0x604c02e1 # initialize rs2
beq x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x604c02e1 # initialize rs1
li x19, 0x604c02e1 # initialize rs2
beq x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x9d1e1ccd # initialize rs1
li x20, 0xfe62f266 # initialize rs2
beq x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xfe62f266 # initialize rs1
li x20, 0xfe62f266 # initialize rs2
beq x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0x428ecc49 # initialize rs1
li x21, 0x6bd22f38 # initialize rs2
beq x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x6bd22f38 # initialize rs1
li x21, 0x6bd22f38 # initialize rs2
beq x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x3a255725 # initialize rs1
li x22, 0x480da104 # initialize rs2
beq x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x480da104 # initialize rs1
li x22, 0x480da104 # initialize rs2
beq x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x16bec80d # initialize rs1
li x23, 0xef67c6ce # initialize rs2
beq x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xef67c6ce # initialize rs1
li x23, 0xef67c6ce # initialize rs2
beq x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xc76997cf # initialize rs1
li x24, 0x80998a86 # initialize rs2
beq x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x80998a86 # initialize rs1
li x24, 0x80998a86 # initialize rs2
beq x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xf56b544e # initialize rs1
li x25, 0x3a641549 # initialize rs2
beq x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x3a641549 # initialize rs1
li x25, 0x3a641549 # initialize rs2
beq x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x35fb1d87 # initialize rs1
li x26, 0xe31a9397 # initialize rs2
beq x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xe31a9397 # initialize rs1
li x26, 0xe31a9397 # initialize rs2
beq x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x720f1903 # initialize rs1
li x27, 0x28b701e5 # initialize rs2
beq x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x28b701e5 # initialize rs1
li x27, 0x28b701e5 # initialize rs2
beq x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xcb85b6e5 # initialize rs1
li x28, 0xecea648e # initialize rs2
beq x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xecea648e # initialize rs1
li x28, 0xecea648e # initialize rs2
beq x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x21a4a4f0 # initialize rs1
li x29, 0x13797da1 # initialize rs2
beq x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x13797da1 # initialize rs1
li x29, 0x13797da1 # initialize rs2
beq x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xf4402246 # initialize rs1
li x30, 0x1c3018a0 # initialize rs2
beq x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x1c3018a0 # initialize rs1
li x30, 0x1c3018a0 # initialize rs2
beq x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xe518c331 # initialize rs1
li x31, 0x92c31208 # initialize rs2
beq x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x92c31208 # initialize rs1
li x31, 0x92c31208 # initialize rs2
beq x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: beq x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x10, x17, x11 # perform first operation
beq x3, x2, arbitraryLabel1
nop
arbitraryLabel1:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x21, x14 # perform first operation
beq x24, x31, arbitraryLabel2
nop
arbitraryLabel2:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x18, x19, x5 # perform first operation
beq x13, x29, arbitraryLabel3
nop
arbitraryLabel3:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x25, x22, x23 # perform first operation
beq x25, x28, arbitraryLabel4
nop
arbitraryLabel4:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x23, x22, x25 # perform first operation
beq x3, x23, arbitraryLabel5
nop
arbitraryLabel5:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x10, x6, x14 # perform first operation
beq x13, x12, arbitraryLabel6
nop
arbitraryLabel6:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lhu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x2, 0xb355c276 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1191 # sub immediate from rs1 to counter offset
sw x2, -1191 (x1) # store value to put something in memory
lhu x7, -1191(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x29, 0x174fd9de # initialize rs2
la x2, scratch # base address 
addi x2, x2, -589 # sub immediate from rs1 to counter offset
sw x29, 589 (x2) # store value to put something in memory
lhu x6, 589(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 4)

# Testcase cp_rs1 (Test source rs1 = x3)
li x15, 0x252df801 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -2018 # sub immediate from rs1 to counter offset
sw x15, 2018 (x3) # store value to put something in memory
lhu x12, 2018(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 8)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x19, 0x0ca39ddd # initialize rs2
la x4, scratch # base address 
addi x4, x4, 967 # sub immediate from rs1 to counter offset
sw x19, -967 (x4) # store value to put something in memory
lhu x28, -967(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x28, 12)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x15, 0x819b4062 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1952 # sub immediate from rs1 to counter offset
sw x15, -1952 (x5) # store value to put something in memory
lhu x23, -1952(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x23, 16)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x29, 0xfcacd057 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1703 # sub immediate from rs1 to counter offset
sw x29, 1703 (x6) # store value to put something in memory
lhu x13, 1703(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x13, 20)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x18, 0xf0c3eeb1 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1872 # sub immediate from rs1 to counter offset
sw x18, 1872 (x7) # store value to put something in memory
lhu x8, 1872(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 24)

# Testcase cp_rs1 (Test source rs1 = x8)
li x9, 0x09e80e04 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -677 # sub immediate from rs1 to counter offset
sw x9, 677 (x8) # store value to put something in memory
lhu x5, 677(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 28)

# Testcase cp_rs1 (Test source rs1 = x9)
li x23, 0x226ca941 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1470 # sub immediate from rs1 to counter offset
sw x23, 1470 (x9) # store value to put something in memory
lhu x7, 1470(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 32)

# Testcase cp_rs1 (Test source rs1 = x10)
li x27, 0xcddee9bb # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1382 # sub immediate from rs1 to counter offset
sw x27, -1382 (x10) # store value to put something in memory
lhu x26, -1382(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 36)

# Testcase cp_rs1 (Test source rs1 = x11)
li x16, 0x02002b4d # initialize rs2
la x11, scratch # base address 
addi x11, x11, 645 # sub immediate from rs1 to counter offset
sw x16, -645 (x11) # store value to put something in memory
lhu x24, -645(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 40)

# Testcase cp_rs1 (Test source rs1 = x12)
li x18, 0x064a6118 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -354 # sub immediate from rs1 to counter offset
sw x18, 354 (x12) # store value to put something in memory
lhu x15, 354(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 44)

# Testcase cp_rs1 (Test source rs1 = x13)
li x19, 0x5646a8a8 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -118 # sub immediate from rs1 to counter offset
sw x19, 118 (x13) # store value to put something in memory
lhu x3, 118(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 48)

# Testcase cp_rs1 (Test source rs1 = x14)
li x28, 0xddda7315 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -779 # sub immediate from rs1 to counter offset
sw x28, 779 (x14) # store value to put something in memory
lhu x20, 779(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 52)

# Testcase cp_rs1 (Test source rs1 = x15)
li x21, 0x33489a8c # initialize rs2
la x15, scratch # base address 
addi x15, x15, -657 # sub immediate from rs1 to counter offset
sw x21, 657 (x15) # store value to put something in memory
lhu x25, 657(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 56)

# Testcase cp_rs1 (Test source rs1 = x16)
li x5, 0x441bd75c # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1990 # sub immediate from rs1 to counter offset
sw x5, -1990 (x16) # store value to put something in memory
lhu x17, -1990(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 60)

# Testcase cp_rs1 (Test source rs1 = x17)
li x2, 0x8ff9474f # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2018 # sub immediate from rs1 to counter offset
sw x2, 2018 (x17) # store value to put something in memory
lhu x6, 2018(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 64)

# Testcase cp_rs1 (Test source rs1 = x18)
li x26, 0xae116aea # initialize rs2
la x18, scratch # base address 
addi x18, x18, 895 # sub immediate from rs1 to counter offset
sw x26, -895 (x18) # store value to put something in memory
lhu x5, -895(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 68)

# Testcase cp_rs1 (Test source rs1 = x19)
li x1, 0x1c62a636 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1926 # sub immediate from rs1 to counter offset
sw x1, 1926 (x19) # store value to put something in memory
lhu x18, 1926(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cp_rs1 (Test source rs1 = x20)
li x3, 0x9ad9838d # initialize rs2
la x20, scratch # base address 
addi x20, x20, 64 # sub immediate from rs1 to counter offset
sw x3, -64 (x20) # store value to put something in memory
lhu x5, -64(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 76)

# Testcase cp_rs1 (Test source rs1 = x21)
li x11, 0x5f81521a # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1031 # sub immediate from rs1 to counter offset
sw x11, -1031 (x21) # store value to put something in memory
lhu x10, -1031(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 80)

# Testcase cp_rs1 (Test source rs1 = x22)
li x3, 0xb0384bf5 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -13 # sub immediate from rs1 to counter offset
sw x3, 13 (x22) # store value to put something in memory
lhu x14, 13(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 84)

# Testcase cp_rs1 (Test source rs1 = x23)
li x2, 0x2b903f0f # initialize rs2
la x23, scratch # base address 
addi x23, x23, -460 # sub immediate from rs1 to counter offset
sw x2, 460 (x23) # store value to put something in memory
lhu x30, 460(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 88)

# Testcase cp_rs1 (Test source rs1 = x24)
li x15, 0x97db140e # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1139 # sub immediate from rs1 to counter offset
sw x15, 1139 (x24) # store value to put something in memory
lhu x21, 1139(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 92)

# Testcase cp_rs1 (Test source rs1 = x25)
li x27, 0x4fdbfa08 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1430 # sub immediate from rs1 to counter offset
sw x27, -1430 (x25) # store value to put something in memory
lhu x3, -1430(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x26)
li x21, 0xed016ab7 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -2013 # sub immediate from rs1 to counter offset
sw x21, 2013 (x26) # store value to put something in memory
lhu x3, 2013(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 100)

# Testcase cp_rs1 (Test source rs1 = x27)
li x8, 0xab709996 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 607 # sub immediate from rs1 to counter offset
sw x8, -607 (x27) # store value to put something in memory
lhu x23, -607(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 104)

# Testcase cp_rs1 (Test source rs1 = x28)
li x25, 0xfd0f67d6 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -1 # sub immediate from rs1 to counter offset
sw x25, 1 (x28) # store value to put something in memory
lhu x14, 1(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 108)

# Testcase cp_rs1 (Test source rs1 = x29)
li x31, 0x0c3542f7 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 128 # sub immediate from rs1 to counter offset
sw x31, -128 (x29) # store value to put something in memory
lhu x2, -128(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 112)

# Testcase cp_rs1 (Test source rs1 = x30)
li x18, 0x14f3907c # initialize rs2
la x30, scratch # base address 
addi x30, x30, -2019 # sub immediate from rs1 to counter offset
sw x18, 2019 (x30) # store value to put something in memory
lhu x15, 2019(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 116)

# Testcase cp_rs1 (Test source rs1 = x31)
li x16, 0x07ea952b # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1879 # sub immediate from rs1 to counter offset
sw x16, 1879 (x31) # store value to put something in memory
lhu x17, 1879(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cp_rd (Test destination rd = x0)
li x10, 0x8415baab # initialize rs2
la x12, scratch # base address 
addi x12, x12, -880 # sub immediate from rs1 to counter offset
sw x10, 880 (x12) # store value to put something in memory
lhu x0, 880(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 124)

# Testcase cp_rd (Test destination rd = x1)
li x2, 0x3934316f # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1720 # sub immediate from rs1 to counter offset
sw x2, -1720 (x31) # store value to put something in memory
lhu x1, -1720(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rd (Test destination rd = x2)
li x29, 0x2aba1e46 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1332 # sub immediate from rs1 to counter offset
sw x29, 1332 (x22) # store value to put something in memory
lhu x2, 1332(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 132)

# Testcase cp_rd (Test destination rd = x3)
li x8, 0xd8fd5f25 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 549 # sub immediate from rs1 to counter offset
sw x8, -549 (x18) # store value to put something in memory
lhu x3, -549(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x26, 0x367a76fa # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1749 # sub immediate from rs1 to counter offset
sw x26, 1749 (x19) # store value to put something in memory
lhu x4, 1749(x19) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 140)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x24, 0x190a3bab # initialize rs2
la x18, scratch # base address 
addi x18, x18, 581 # sub immediate from rs1 to counter offset
sw x24, -581 (x18) # store value to put something in memory
lhu x5, -581(x18) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0xfaedea00 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1927 # sub immediate from rs1 to counter offset
sw x13, -1927 (x4) # store value to put something in memory
lhu x6, -1927(x4) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 148)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x364d65d7 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1468 # sub immediate from rs1 to counter offset
sw x11, -1468 (x9) # store value to put something in memory
lhu x7, -1468(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rd (Test destination rd = x8)
li x22, 0xccee7ff2 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 20 # sub immediate from rs1 to counter offset
sw x22, -20 (x24) # store value to put something in memory
lhu x8, -20(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rd (Test destination rd = x9)
li x9, 0xdac3afc6 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1678 # sub immediate from rs1 to counter offset
sw x9, -1678 (x19) # store value to put something in memory
lhu x9, -1678(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rd (Test destination rd = x10)
li x31, 0xb368ddf5 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 265 # sub immediate from rs1 to counter offset
sw x31, -265 (x25) # store value to put something in memory
lhu x10, -265(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 164)

# Testcase cp_rd (Test destination rd = x11)
li x31, 0xf309f43a # initialize rs2
la x1, scratch # base address 
addi x1, x1, 121 # sub immediate from rs1 to counter offset
sw x31, -121 (x1) # store value to put something in memory
lhu x11, -121(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rd (Test destination rd = x12)
li x24, 0x1cff7fad # initialize rs2
la x5, scratch # base address 
addi x5, x5, -64 # sub immediate from rs1 to counter offset
sw x24, 64 (x5) # store value to put something in memory
lhu x12, 64(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rd (Test destination rd = x13)
li x31, 0xada058f5 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 446 # sub immediate from rs1 to counter offset
sw x31, -446 (x5) # store value to put something in memory
lhu x13, -446(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rd (Test destination rd = x14)
li x3, 0x7568e298 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1924 # sub immediate from rs1 to counter offset
sw x3, 1924 (x14) # store value to put something in memory
lhu x14, 1924(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rd (Test destination rd = x15)
li x2, 0x27b747a0 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1180 # sub immediate from rs1 to counter offset
sw x2, 1180 (x7) # store value to put something in memory
lhu x15, 1180(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rd (Test destination rd = x16)
li x23, 0x4236ff63 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1566 # sub immediate from rs1 to counter offset
sw x23, -1566 (x3) # store value to put something in memory
lhu x16, -1566(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 188)

# Testcase cp_rd (Test destination rd = x17)
li x3, 0xd4605b92 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -447 # sub immediate from rs1 to counter offset
sw x3, 447 (x22) # store value to put something in memory
lhu x17, 447(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rd (Test destination rd = x18)
li x28, 0x014497d6 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 208 # sub immediate from rs1 to counter offset
sw x28, -208 (x26) # store value to put something in memory
lhu x18, -208(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 196)

# Testcase cp_rd (Test destination rd = x19)
li x8, 0x91f3fd8d # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1027 # sub immediate from rs1 to counter offset
sw x8, 1027 (x9) # store value to put something in memory
lhu x19, 1027(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cp_rd (Test destination rd = x20)
li x13, 0xc39d4d58 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -788 # sub immediate from rs1 to counter offset
sw x13, 788 (x19) # store value to put something in memory
lhu x20, 788(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 204)

# Testcase cp_rd (Test destination rd = x21)
li x28, 0x34c24519 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -638 # sub immediate from rs1 to counter offset
sw x28, 638 (x5) # store value to put something in memory
lhu x21, 638(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rd (Test destination rd = x22)
li x31, 0x93512706 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -306 # sub immediate from rs1 to counter offset
sw x31, 306 (x6) # store value to put something in memory
lhu x22, 306(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_rd (Test destination rd = x23)
li x1, 0x4086b7d2 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1931 # sub immediate from rs1 to counter offset
sw x1, 1931 (x23) # store value to put something in memory
lhu x23, 1931(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rd (Test destination rd = x24)
li x25, 0xa8edb1d0 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1593 # sub immediate from rs1 to counter offset
sw x25, -1593 (x11) # store value to put something in memory
lhu x24, -1593(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 220)

# Testcase cp_rd (Test destination rd = x25)
li x10, 0x31ab51cd # initialize rs2
la x15, scratch # base address 
addi x15, x15, -682 # sub immediate from rs1 to counter offset
sw x10, 682 (x15) # store value to put something in memory
lhu x25, 682(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cp_rd (Test destination rd = x26)
li x9, 0x8b3f0c53 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -519 # sub immediate from rs1 to counter offset
sw x9, 519 (x18) # store value to put something in memory
lhu x26, 519(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 228)

# Testcase cp_rd (Test destination rd = x27)
li x3, 0xccf84186 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -997 # sub immediate from rs1 to counter offset
sw x3, 997 (x18) # store value to put something in memory
lhu x27, 997(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rd (Test destination rd = x28)
li x5, 0xf5a11118 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 334 # sub immediate from rs1 to counter offset
sw x5, -334 (x21) # store value to put something in memory
lhu x28, -334(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rd (Test destination rd = x29)
li x3, 0x2d568fcc # initialize rs2
la x21, scratch # base address 
addi x21, x21, 669 # sub immediate from rs1 to counter offset
sw x3, -669 (x21) # store value to put something in memory
lhu x29, -669(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rd (Test destination rd = x30)
li x1, 0x73344e25 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 910 # sub immediate from rs1 to counter offset
sw x1, -910 (x17) # store value to put something in memory
lhu x30, -910(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rd (Test destination rd = x31)
li x2, 0xf26b6a4c # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1836 # sub immediate from rs1 to counter offset
sw x2, -1836 (x3) # store value to put something in memory
lhu x31, -1836(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x13, 0x514a7003 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1155 # sub immediate from rs1 to counter offset
sw x13, -1155 (x1) # store value to put something in memory
lhu x1, -1155(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x29, 0x3bb569b9 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -392 # sub immediate from rs1 to counter offset
sw x29, 392 (x2) # store value to put something in memory
lhu x2, 392(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x16, 0xf503db35 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -228 # sub immediate from rs1 to counter offset
sw x16, 228 (x3) # store value to put something in memory
lhu x3, 228(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x10, 0xd7c933d1 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1231 # sub immediate from rs1 to counter offset
sw x10, -1231 (x4) # store value to put something in memory
lhu x4, -1231(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x27, 0xadd6a038 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1220 # sub immediate from rs1 to counter offset
sw x27, -1220 (x5) # store value to put something in memory
lhu x5, -1220(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x29, 0x75e67447 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1788 # sub immediate from rs1 to counter offset
sw x29, -1788 (x6) # store value to put something in memory
lhu x6, -1788(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x27, 0xa670efba # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1780 # sub immediate from rs1 to counter offset
sw x27, 1780 (x7) # store value to put something in memory
lhu x7, 1780(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x22, 0x4c6511bb # initialize rs2
la x8, scratch # base address 
addi x8, x8, 953 # sub immediate from rs1 to counter offset
sw x22, -953 (x8) # store value to put something in memory
lhu x8, -953(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x16, 0x09b41cfc # initialize rs2
la x9, scratch # base address 
addi x9, x9, 317 # sub immediate from rs1 to counter offset
sw x16, -317 (x9) # store value to put something in memory
lhu x9, -317(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x11, 0x98b5dcb4 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -5 # sub immediate from rs1 to counter offset
sw x11, 5 (x10) # store value to put something in memory
lhu x10, 5(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x22, 0xf1585e7d # initialize rs2
la x11, scratch # base address 
addi x11, x11, -102 # sub immediate from rs1 to counter offset
sw x22, 102 (x11) # store value to put something in memory
lhu x11, 102(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x30, 0x9b86f3f8 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -631 # sub immediate from rs1 to counter offset
sw x30, 631 (x12) # store value to put something in memory
lhu x12, 631(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x2, 0x5aee5993 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1353 # sub immediate from rs1 to counter offset
sw x2, 1353 (x13) # store value to put something in memory
lhu x13, 1353(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x8, 0x996ed4c7 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1417 # sub immediate from rs1 to counter offset
sw x8, 1417 (x14) # store value to put something in memory
lhu x14, 1417(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x11, 0xda53382e # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1857 # sub immediate from rs1 to counter offset
sw x11, -1857 (x15) # store value to put something in memory
lhu x15, -1857(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x12, 0x39102bc1 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 868 # sub immediate from rs1 to counter offset
sw x12, -868 (x16) # store value to put something in memory
lhu x16, -868(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x10, 0x8ebad455 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -2014 # sub immediate from rs1 to counter offset
sw x10, 2014 (x17) # store value to put something in memory
lhu x17, 2014(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x23, 0x3b8c501a # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1065 # sub immediate from rs1 to counter offset
sw x23, 1065 (x18) # store value to put something in memory
lhu x18, 1065(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x15, 0x11c4d9fc # initialize rs2
la x19, scratch # base address 
addi x19, x19, -747 # sub immediate from rs1 to counter offset
sw x15, 747 (x19) # store value to put something in memory
lhu x19, 747(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x10, 0xd2b1cf5b # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1706 # sub immediate from rs1 to counter offset
sw x10, -1706 (x20) # store value to put something in memory
lhu x20, -1706(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x11, 0x46ee4658 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1733 # sub immediate from rs1 to counter offset
sw x11, 1733 (x21) # store value to put something in memory
lhu x21, 1733(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x28, 0x68652821 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1869 # sub immediate from rs1 to counter offset
sw x28, -1869 (x22) # store value to put something in memory
lhu x22, -1869(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x21, 0x5c55ce3a # initialize rs2
la x23, scratch # base address 
addi x23, x23, -363 # sub immediate from rs1 to counter offset
sw x21, 363 (x23) # store value to put something in memory
lhu x23, 363(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x9, 0xde7c3463 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1438 # sub immediate from rs1 to counter offset
sw x9, -1438 (x24) # store value to put something in memory
lhu x24, -1438(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x15, 0x4be7a1bc # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1637 # sub immediate from rs1 to counter offset
sw x15, -1637 (x25) # store value to put something in memory
lhu x25, -1637(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x29, 0x3124cb56 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -242 # sub immediate from rs1 to counter offset
sw x29, 242 (x26) # store value to put something in memory
lhu x26, 242(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x13, 0xaf158672 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1251 # sub immediate from rs1 to counter offset
sw x13, 1251 (x27) # store value to put something in memory
lhu x27, 1251(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x31, 0xbcb7226f # initialize rs2
la x28, scratch # base address 
addi x28, x28, 704 # sub immediate from rs1 to counter offset
sw x31, -704 (x28) # store value to put something in memory
lhu x28, -704(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x16, 0x7b89fa51 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1381 # sub immediate from rs1 to counter offset
sw x16, -1381 (x29) # store value to put something in memory
lhu x29, -1381(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x12, 0x6d0a7f51 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1625 # sub immediate from rs1 to counter offset
sw x12, 1625 (x30) # store value to put something in memory
lhu x30, 1625(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x27, 0xfc77de6a # initialize rs2
la x31, scratch # base address 
addi x31, x31, 935 # sub immediate from rs1 to counter offset
sw x27, -935 (x31) # store value to put something in memory
lhu x31, -935(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 372)

# Testcase cp_imm_corners
li x14, 0x03cd4e00 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 0 # sub immediate from rs1 to counter offset
sw x14, 0 (x22) # store value to put something in memory
lhu x3, 0(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 376)

# Testcase cp_imm_corners
li x16, 0xa7baf23a # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1 # sub immediate from rs1 to counter offset
sw x16, 1 (x26) # store value to put something in memory
lhu x30, 1(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 380)

# Testcase cp_imm_corners
li x8, 0xef8a0015 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -2 # sub immediate from rs1 to counter offset
sw x8, 2 (x30) # store value to put something in memory
lhu x29, 2(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 384)

# Testcase cp_imm_corners
li x18, 0x34ab7caa # initialize rs2
la x6, scratch # base address 
addi x6, x6, -3 # sub immediate from rs1 to counter offset
sw x18, 3 (x6) # store value to put something in memory
lhu x25, 3(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 388)

# Testcase cp_imm_corners
li x10, 0xec410bb0 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -4 # sub immediate from rs1 to counter offset
sw x10, 4 (x2) # store value to put something in memory
lhu x30, 4(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 392)

# Testcase cp_imm_corners
li x12, 0xacf082e5 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -8 # sub immediate from rs1 to counter offset
sw x12, 8 (x24) # store value to put something in memory
lhu x20, 8(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 396)

# Testcase cp_imm_corners
li x22, 0x1c0b22fe # initialize rs2
la x10, scratch # base address 
addi x10, x10, -16 # sub immediate from rs1 to counter offset
sw x22, 16 (x10) # store value to put something in memory
lhu x25, 16(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 400)

# Testcase cp_imm_corners
li x29, 0x514fe82d # initialize rs2
la x7, scratch # base address 
addi x7, x7, -32 # sub immediate from rs1 to counter offset
sw x29, 32 (x7) # store value to put something in memory
lhu x10, 32(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 404)

# Testcase cp_imm_corners
li x15, 0x96ff5e9f # initialize rs2
la x17, scratch # base address 
addi x17, x17, -64 # sub immediate from rs1 to counter offset
sw x15, 64 (x17) # store value to put something in memory
lhu x8, 64(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 408)

# Testcase cp_imm_corners
li x26, 0x4ac7178b # initialize rs2
la x25, scratch # base address 
addi x25, x25, -128 # sub immediate from rs1 to counter offset
sw x26, 128 (x25) # store value to put something in memory
lhu x5, 128(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 412)

# Testcase cp_imm_corners
li x21, 0xea665cf9 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -256 # sub immediate from rs1 to counter offset
sw x21, 256 (x5) # store value to put something in memory
lhu x7, 256(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 416)

# Testcase cp_imm_corners
li x29, 0xee6d3415 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -512 # sub immediate from rs1 to counter offset
sw x29, 512 (x6) # store value to put something in memory
lhu x12, 512(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 420)

# Testcase cp_imm_corners
li x5, 0x8e24cac1 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1023 # sub immediate from rs1 to counter offset
sw x5, 1023 (x19) # store value to put something in memory
lhu x12, 1023(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 424)

# Testcase cp_imm_corners
li x11, 0x95fb40e8 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1024 # sub immediate from rs1 to counter offset
sw x11, 1024 (x9) # store value to put something in memory
lhu x22, 1024(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 428)

# Testcase cp_imm_corners
li x12, 0x0b289b10 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1795 # sub immediate from rs1 to counter offset
sw x12, 1795 (x7) # store value to put something in memory
lhu x29, 1795(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 432)

# Testcase cp_imm_corners
li x11, 0xa42e34cd # initialize rs2
la x24, scratch # base address 
addi x24, x24, -2047 # sub immediate from rs1 to counter offset
sw x11, 2047 (x24) # store value to put something in memory
lhu x17, 2047(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 436)

# Testcase cp_imm_corners
li x10, 0x5aa6d11e # initialize rs2
la x13, scratch # base address 
addi x13, x13, 2047 # increment rs1 by 2047 
addi x13, x13, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x10, -2048 (x13) # store value to put something in memory
lhu x19, -2048(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 440)

# Testcase cp_imm_corners
li x26, 0xbf95eb65 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 2047 # sub immediate from rs1 to counter offset
sw x26, -2047 (x6) # store value to put something in memory
lhu x29, -2047(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 444)

# Testcase cp_imm_corners
li x16, 0x63ef78de # initialize rs2
la x3, scratch # base address 
addi x3, x3, 2 # sub immediate from rs1 to counter offset
sw x16, -2 (x3) # store value to put something in memory
lhu x11, -2(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 448)

# Testcase cp_imm_corners
li x23, 0x12bf4489 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1 # sub immediate from rs1 to counter offset
sw x23, -1 (x10) # store value to put something in memory
lhu x30, -1(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 452)

# Testcase cp_gpr/fpr_hazard nohaz test
la x29, scratch
addi x29, x29, 731
add x20, x1, x28 # perform first operation
lhu x9, -731(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x26, scratch
addi x26, x26, 931
add x31, x15, x25 # perform first operation
lhu x21, -931(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x24, scratch
addi x24, x24, -1900
add x28, x1, x3 # perform first operation
lhu x27, 1900(x24) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x18, scratch
addi x18, x18, 1600
add x18, x18, x0 # perform first operation
lhu x18, -1600(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x27, scratch
addi x27, x27, 832
add x27, x27, x0 # perform first operation
lhu x25, -832(x27) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x30, scratch
addi x30, x30, 516
add x30, x30, x0 # perform first operation
lhu x29, -516(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x8, scratch
addi x8, x8, -1135
add x17, x10, x22 # perform first operation
lhu x17, 1135(x8) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x25, scratch
addi x25, x25, -1922
add x12, x7, x26 # perform first operation
lhu x12, 1922(x25) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x12, scratch
addi x12, x12, -1988
add x9, x2, x27 # perform first operation
lhu x9, 1988(x12) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x11, scratch
addi x11, x11, -700
add x6, x26, x10 # perform first operation
lhu x26, 700(x11) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x19, scratch
addi x19, x19, 600
add x23, x29, x21 # perform first operation
lhu x21, -600(x19) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x14, scratch
addi x14, x14, 1064
add x11, x31, x12 # perform first operation
lhu x28, -1064(x14) # perform second (triggering) operation

#.EQU SIGSIZE,456


// ******************
// Tests from: WALLY-COV-sltu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xb1d4b220 # initialize rs1
li x22, 0xab31e683 # initialize rs2
sltu x9, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x44fb0733 # initialize rs1
li x22, 0x514a1324 # initialize rs2
sltu x30, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xcfd9c30f # initialize rs1
li x23, 0x6185061b # initialize rs2
sltu x7, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x33044a46 # initialize rs1
li x28, 0x61e7469e # initialize rs2
sltu x8, x3, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe1839ad4 # initialize rs1
li x6, 0xb72cfa24 # initialize rs2
sltu x27, x4, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xb4834938 # initialize rs1
li x25, 0x93aa2c9a # initialize rs2
sltu x2, x5, x25 # perform operation
RVTEST_SIGUPD(x6, x0, x2, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x77f4b96c # initialize rs1
li x28, 0x67105809 # initialize rs2
sltu x21, x6, x28 # perform operation
RVTEST_SIGUPD(x7, x0, x21, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa4ea883e # initialize rs1
li x26, 0x6aea8413 # initialize rs2
sltu x27, x7, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x001d4241 # initialize rs1
li x25, 0x11ce35cf # initialize rs2
sltu x10, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xed0a136f # initialize rs1
li x28, 0x7154afc1 # initialize rs2
sltu x14, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xafb87e4a # initialize rs1
li x20, 0xbb5eec05 # initialize rs2
sltu x25, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xd0ec5171 # initialize rs1
li x9, 0x79ba110e # initialize rs2
sltu x22, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x7698287e # initialize rs1
li x3, 0xec0b505f # initialize rs2
sltu x14, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa30a96c3 # initialize rs1
li x7, 0xff19de6b # initialize rs2
sltu x15, x13, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x0f40d55d # initialize rs1
li x25, 0x32cf1d2a # initialize rs2
sltu x21, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x0e5a6c32 # initialize rs1
li x23, 0xb88bc7b0 # initialize rs2
sltu x7, x15, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x4ba77e37 # initialize rs1
li x27, 0x961f9456 # initialize rs2
sltu x26, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x9e856cc3 # initialize rs1
li x27, 0x08be55c7 # initialize rs2
sltu x1, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x42b1056f # initialize rs1
li x29, 0xcb19c6c9 # initialize rs2
sltu x23, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xd1e17559 # initialize rs1
li x26, 0xbcb61621 # initialize rs2
sltu x25, x19, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x12b0e334 # initialize rs1
li x19, 0xc491fb3d # initialize rs2
sltu x10, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x70b5fe33 # initialize rs1
li x3, 0xfc777c2e # initialize rs2
sltu x28, x21, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x61c12234 # initialize rs1
li x26, 0x7eea0d35 # initialize rs2
sltu x17, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xc15d37c1 # initialize rs1
li x31, 0xfcc6a167 # initialize rs2
sltu x15, x23, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x7beee776 # initialize rs1
li x8, 0x69e32199 # initialize rs2
sltu x14, x24, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xd85ef95c # initialize rs1
li x14, 0xf893a7bd # initialize rs2
sltu x2, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x1660de2c # initialize rs1
li x11, 0x3d80b0c7 # initialize rs2
sltu x29, x26, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x40763762 # initialize rs1
li x22, 0x4805c352 # initialize rs2
sltu x23, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xcbf780f7 # initialize rs1
li x25, 0x7307badf # initialize rs2
sltu x24, x28, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x7c2d0e37 # initialize rs1
li x9, 0xceb72614 # initialize rs2
sltu x2, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xdf47d1a6 # initialize rs1
li x11, 0x69fe8051 # initialize rs2
sltu x13, x30, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xf656b119 # initialize rs1
li x26, 0x9ced223f # initialize rs2
sltu x7, x31, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x26, 0xc1fc3c36 # initialize rs1
li x0, 0x72d8368b # initialize rs2
sltu x1, x26, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x6, 0xba8789c2 # initialize rs1
li x1, 0x0fe49d1c # initialize rs2
sltu x7, x6, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x12, 0x928945f7 # initialize rs1
li x2, 0x31d06627 # initialize rs2
sltu x13, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x17, 0x8dbcd5a8 # initialize rs1
li x3, 0x17382a42 # initialize rs2
sltu x13, x17, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0x4cfb9530 # initialize rs1
li x4, 0xc498ef67 # initialize rs2
sltu x22, x15, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x21, 0xf1e1c825 # initialize rs1
li x5, 0xa91d6451 # initialize rs2
sltu x31, x21, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x31, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x31, 0x7a2f3b2e # initialize rs1
li x6, 0x2b4fc974 # initialize rs2
sltu x18, x31, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x18, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0x824f58c2 # initialize rs1
li x7, 0x5dab0c5a # initialize rs2
sltu x8, x16, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x16, 0xbed863c1 # initialize rs1
li x8, 0x04c9486f # initialize rs2
sltu x7, x16, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x29, 0x479a2cfb # initialize rs1
li x9, 0x1439744e # initialize rs2
sltu x19, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x3, 0x5b1a4d96 # initialize rs1
li x10, 0x91794d88 # initialize rs2
sltu x23, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x31, 0x1341e03a # initialize rs1
li x11, 0xf11e3df3 # initialize rs2
sltu x12, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x30, 0x300ef0dd # initialize rs1
li x12, 0xf291d4ba # initialize rs2
sltu x13, x30, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x15, 0x81c9fe37 # initialize rs1
li x13, 0xcac68c09 # initialize rs2
sltu x31, x15, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x31, 0x3eaeae45 # initialize rs1
li x14, 0xe3230ed0 # initialize rs2
sltu x22, x31, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x11, 0xaf0fe1b3 # initialize rs1
li x15, 0xd381fbc5 # initialize rs2
sltu x20, x11, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x17, 0xf0170cb1 # initialize rs1
li x16, 0xb8a16058 # initialize rs2
sltu x12, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x6, 0x7f4f1df0 # initialize rs1
li x17, 0x3163a6be # initialize rs2
sltu x15, x6, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x5, 0x99ecf208 # initialize rs1
li x18, 0x68f5d33b # initialize rs2
sltu x2, x5, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x31, 0x598212fc # initialize rs1
li x19, 0x2d440daa # initialize rs2
sltu x9, x31, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x29, 0xf778de7f # initialize rs1
li x20, 0x7217ce12 # initialize rs2
sltu x11, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x19, 0xbbdb37b9 # initialize rs1
li x21, 0x9053154c # initialize rs2
sltu x9, x19, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x7, 0x7484a925 # initialize rs1
li x22, 0x04d2f57a # initialize rs2
sltu x25, x7, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x7, 0xf9782133 # initialize rs1
li x23, 0x7f8bf137 # initialize rs2
sltu x1, x7, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x15, 0x53523cfa # initialize rs1
li x24, 0x5708c6fa # initialize rs2
sltu x21, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x19, 0x14ea7540 # initialize rs1
li x25, 0xbe0f179d # initialize rs2
sltu x10, x19, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x15, 0x6680cbcb # initialize rs1
li x26, 0x1acf459f # initialize rs2
sltu x12, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x14, 0x806cd6ac # initialize rs1
li x27, 0x2864cd24 # initialize rs2
sltu x2, x14, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x5, 0x0de422f8 # initialize rs1
li x28, 0xb7fa0d10 # initialize rs2
sltu x8, x5, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x30, 0xb27a7f54 # initialize rs1
li x29, 0x223caa13 # initialize rs2
sltu x7, x30, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x23, 0xd53cbdd2 # initialize rs1
li x30, 0x1a7a8987 # initialize rs2
sltu x13, x23, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x10, 0xf404236d # initialize rs1
li x31, 0xbadb1388 # initialize rs2
sltu x15, x10, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 252)

# Testcase cp_rd (Test destination rd = x0)
li x30, 0x6e611d70 # initialize rs1
li x31, 0xb08091d0 # initialize rs2
sltu x0, x30, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x19, 0x17ae0b34 # initialize rs1
li x9, 0x9382b690 # initialize rs2
sltu x1, x19, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x1, 0x7eb5f896 # initialize rs1
li x14, 0x505827c2 # initialize rs2
sltu x2, x1, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x1, 0xb4390e08 # initialize rs1
li x30, 0xe8c9e3fc # initialize rs2
sltu x3, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x11, 0x5eb1e429 # initialize rs1
li x25, 0xd2bfb173 # initialize rs2
sltu x4, x11, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x7, x5 # switch signature pointer register to avoid conflict with test
li x18, 0xe34361da # initialize rs1
li x6, 0xff6a0142 # initialize rs2
sltu x5, x18, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
li x20, 0xd37e0b62 # initialize rs1
li x13, 0x96f9e9b3 # initialize rs2
sltu x6, x20, x13 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x15, 0x27913e2a # initialize rs1
li x4, 0xc351d1ee # initialize rs2
sltu x7, x15, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x25, 0x5359d67d # initialize rs1
li x16, 0x2fe806d6 # initialize rs2
sltu x8, x25, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x5ee0d371 # initialize rs1
li x30, 0x4877e58c # initialize rs2
sltu x9, x27, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x16, 0xb20a34f1 # initialize rs1
li x13, 0x1eeb2527 # initialize rs2
sltu x10, x16, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x22, 0x60870b5e # initialize rs1
li x1, 0x0de2e137 # initialize rs2
sltu x11, x22, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x27, 0x0e4cd333 # initialize rs1
li x14, 0xa5f14699 # initialize rs2
sltu x12, x27, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x10, 0x8d2a6d9b # initialize rs1
li x29, 0x537ff329 # initialize rs2
sltu x13, x10, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x18, 0xadb84c2d # initialize rs1
li x10, 0x5f3ca396 # initialize rs2
sltu x14, x18, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x7, 0x87bf9f8f # initialize rs1
li x27, 0xf54c23ab # initialize rs2
sltu x15, x7, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x8, 0xd95e2416 # initialize rs1
li x31, 0xbf70c06c # initialize rs2
sltu x16, x8, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x10, 0xc8fc8b07 # initialize rs1
li x11, 0xe6c3dd96 # initialize rs2
sltu x17, x10, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x31, 0xef359fbb # initialize rs1
li x18, 0x09d80c43 # initialize rs2
sltu x18, x31, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x14, 0x64acdb7e # initialize rs1
li x4, 0xac9666bb # initialize rs2
sltu x19, x14, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x18, 0x3b1b7959 # initialize rs1
li x11, 0x347b8d42 # initialize rs2
sltu x20, x18, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x20, 0x77e434ad # initialize rs1
li x19, 0xf59723a4 # initialize rs2
sltu x21, x20, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x20, 0x266c39fa # initialize rs1
li x18, 0x6234d76e # initialize rs2
sltu x22, x20, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x15, 0x458674fe # initialize rs1
li x8, 0x25c4ae34 # initialize rs2
sltu x23, x15, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x23, 0x0ab125bb # initialize rs1
li x9, 0x85f84f00 # initialize rs2
sltu x24, x23, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x20, 0x994f4f04 # initialize rs1
li x1, 0xdf4f5d41 # initialize rs2
sltu x25, x20, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x9, 0xdc3eac39 # initialize rs1
li x19, 0x6d6c3616 # initialize rs2
sltu x26, x9, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x31, 0x50db43e0 # initialize rs1
li x18, 0xeb1c2244 # initialize rs2
sltu x27, x31, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x4, 0x6ac1b0eb # initialize rs1
li x7, 0xcb4b93a1 # initialize rs2
sltu x28, x4, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x9, 0x29ae02e7 # initialize rs1
li x7, 0x92b242a9 # initialize rs2
sltu x29, x9, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x12, 0x34617985 # initialize rs1
li x29, 0xaf9f58ff # initialize rs2
sltu x30, x12, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x13, 0xc1f8ef60 # initialize rs1
li x24, 0x4d3959cf # initialize rs2
sltu x31, x13, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x1, 0x00000000 # initialize rs1
li x27, 0xab053589 # initialize rs2
sltu x22, x1, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x29, 0x00000001 # initialize rs1
li x14, 0x5032f606 # initialize rs2
sltu x25, x29, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x13, 0x00000002 # initialize rs1
li x21, 0x05e9a52b # initialize rs2
sltu x23, x13, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x23, 0x80000000 # initialize rs1
li x4, 0x941a1946 # initialize rs2
sltu x2, x23, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x24, 0x80000001 # initialize rs1
li x27, 0x9ea69cfa # initialize rs2
sltu x7, x24, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x6, 0x7fffffff # initialize rs1
li x1, 0x3a3829aa # initialize rs2
sltu x30, x6, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x24, 0x7ffffffe # initialize rs1
li x2, 0x9825e63e # initialize rs2
sltu x28, x24, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x8, 0xffffffff # initialize rs1
li x12, 0x10973d6e # initialize rs2
sltu x26, x8, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x6, 0xfffffffe # initialize rs1
li x25, 0x33932a9c # initialize rs2
sltu x13, x6, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x16, 0xd0c13092 # initialize rs2
sltu x10, x31, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x25, 0xaaaaaaaa # initialize rs1
li x3, 0x99592c2b # initialize rs2
sltu x14, x25, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x10, 0x55555555 # initialize rs1
li x23, 0xaee448e9 # initialize rs2
sltu x18, x10, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x28, 0xdb4d2cb3 # initialize rs1
li x29, 0x00000000 # initialize rs2
sltu x13, x28, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x6, 0xc0bd0556 # initialize rs1
li x1, 0x00000001 # initialize rs2
sltu x27, x6, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x20, 0x354d4dd8 # initialize rs1
li x25, 0x00000002 # initialize rs2
sltu x24, x20, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x16, 0x5883bfdc # initialize rs1
li x20, 0x80000000 # initialize rs2
sltu x27, x16, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x8, 0x4c026a39 # initialize rs1
li x9, 0x80000001 # initialize rs2
sltu x2, x8, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x13, 0x36de9892 # initialize rs1
li x26, 0x7fffffff # initialize rs2
sltu x17, x13, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x24, 0xe7ba8374 # initialize rs1
li x8, 0x7ffffffe # initialize rs2
sltu x12, x24, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x17, 0xe6187818 # initialize rs1
li x6, 0xffffffff # initialize rs2
sltu x20, x17, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x7, 0x971d0205 # initialize rs1
li x9, 0xfffffffe # initialize rs2
sltu x28, x7, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x19, 0xd4455e94 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
sltu x23, x19, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x13, 0x9c0220ee # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
sltu x12, x13, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x30, 0x72fd337e # initialize rs1
li x3, 0x55555555 # initialize rs2
sltu x20, x30, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x25, 0x00000000 # initialize rs1
li x26, 0x00000000 # initialize rs2
sltu x15, x25, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x30, 0x00000000 # initialize rs1
li x19, 0x00000001 # initialize rs2
sltu x29, x30, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x19, 0x00000000 # initialize rs1
li x20, 0x00000002 # initialize rs2
sltu x13, x19, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x1, 0x00000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
sltu x26, x1, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x7, 0x00000000 # initialize rs1
li x2, 0x80000001 # initialize rs2
sltu x27, x7, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x15, 0x00000000 # initialize rs1
li x25, 0x7fffffff # initialize rs2
sltu x7, x15, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x8, 0x00000000 # initialize rs1
li x9, 0x7ffffffe # initialize rs2
sltu x13, x8, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x8, 0x00000000 # initialize rs1
li x29, 0xffffffff # initialize rs2
sltu x1, x8, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x2, 0x00000000 # initialize rs1
li x6, 0xfffffffe # initialize rs2
sltu x28, x2, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x21, 0x00000000 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
sltu x15, x21, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x7, 0x00000000 # initialize rs1
li x4, 0xaaaaaaaa # initialize rs2
sltu x29, x7, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x16, 0x00000000 # initialize rs1
li x21, 0x55555555 # initialize rs2
sltu x4, x16, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x20, 0x00000001 # initialize rs1
li x2, 0x00000000 # initialize rs2
sltu x24, x20, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x14, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
sltu x12, x14, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x6, 0x00000001 # initialize rs1
li x1, 0x00000002 # initialize rs2
sltu x15, x6, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x15, 0x00000001 # initialize rs1
li x21, 0x80000000 # initialize rs2
sltu x10, x15, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x24, 0x00000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
sltu x7, x24, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x25, 0x00000001 # initialize rs1
li x27, 0x7fffffff # initialize rs2
sltu x13, x25, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x14, 0x00000001 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
sltu x2, x14, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x22, 0x00000001 # initialize rs1
li x31, 0xffffffff # initialize rs2
sltu x10, x22, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x29, 0x00000001 # initialize rs1
li x28, 0xfffffffe # initialize rs2
sltu x26, x29, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x25, 0x00000001 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
sltu x1, x25, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x2, 0x00000001 # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
sltu x28, x2, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x26, 0x00000001 # initialize rs1
li x4, 0x55555555 # initialize rs2
sltu x2, x26, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x4, 0x00000002 # initialize rs1
li x31, 0x00000000 # initialize rs2
sltu x8, x4, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x16, 0x00000002 # initialize rs1
li x19, 0x00000001 # initialize rs2
sltu x3, x16, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x9, 0x00000002 # initialize rs1
li x25, 0x00000002 # initialize rs2
sltu x14, x9, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x17, 0x00000002 # initialize rs1
li x20, 0x80000000 # initialize rs2
sltu x14, x17, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x20, 0x00000002 # initialize rs1
li x22, 0x80000001 # initialize rs2
sltu x2, x20, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x4, 0x00000002 # initialize rs1
li x24, 0x7fffffff # initialize rs2
sltu x21, x4, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x2, 0x00000002 # initialize rs1
li x28, 0x7ffffffe # initialize rs2
sltu x9, x2, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x25, 0x00000002 # initialize rs1
li x10, 0xffffffff # initialize rs2
sltu x24, x25, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x13, 0x00000002 # initialize rs1
li x21, 0xfffffffe # initialize rs2
sltu x1, x13, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x19, 0x00000002 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
sltu x6, x19, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x27, 0x00000002 # initialize rs1
li x20, 0xaaaaaaaa # initialize rs2
sltu x1, x27, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x18, 0x00000002 # initialize rs1
li x8, 0x55555555 # initialize rs2
sltu x23, x18, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x1, 0x80000000 # initialize rs1
li x14, 0x00000000 # initialize rs2
sltu x30, x1, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x12, 0x80000000 # initialize rs1
li x15, 0x00000001 # initialize rs2
sltu x21, x12, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x4, 0x80000000 # initialize rs1
li x29, 0x00000002 # initialize rs2
sltu x2, x4, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x28, 0x80000000 # initialize rs1
li x12, 0x80000000 # initialize rs2
sltu x17, x28, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x8, 0x80000000 # initialize rs1
li x23, 0x80000001 # initialize rs2
sltu x12, x8, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x8, 0x80000000 # initialize rs1
li x21, 0x7fffffff # initialize rs2
sltu x23, x8, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x21, 0x80000000 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
sltu x4, x21, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x7, 0x80000000 # initialize rs1
li x26, 0xffffffff # initialize rs2
sltu x23, x7, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x12, 0x80000000 # initialize rs1
li x16, 0xfffffffe # initialize rs2
sltu x17, x12, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x22, 0x80000000 # initialize rs1
li x23, 0x5bbc8872 # initialize rs2
sltu x29, x22, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x24, 0x80000000 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
sltu x22, x24, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x19, 0x80000000 # initialize rs1
li x25, 0x55555555 # initialize rs2
sltu x24, x19, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x3, 0x80000001 # initialize rs1
li x16, 0x00000000 # initialize rs2
sltu x14, x3, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x2, 0x80000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
sltu x28, x2, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x17, 0x80000001 # initialize rs1
li x30, 0x00000002 # initialize rs2
sltu x25, x17, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x1, 0x80000001 # initialize rs1
li x24, 0x80000000 # initialize rs2
sltu x22, x1, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x10, 0x80000001 # initialize rs1
li x21, 0x80000001 # initialize rs2
sltu x8, x10, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x31, 0x80000001 # initialize rs1
li x1, 0x7fffffff # initialize rs2
sltu x27, x31, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x1, 0x80000001 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
sltu x22, x1, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x7, 0x80000001 # initialize rs1
li x20, 0xffffffff # initialize rs2
sltu x6, x7, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x18, 0x80000001 # initialize rs1
li x15, 0xfffffffe # initialize rs2
sltu x26, x18, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x31, 0x80000001 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
sltu x9, x31, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x18, 0x80000001 # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
sltu x10, x18, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x3, 0x80000001 # initialize rs1
li x15, 0x55555555 # initialize rs2
sltu x21, x3, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x7, 0x7fffffff # initialize rs1
li x17, 0x00000000 # initialize rs2
sltu x9, x7, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x13, 0x7fffffff # initialize rs1
li x30, 0x00000001 # initialize rs2
sltu x2, x13, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x15, 0x7fffffff # initialize rs1
li x22, 0x00000002 # initialize rs2
sltu x16, x15, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x19, 0x7fffffff # initialize rs1
li x3, 0x80000000 # initialize rs2
sltu x22, x19, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x16, 0x7fffffff # initialize rs1
li x10, 0x80000001 # initialize rs2
sltu x6, x16, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x14, 0x7fffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
sltu x12, x14, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x18, 0x7fffffff # initialize rs1
li x27, 0x7ffffffe # initialize rs2
sltu x21, x18, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x30, 0x7fffffff # initialize rs1
li x11, 0xffffffff # initialize rs2
sltu x9, x30, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x8, 0x7fffffff # initialize rs1
li x22, 0xfffffffe # initialize rs2
sltu x13, x8, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x13, 0x7fffffff # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
sltu x23, x13, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x14, 0x7fffffff # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
sltu x26, x14, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x9, 0x7fffffff # initialize rs1
li x3, 0x55555555 # initialize rs2
sltu x21, x9, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x9, 0x7ffffffe # initialize rs1
li x15, 0x00000000 # initialize rs2
sltu x20, x9, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x2, 0x7ffffffe # initialize rs1
li x31, 0x00000001 # initialize rs2
sltu x14, x2, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x7, 0x7ffffffe # initialize rs1
li x30, 0x00000002 # initialize rs2
sltu x21, x7, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x16, 0x7ffffffe # initialize rs1
li x7, 0x80000000 # initialize rs2
sltu x13, x16, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x18, 0x7ffffffe # initialize rs1
li x23, 0x80000001 # initialize rs2
sltu x25, x18, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x21, 0x7ffffffe # initialize rs1
li x15, 0x7fffffff # initialize rs2
sltu x28, x21, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x25, 0x7ffffffe # initialize rs1
li x22, 0x7ffffffe # initialize rs2
sltu x20, x25, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x10, 0x7ffffffe # initialize rs1
li x3, 0xffffffff # initialize rs2
sltu x24, x10, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x22, 0x7ffffffe # initialize rs1
li x20, 0xfffffffe # initialize rs2
sltu x17, x22, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x12, 0x7ffffffe # initialize rs1
li x22, 0x5bbc8872 # initialize rs2
sltu x3, x12, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x25, 0x7ffffffe # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
sltu x23, x25, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x29, 0x7ffffffe # initialize rs1
li x4, 0x55555555 # initialize rs2
sltu x31, x29, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x23, 0xffffffff # initialize rs1
li x3, 0x00000000 # initialize rs2
sltu x29, x23, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x11, 0xffffffff # initialize rs1
li x27, 0x00000001 # initialize rs2
sltu x19, x11, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x23, 0xffffffff # initialize rs1
li x14, 0x00000002 # initialize rs2
sltu x2, x23, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x28, 0xffffffff # initialize rs1
li x14, 0x80000000 # initialize rs2
sltu x15, x28, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x29, 0xffffffff # initialize rs1
li x4, 0x80000001 # initialize rs2
sltu x1, x29, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x11, 0xffffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
sltu x10, x11, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x1, 0xffffffff # initialize rs1
li x11, 0x7ffffffe # initialize rs2
sltu x21, x1, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x17, 0xffffffff # initialize rs1
li x29, 0xffffffff # initialize rs2
sltu x30, x17, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x27, 0xffffffff # initialize rs1
li x15, 0xfffffffe # initialize rs2
sltu x9, x27, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x7, 0xffffffff # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
sltu x24, x7, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x13, 0xffffffff # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
sltu x30, x13, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x30, 0xffffffff # initialize rs1
li x1, 0x55555555 # initialize rs2
sltu x17, x30, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x26, 0xfffffffe # initialize rs1
li x3, 0x00000000 # initialize rs2
sltu x14, x26, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x8, 0xfffffffe # initialize rs1
li x7, 0x00000001 # initialize rs2
sltu x12, x8, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x28, 0xfffffffe # initialize rs1
li x13, 0x00000002 # initialize rs2
sltu x6, x28, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x8, 0xfffffffe # initialize rs1
li x31, 0x80000000 # initialize rs2
sltu x20, x8, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x10, 0xfffffffe # initialize rs1
li x13, 0x80000001 # initialize rs2
sltu x14, x10, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x30, 0xfffffffe # initialize rs1
li x16, 0x7fffffff # initialize rs2
sltu x21, x30, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x4, 0xfffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
sltu x28, x4, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x25, 0xfffffffe # initialize rs1
li x19, 0xffffffff # initialize rs2
sltu x29, x25, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x17, 0xfffffffe # initialize rs1
li x16, 0xfffffffe # initialize rs2
sltu x18, x17, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x9, 0xfffffffe # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
sltu x29, x9, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x26, 0xfffffffe # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
sltu x14, x26, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x3, 0xfffffffe # initialize rs1
li x14, 0x55555555 # initialize rs2
sltu x12, x3, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x29, 0x5bbc8872 # initialize rs1
li x25, 0x00000000 # initialize rs2
sltu x4, x29, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x10, 0x5bbc8872 # initialize rs1
li x9, 0x00000001 # initialize rs2
sltu x21, x10, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x21, 0x5bbc8872 # initialize rs1
li x9, 0x00000002 # initialize rs2
sltu x16, x21, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x15, 0x5bbc8872 # initialize rs1
li x1, 0x80000000 # initialize rs2
sltu x6, x15, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x2, 0x5bbc8872 # initialize rs1
li x1, 0x80000001 # initialize rs2
sltu x21, x2, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x28, 0x5bbc8872 # initialize rs1
li x12, 0x7fffffff # initialize rs2
sltu x4, x28, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x26, 0x5bbc8872 # initialize rs1
li x24, 0x7ffffffe # initialize rs2
sltu x7, x26, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x26, 0x5bbc8872 # initialize rs1
li x2, 0xffffffff # initialize rs2
sltu x22, x26, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x28, 0x5bbc8872 # initialize rs1
li x2, 0xfffffffe # initialize rs2
sltu x8, x28, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x28, 0x5bbc8872 # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
sltu x27, x28, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x7, 0x5bbc8872 # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
sltu x12, x7, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x27, 0x5bbc8872 # initialize rs1
li x9, 0x55555555 # initialize rs2
sltu x28, x27, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x29, 0xaaaaaaaa # initialize rs1
li x19, 0x00000000 # initialize rs2
sltu x10, x29, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x15, 0xaaaaaaaa # initialize rs1
li x9, 0x00000001 # initialize rs2
sltu x28, x15, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x29, 0xaaaaaaaa # initialize rs1
li x17, 0x00000002 # initialize rs2
sltu x21, x29, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x29, 0xaaaaaaaa # initialize rs1
li x30, 0x80000000 # initialize rs2
sltu x10, x29, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x16, 0xaaaaaaaa # initialize rs1
li x17, 0x80000001 # initialize rs2
sltu x2, x16, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x25, 0xaaaaaaaa # initialize rs1
li x16, 0x7fffffff # initialize rs2
sltu x12, x25, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x17, 0xaaaaaaaa # initialize rs1
li x26, 0x7ffffffe # initialize rs2
sltu x13, x17, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x11, 0xaaaaaaaa # initialize rs1
li x7, 0xffffffff # initialize rs2
sltu x16, x11, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x23, 0xaaaaaaaa # initialize rs1
li x14, 0xfffffffe # initialize rs2
sltu x20, x23, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x26, 0xaaaaaaaa # initialize rs1
li x22, 0x5bbc8872 # initialize rs2
sltu x20, x26, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x21, 0xaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
sltu x30, x21, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x17, 0xaaaaaaaa # initialize rs1
li x14, 0x55555555 # initialize rs2
sltu x7, x17, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x12, 0x55555555 # initialize rs1
li x24, 0x00000000 # initialize rs2
sltu x27, x12, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x31, 0x55555555 # initialize rs1
li x4, 0x00000001 # initialize rs2
sltu x15, x31, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x24, 0x55555555 # initialize rs1
li x17, 0x00000002 # initialize rs2
sltu x25, x24, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x13, 0x55555555 # initialize rs1
li x23, 0x80000000 # initialize rs2
sltu x1, x13, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x4, 0x55555555 # initialize rs1
li x20, 0x80000001 # initialize rs2
sltu x3, x4, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x16, 0x55555555 # initialize rs1
li x23, 0x7fffffff # initialize rs2
sltu x7, x16, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x3, 0x55555555 # initialize rs1
li x29, 0x7ffffffe # initialize rs2
sltu x17, x3, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x23, 0x55555555 # initialize rs1
li x1, 0xffffffff # initialize rs2
sltu x29, x23, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x9, 0x55555555 # initialize rs1
li x30, 0xfffffffe # initialize rs2
sltu x28, x9, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x3, 0x55555555 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
sltu x7, x3, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x30, 0x55555555 # initialize rs1
li x27, 0xaaaaaaaa # initialize rs2
sltu x28, x30, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x4, 0x55555555 # initialize rs1
li x3, 0x55555555 # initialize rs2
sltu x26, x4, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x26c308d9 # initialize rs1
li x0, 0xf54f667a # initialize rs2
sltu x8, x0, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x3c4090ef # initialize rs1
li x1, 0x1db25a93 # initialize rs2
sltu x4, x1, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xe00bdb69 # initialize rs1
li x2, 0x97d776d0 # initialize rs2
sltu x3, x2, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x72ed51bc # initialize rs1
li x3, 0x01c95331 # initialize rs2
sltu x27, x3, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
li x4, 0xcd1c35e2 # initialize rs1
li x4, 0x65bbb4b3 # initialize rs2
sltu x18, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3e4a5ec7 # initialize rs1
li x5, 0xac5b75c8 # initialize rs2
sltu x9, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x9, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xc11fedf5 # initialize rs1
li x6, 0x731726e1 # initialize rs2
sltu x11, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x11, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x79894e2a # initialize rs1
li x7, 0x17397b24 # initialize rs2
sltu x15, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x9e4727e3 # initialize rs1
li x8, 0x5617d180 # initialize rs2
sltu x22, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xd667fb97 # initialize rs1
li x9, 0x602b487a # initialize rs2
sltu x29, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x9dc685f2 # initialize rs1
li x10, 0x58321f2a # initialize rs2
sltu x26, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x3ce64f33 # initialize rs1
li x11, 0xefcd874b # initialize rs2
sltu x30, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xa109e6bd # initialize rs1
li x12, 0x0490a0b5 # initialize rs2
sltu x16, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x89acae6f # initialize rs1
li x13, 0xbc4a1383 # initialize rs2
sltu x26, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xfc1cf107 # initialize rs1
li x14, 0x9f5e1a63 # initialize rs2
sltu x23, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x2451a60f # initialize rs1
li x15, 0x06e93658 # initialize rs2
sltu x27, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x55c79fbd # initialize rs1
li x16, 0x10f3d5bf # initialize rs2
sltu x25, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xbb681853 # initialize rs1
li x17, 0xf7ef89fe # initialize rs2
sltu x20, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x09cbef22 # initialize rs1
li x18, 0x4b929a64 # initialize rs2
sltu x10, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xb8af50bd # initialize rs1
li x19, 0xbdaf7e17 # initialize rs2
sltu x9, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x112cedcd # initialize rs1
li x20, 0xb3145cf6 # initialize rs2
sltu x18, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xfa334301 # initialize rs1
li x21, 0xb9ebf6be # initialize rs2
sltu x15, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x80f14d56 # initialize rs1
li x22, 0x40df7d58 # initialize rs2
sltu x17, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x326e58ac # initialize rs1
li x23, 0x2d6f9658 # initialize rs2
sltu x29, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0xaf6b6213 # initialize rs1
li x24, 0x741469d1 # initialize rs2
sltu x10, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x0e0303ed # initialize rs1
li x25, 0x482a18e9 # initialize rs2
sltu x13, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x0c02f0f5 # initialize rs1
li x26, 0x388d5a2e # initialize rs2
sltu x18, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xcee9027f # initialize rs1
li x27, 0xe8947c78 # initialize rs2
sltu x1, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0xf06c4892 # initialize rs1
li x28, 0x7a7ed314 # initialize rs2
sltu x2, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x969ccdb4 # initialize rs1
li x29, 0xcdfdbb90 # initialize rs2
sltu x12, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x3f5f3ccc # initialize rs1
li x30, 0x3d329c5b # initialize rs2
sltu x15, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xfb52cf0f # initialize rs1
li x31, 0xa41bc073 # initialize rs2
sltu x10, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xa8ae7d74 # initialize rs1
li x16, 0xdb6b3dac # initialize rs2
sltu x0, x0, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x6a61d1f9 # initialize rs1
li x9, 0xbf41efd0 # initialize rs2
sltu x1, x1, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x51d47885 # initialize rs1
li x25, 0xaf3d961b # initialize rs2
sltu x2, x2, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xae25a5c3 # initialize rs1
li x14, 0xb804ff69 # initialize rs2
sltu x3, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb470cc4f # initialize rs1
li x13, 0xc9972dc9 # initialize rs2
sltu x4, x4, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2b416202 # initialize rs1
li x18, 0x835656bd # initialize rs2
sltu x5, x5, x18 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa1717049 # initialize rs1
li x9, 0x72378e33 # initialize rs2
sltu x6, x6, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x1f64a616 # initialize rs1
li x3, 0x5609ce10 # initialize rs2
sltu x7, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x2f9de9ed # initialize rs1
li x17, 0x0340143c # initialize rs2
sltu x8, x8, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xc15c09ea # initialize rs1
li x24, 0xaf24974f # initialize rs2
sltu x9, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x53dbf0a9 # initialize rs1
li x27, 0x5b1d1f07 # initialize rs2
sltu x10, x10, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x9a374473 # initialize rs1
li x13, 0x6b4c2354 # initialize rs2
sltu x11, x11, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x69407ea7 # initialize rs1
li x14, 0xe692d9ba # initialize rs2
sltu x12, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xc4bc289e # initialize rs1
li x31, 0x1abe4eab # initialize rs2
sltu x13, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x02b4198c # initialize rs1
li x14, 0xb663565b # initialize rs2
sltu x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xae7f1586 # initialize rs1
li x16, 0x81dcd2ed # initialize rs2
sltu x15, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x19881efc # initialize rs1
li x20, 0xe5e84292 # initialize rs2
sltu x16, x16, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x853010d9 # initialize rs1
li x27, 0xdbcacd2f # initialize rs2
sltu x17, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xfc6a37fd # initialize rs1
li x2, 0xceb71436 # initialize rs2
sltu x18, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xe3ed9bcf # initialize rs1
li x15, 0xa566b6b4 # initialize rs2
sltu x19, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xc3d8f430 # initialize rs1
li x1, 0x108056cb # initialize rs2
sltu x20, x20, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x36638019 # initialize rs1
li x1, 0x33963253 # initialize rs2
sltu x21, x21, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xb2248908 # initialize rs1
li x10, 0x746a5e35 # initialize rs2
sltu x22, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x7a526f6a # initialize rs1
li x13, 0x9a0a5b8d # initialize rs2
sltu x23, x23, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xcf26a8fc # initialize rs1
li x1, 0x8108c060 # initialize rs2
sltu x24, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xe5a085b6 # initialize rs1
li x1, 0xf6b33c7f # initialize rs2
sltu x25, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3f925f1a # initialize rs1
li x21, 0xea961082 # initialize rs2
sltu x26, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x9cd76fd3 # initialize rs1
li x11, 0x9f6ded5f # initialize rs2
sltu x27, x27, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x5474b2f9 # initialize rs1
li x27, 0x225119be # initialize rs2
sltu x28, x28, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xe1281850 # initialize rs1
li x28, 0xe7e6066f # initialize rs2
sltu x29, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x98bcc4df # initialize rs1
li x30, 0x21bc108b # initialize rs2
sltu x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x13ffc363 # initialize rs1
li x27, 0x5def2153 # initialize rs2
sltu x31, x31, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x23, 0x5ec32d8d # initialize rs1
li x0, 0x07b788a2 # initialize rs2
sltu x0, x23, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x17, 0x41df600b # initialize rs1
li x1, 0x0534bbc6 # initialize rs2
sltu x1, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x1, 0x2f526f76 # initialize rs1
li x2, 0x761f8df7 # initialize rs2
sltu x2, x1, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x14, 0x9ad04def # initialize rs1
li x3, 0x2abe5f92 # initialize rs2
sltu x3, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x21, 0x8875b8db # initialize rs1
li x4, 0xb4d70edd # initialize rs2
sltu x4, x21, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x12, 0x5823aed6 # initialize rs1
li x5, 0x5c7a76c2 # initialize rs2
sltu x5, x12, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x23, 0xebff7936 # initialize rs1
li x6, 0xcbb91431 # initialize rs2
sltu x6, x23, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x23, 0xddf07629 # initialize rs1
li x7, 0x7f58c218 # initialize rs2
sltu x7, x23, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x17, 0x1c60b4d1 # initialize rs1
li x8, 0x5de4d6cc # initialize rs2
sltu x8, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x23, 0xa950ba1e # initialize rs1
li x9, 0x21a8fe7d # initialize rs2
sltu x9, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x17, 0x11eb50f6 # initialize rs1
li x10, 0xccee0b17 # initialize rs2
sltu x10, x17, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x7, 0x196b7b53 # initialize rs1
li x11, 0xc219f92a # initialize rs2
sltu x11, x7, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x31, 0xc2b54069 # initialize rs1
li x12, 0x8f1e002a # initialize rs2
sltu x12, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x13, 0x77cd3281 # initialize rs1
li x13, 0xd0ec53b2 # initialize rs2
sltu x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x12, 0x8489e89a # initialize rs1
li x14, 0x52ec44ac # initialize rs2
sltu x14, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x10, 0xa8d18b8d # initialize rs1
li x15, 0x2aed762c # initialize rs2
sltu x15, x10, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x23, 0x6744f818 # initialize rs1
li x16, 0xf28dcfb5 # initialize rs2
sltu x16, x23, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x5, 0x47014e4a # initialize rs1
li x17, 0xeca7a88f # initialize rs2
sltu x17, x5, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x30, 0xb28bc4d2 # initialize rs1
li x18, 0x9b4cd106 # initialize rs2
sltu x18, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x24, 0xd30f0a03 # initialize rs1
li x19, 0xd83aab52 # initialize rs2
sltu x19, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x8, 0xc73c5b0c # initialize rs1
li x20, 0x883cb099 # initialize rs2
sltu x20, x8, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x27, 0xc20cc84a # initialize rs1
li x21, 0xa490cec2 # initialize rs2
sltu x21, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x19, 0xbe7679a4 # initialize rs1
li x22, 0x940a94ba # initialize rs2
sltu x22, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x5, 0x4ee1d53b # initialize rs1
li x23, 0x2ad3093b # initialize rs2
sltu x23, x5, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x2, 0x64866069 # initialize rs1
li x24, 0xc8f52526 # initialize rs2
sltu x24, x2, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x13, 0xdb67be55 # initialize rs1
li x25, 0x8fa22b03 # initialize rs2
sltu x25, x13, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x18, 0x34f8ca41 # initialize rs1
li x26, 0x57b1554e # initialize rs2
sltu x26, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x1, 0xc440d82b # initialize rs1
li x27, 0x349a4933 # initialize rs2
sltu x27, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x11, 0x433feeb4 # initialize rs1
li x28, 0xea8268dd # initialize rs2
sltu x28, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x6, 0x5726a954 # initialize rs1
li x29, 0xf48d19e1 # initialize rs2
sltu x29, x6, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x18, 0x25ce5e89 # initialize rs1
li x30, 0x0dff0355 # initialize rs2
sltu x30, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x9, 0x3391c414 # initialize rs1
li x31, 0x7a1492de # initialize rs2
sltu x31, x9, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xcf8a2fe5 # initialize rs1
li x0, 0xdc9cec03 # initialize rs2
sltu x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0xc00658df # initialize rs1
li x1, 0x20e572bf # initialize rs2
sltu x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x34665e2f # initialize rs1
li x2, 0xd8605abe # initialize rs2
sltu x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xdf35644a # initialize rs1
li x3, 0xefcafc61 # initialize rs2
sltu x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x21825e1f # initialize rs1
li x4, 0xdc2d01d2 # initialize rs2
sltu x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x3560c6b4 # initialize rs1
li x5, 0x0f79ede8 # initialize rs2
sltu x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x230801b5 # initialize rs1
li x6, 0xd5df864f # initialize rs2
sltu x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x5d997852 # initialize rs1
li x7, 0x60ae245a # initialize rs2
sltu x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0xcdd30c10 # initialize rs1
li x8, 0xcdd9ed54 # initialize rs2
sltu x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x926cf503 # initialize rs1
li x9, 0xbd31696d # initialize rs2
sltu x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x3bd09a81 # initialize rs1
li x10, 0xec6bde74 # initialize rs2
sltu x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xa1d8c31c # initialize rs1
li x11, 0xaad83a02 # initialize rs2
sltu x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x0b2ec90f # initialize rs1
li x12, 0xe0c6308c # initialize rs2
sltu x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xfa0d0154 # initialize rs1
li x13, 0x641935ae # initialize rs2
sltu x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x9dac10ed # initialize rs1
li x14, 0xcbcdc2d3 # initialize rs2
sltu x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x9bbf1a9c # initialize rs1
li x15, 0x5d78e5f4 # initialize rs2
sltu x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0xbf051d46 # initialize rs1
li x16, 0xc3c6a796 # initialize rs2
sltu x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x7f313000 # initialize rs1
li x17, 0xc1964be5 # initialize rs2
sltu x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x9616fc7a # initialize rs1
li x18, 0x027746fb # initialize rs2
sltu x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x98b8ac5d # initialize rs1
li x19, 0xece37223 # initialize rs2
sltu x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xc04813a3 # initialize rs1
li x20, 0x06fa4f5a # initialize rs2
sltu x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0xac1a20fd # initialize rs1
li x21, 0x953a2a99 # initialize rs2
sltu x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0xefffcee2 # initialize rs1
li x22, 0xb32b824e # initialize rs2
sltu x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x9ff08f6e # initialize rs1
li x23, 0x9608aa71 # initialize rs2
sltu x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x1f242ecb # initialize rs1
li x24, 0xe46d14b4 # initialize rs2
sltu x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x3d3cf303 # initialize rs1
li x25, 0x4b55f489 # initialize rs2
sltu x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xea69c257 # initialize rs1
li x26, 0xfae68e9b # initialize rs2
sltu x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x1c3aef42 # initialize rs1
li x27, 0x2cc08ffd # initialize rs2
sltu x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x17438f63 # initialize rs1
li x28, 0xcf245873 # initialize rs2
sltu x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0x370f02f0 # initialize rs1
li x29, 0xdad75af4 # initialize rs2
sltu x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x30aa46ca # initialize rs1
li x30, 0xb559ff6b # initialize rs2
sltu x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x711cf455 # initialize rs1
li x31, 0x6219c39a # initialize rs2
sltu x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x26, x7, x3 # perform first operation
sltu x15, x29, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x2, x16, x13 # perform first operation
sltu x3, x7, x20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x24, x2 # perform first operation
sltu x25, x8, x19 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x24, x6 # perform first operation
sltu x11, x29, x31 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x20, x18 # perform first operation
sltu x20, x15, x16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x27, x24, x30 # perform first operation
sltu x15, x24, x12 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x5, x16, x15 # perform first operation
sltu x5, x23, x7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x27, x29, x31 # perform first operation
sltu x27, x6, x15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x24, x6 # perform first operation
sltu x3, x22, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x27, x28 # perform first operation
sltu x27, x21, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x11, x31, x21 # perform first operation
sltu x21, x29, x2 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x1, x11, x25 # perform first operation
sltu x2, x28, x10 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-sh.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x16, 0xf5b679d5 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2004 # sub immediate from rs1 to counter offset
sh x16, -2004(x1) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x2)
li x21, 0x9501e2b7 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -53 # sub immediate from rs1 to counter offset
sh x21, 53(x2) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x3)
li x23, 0x319ee573 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -951 # sub immediate from rs1 to counter offset
sh x23, 951(x3) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x12, 0x11d15f14 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 1157 # sub immediate from rs1 to counter offset
sh x12, -1157(x4) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0x817b8df9 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 295 # sub immediate from rs1 to counter offset
sh x17, -295(x5) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x29, 0x48f3b3f4 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -262 # sub immediate from rs1 to counter offset
sh x29, 262(x6) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x1, 0xf311fe41 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 990 # sub immediate from rs1 to counter offset
sh x1, -990(x7) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x8)
li x14, 0xd59877e1 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1583 # sub immediate from rs1 to counter offset
sh x14, -1583(x8) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x9)
li x5, 0x7502296d # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1897 # sub immediate from rs1 to counter offset
sh x5, 1897(x9) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x10)
li x27, 0x5d2c8b51 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -823 # sub immediate from rs1 to counter offset
sh x27, 823(x10) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x11)
li x7, 0xf7e4349d # initialize rs2
la x11, scratch # base address 
addi x11, x11, 591 # sub immediate from rs1 to counter offset
sh x7, -591(x11) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x12)
li x28, 0x155676c8 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -739 # sub immediate from rs1 to counter offset
sh x28, 739(x12) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x13)
li x29, 0x5fbe9ad0 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1225 # sub immediate from rs1 to counter offset
sh x29, -1225(x13) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x14)
li x17, 0x24bea887 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 665 # sub immediate from rs1 to counter offset
sh x17, -665(x14) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x15)
li x22, 0xf690d206 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1065 # sub immediate from rs1 to counter offset
sh x22, 1065(x15) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x16)
li x18, 0x75d70c54 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -2015 # sub immediate from rs1 to counter offset
sh x18, 2015(x16) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x17)
li x5, 0x0968fcdf # initialize rs2
la x17, scratch # base address 
addi x17, x17, 91 # sub immediate from rs1 to counter offset
sh x5, -91(x17) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x18)
li x21, 0xe9eef2cc # initialize rs2
la x18, scratch # base address 
addi x18, x18, 1205 # sub immediate from rs1 to counter offset
sh x21, -1205(x18) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x19)
li x7, 0xde8ddeea # initialize rs2
la x19, scratch # base address 
addi x19, x19, -957 # sub immediate from rs1 to counter offset
sh x7, 957(x19) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x20)
li x14, 0x53e870af # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1671 # sub immediate from rs1 to counter offset
sh x14, 1671(x20) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x21)
li x26, 0x200a185e # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1901 # sub immediate from rs1 to counter offset
sh x26, -1901(x21) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x22)
li x9, 0x0c43e99d # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1432 # sub immediate from rs1 to counter offset
sh x9, -1432(x22) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x23)
li x7, 0x714a3444 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -423 # sub immediate from rs1 to counter offset
sh x7, 423(x23) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x24)
li x14, 0x958e3c03 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -989 # sub immediate from rs1 to counter offset
sh x14, 989(x24) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x25)
li x15, 0x155f200b # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1016 # sub immediate from rs1 to counter offset
sh x15, -1016(x25) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x26)
li x9, 0x76d5e6fb # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1422 # sub immediate from rs1 to counter offset
sh x9, -1422(x26) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x27)
li x2, 0xda019812 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 538 # sub immediate from rs1 to counter offset
sh x2, -538(x27) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x28)
li x9, 0x3fa9e905 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1560 # sub immediate from rs1 to counter offset
sh x9, -1560(x28) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x29)
li x1, 0x7dd55d3b # initialize rs2
la x29, scratch # base address 
addi x29, x29, 581 # sub immediate from rs1 to counter offset
sh x1, -581(x29) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x30)
li x25, 0x05b5a686 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1505 # sub immediate from rs1 to counter offset
sh x25, -1505(x30) # perform operation 

# Testcase cp_rs1 (Test source rs1 = x31)
li x28, 0x64c85289 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -243 # sub immediate from rs1 to counter offset
sh x28, 243(x31) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x0)
li x0, 0x25fcef36 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1691 # sub immediate from rs1 to counter offset
sh x0, -1691(x17) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x1)
li x1, 0x8b647e3f # initialize rs2
la x13, scratch # base address 
addi x13, x13, 919 # sub immediate from rs1 to counter offset
sh x1, -919(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x2)
li x2, 0x8177e6e8 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1174 # sub immediate from rs1 to counter offset
sh x2, -1174(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x3)
li x3, 0x58cdcc6b # initialize rs2
la x12, scratch # base address 
addi x12, x12, 792 # sub immediate from rs1 to counter offset
sh x3, -792(x12) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x2f79f4e4 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1777 # sub immediate from rs1 to counter offset
sh x4, 1777(x25) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xb57e7dde # initialize rs2
la x9, scratch # base address 
addi x9, x9, -19 # sub immediate from rs1 to counter offset
sh x5, 19(x9) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x8ef7f005 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 0 # sub immediate from rs1 to counter offset
sh x6, 0(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa6c7449b # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1727 # sub immediate from rs1 to counter offset
sh x7, -1727(x28) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x8)
li x8, 0x537439cc # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1741 # sub immediate from rs1 to counter offset
sh x8, 1741(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x9)
li x9, 0xa9659b14 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1365 # sub immediate from rs1 to counter offset
sh x9, 1365(x6) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x10)
li x10, 0xbcf8ffca # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1702 # sub immediate from rs1 to counter offset
sh x10, 1702(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x11)
li x11, 0x52448b7e # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1355 # sub immediate from rs1 to counter offset
sh x11, -1355(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x12)
li x12, 0x1b77418c # initialize rs2
la x13, scratch # base address 
addi x13, x13, 78 # sub immediate from rs1 to counter offset
sh x12, -78(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x13)
li x13, 0xcf819dad # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1020 # sub immediate from rs1 to counter offset
sh x13, 1020(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x14)
li x14, 0x9e33fa5f # initialize rs2
la x26, scratch # base address 
addi x26, x26, -686 # sub immediate from rs1 to counter offset
sh x14, 686(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x15)
li x15, 0xd7fd5207 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -890 # sub immediate from rs1 to counter offset
sh x15, 890(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x16)
li x16, 0x06f78b77 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1733 # sub immediate from rs1 to counter offset
sh x16, 1733(x3) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x17)
li x17, 0xbcd8da61 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 44 # sub immediate from rs1 to counter offset
sh x17, -44(x14) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x18)
li x18, 0x2127baf6 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1115 # sub immediate from rs1 to counter offset
sh x18, 1115(x21) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x19)
li x19, 0xb10e1b39 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 874 # sub immediate from rs1 to counter offset
sh x19, -874(x7) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x20)
li x20, 0xcccc8c2e # initialize rs2
la x15, scratch # base address 
addi x15, x15, 547 # sub immediate from rs1 to counter offset
sh x20, -547(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x21)
li x21, 0xf20b70d6 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -588 # sub immediate from rs1 to counter offset
sh x21, 588(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x22)
li x22, 0x80b33f9a # initialize rs2
la x15, scratch # base address 
addi x15, x15, 765 # sub immediate from rs1 to counter offset
sh x22, -765(x15) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x23)
li x23, 0x6f152468 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 264 # sub immediate from rs1 to counter offset
sh x23, -264(x20) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x24)
li x24, 0xc8765439 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -2027 # sub immediate from rs1 to counter offset
sh x24, 2027(x20) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x25)
li x25, 0x646cd68d # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1645 # sub immediate from rs1 to counter offset
sh x25, -1645(x26) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x26)
li x26, 0x5ecd6243 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1298 # sub immediate from rs1 to counter offset
sh x26, -1298(x23) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x27)
li x27, 0x3b06fd25 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 788 # sub immediate from rs1 to counter offset
sh x27, -788(x29) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x28)
li x28, 0xd4f85b7c # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1179 # sub immediate from rs1 to counter offset
sh x28, -1179(x13) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x29)
li x29, 0xb2cb13b7 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1000 # sub immediate from rs1 to counter offset
sh x29, 1000(x30) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x30)
li x30, 0x49985fbc # initialize rs2
la x8, scratch # base address 
addi x8, x8, 794 # sub immediate from rs1 to counter offset
sh x30, -794(x8) # perform operation 

# Testcase cp_rs2 (Test source rs2 = x31)
li x31, 0xfb96c627 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -499 # sub immediate from rs1 to counter offset
sh x31, 499(x17) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x20, 0x00000000 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 622 # sub immediate from rs1 to counter offset
sh x20, -622(x8) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x7, 0x00000001 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1620 # sub immediate from rs1 to counter offset
sh x7, 1620(x29) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x21, 0x00000002 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1954 # sub immediate from rs1 to counter offset
sh x21, -1954(x3) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x29, 0x80000000 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 358 # sub immediate from rs1 to counter offset
sh x29, -358(x27) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x20, 0x80000001 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 694 # sub immediate from rs1 to counter offset
sh x20, -694(x15) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x14, 0x7fffffff # initialize rs2
la x30, scratch # base address 
addi x30, x30, 583 # sub immediate from rs1 to counter offset
sh x14, -583(x30) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x7, 0x7ffffffe # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1492 # sub immediate from rs1 to counter offset
sh x7, 1492(x12) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x16, 0xffffffff # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1291 # sub immediate from rs1 to counter offset
sh x16, -1291(x28) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x20, 0xfffffffe # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1826 # sub immediate from rs1 to counter offset
sh x20, 1826(x18) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x16, 0x5bbc8872 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1932 # sub immediate from rs1 to counter offset
sh x16, 1932(x24) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x11, 0xaaaaaaaa # initialize rs2
la x3, scratch # base address 
addi x3, x3, 980 # sub immediate from rs1 to counter offset
sh x11, -980(x3) # perform operation 

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x1, 0x55555555 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -40 # sub immediate from rs1 to counter offset
sh x1, 40(x21) # perform operation 

# Testcase cp_imm_corners
li x25, 0x91d85dcc # initialize rs2
la x24, scratch # base address 
addi x24, x24, 0 # sub immediate from rs1 to counter offset
sh x25, 0(x24) # perform operation 

# Testcase cp_imm_corners
li x28, 0xcc1ed0da # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1 # sub immediate from rs1 to counter offset
sh x28, 1(x3) # perform operation 

# Testcase cp_imm_corners
li x19, 0xf39ec1d8 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -2 # sub immediate from rs1 to counter offset
sh x19, 2(x14) # perform operation 

# Testcase cp_imm_corners
li x13, 0x9ba8dceb # initialize rs2
la x21, scratch # base address 
addi x21, x21, -3 # sub immediate from rs1 to counter offset
sh x13, 3(x21) # perform operation 

# Testcase cp_imm_corners
li x18, 0xd330b73d # initialize rs2
la x10, scratch # base address 
addi x10, x10, -4 # sub immediate from rs1 to counter offset
sh x18, 4(x10) # perform operation 

# Testcase cp_imm_corners
li x12, 0xed75f5d6 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -8 # sub immediate from rs1 to counter offset
sh x12, 8(x7) # perform operation 

# Testcase cp_imm_corners
li x31, 0x23191895 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -16 # sub immediate from rs1 to counter offset
sh x31, 16(x2) # perform operation 

# Testcase cp_imm_corners
li x25, 0xf2aa4659 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -32 # sub immediate from rs1 to counter offset
sh x25, 32(x9) # perform operation 

# Testcase cp_imm_corners
li x31, 0x32c1793e # initialize rs2
la x28, scratch # base address 
addi x28, x28, -64 # sub immediate from rs1 to counter offset
sh x31, 64(x28) # perform operation 

# Testcase cp_imm_corners
li x10, 0xc44c0811 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -128 # sub immediate from rs1 to counter offset
sh x10, 128(x17) # perform operation 

# Testcase cp_imm_corners
li x23, 0x9afac659 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -256 # sub immediate from rs1 to counter offset
sh x23, 256(x7) # perform operation 

# Testcase cp_imm_corners
li x9, 0xa2459044 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -512 # sub immediate from rs1 to counter offset
sh x9, 512(x10) # perform operation 

# Testcase cp_imm_corners
li x22, 0x8871f376 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1023 # sub immediate from rs1 to counter offset
sh x22, 1023(x24) # perform operation 

# Testcase cp_imm_corners
li x29, 0x80abb4c2 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1024 # sub immediate from rs1 to counter offset
sh x29, 1024(x3) # perform operation 

# Testcase cp_imm_corners
li x5, 0xff9c1eb7 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1795 # sub immediate from rs1 to counter offset
sh x5, 1795(x19) # perform operation 

# Testcase cp_imm_corners
li x27, 0xa060160a # initialize rs2
la x10, scratch # base address 
addi x10, x10, -2047 # sub immediate from rs1 to counter offset
sh x27, 2047(x10) # perform operation 

# Testcase cp_imm_corners
li x6, 0xa14e7a13 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 2047 # increment rs1 by 2047 
addi x15, x15, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sh x6, -2048(x15) # perform operation 

# Testcase cp_imm_corners
li x8, 0x75706b98 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 2047 # sub immediate from rs1 to counter offset
sh x8, -2047(x18) # perform operation 

# Testcase cp_imm_corners
li x14, 0x282fa1dc # initialize rs2
la x12, scratch # base address 
addi x12, x12, 2 # sub immediate from rs1 to counter offset
sh x14, -2(x12) # perform operation 

# Testcase cp_imm_corners
li x8, 0x87f30723 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1 # sub immediate from rs1 to counter offset
sh x8, -1(x1) # perform operation 

# Testcase cp_gpr/fpr_hazard nohaz test
la x1, scratch
addi x1, x1, 1220
add x19, x24, x9 # perform first operation
sh x11, -1220(x1) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x2, scratch
addi x2, x2, -2035
add x8, x20, x17 # perform first operation
sh x25, 2035(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x2, scratch
addi x2, x2, -2033
add x20, x22, x31 # perform first operation
sh x12, 2033(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x29, scratch
addi x29, x29, -990
add x21, x21, x0 # perform first operation
sh x1, 990(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x6, scratch
addi x6, x6, -1824
add x14, x14, x0 # perform first operation
sh x14, 1824(x6) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x28, scratch
addi x28, x28, -1273
add x28, x28, x0 # perform first operation
sh x25, 1273(x28) # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-blt.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xab0b005f # initialize rs1
li x11, 0xe28112d7 # initialize rs2
blt x0, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xe28112d7 # initialize rs1
li x11, 0xe28112d7 # initialize rs2
blt x0, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0xae81a168 # initialize rs1
li x6, 0x01042b82 # initialize rs2
blt x1, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x01042b82 # initialize rs1
li x6, 0x01042b82 # initialize rs2
blt x1, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x770cc50c # initialize rs1
li x9, 0x8293cecf # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x8293cecf # initialize rs1
li x9, 0x8293cecf # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xf40b9c27 # initialize rs1
li x2, 0x3a3c1df9 # initialize rs2
blt x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x3a3c1df9 # initialize rs1
li x2, 0x3a3c1df9 # initialize rs2
blt x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0c42d8ae # initialize rs1
li x31, 0x842d2d9c # initialize rs2
blt x4, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x842d2d9c # initialize rs1
li x31, 0x842d2d9c # initialize rs2
blt x4, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xd8d37957 # initialize rs1
li x9, 0x42d08b8a # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x42d08b8a # initialize rs1
li x9, 0x42d08b8a # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3d2139d9 # initialize rs1
li x23, 0x9546ef0f # initialize rs2
blt x6, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x9546ef0f # initialize rs1
li x23, 0x9546ef0f # initialize rs2
blt x6, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x0aaa0ea2 # initialize rs1
li x28, 0x96273bc8 # initialize rs2
blt x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x96273bc8 # initialize rs1
li x28, 0x96273bc8 # initialize rs2
blt x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x0c83716e # initialize rs1
li x30, 0xcc78b2c7 # initialize rs2
blt x8, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xcc78b2c7 # initialize rs1
li x30, 0xcc78b2c7 # initialize rs2
blt x8, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x2214e307 # initialize rs1
li x16, 0x76defca9 # initialize rs2
blt x9, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x76defca9 # initialize rs1
li x16, 0x76defca9 # initialize rs2
blt x9, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x8106b234 # initialize rs1
li x5, 0xa20f4fc9 # initialize rs2
blt x10, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xa20f4fc9 # initialize rs1
li x5, 0xa20f4fc9 # initialize rs2
blt x10, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xd35da38e # initialize rs1
li x8, 0x93bbde60 # initialize rs2
blt x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x93bbde60 # initialize rs1
li x8, 0x93bbde60 # initialize rs2
blt x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xe620b940 # initialize rs1
li x26, 0x28b97edc # initialize rs2
blt x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x28b97edc # initialize rs1
li x26, 0x28b97edc # initialize rs2
blt x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xd92cf24a # initialize rs1
li x28, 0x828ed5e9 # initialize rs2
blt x13, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x828ed5e9 # initialize rs1
li x28, 0x828ed5e9 # initialize rs2
blt x13, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x742439ee # initialize rs1
li x1, 0x3b370bdf # initialize rs2
blt x14, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x3b370bdf # initialize rs1
li x1, 0x3b370bdf # initialize rs2
blt x14, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xd26f7184 # initialize rs1
li x3, 0xf389c8f3 # initialize rs2
blt x15, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xf389c8f3 # initialize rs1
li x3, 0xf389c8f3 # initialize rs2
blt x15, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xd058817a # initialize rs1
li x31, 0x1a5a2b93 # initialize rs2
blt x16, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x1a5a2b93 # initialize rs1
li x31, 0x1a5a2b93 # initialize rs2
blt x16, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x042f41a6 # initialize rs1
li x12, 0xe2c975ed # initialize rs2
blt x17, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xe2c975ed # initialize rs1
li x12, 0xe2c975ed # initialize rs2
blt x17, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xaf80b249 # initialize rs1
li x15, 0x5b7d235b # initialize rs2
blt x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5b7d235b # initialize rs1
li x15, 0x5b7d235b # initialize rs2
blt x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xd4fd4739 # initialize rs1
li x3, 0x23e2c2a0 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x23e2c2a0 # initialize rs1
li x3, 0x23e2c2a0 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x88a31dd3 # initialize rs1
li x19, 0x3dcb2a5f # initialize rs2
blt x20, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x3dcb2a5f # initialize rs1
li x19, 0x3dcb2a5f # initialize rs2
blt x20, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xbe3094c7 # initialize rs1
li x1, 0x665f766a # initialize rs2
blt x21, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x665f766a # initialize rs1
li x1, 0x665f766a # initialize rs2
blt x21, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x0b866b7e # initialize rs1
li x1, 0xca9b8b25 # initialize rs2
blt x22, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xca9b8b25 # initialize rs1
li x1, 0xca9b8b25 # initialize rs2
blt x22, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x2e14c79d # initialize rs1
li x22, 0xf8fbbef2 # initialize rs2
blt x23, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xf8fbbef2 # initialize rs1
li x22, 0xf8fbbef2 # initialize rs2
blt x23, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xf67cde75 # initialize rs1
li x2, 0x32beec0e # initialize rs2
blt x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x32beec0e # initialize rs1
li x2, 0x32beec0e # initialize rs2
blt x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x6e69bfbe # initialize rs1
li x27, 0x1251956a # initialize rs2
blt x25, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x1251956a # initialize rs1
li x27, 0x1251956a # initialize rs2
blt x25, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x0d3da735 # initialize rs1
li x20, 0xf5046e83 # initialize rs2
blt x26, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xf5046e83 # initialize rs1
li x20, 0xf5046e83 # initialize rs2
blt x26, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xc7eb966f # initialize rs1
li x14, 0x929064c4 # initialize rs2
blt x27, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x929064c4 # initialize rs1
li x14, 0x929064c4 # initialize rs2
blt x27, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x18224a6f # initialize rs1
li x17, 0x93ecb2b8 # initialize rs2
blt x28, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x93ecb2b8 # initialize rs1
li x17, 0x93ecb2b8 # initialize rs2
blt x28, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x399f10fc # initialize rs1
li x28, 0x1084ecea # initialize rs2
blt x29, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x1084ecea # initialize rs1
li x28, 0x1084ecea # initialize rs2
blt x29, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0xd7405903 # initialize rs1
li x16, 0x402e5f44 # initialize rs2
blt x30, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x402e5f44 # initialize rs1
li x16, 0x402e5f44 # initialize rs2
blt x30, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x55890b66 # initialize rs1
li x22, 0x701bd3f6 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x701bd3f6 # initialize rs1
li x22, 0x701bd3f6 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x7, 0x2bdc628d # initialize rs1
li x0, 0x33c883d0 # initialize rs2
blt x7, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x33c883d0 # initialize rs1
li x0, 0x33c883d0 # initialize rs2
blt x7, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x11, 0x5da28601 # initialize rs1
li x1, 0x3787f7cf # initialize rs2
blt x11, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x3787f7cf # initialize rs1
li x1, 0x3787f7cf # initialize rs2
blt x11, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x6, 0x560ad3dc # initialize rs1
li x2, 0x1e133432 # initialize rs2
blt x6, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x1e133432 # initialize rs1
li x2, 0x1e133432 # initialize rs2
blt x6, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x30, 0x5716dee8 # initialize rs1
li x3, 0x94e2b288 # initialize rs2
blt x30, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x94e2b288 # initialize rs1
li x3, 0x94e2b288 # initialize rs2
blt x30, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x13, 0xff428c24 # initialize rs1
li x4, 0x90c8bb15 # initialize rs2
blt x13, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x90c8bb15 # initialize rs1
li x4, 0x90c8bb15 # initialize rs2
blt x13, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0x31b6d6d1 # initialize rs1
li x5, 0x3baca9dd # initialize rs2
blt x17, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x3baca9dd # initialize rs1
li x5, 0x3baca9dd # initialize rs2
blt x17, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x26, 0xc46b2c1d # initialize rs1
li x6, 0x6b1a8b92 # initialize rs2
blt x26, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x6b1a8b92 # initialize rs1
li x6, 0x6b1a8b92 # initialize rs2
blt x26, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x974c4686 # initialize rs1
li x7, 0x30715f8c # initialize rs2
blt x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x30715f8c # initialize rs1
li x7, 0x30715f8c # initialize rs2
blt x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x31, 0x6332e566 # initialize rs1
li x8, 0x46186efc # initialize rs2
blt x31, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x46186efc # initialize rs1
li x8, 0x46186efc # initialize rs2
blt x31, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x1, 0xfc1d73a5 # initialize rs1
li x9, 0xe84dbf96 # initialize rs2
blt x1, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xe84dbf96 # initialize rs1
li x9, 0xe84dbf96 # initialize rs2
blt x1, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x18, 0xf68bd5f8 # initialize rs1
li x10, 0x560b698d # initialize rs2
blt x18, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x560b698d # initialize rs1
li x10, 0x560b698d # initialize rs2
blt x18, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x29, 0x789f20e7 # initialize rs1
li x11, 0xcc541fbb # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xcc541fbb # initialize rs1
li x11, 0xcc541fbb # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x6, 0x929a1346 # initialize rs1
li x12, 0xee56e6fd # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xee56e6fd # initialize rs1
li x12, 0xee56e6fd # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x5, 0x3ac52d95 # initialize rs1
li x13, 0x3cfaaffc # initialize rs2
blt x5, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x3cfaaffc # initialize rs1
li x13, 0x3cfaaffc # initialize rs2
blt x5, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x28, 0x26fa7617 # initialize rs1
li x14, 0xa85123dc # initialize rs2
blt x28, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xa85123dc # initialize rs1
li x14, 0xa85123dc # initialize rs2
blt x28, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x28, 0xdccf328c # initialize rs1
li x15, 0xefe7ea9f # initialize rs2
blt x28, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xefe7ea9f # initialize rs1
li x15, 0xefe7ea9f # initialize rs2
blt x28, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x14, 0x198d2427 # initialize rs1
li x16, 0x5217e9a5 # initialize rs2
blt x14, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5217e9a5 # initialize rs1
li x16, 0x5217e9a5 # initialize rs2
blt x14, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x11, 0x72d26b73 # initialize rs1
li x17, 0x56773d04 # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x56773d04 # initialize rs1
li x17, 0x56773d04 # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x6, 0xa138104c # initialize rs1
li x18, 0x5923eeab # initialize rs2
blt x6, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x5923eeab # initialize rs1
li x18, 0x5923eeab # initialize rs2
blt x6, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x10, 0x89a1ffba # initialize rs1
li x19, 0xd7ce63ab # initialize rs2
blt x10, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xd7ce63ab # initialize rs1
li x19, 0xd7ce63ab # initialize rs2
blt x10, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x14, 0x8fb5c3cd # initialize rs1
li x20, 0x73e0b22e # initialize rs2
blt x14, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x73e0b22e # initialize rs1
li x20, 0x73e0b22e # initialize rs2
blt x14, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x18, 0xd9fbc1c5 # initialize rs1
li x21, 0x8119d68a # initialize rs2
blt x18, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x8119d68a # initialize rs1
li x21, 0x8119d68a # initialize rs2
blt x18, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x9, 0x418aede4 # initialize rs1
li x22, 0x2d57b08f # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x2d57b08f # initialize rs1
li x22, 0x2d57b08f # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x30, 0x1da9f4de # initialize rs1
li x23, 0xd7fb6f70 # initialize rs2
blt x30, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xd7fb6f70 # initialize rs1
li x23, 0xd7fb6f70 # initialize rs2
blt x30, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x5, 0xc8f855e3 # initialize rs1
li x24, 0x3ec0c528 # initialize rs2
blt x5, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x3ec0c528 # initialize rs1
li x24, 0x3ec0c528 # initialize rs2
blt x5, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x14, 0x20d15fff # initialize rs1
li x25, 0x8f060194 # initialize rs2
blt x14, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8f060194 # initialize rs1
li x25, 0x8f060194 # initialize rs2
blt x14, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x15, 0x87566db6 # initialize rs1
li x26, 0x02f5b496 # initialize rs2
blt x15, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x02f5b496 # initialize rs1
li x26, 0x02f5b496 # initialize rs2
blt x15, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x14, 0xc0eff7cd # initialize rs1
li x27, 0x204a3922 # initialize rs2
blt x14, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x204a3922 # initialize rs1
li x27, 0x204a3922 # initialize rs2
blt x14, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x20, 0x6adae2e0 # initialize rs1
li x28, 0xaa7cc9bd # initialize rs2
blt x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xaa7cc9bd # initialize rs1
li x28, 0xaa7cc9bd # initialize rs2
blt x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x25, 0x241659c9 # initialize rs1
li x29, 0xedc81e4f # initialize rs2
blt x25, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xedc81e4f # initialize rs1
li x29, 0xedc81e4f # initialize rs2
blt x25, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x3, 0x57c68601 # initialize rs1
li x30, 0xe96a2622 # initialize rs2
blt x3, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xe96a2622 # initialize rs1
li x30, 0xe96a2622 # initialize rs2
blt x3, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x23, 0xcf8a3fbf # initialize rs1
li x31, 0xd7c97d78 # initialize rs2
blt x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xd7c97d78 # initialize rs1
li x31, 0xd7c97d78 # initialize rs2
blt x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x28, 0x00000000 # initialize rs1
li x9, 0xbf9e232a # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xbf9e232a # initialize rs1
li x9, 0xbf9e232a # initialize rs2
blt x28, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x12, 0x00000001 # initialize rs1
li x24, 0xd91065e4 # initialize rs2
blt x12, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xd91065e4 # initialize rs1
li x24, 0xd91065e4 # initialize rs2
blt x12, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x23, 0x00000002 # initialize rs1
li x11, 0xfa962c57 # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfa962c57 # initialize rs1
li x11, 0xfa962c57 # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x19, 0x80000000 # initialize rs1
li x12, 0x7173abb4 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7173abb4 # initialize rs1
li x12, 0x7173abb4 # initialize rs2
blt x19, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x17, 0x80000001 # initialize rs1
li x23, 0xfeb82f23 # initialize rs2
blt x17, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xfeb82f23 # initialize rs1
li x23, 0xfeb82f23 # initialize rs2
blt x17, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x18, 0x7fffffff # initialize rs1
li x31, 0xc7345e0c # initialize rs2
blt x18, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xc7345e0c # initialize rs1
li x31, 0xc7345e0c # initialize rs2
blt x18, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x13, 0x7ffffffe # initialize rs1
li x19, 0xc3c9011b # initialize rs2
blt x13, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xc3c9011b # initialize rs1
li x19, 0xc3c9011b # initialize rs2
blt x13, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x11, 0xffffffff # initialize rs1
li x27, 0x7adc5865 # initialize rs2
blt x11, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7adc5865 # initialize rs1
li x27, 0x7adc5865 # initialize rs2
blt x11, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x14, 0xfffffffe # initialize rs1
li x1, 0xc162b3cd # initialize rs2
blt x14, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xc162b3cd # initialize rs1
li x1, 0xc162b3cd # initialize rs2
blt x14, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x13, 0x5bbc8872 # initialize rs1
li x11, 0xf04273f5 # initialize rs2
blt x13, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xf04273f5 # initialize rs1
li x11, 0xf04273f5 # initialize rs2
blt x13, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x9, 0xaaaaaaaa # initialize rs1
li x30, 0x4f1cc660 # initialize rs2
blt x9, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x4f1cc660 # initialize rs1
li x30, 0x4f1cc660 # initialize rs2
blt x9, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x23, 0x55555555 # initialize rs1
li x1, 0x23b92554 # initialize rs2
blt x23, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x23b92554 # initialize rs1
li x1, 0x23b92554 # initialize rs2
blt x23, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x17, 0xb39a5bfb # initialize rs1
li x10, 0x00000000 # initialize rs2
blt x17, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000000 # initialize rs1
li x10, 0x00000000 # initialize rs2
blt x17, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x30, 0xa8ee7938 # initialize rs1
li x26, 0x00000001 # initialize rs2
blt x30, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000001 # initialize rs1
li x26, 0x00000001 # initialize rs2
blt x30, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x18, 0xfd7a9678 # initialize rs1
li x5, 0x00000002 # initialize rs2
blt x18, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000002 # initialize rs1
li x5, 0x00000002 # initialize rs2
blt x18, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x1, 0x63d96cd8 # initialize rs1
li x26, 0x80000000 # initialize rs2
blt x1, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x80000000 # initialize rs1
li x26, 0x80000000 # initialize rs2
blt x1, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x13, 0x09e89018 # initialize rs1
li x30, 0x80000001 # initialize rs2
blt x13, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x30, 0x80000001 # initialize rs2
blt x13, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x8, 0x540452ad # initialize rs1
li x5, 0x7fffffff # initialize rs2
blt x8, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffff # initialize rs1
li x5, 0x7fffffff # initialize rs2
blt x8, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x14, 0x58308c83 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
blt x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7ffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
blt x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x1, 0xd14ac610 # initialize rs1
li x5, 0xffffffff # initialize rs2
blt x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xffffffff # initialize rs1
li x5, 0xffffffff # initialize rs2
blt x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x19, 0xe3e02fc6 # initialize rs1
li x28, 0xfffffffe # initialize rs2
blt x19, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
blt x19, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x2, 0x77de343c # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
blt x2, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc8872 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
blt x2, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x30, 0x9c611331 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
blt x30, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
blt x30, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x15, 0x88fc4af5 # initialize rs1
li x17, 0x55555555 # initialize rs2
blt x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
blt x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x00000000 # initialize rs1
li x23, 0x00000000 # initialize rs2
blt x12, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000 # initialize rs1
li x23, 0x00000000 # initialize rs2
blt x12, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x14, 0x00000000 # initialize rs1
li x23, 0x00000001 # initialize rs2
blt x14, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000001 # initialize rs1
li x23, 0x00000001 # initialize rs2
blt x14, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x24, 0x00000000 # initialize rs1
li x18, 0x00000002 # initialize rs2
blt x24, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000002 # initialize rs1
li x18, 0x00000002 # initialize rs2
blt x24, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x21, 0x00000000 # initialize rs1
li x8, 0x80000000 # initialize rs2
blt x21, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000000 # initialize rs1
li x8, 0x80000000 # initialize rs2
blt x21, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x20, 0x00000000 # initialize rs1
li x10, 0x80000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x80000001 # initialize rs1
li x10, 0x80000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x25, 0x00000000 # initialize rs1
li x9, 0x7fffffff # initialize rs2
blt x25, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
blt x25, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x25, 0x00000000 # initialize rs1
li x29, 0x7ffffffe # initialize rs2
blt x25, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x7ffffffe # initialize rs1
li x29, 0x7ffffffe # initialize rs2
blt x25, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x10, 0x00000000 # initialize rs1
li x31, 0xffffffff # initialize rs2
blt x10, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffff # initialize rs1
li x31, 0xffffffff # initialize rs2
blt x10, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x29, 0x00000000 # initialize rs1
li x11, 0xfffffffe # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
blt x29, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x8, 0x00000000 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
blt x8, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc8872 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
blt x8, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x8, 0x00000000 # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
blt x8, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xaaaaaaaa # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
blt x8, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x27, 0x00000000 # initialize rs1
li x5, 0x55555555 # initialize rs2
blt x27, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x55555555 # initialize rs1
li x5, 0x55555555 # initialize rs2
blt x27, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x10, 0x00000001 # initialize rs1
li x17, 0x00000000 # initialize rs2
blt x10, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000000 # initialize rs1
li x17, 0x00000000 # initialize rs2
blt x10, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x3, 0x00000001 # initialize rs1
li x6, 0x00000001 # initialize rs2
blt x3, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000001 # initialize rs1
li x6, 0x00000001 # initialize rs2
blt x3, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x27, 0x00000001 # initialize rs1
li x30, 0x00000002 # initialize rs2
blt x27, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x00000002 # initialize rs1
li x30, 0x00000002 # initialize rs2
blt x27, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x2, 0x00000001 # initialize rs1
li x16, 0x80000000 # initialize rs2
blt x2, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x80000000 # initialize rs1
li x16, 0x80000000 # initialize rs2
blt x2, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x23, 0x00000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
blt x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
blt x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x5, 0x00000001 # initialize rs1
li x9, 0x7fffffff # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
blt x5, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x5, 0x00000001 # initialize rs1
li x7, 0x7ffffffe # initialize rs2
blt x5, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7ffffffe # initialize rs1
li x7, 0x7ffffffe # initialize rs2
blt x5, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x24, 0x00000001 # initialize rs1
li x8, 0xffffffff # initialize rs2
blt x24, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xffffffff # initialize rs1
li x8, 0xffffffff # initialize rs2
blt x24, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x11, 0x00000001 # initialize rs1
li x17, 0xfffffffe # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xfffffffe # initialize rs1
li x17, 0xfffffffe # initialize rs2
blt x11, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x25, 0x00000001 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x5bbc8872 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x14, 0x00000001 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
blt x14, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
blt x14, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x24, 0x00000001 # initialize rs1
li x16, 0x55555555 # initialize rs2
blt x24, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55555555 # initialize rs1
li x16, 0x55555555 # initialize rs2
blt x24, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x18, 0x00000002 # initialize rs1
li x7, 0x00000000 # initialize rs2
blt x18, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x7, 0x00000000 # initialize rs2
blt x18, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x18, 0x00000002 # initialize rs1
li x8, 0x00000001 # initialize rs2
blt x18, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000001 # initialize rs1
li x8, 0x00000001 # initialize rs2
blt x18, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x31, 0x00000002 # initialize rs1
li x22, 0x00000002 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000002 # initialize rs1
li x22, 0x00000002 # initialize rs2
blt x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x10, 0x00000002 # initialize rs1
li x2, 0x80000000 # initialize rs2
blt x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000000 # initialize rs1
li x2, 0x80000000 # initialize rs2
blt x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x13, 0x00000002 # initialize rs1
li x15, 0x80000001 # initialize rs2
blt x13, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x15, 0x80000001 # initialize rs2
blt x13, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x14, 0x00000002 # initialize rs1
li x17, 0x7fffffff # initialize rs2
blt x14, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x17, 0x7fffffff # initialize rs2
blt x14, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x20, 0x00000002 # initialize rs1
li x27, 0x7ffffffe # initialize rs2
blt x20, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x27, 0x7ffffffe # initialize rs2
blt x20, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x23, 0x00000002 # initialize rs1
li x11, 0xffffffff # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xffffffff # initialize rs1
li x11, 0xffffffff # initialize rs2
blt x23, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x27, 0x00000002 # initialize rs1
li x6, 0xfffffffe # initialize rs2
blt x27, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xfffffffe # initialize rs1
li x6, 0xfffffffe # initialize rs2
blt x27, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x1, 0x00000002 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
blt x1, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc8872 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
blt x1, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x3, 0x00000002 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
blt x3, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
blt x3, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x22, 0x00000002 # initialize rs1
li x8, 0x55555555 # initialize rs2
blt x22, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x55555555 # initialize rs1
li x8, 0x55555555 # initialize rs2
blt x22, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x25, 0x80000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000 # initialize rs1
li x18, 0x00000000 # initialize rs2
blt x25, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x9, 0x80000000 # initialize rs1
li x22, 0x00000001 # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
blt x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x21, 0x80000000 # initialize rs1
li x24, 0x00000002 # initialize rs2
blt x21, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000002 # initialize rs1
li x24, 0x00000002 # initialize rs2
blt x21, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x15, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
blt x15, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x80000000 # initialize rs1
li x6, 0x80000000 # initialize rs2
blt x15, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x27, 0x80000000 # initialize rs1
li x21, 0x80000001 # initialize rs2
blt x27, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000001 # initialize rs1
li x21, 0x80000001 # initialize rs2
blt x27, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x14, 0x80000000 # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x8, 0x80000000 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
blt x8, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
blt x8, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x18, 0x80000000 # initialize rs1
li x16, 0xffffffff # initialize rs2
blt x18, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xffffffff # initialize rs1
li x16, 0xffffffff # initialize rs2
blt x18, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x23, 0x80000000 # initialize rs1
li x8, 0xfffffffe # initialize rs2
blt x23, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x8, 0xfffffffe # initialize rs2
blt x23, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x26, 0x80000000 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
blt x26, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5bbc8872 # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
blt x26, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x11, 0x80000000 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
blt x11, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
blt x11, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x7, 0x80000000 # initialize rs1
li x28, 0x55555555 # initialize rs2
blt x7, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x55555555 # initialize rs1
li x28, 0x55555555 # initialize rs2
blt x7, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x26, 0x80000001 # initialize rs1
li x2, 0x00000000 # initialize rs2
blt x26, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000 # initialize rs1
li x2, 0x00000000 # initialize rs2
blt x26, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x22, 0x80000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
blt x22, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
blt x22, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x16, 0x80000001 # initialize rs1
li x26, 0x00000002 # initialize rs2
blt x16, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000002 # initialize rs1
li x26, 0x00000002 # initialize rs2
blt x16, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x13, 0x80000001 # initialize rs1
li x12, 0x80000000 # initialize rs2
blt x13, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x12, 0x80000000 # initialize rs2
blt x13, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x13, 0x80000001 # initialize rs1
li x24, 0x80000001 # initialize rs2
blt x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000001 # initialize rs1
li x24, 0x80000001 # initialize rs2
blt x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x20, 0x80000001 # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x20, 0x80000001 # initialize rs1
li x8, 0x7ffffffe # initialize rs2
blt x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7ffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
blt x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x7, 0x80000001 # initialize rs1
li x20, 0xffffffff # initialize rs2
blt x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x20, 0xffffffff # initialize rs2
blt x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x16, 0x80000001 # initialize rs1
li x23, 0xfffffffe # initialize rs2
blt x16, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xfffffffe # initialize rs1
li x23, 0xfffffffe # initialize rs2
blt x16, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x18, 0x80000001 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
blt x18, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5bbc8872 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
blt x18, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x11, 0x80000001 # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
blt x11, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaa # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
blt x11, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x14, 0x80000001 # initialize rs1
li x10, 0x55555555 # initialize rs2
blt x14, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x55555555 # initialize rs1
li x10, 0x55555555 # initialize rs2
blt x14, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x25, 0x7fffffff # initialize rs1
li x21, 0x00000000 # initialize rs2
blt x25, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000000 # initialize rs1
li x21, 0x00000000 # initialize rs2
blt x25, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x20, 0x7fffffff # initialize rs1
li x10, 0x00000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000001 # initialize rs1
li x10, 0x00000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x7, 0x7fffffff # initialize rs1
li x20, 0x00000002 # initialize rs2
blt x7, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
blt x7, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x13, 0x7fffffff # initialize rs1
li x14, 0x80000000 # initialize rs2
blt x13, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x14, 0x80000000 # initialize rs2
blt x13, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x5, 0x7fffffff # initialize rs1
li x25, 0x80000001 # initialize rs2
blt x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
blt x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x27, 0x7fffffff # initialize rs1
li x3, 0x7fffffff # initialize rs2
blt x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7fffffff # initialize rs1
li x3, 0x7fffffff # initialize rs2
blt x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x10, 0x7fffffff # initialize rs1
li x30, 0x7ffffffe # initialize rs2
blt x10, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x7ffffffe # initialize rs1
li x30, 0x7ffffffe # initialize rs2
blt x10, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x24, 0x7fffffff # initialize rs1
li x31, 0xffffffff # initialize rs2
blt x24, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xffffffff # initialize rs1
li x31, 0xffffffff # initialize rs2
blt x24, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x30, 0x7fffffff # initialize rs1
li x3, 0xfffffffe # initialize rs2
blt x30, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xfffffffe # initialize rs1
li x3, 0xfffffffe # initialize rs2
blt x30, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x13, 0x7fffffff # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x13, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x5bbc8872 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x13, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x10, 0x7fffffff # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
blt x10, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
blt x10, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x19, 0x7fffffff # initialize rs1
li x3, 0x55555555 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x55555555 # initialize rs1
li x3, 0x55555555 # initialize rs2
blt x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x29, 0x7ffffffe # initialize rs1
li x3, 0x00000000 # initialize rs2
blt x29, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000 # initialize rs1
li x3, 0x00000000 # initialize rs2
blt x29, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x11, 0x7ffffffe # initialize rs1
li x19, 0x00000001 # initialize rs2
blt x11, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000001 # initialize rs1
li x19, 0x00000001 # initialize rs2
blt x11, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x26, 0x7ffffffe # initialize rs1
li x7, 0x00000002 # initialize rs2
blt x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000002 # initialize rs1
li x7, 0x00000002 # initialize rs2
blt x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x2, 0x7ffffffe # initialize rs1
li x9, 0x80000000 # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x80000000 # initialize rs1
li x9, 0x80000000 # initialize rs2
blt x2, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x19, 0x7ffffffe # initialize rs1
li x20, 0x80000001 # initialize rs2
blt x19, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000001 # initialize rs1
li x20, 0x80000001 # initialize rs2
blt x19, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x8, 0x7ffffffe # initialize rs1
li x7, 0x7fffffff # initialize rs2
blt x8, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7fffffff # initialize rs1
li x7, 0x7fffffff # initialize rs2
blt x8, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x31, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
blt x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
blt x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x26, 0x7ffffffe # initialize rs1
li x16, 0xffffffff # initialize rs2
blt x26, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffff # initialize rs1
li x16, 0xffffffff # initialize rs2
blt x26, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x22, 0x7ffffffe # initialize rs1
li x21, 0xfffffffe # initialize rs2
blt x22, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffe # initialize rs1
li x21, 0xfffffffe # initialize rs2
blt x22, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x1, 0x7ffffffe # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x1, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5bbc8872 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
blt x1, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x11, 0x7ffffffe # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
blt x11, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xaaaaaaaa # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
blt x11, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x30, 0x7ffffffe # initialize rs1
li x2, 0x55555555 # initialize rs2
blt x30, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x55555555 # initialize rs1
li x2, 0x55555555 # initialize rs2
blt x30, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x29, 0xffffffff # initialize rs1
li x9, 0x00000000 # initialize rs2
blt x29, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000000 # initialize rs1
li x9, 0x00000000 # initialize rs2
blt x29, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x24, 0xffffffff # initialize rs1
li x16, 0x00000001 # initialize rs2
blt x24, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000001 # initialize rs1
li x16, 0x00000001 # initialize rs2
blt x24, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x1, 0xffffffff # initialize rs1
li x20, 0x00000002 # initialize rs2
blt x1, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000002 # initialize rs1
li x20, 0x00000002 # initialize rs2
blt x1, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x17, 0xffffffff # initialize rs1
li x19, 0x80000000 # initialize rs2
blt x17, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x80000000 # initialize rs1
li x19, 0x80000000 # initialize rs2
blt x17, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x12, 0xffffffff # initialize rs1
li x10, 0x80000001 # initialize rs2
blt x12, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000001 # initialize rs1
li x10, 0x80000001 # initialize rs2
blt x12, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x16, 0xffffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
blt x16, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7fffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
blt x16, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x11, 0xffffffff # initialize rs1
li x26, 0x7ffffffe # initialize rs2
blt x11, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7ffffffe # initialize rs1
li x26, 0x7ffffffe # initialize rs2
blt x11, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x19, 0xffffffff # initialize rs1
li x7, 0xffffffff # initialize rs2
blt x19, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xffffffff # initialize rs1
li x7, 0xffffffff # initialize rs2
blt x19, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x29, 0xffffffff # initialize rs1
li x31, 0xfffffffe # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xfffffffe # initialize rs1
li x31, 0xfffffffe # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x23, 0xffffffff # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
blt x23, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x5bbc8872 # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
blt x23, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x2, 0xffffffff # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x12, 0xffffffff # initialize rs1
li x3, 0x55555555 # initialize rs2
blt x12, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x55555555 # initialize rs1
li x3, 0x55555555 # initialize rs2
blt x12, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x13, 0xfffffffe # initialize rs1
li x8, 0x00000000 # initialize rs2
blt x13, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
blt x13, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x29, 0xfffffffe # initialize rs1
li x31, 0x00000001 # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000001 # initialize rs1
li x31, 0x00000001 # initialize rs2
blt x29, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x16, 0xfffffffe # initialize rs1
li x15, 0x00000002 # initialize rs2
blt x16, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x00000002 # initialize rs1
li x15, 0x00000002 # initialize rs2
blt x16, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x7, 0xfffffffe # initialize rs1
li x13, 0x80000000 # initialize rs2
blt x7, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000000 # initialize rs1
li x13, 0x80000000 # initialize rs2
blt x7, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x26, 0xfffffffe # initialize rs1
li x25, 0x80000001 # initialize rs2
blt x26, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
blt x26, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x19, 0xfffffffe # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7fffffff # initialize rs1
li x10, 0x7fffffff # initialize rs2
blt x19, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x30, 0xfffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
blt x30, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x7ffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
blt x30, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x15, 0xfffffffe # initialize rs1
li x17, 0xffffffff # initialize rs2
blt x15, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xffffffff # initialize rs1
li x17, 0xffffffff # initialize rs2
blt x15, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x2, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
blt x2, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xfffffffe # initialize rs1
li x28, 0xfffffffe # initialize rs2
blt x2, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x28, 0xfffffffe # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc8872 # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
blt x28, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x8, 0xfffffffe # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
blt x8, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xaaaaaaaa # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
blt x8, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x24, 0xfffffffe # initialize rs1
li x23, 0x55555555 # initialize rs2
blt x24, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55555555 # initialize rs1
li x23, 0x55555555 # initialize rs2
blt x24, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x24, 0x5bbc8872 # initialize rs1
li x3, 0x00000000 # initialize rs2
blt x24, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000000 # initialize rs1
li x3, 0x00000000 # initialize rs2
blt x24, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x3, 0x5bbc8872 # initialize rs1
li x12, 0x00000001 # initialize rs2
blt x3, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
blt x3, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x11, 0x5bbc8872 # initialize rs1
li x7, 0x00000002 # initialize rs2
blt x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000002 # initialize rs1
li x7, 0x00000002 # initialize rs2
blt x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x20, 0x5bbc8872 # initialize rs1
li x11, 0x80000000 # initialize rs2
blt x20, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x80000000 # initialize rs1
li x11, 0x80000000 # initialize rs2
blt x20, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x7, 0x5bbc8872 # initialize rs1
li x18, 0x80000001 # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x23, 0x5bbc8872 # initialize rs1
li x27, 0x7fffffff # initialize rs2
blt x23, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7fffffff # initialize rs1
li x27, 0x7fffffff # initialize rs2
blt x23, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x17, 0x5bbc8872 # initialize rs1
li x1, 0x7ffffffe # initialize rs2
blt x17, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffe # initialize rs1
li x1, 0x7ffffffe # initialize rs2
blt x17, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x17, 0x5bbc8872 # initialize rs1
li x2, 0xffffffff # initialize rs2
blt x17, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffff # initialize rs1
li x2, 0xffffffff # initialize rs2
blt x17, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x25, 0x5bbc8872 # initialize rs1
li x22, 0xfffffffe # initialize rs2
blt x25, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xfffffffe # initialize rs1
li x22, 0xfffffffe # initialize rs2
blt x25, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
blt x31, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc8872 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
blt x31, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x28, 0x5bbc8872 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
blt x28, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
blt x28, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x10, 0x5bbc8872 # initialize rs1
li x23, 0x55555555 # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x55555555 # initialize rs1
li x23, 0x55555555 # initialize rs2
blt x10, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x6, 0xaaaaaaaa # initialize rs1
li x29, 0x00000000 # initialize rs2
blt x6, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000 # initialize rs1
li x29, 0x00000000 # initialize rs2
blt x6, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x2, 0xaaaaaaaa # initialize rs1
li x24, 0x00000001 # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
blt x2, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x14, 0xaaaaaaaa # initialize rs1
li x21, 0x00000002 # initialize rs2
blt x14, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000002 # initialize rs1
li x21, 0x00000002 # initialize rs2
blt x14, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x10, 0xaaaaaaaa # initialize rs1
li x28, 0x80000000 # initialize rs2
blt x10, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x80000000 # initialize rs1
li x28, 0x80000000 # initialize rs2
blt x10, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x6, 0xaaaaaaaa # initialize rs1
li x27, 0x80000001 # initialize rs2
blt x6, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x80000001 # initialize rs1
li x27, 0x80000001 # initialize rs2
blt x6, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x14, 0xaaaaaaaa # initialize rs1
li x31, 0x7fffffff # initialize rs2
blt x14, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x7fffffff # initialize rs1
li x31, 0x7fffffff # initialize rs2
blt x14, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x18, 0xaaaaaaaa # initialize rs1
li x11, 0x7ffffffe # initialize rs2
blt x18, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
blt x18, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x29, 0xaaaaaaaa # initialize rs1
li x23, 0xffffffff # initialize rs2
blt x29, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xffffffff # initialize rs1
li x23, 0xffffffff # initialize rs2
blt x29, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x23, 0xaaaaaaaa # initialize rs1
li x5, 0xfffffffe # initialize rs2
blt x23, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
blt x23, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x14, 0xaaaaaaaa # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
blt x14, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x5bbc8872 # initialize rs1
li x15, 0x5bbc8872 # initialize rs2
blt x14, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x25, 0xaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
blt x25, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xaaaaaaaa # initialize rs1
li x12, 0xaaaaaaaa # initialize rs2
blt x25, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x20, 0xaaaaaaaa # initialize rs1
li x28, 0x55555555 # initialize rs2
blt x20, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x55555555 # initialize rs1
li x28, 0x55555555 # initialize rs2
blt x20, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x6, 0x55555555 # initialize rs1
li x19, 0x00000000 # initialize rs2
blt x6, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x00000000 # initialize rs1
li x19, 0x00000000 # initialize rs2
blt x6, x19, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x20, 0x55555555 # initialize rs1
li x10, 0x00000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000001 # initialize rs1
li x10, 0x00000001 # initialize rs2
blt x20, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x31, 0x55555555 # initialize rs1
li x13, 0x00000002 # initialize rs2
blt x31, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
blt x31, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x27, 0x55555555 # initialize rs1
li x20, 0x80000000 # initialize rs2
blt x27, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000000 # initialize rs1
li x20, 0x80000000 # initialize rs2
blt x27, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x12, 0x55555555 # initialize rs1
li x29, 0x80000001 # initialize rs2
blt x12, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000001 # initialize rs1
li x29, 0x80000001 # initialize rs2
blt x12, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x27, 0x55555555 # initialize rs1
li x17, 0x7fffffff # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x7fffffff # initialize rs1
li x17, 0x7fffffff # initialize rs2
blt x27, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x23, 0x55555555 # initialize rs1
li x16, 0x7ffffffe # initialize rs2
blt x23, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
blt x23, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x17, 0x55555555 # initialize rs1
li x1, 0xffffffff # initialize rs2
blt x17, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xffffffff # initialize rs1
li x1, 0xffffffff # initialize rs2
blt x17, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x6, 0x55555555 # initialize rs1
li x12, 0xfffffffe # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xfffffffe # initialize rs1
li x12, 0xfffffffe # initialize rs2
blt x6, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x18, 0x55555555 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
blt x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x5bbc8872 # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
blt x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x7, 0x55555555 # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaa # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
blt x7, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x17, 0x55555555 # initialize rs1
li x9, 0x55555555 # initialize rs2
blt x17, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x55555555 # initialize rs1
li x9, 0x55555555 # initialize rs2
blt x17, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x500f90bf # initialize rs1
li x0, 0x962f9f7a # initialize rs2
blt x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x962f9f7a # initialize rs1
li x0, 0x962f9f7a # initialize rs2
blt x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x61b41b99 # initialize rs1
li x1, 0xe92f70e4 # initialize rs2
blt x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0xe92f70e4 # initialize rs1
li x1, 0xe92f70e4 # initialize rs2
blt x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x440df229 # initialize rs1
li x2, 0x027ac4c4 # initialize rs2
blt x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x027ac4c4 # initialize rs1
li x2, 0x027ac4c4 # initialize rs2
blt x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x8c88960d # initialize rs1
li x3, 0x1f7d1380 # initialize rs2
blt x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x1f7d1380 # initialize rs1
li x3, 0x1f7d1380 # initialize rs2
blt x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xab396fa0 # initialize rs1
li x4, 0xeb4015fc # initialize rs2
blt x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0xeb4015fc # initialize rs1
li x4, 0xeb4015fc # initialize rs2
blt x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x23aab4ee # initialize rs1
li x5, 0x1a13d018 # initialize rs2
blt x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x1a13d018 # initialize rs1
li x5, 0x1a13d018 # initialize rs2
blt x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x266f62a3 # initialize rs1
li x6, 0x73ebfa4b # initialize rs2
blt x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x73ebfa4b # initialize rs1
li x6, 0x73ebfa4b # initialize rs2
blt x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x19760802 # initialize rs1
li x7, 0xc95d6d45 # initialize rs2
blt x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xc95d6d45 # initialize rs1
li x7, 0xc95d6d45 # initialize rs2
blt x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x101b93ed # initialize rs1
li x8, 0x845aa09e # initialize rs2
blt x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x845aa09e # initialize rs1
li x8, 0x845aa09e # initialize rs2
blt x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x35cbe688 # initialize rs1
li x9, 0xdd205ffa # initialize rs2
blt x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xdd205ffa # initialize rs1
li x9, 0xdd205ffa # initialize rs2
blt x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xe17ee87b # initialize rs1
li x10, 0x4e898671 # initialize rs2
blt x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x4e898671 # initialize rs1
li x10, 0x4e898671 # initialize rs2
blt x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xfa16eff2 # initialize rs1
li x11, 0xb3348910 # initialize rs2
blt x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0xb3348910 # initialize rs1
li x11, 0xb3348910 # initialize rs2
blt x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xf83cc4b8 # initialize rs1
li x12, 0x4cfed63f # initialize rs2
blt x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x4cfed63f # initialize rs1
li x12, 0x4cfed63f # initialize rs2
blt x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0x8e2afed0 # initialize rs1
li x13, 0x1e8be44f # initialize rs2
blt x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x1e8be44f # initialize rs1
li x13, 0x1e8be44f # initialize rs2
blt x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xfe060d39 # initialize rs1
li x14, 0x8d596258 # initialize rs2
blt x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x8d596258 # initialize rs1
li x14, 0x8d596258 # initialize rs2
blt x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x9ea774e8 # initialize rs1
li x15, 0x67caf1b8 # initialize rs2
blt x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x67caf1b8 # initialize rs1
li x15, 0x67caf1b8 # initialize rs2
blt x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x8e80142a # initialize rs1
li x16, 0xf66270f1 # initialize rs2
blt x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xf66270f1 # initialize rs1
li x16, 0xf66270f1 # initialize rs2
blt x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xe733270d # initialize rs1
li x17, 0x05eb6571 # initialize rs2
blt x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x05eb6571 # initialize rs1
li x17, 0x05eb6571 # initialize rs2
blt x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x1c514bb0 # initialize rs1
li x18, 0x06e750ec # initialize rs2
blt x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x06e750ec # initialize rs1
li x18, 0x06e750ec # initialize rs2
blt x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0xcfd8b493 # initialize rs1
li x19, 0x2ba6a412 # initialize rs2
blt x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x2ba6a412 # initialize rs1
li x19, 0x2ba6a412 # initialize rs2
blt x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xa3d749bb # initialize rs1
li x20, 0x41e86df1 # initialize rs2
blt x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x41e86df1 # initialize rs1
li x20, 0x41e86df1 # initialize rs2
blt x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xb3b542c2 # initialize rs1
li x21, 0x5546c6e4 # initialize rs2
blt x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x5546c6e4 # initialize rs1
li x21, 0x5546c6e4 # initialize rs2
blt x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x5c1870a5 # initialize rs1
li x22, 0xbb52bce0 # initialize rs2
blt x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xbb52bce0 # initialize rs1
li x22, 0xbb52bce0 # initialize rs2
blt x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x7d81930e # initialize rs1
li x23, 0x340695a9 # initialize rs2
blt x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x340695a9 # initialize rs1
li x23, 0x340695a9 # initialize rs2
blt x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x85e66201 # initialize rs1
li x24, 0xae497a55 # initialize rs2
blt x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xae497a55 # initialize rs1
li x24, 0xae497a55 # initialize rs2
blt x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0xa7ade900 # initialize rs1
li x25, 0x221b944d # initialize rs2
blt x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x221b944d # initialize rs1
li x25, 0x221b944d # initialize rs2
blt x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xf92e36c4 # initialize rs1
li x26, 0xa33577fc # initialize rs2
blt x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xa33577fc # initialize rs1
li x26, 0xa33577fc # initialize rs2
blt x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x17d7b4be # initialize rs1
li x27, 0x113797f5 # initialize rs2
blt x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x113797f5 # initialize rs1
li x27, 0x113797f5 # initialize rs2
blt x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x684b1b96 # initialize rs1
li x28, 0x78dd5d2e # initialize rs2
blt x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x78dd5d2e # initialize rs1
li x28, 0x78dd5d2e # initialize rs2
blt x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xfe9ac27f # initialize rs1
li x29, 0xa9c77737 # initialize rs2
blt x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xa9c77737 # initialize rs1
li x29, 0xa9c77737 # initialize rs2
blt x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x3999f3f5 # initialize rs1
li x30, 0x6c5939f0 # initialize rs2
blt x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x6c5939f0 # initialize rs1
li x30, 0x6c5939f0 # initialize rs2
blt x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xebbb2799 # initialize rs1
li x31, 0x8445ce47 # initialize rs2
blt x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x8445ce47 # initialize rs1
li x31, 0x8445ce47 # initialize rs2
blt x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: blt x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x7, x25 # perform first operation
blt x11, x26, arbitraryLabel19
nop
arbitraryLabel19:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x26, x20, x12 # perform first operation
blt x8, x22, arbitraryLabel20
nop
arbitraryLabel20:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x31, x17 # perform first operation
blt x27, x9, arbitraryLabel21
nop
arbitraryLabel21:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x25, x19 # perform first operation
blt x7, x2, arbitraryLabel22
nop
arbitraryLabel22:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x20, x16, x27 # perform first operation
blt x13, x9, arbitraryLabel23
nop
arbitraryLabel23:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x20, x6 # perform first operation
blt x25, x10, arbitraryLabel24
nop
arbitraryLabel24:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-slli.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xbef516c1 # initialize rs1
slli x14, x0, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5d0be0d1 # initialize rs1
slli x31, x1, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x6d2db53a # initialize rs1
slli x25, x2, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x1166ebff # initialize rs1
slli x11, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x99f9c199 # initialize rs1
slli x28, x4, 5 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x1130c530 # initialize rs1
slli x19, x5, 7 # perform operation
RVTEST_SIGUPD(x6, x0, x19, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3426afb9 # initialize rs1
slli x18, x6, 4 # perform operation
RVTEST_SIGUPD(x7, x0, x18, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x19d545b7 # initialize rs1
slli x13, x7, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x5994780c # initialize rs1
slli x10, x8, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x0c34f775 # initialize rs1
slli x13, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x6199dfd9 # initialize rs1
slli x18, x10, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xbe695e14 # initialize rs1
slli x9, x11, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x6e7440df # initialize rs1
slli x6, x12, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xbe36c4a9 # initialize rs1
slli x30, x13, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x48077805 # initialize rs1
slli x27, x14, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xe9ef8653 # initialize rs1
slli x20, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x57614ded # initialize rs1
slli x10, x16, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x06d77e7e # initialize rs1
slli x31, x17, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x86540b29 # initialize rs1
slli x20, x18, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x5be830c3 # initialize rs1
slli x25, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x75b18f38 # initialize rs1
slli x6, x20, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xa83d16ae # initialize rs1
slli x28, x21, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x735221db # initialize rs1
slli x30, x22, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x3d641141 # initialize rs1
slli x3, x23, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xc7fb3a57 # initialize rs1
slli x19, x24, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xe4cd6c1d # initialize rs1
slli x28, x25, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xf694d1ad # initialize rs1
slli x2, x26, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x0046e1fc # initialize rs1
slli x6, x27, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xea39ab86 # initialize rs1
slli x14, x28, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xe4d8d44c # initialize rs1
slli x19, x29, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x2f70fa3c # initialize rs1
slli x23, x30, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x5419fc3d # initialize rs1
slli x25, x31, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 124)

# Testcase cp_rd (Test destination rd = x0)
li x3, 0x4f421b4a # initialize rs1
slli x0, x3, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x20, 0x7a768bc4 # initialize rs1
slli x1, x20, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x3, 0xf653d623 # initialize rs1
slli x2, x3, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x7, 0x0aa126bc # initialize rs1
slli x3, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0xdfba84b9 # initialize rs1
slli x4, x15, 14 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x11, 0xf10996fd # initialize rs1
slli x5, x11, 13 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x12, 0x2f03a6d1 # initialize rs1
slli x6, x12, 6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x24, 0xaa2dbbc9 # initialize rs1
slli x7, x24, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x27, 0xb5bb5395 # initialize rs1
slli x8, x27, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x27, 0x94bb64f6 # initialize rs1
slli x9, x27, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x6, 0xe2b21a27 # initialize rs1
slli x10, x6, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x17, 0x449b118a # initialize rs1
slli x11, x17, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x24, 0xe11bc7b8 # initialize rs1
slli x12, x24, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x29, 0x562f78a3 # initialize rs1
slli x13, x29, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x16, 0x8eb72944 # initialize rs1
slli x14, x16, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x26, 0xba555040 # initialize rs1
slli x15, x26, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x22, 0xafeb2017 # initialize rs1
slli x16, x22, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x11, 0x2edd69d2 # initialize rs1
slli x17, x11, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x23, 0xdd8447c3 # initialize rs1
slli x18, x23, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x13, 0x3bfe830e # initialize rs1
slli x19, x13, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x21, 0x86502f42 # initialize rs1
slli x20, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x22, 0xf58a6fd7 # initialize rs1
slli x21, x22, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x29, 0x87e2ce60 # initialize rs1
slli x22, x29, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x3, 0x8050b78b # initialize rs1
slli x23, x3, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x13, 0x077d35a5 # initialize rs1
slli x24, x13, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x11, 0xa7658503 # initialize rs1
slli x25, x11, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x8, 0x775cc0ae # initialize rs1
slli x26, x8, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x20, 0x8057b818 # initialize rs1
slli x27, x20, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x24, 0xc465e507 # initialize rs1
slli x28, x24, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x21, 0x7b50456c # initialize rs1
slli x29, x21, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x23, 0x7a2afec9 # initialize rs1
slli x30, x23, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x2, 0x5c6da26c # initialize rs1
slli x31, x2, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x19, 0x00000000 # initialize rs1
slli x9, x19, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x2, 0x00000001 # initialize rs1
slli x6, x2, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x19, 0x00000002 # initialize rs1
slli x8, x19, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x7, 0x80000000 # initialize rs1
slli x23, x7, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x13, 0x80000001 # initialize rs1
slli x18, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x21, 0x7fffffff # initialize rs1
slli x30, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x15, 0x7ffffffe # initialize rs1
slli x29, x15, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x22, 0xffffffff # initialize rs1
slli x18, x22, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x3, 0xfffffffe # initialize rs1
slli x27, x3, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x25, 0x5bbc8872 # initialize rs1
slli x1, x25, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x11, 0xaaaaaaaa # initialize rs1
slli x3, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x19, 0x55555555 # initialize rs1
slli x16, x19, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x5c00ca18 # initialize rs1
slli x0, x0, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x286371af # initialize rs1
slli x1, x1, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xd1fd0e65 # initialize rs1
slli x2, x2, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x3aa87b13 # initialize rs1
slli x3, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xccb166ff # initialize rs1
slli x4, x4, 11 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xc77698b4 # initialize rs1
slli x5, x5, 18 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x92ddccda # initialize rs1
slli x6, x6, 28 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x6bdccc0a # initialize rs1
slli x7, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xc4443aae # initialize rs1
slli x8, x8, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xd74c4f5f # initialize rs1
slli x9, x9, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xc776f559 # initialize rs1
slli x10, x10, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x6c664836 # initialize rs1
slli x11, x11, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x850c4ed3 # initialize rs1
slli x12, x12, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb1113072 # initialize rs1
slli x13, x13, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x57d787d0 # initialize rs1
slli x14, x14, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x81f0f118 # initialize rs1
slli x15, x15, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xee94ed57 # initialize rs1
slli x16, x16, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x0be9e99e # initialize rs1
slli x17, x17, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x2a94a380 # initialize rs1
slli x18, x18, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xb5edd1fb # initialize rs1
slli x19, x19, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x588cd0e6 # initialize rs1
slli x20, x20, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x37a75a0c # initialize rs1
slli x21, x21, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 388)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x69329685 # initialize rs1
slli x22, x22, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x29065e07 # initialize rs1
slli x23, x23, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 396)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x94351950 # initialize rs1
slli x24, x24, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x85d2fa79 # initialize rs1
slli x25, x25, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 404)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x080e59b5 # initialize rs1
slli x26, x26, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0xb192f74d # initialize rs1
slli x27, x27, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 412)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xc378d575 # initialize rs1
slli x28, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x6b160422 # initialize rs1
slli x29, x29, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 420)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x5c4c5c50 # initialize rs1
slli x30, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x3a90e323 # initialize rs1
slli x31, x31, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 428)

# Testcase cp_uimm (Test bit = 0)
li x20, 0xc25747f7 # initialize rs1
slli x2, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 432)

# Testcase cp_uimm (Test bit = 1)
li x10, 0xa262927f # initialize rs1
slli x14, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 436)

# Testcase cp_uimm (Test bit = 2)
li x10, 0x2f98ddef # initialize rs1
slli x3, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 440)

# Testcase cp_uimm (Test bit = 3)
li x10, 0xcf79263e # initialize rs1
slli x5, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 444)

# Testcase cp_uimm (Test bit = 4)
li x9, 0xdd331fac # initialize rs1
slli x13, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 448)

# Testcase cp_uimm (Test bit = 5)
li x6, 0xe294ed19 # initialize rs1
slli x7, x6, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 452)

# Testcase cp_uimm (Test bit = 6)
li x5, 0xc400c535 # initialize rs1
slli x26, x5, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 456)

# Testcase cp_uimm (Test bit = 7)
li x27, 0xbce020b2 # initialize rs1
slli x22, x27, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 460)

# Testcase cp_uimm (Test bit = 8)
li x28, 0xa4902c8d # initialize rs1
slli x23, x28, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 464)

# Testcase cp_uimm (Test bit = 9)
li x1, 0xb2ab27de # initialize rs1
slli x31, x1, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 468)

# Testcase cp_uimm (Test bit = 10)
li x7, 0xd5828893 # initialize rs1
slli x19, x7, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 472)

# Testcase cp_uimm (Test bit = 11)
li x12, 0xeffa9f75 # initialize rs1
slli x13, x12, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 476)

# Testcase cp_uimm (Test bit = 12)
li x13, 0x84404148 # initialize rs1
slli x23, x13, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 480)

# Testcase cp_uimm (Test bit = 13)
li x20, 0x43db3b8f # initialize rs1
slli x15, x20, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 484)

# Testcase cp_uimm (Test bit = 14)
li x21, 0xf1792ce1 # initialize rs1
slli x31, x21, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 488)

# Testcase cp_uimm (Test bit = 15)
li x11, 0x74885e8a # initialize rs1
slli x20, x11, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 492)

# Testcase cp_uimm (Test bit = 16)
li x24, 0x87149587 # initialize rs1
slli x26, x24, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 496)

# Testcase cp_uimm (Test bit = 17)
li x28, 0xfde8e720 # initialize rs1
slli x13, x28, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 500)

# Testcase cp_uimm (Test bit = 18)
li x18, 0xbc8ef491 # initialize rs1
slli x17, x18, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 504)

# Testcase cp_uimm (Test bit = 19)
li x7, 0xda695938 # initialize rs1
slli x31, x7, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 508)

# Testcase cp_uimm (Test bit = 20)
li x12, 0xe4355808 # initialize rs1
slli x7, x12, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 512)

# Testcase cp_uimm (Test bit = 21)
li x27, 0x7d2c0962 # initialize rs1
slli x17, x27, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 516)

# Testcase cp_uimm (Test bit = 22)
li x1, 0x1f70831a # initialize rs1
slli x9, x1, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 520)

# Testcase cp_uimm (Test bit = 23)
li x10, 0xd2796a0a # initialize rs1
slli x22, x10, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 524)

# Testcase cp_uimm (Test bit = 24)
li x2, 0xc9954473 # initialize rs1
slli x21, x2, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 528)

# Testcase cp_uimm (Test bit = 25)
li x1, 0x864066da # initialize rs1
slli x31, x1, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 532)

# Testcase cp_uimm (Test bit = 26)
li x9, 0x117c34bb # initialize rs1
slli x5, x9, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 536)

# Testcase cp_uimm (Test bit = 27)
li x21, 0x37c88294 # initialize rs1
slli x17, x21, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 540)

# Testcase cp_uimm (Test bit = 28)
li x8, 0x50518dad # initialize rs1
slli x18, x8, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 544)

# Testcase cp_uimm (Test bit = 29)
li x25, 0xa5c78a5f # initialize rs1
slli x8, x25, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 548)

# Testcase cp_uimm (Test bit = 30)
li x29, 0x3c368a71 # initialize rs1
slli x13, x29, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 552)

# Testcase cp_uimm (Test bit = 31)
li x27, 0x411c047c # initialize rs1
slli x5, x27, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 556)

# Testcase cp_gpr/fpr_hazard nohaz test
add x12, x22, x19 # perform first operation
slli x25, x2, 25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x29, x19 # perform first operation
slli x15, x7, 7 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x14, x7 # perform first operation
slli x6, x23, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x5, x25, x31 # perform first operation
slli x31, x5, 4 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x12, x13 # perform first operation
slli x12, x29, 27 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x1, x25, x7 # perform first operation
slli x6, x7, 25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x18, x24, x31 # perform first operation
slli x18, x19, 24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x11, x8, x23 # perform first operation
slli x11, x25, 18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x9, x11, x12 # perform first operation
slli x9, x10, 0 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x28, x22, x2 # perform first operation
slli x22, x1, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x15, x6 # perform first operation
slli x6, x31, 22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x13, x29, x24 # perform first operation
slli x5, x12, 31 # perform second (triggering) operation

#.EQU SIGSIZE,560


// ******************
// Tests from: WALLY-COV-jalr.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
la x1, 1f # jump destination address
addi x1, x1, 1023 # add immediate to lower part of rs1
jalr x19, x1, -1023 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
la x2, 1f # jump destination address
addi x2, x2, -570 # add immediate to lower part of rs1
jalr x29, x2, 570 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
la x3, 1f # jump destination address
addi x3, x3, -164 # add immediate to lower part of rs1
jalr x2, x3, 164 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
la x4, 1f # jump destination address
addi x4, x4, 1888 # add immediate to lower part of rs1
jalr x18, x4, -1888 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
la x5, 1f # jump destination address
addi x5, x5, 278 # add immediate to lower part of rs1
jalr x18, x5, -278 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
la x6, 1f # jump destination address
addi x6, x6, 75 # add immediate to lower part of rs1
jalr x26, x6, -75 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
la x7, 1f # jump destination address
addi x7, x7, -1076 # add immediate to lower part of rs1
jalr x23, x7, 1076 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
la x8, 1f # jump destination address
addi x8, x8, 545 # add immediate to lower part of rs1
jalr x19, x8, -545 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
la x9, 1f # jump destination address
addi x9, x9, -1791 # add immediate to lower part of rs1
jalr x8, x9, 1791 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
la x10, 1f # jump destination address
addi x10, x10, -1969 # add immediate to lower part of rs1
jalr x25, x10, 1969 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
la x11, 1f # jump destination address
addi x11, x11, -273 # add immediate to lower part of rs1
jalr x25, x11, 273 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
la x12, 1f # jump destination address
addi x12, x12, -1854 # add immediate to lower part of rs1
jalr x20, x12, 1854 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
la x13, 1f # jump destination address
addi x13, x13, 1264 # add immediate to lower part of rs1
jalr x7, x13, -1264 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
la x14, 1f # jump destination address
addi x14, x14, -1976 # add immediate to lower part of rs1
jalr x29, x14, 1976 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
la x15, 1f # jump destination address
addi x15, x15, -1743 # add immediate to lower part of rs1
jalr x1, x15, 1743 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
la x16, 1f # jump destination address
addi x16, x16, 1522 # add immediate to lower part of rs1
jalr x8, x16, -1522 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
la x17, 1f # jump destination address
addi x17, x17, 459 # add immediate to lower part of rs1
jalr x6, x17, -459 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
la x18, 1f # jump destination address
addi x18, x18, 1608 # add immediate to lower part of rs1
jalr x30, x18, -1608 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
la x19, 1f # jump destination address
addi x19, x19, 1723 # add immediate to lower part of rs1
jalr x10, x19, -1723 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
la x20, 1f # jump destination address
addi x20, x20, -977 # add immediate to lower part of rs1
jalr x25, x20, 977 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
la x21, 1f # jump destination address
addi x21, x21, -1279 # add immediate to lower part of rs1
jalr x27, x21, 1279 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
la x22, 1f # jump destination address
addi x22, x22, 243 # add immediate to lower part of rs1
jalr x17, x22, -243 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
la x23, 1f # jump destination address
addi x23, x23, 1128 # add immediate to lower part of rs1
jalr x19, x23, -1128 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
la x24, 1f # jump destination address
addi x24, x24, 1807 # add immediate to lower part of rs1
jalr x31, x24, -1807 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
la x25, 1f # jump destination address
addi x25, x25, -402 # add immediate to lower part of rs1
jalr x11, x25, 402 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
la x26, 1f # jump destination address
addi x26, x26, -277 # add immediate to lower part of rs1
jalr x27, x26, 277 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
la x27, 1f # jump destination address
addi x27, x27, -1788 # add immediate to lower part of rs1
jalr x28, x27, 1788 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
la x28, 1f # jump destination address
addi x28, x28, -1381 # add immediate to lower part of rs1
jalr x8, x28, 1381 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
la x29, 1f # jump destination address
addi x29, x29, 1527 # add immediate to lower part of rs1
jalr x23, x29, -1527 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
la x30, 1f # jump destination address
addi x30, x30, -1173 # add immediate to lower part of rs1
jalr x11, x30, 1173 # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
la x31, 1f # jump destination address
addi x31, x31, -195 # add immediate to lower part of rs1
jalr x20, x31, 195 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x0)
la x1, 1f # jump destination address
addi x1, x1, 1150 # add immediate to lower part of rs1
jalr x0, x1, -1150 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x1)
la x29, 1f # jump destination address
addi x29, x29, 1017 # add immediate to lower part of rs1
jalr x1, x29, -1017 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x2)
la x8, 1f # jump destination address
addi x8, x8, 545 # add immediate to lower part of rs1
jalr x2, x8, -545 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x3)
la x31, 1f # jump destination address
addi x31, x31, 1128 # add immediate to lower part of rs1
jalr x3, x31, -1128 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
la x26, 1f # jump destination address
addi x26, x26, -941 # add immediate to lower part of rs1
jalr x4, x26, 941 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
la x3, 1f # jump destination address
addi x3, x3, -1368 # add immediate to lower part of rs1
jalr x5, x3, 1368 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
la x1, 1f # jump destination address
addi x1, x1, -543 # add immediate to lower part of rs1
jalr x6, x1, 543 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
la x3, 1f # jump destination address
addi x3, x3, 1898 # add immediate to lower part of rs1
jalr x7, x3, -1898 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x8)
la x23, 1f # jump destination address
addi x23, x23, -1196 # add immediate to lower part of rs1
jalr x8, x23, 1196 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x9)
la x22, 1f # jump destination address
addi x22, x22, 2022 # add immediate to lower part of rs1
jalr x9, x22, -2022 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x10)
la x30, 1f # jump destination address
addi x30, x30, 875 # add immediate to lower part of rs1
jalr x10, x30, -875 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x11)
la x27, 1f # jump destination address
addi x27, x27, -1627 # add immediate to lower part of rs1
jalr x11, x27, 1627 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x12)
la x13, 1f # jump destination address
addi x13, x13, 1173 # add immediate to lower part of rs1
jalr x12, x13, -1173 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x13)
la x26, 1f # jump destination address
addi x26, x26, -269 # add immediate to lower part of rs1
jalr x13, x26, 269 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x14)
la x17, 1f # jump destination address
addi x17, x17, -1615 # add immediate to lower part of rs1
jalr x14, x17, 1615 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x15)
la x3, 1f # jump destination address
addi x3, x3, 1949 # add immediate to lower part of rs1
jalr x15, x3, -1949 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x16)
la x30, 1f # jump destination address
addi x30, x30, -1734 # add immediate to lower part of rs1
jalr x16, x30, 1734 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x17)
la x21, 1f # jump destination address
addi x21, x21, 861 # add immediate to lower part of rs1
jalr x17, x21, -861 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x18)
la x28, 1f # jump destination address
addi x28, x28, -122 # add immediate to lower part of rs1
jalr x18, x28, 122 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x19)
la x3, 1f # jump destination address
addi x3, x3, -212 # add immediate to lower part of rs1
jalr x19, x3, 212 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x20)
la x13, 1f # jump destination address
addi x13, x13, 556 # add immediate to lower part of rs1
jalr x20, x13, -556 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x21)
la x22, 1f # jump destination address
addi x22, x22, -1809 # add immediate to lower part of rs1
jalr x21, x22, 1809 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x22)
la x25, 1f # jump destination address
addi x25, x25, 1643 # add immediate to lower part of rs1
jalr x22, x25, -1643 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x23)
la x26, 1f # jump destination address
addi x26, x26, -1578 # add immediate to lower part of rs1
jalr x23, x26, 1578 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x24)
la x30, 1f # jump destination address
addi x30, x30, -648 # add immediate to lower part of rs1
jalr x24, x30, 648 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x25)
la x14, 1f # jump destination address
addi x14, x14, -123 # add immediate to lower part of rs1
jalr x25, x14, 123 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x26)
la x9, 1f # jump destination address
addi x9, x9, 582 # add immediate to lower part of rs1
jalr x26, x9, -582 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x27)
la x6, 1f # jump destination address
addi x6, x6, -946 # add immediate to lower part of rs1
jalr x27, x6, 946 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x28)
la x8, 1f # jump destination address
addi x8, x8, 502 # add immediate to lower part of rs1
jalr x28, x8, -502 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x29)
la x3, 1f # jump destination address
addi x3, x3, 1738 # add immediate to lower part of rs1
jalr x29, x3, -1738 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x30)
la x22, 1f # jump destination address
addi x22, x22, 201 # add immediate to lower part of rs1
jalr x30, x22, -201 # perform operation
nop
nop
1:

# Testcase cp_rd (Test destination rd = x31)
la x1, 1f # jump destination address
addi x1, x1, -663 # add immediate to lower part of rs1
jalr x31, x1, 663 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
la x1, 1f # jump destination address
addi x1, x1, -1465 # add immediate to lower part of rs1
jalr x1, x1, 1465 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
la x2, 1f # jump destination address
addi x2, x2, -1184 # add immediate to lower part of rs1
jalr x2, x2, 1184 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
la x3, 1f # jump destination address
addi x3, x3, 423 # add immediate to lower part of rs1
jalr x3, x3, -423 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
la x4, 1f # jump destination address
addi x4, x4, -300 # add immediate to lower part of rs1
jalr x4, x4, 300 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
la x5, 1f # jump destination address
addi x5, x5, -1859 # add immediate to lower part of rs1
jalr x5, x5, 1859 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
la x6, 1f # jump destination address
addi x6, x6, -475 # add immediate to lower part of rs1
jalr x6, x6, 475 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
la x7, 1f # jump destination address
addi x7, x7, -1115 # add immediate to lower part of rs1
jalr x7, x7, 1115 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
la x8, 1f # jump destination address
addi x8, x8, 2015 # add immediate to lower part of rs1
jalr x8, x8, -2015 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
la x9, 1f # jump destination address
addi x9, x9, 159 # add immediate to lower part of rs1
jalr x9, x9, -159 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
la x10, 1f # jump destination address
addi x10, x10, 1055 # add immediate to lower part of rs1
jalr x10, x10, -1055 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
la x11, 1f # jump destination address
addi x11, x11, -127 # add immediate to lower part of rs1
jalr x11, x11, 127 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
la x12, 1f # jump destination address
addi x12, x12, -1241 # add immediate to lower part of rs1
jalr x12, x12, 1241 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
la x13, 1f # jump destination address
addi x13, x13, -266 # add immediate to lower part of rs1
jalr x13, x13, 266 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
la x14, 1f # jump destination address
addi x14, x14, 1986 # add immediate to lower part of rs1
jalr x14, x14, -1986 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
la x15, 1f # jump destination address
addi x15, x15, 892 # add immediate to lower part of rs1
jalr x15, x15, -892 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
la x16, 1f # jump destination address
addi x16, x16, 1789 # add immediate to lower part of rs1
jalr x16, x16, -1789 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
la x17, 1f # jump destination address
addi x17, x17, 21 # add immediate to lower part of rs1
jalr x17, x17, -21 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
la x18, 1f # jump destination address
addi x18, x18, -341 # add immediate to lower part of rs1
jalr x18, x18, 341 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
la x19, 1f # jump destination address
addi x19, x19, 1140 # add immediate to lower part of rs1
jalr x19, x19, -1140 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
la x20, 1f # jump destination address
addi x20, x20, -274 # add immediate to lower part of rs1
jalr x20, x20, 274 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
la x21, 1f # jump destination address
addi x21, x21, 1101 # add immediate to lower part of rs1
jalr x21, x21, -1101 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
la x22, 1f # jump destination address
addi x22, x22, 1818 # add immediate to lower part of rs1
jalr x22, x22, -1818 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
la x23, 1f # jump destination address
addi x23, x23, 1626 # add immediate to lower part of rs1
jalr x23, x23, -1626 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
la x24, 1f # jump destination address
addi x24, x24, 562 # add immediate to lower part of rs1
jalr x24, x24, -562 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
la x25, 1f # jump destination address
addi x25, x25, 1078 # add immediate to lower part of rs1
jalr x25, x25, -1078 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
la x26, 1f # jump destination address
addi x26, x26, 1960 # add immediate to lower part of rs1
jalr x26, x26, -1960 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
la x27, 1f # jump destination address
addi x27, x27, -518 # add immediate to lower part of rs1
jalr x27, x27, 518 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
la x28, 1f # jump destination address
addi x28, x28, 1255 # add immediate to lower part of rs1
jalr x28, x28, -1255 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
la x29, 1f # jump destination address
addi x29, x29, -134 # add immediate to lower part of rs1
jalr x29, x29, 134 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
la x30, 1f # jump destination address
addi x30, x30, 680 # add immediate to lower part of rs1
jalr x30, x30, -680 # perform operation
nop
nop
1:

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
la x31, 1f # jump destination address
addi x31, x31, 506 # add immediate to lower part of rs1
jalr x31, x31, -506 # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward jalr target: jump past backward jalr
2: la x1, 1b # backward jalr target
jalr x1 # backward jalr
3: nop # done with sequence

# Testcase cp_offset_lsbs
la x3, jalrlsb1 # load address of label
jalr x1, x3, 1 # jump to label + 1, extra plus 1 should be discarded
nop # something to skip over
jalrlsb1: 
la x3, jalrlsb2 # load address of label
addi x3, x3, 3 # add 3 to address
jalr x1, x3, -2 # jump to label + 1, extra plus 1 should be discarded
nop # something to skip over
jalrlsb2: 

# Testcase cp_imm_corners jalr 1 bin
la x7, 1f
addi x7, x7, -1 # sub immediate from rs1 to counter offset
jalr x13, x7, 1 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 2 bin
la x5, 1f
addi x5, x5, -2 # sub immediate from rs1 to counter offset
jalr x13, x5, 2 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 3 bin
la x20, 1f
addi x20, x20, -3 # sub immediate from rs1 to counter offset
jalr x21, x20, 3 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 4 bin
la x12, 1f
addi x12, x12, -4 # sub immediate from rs1 to counter offset
jalr x22, x12, 4 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 8 bin
la x26, 1f
addi x26, x26, -8 # sub immediate from rs1 to counter offset
jalr x29, x26, 8 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 16 bin
la x23, 1f
addi x23, x23, -16 # sub immediate from rs1 to counter offset
jalr x27, x23, 16 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 32 bin
la x14, 1f
addi x14, x14, -32 # sub immediate from rs1 to counter offset
jalr x1, x14, 32 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 64 bin
la x30, 1f
addi x30, x30, -64 # sub immediate from rs1 to counter offset
jalr x9, x30, 64 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 128 bin
la x6, 1f
addi x6, x6, -128 # sub immediate from rs1 to counter offset
jalr x29, x6, 128 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 256 bin
la x6, 1f
addi x6, x6, -256 # sub immediate from rs1 to counter offset
jalr x2, x6, 256 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 512 bin
la x26, 1f
addi x26, x26, -512 # sub immediate from rs1 to counter offset
jalr x31, x26, 512 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1023 bin
la x12, 1f
addi x12, x12, -1023 # sub immediate from rs1 to counter offset
jalr x24, x12, 1023 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1024 bin
la x5, 1f
addi x5, x5, -1024 # sub immediate from rs1 to counter offset
jalr x21, x5, 1024 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 1795 bin
la x9, 1f
addi x9, x9, -1795 # sub immediate from rs1 to counter offset
jalr x31, x9, 1795 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr 2047 bin
la x2, 1f
addi x2, x2, -2047 # sub immediate from rs1 to counter offset
jalr x27, x2, 2047 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2048 bin
la x7, 1f
addi x7, x7, 2047 # increment rs1 by 2047 
addi x7, x7, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
jalr x12, x7, -2048 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2047 bin
la x11, 1f
addi x11, x11, 2047 # sub immediate from rs1 to counter offset
jalr x10, x11, -2047 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -2 bin
la x3, 1f
addi x3, x3, 2 # sub immediate from rs1 to counter offset
jalr x19, x3, -2 # jump to assigned address to stress immediate
1:

# Testcase cp_imm_corners jalr -1 bin
la x25, 1f
addi x25, x25, 1 # sub immediate from rs1 to counter offset
jalr x13, x25, -1 # jump to assigned address to stress immediate
1:

# Testcase cp_gpr/fpr_hazard nohaz test
la x19, arbitraryLabel46
add x13, x12, x17 # perform first operation
jalr x14, x19, 0 # perform second (triggering) operation
arbitraryLabel46:
nop

# Testcase cp_gpr/fpr_hazard nohaz test
la x23, arbitraryLabel47
add x8, x1, x17 # perform first operation
jalr x10, x23, 0 # perform second (triggering) operation
arbitraryLabel47:
nop

# Testcase cp_gpr/fpr_hazard nohaz test
la x20, arbitraryLabel48
add x11, x29, x17 # perform first operation
jalr x10, x20, 0 # perform second (triggering) operation
arbitraryLabel48:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x27, x9, x21 # perform first operation
la x16, arbitraryLabel49
jalr x21, x16, 0 # perform second (triggering) operation
arbitraryLabel49:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x14, x31, x18 # perform first operation
la x17, arbitraryLabel50
jalr x18, x17, 0 # perform second (triggering) operation
arbitraryLabel50:
nop

# Testcase cp_gpr/fpr_hazard raw test
add x14, x18, x11 # perform first operation
la x5, arbitraryLabel51
jalr x14, x5, 0 # perform second (triggering) operation
arbitraryLabel51:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x18, arbitraryLabel52
add x21, x9, x17 # perform first operation
jalr x21, x18, 0 # perform second (triggering) operation
arbitraryLabel52:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x1, arbitraryLabel53
add x25, x14, x22 # perform first operation
jalr x25, x1, 0 # perform second (triggering) operation
arbitraryLabel53:
nop

# Testcase cp_gpr/fpr_hazard waw test
la x14, arbitraryLabel54
add x8, x28, x11 # perform first operation
jalr x8, x14, 0 # perform second (triggering) operation
arbitraryLabel54:
nop

# Testcase cp_gpr/fpr_hazard war test
la x21, arbitraryLabel55
add x26, x23, x8 # perform first operation
jalr x23, x21, 0 # perform second (triggering) operation
arbitraryLabel55:
nop

# Testcase cp_gpr/fpr_hazard war test
la x6, arbitraryLabel56
add x25, x9, x17 # perform first operation
jalr x17, x6, 0 # perform second (triggering) operation
arbitraryLabel56:
nop

# Testcase cp_gpr/fpr_hazard war test
la x6, arbitraryLabel57
add x29, x1, x30 # perform first operation
jalr x13, x6, 0 # perform second (triggering) operation
arbitraryLabel57:
nop

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lw.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x3, 0xdbc26fde # initialize rs2
la x1, scratch # base address 
addi x1, x1, 737 # sub immediate from rs1 to counter offset
sw x3, -737 (x1) # store value to put something in memory
lw x14, -737(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x20, 0x565e2007 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 330 # sub immediate from rs1 to counter offset
sw x20, -330 (x2) # store value to put something in memory
lw x29, -330(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 4)

# Testcase cp_rs1 (Test source rs1 = x3)
li x24, 0x55c26a7c # initialize rs2
la x3, scratch # base address 
addi x3, x3, 2008 # sub immediate from rs1 to counter offset
sw x24, -2008 (x3) # store value to put something in memory
lw x6, -2008(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 8)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x16, 0x828a50c0 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -370 # sub immediate from rs1 to counter offset
sw x16, 370 (x4) # store value to put something in memory
lw x15, 370(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 12)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x17, 0xd29363e5 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1427 # sub immediate from rs1 to counter offset
sw x17, 1427 (x5) # store value to put something in memory
lw x31, 1427(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x31, 16)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0x20043fe3 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -70 # sub immediate from rs1 to counter offset
sw x8, 70 (x6) # store value to put something in memory
lw x29, 70(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x29, 20)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x13, 0x4ac120bc # initialize rs2
la x7, scratch # base address 
addi x7, x7, 1891 # sub immediate from rs1 to counter offset
sw x13, -1891 (x7) # store value to put something in memory
lw x30, -1891(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 24)

# Testcase cp_rs1 (Test source rs1 = x8)
li x22, 0xe28adb75 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 342 # sub immediate from rs1 to counter offset
sw x22, -342 (x8) # store value to put something in memory
lw x9, -342(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 28)

# Testcase cp_rs1 (Test source rs1 = x9)
li x29, 0x8d9667bb # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1382 # sub immediate from rs1 to counter offset
sw x29, 1382 (x9) # store value to put something in memory
lw x7, 1382(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 32)

# Testcase cp_rs1 (Test source rs1 = x10)
li x14, 0xc779c747 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1084 # sub immediate from rs1 to counter offset
sw x14, -1084 (x10) # store value to put something in memory
lw x25, -1084(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 36)

# Testcase cp_rs1 (Test source rs1 = x11)
li x27, 0xe75d9e52 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1991 # sub immediate from rs1 to counter offset
sw x27, -1991 (x11) # store value to put something in memory
lw x1, -1991(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 40)

# Testcase cp_rs1 (Test source rs1 = x12)
li x31, 0x538657fa # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1679 # sub immediate from rs1 to counter offset
sw x31, -1679 (x12) # store value to put something in memory
lw x20, -1679(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 44)

# Testcase cp_rs1 (Test source rs1 = x13)
li x28, 0xa7b262cb # initialize rs2
la x13, scratch # base address 
addi x13, x13, 578 # sub immediate from rs1 to counter offset
sw x28, -578 (x13) # store value to put something in memory
lw x5, -578(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 48)

# Testcase cp_rs1 (Test source rs1 = x14)
li x23, 0xb565da74 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1441 # sub immediate from rs1 to counter offset
sw x23, 1441 (x14) # store value to put something in memory
lw x30, 1441(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 52)

# Testcase cp_rs1 (Test source rs1 = x15)
li x3, 0xc9b95c77 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -883 # sub immediate from rs1 to counter offset
sw x3, 883 (x15) # store value to put something in memory
lw x14, 883(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 56)

# Testcase cp_rs1 (Test source rs1 = x16)
li x20, 0x6cbf966f # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1604 # sub immediate from rs1 to counter offset
sw x20, -1604 (x16) # store value to put something in memory
lw x30, -1604(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 60)

# Testcase cp_rs1 (Test source rs1 = x17)
li x20, 0xfdf21e85 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1406 # sub immediate from rs1 to counter offset
sw x20, -1406 (x17) # store value to put something in memory
lw x23, -1406(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 64)

# Testcase cp_rs1 (Test source rs1 = x18)
li x13, 0x09a2e7be # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1409 # sub immediate from rs1 to counter offset
sw x13, 1409 (x18) # store value to put something in memory
lw x29, 1409(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 68)

# Testcase cp_rs1 (Test source rs1 = x19)
li x10, 0xe3082322 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 477 # sub immediate from rs1 to counter offset
sw x10, -477 (x19) # store value to put something in memory
lw x9, -477(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 72)

# Testcase cp_rs1 (Test source rs1 = x20)
li x29, 0xab830141 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -301 # sub immediate from rs1 to counter offset
sw x29, 301 (x20) # store value to put something in memory
lw x9, 301(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 76)

# Testcase cp_rs1 (Test source rs1 = x21)
li x6, 0x1e9327bb # initialize rs2
la x21, scratch # base address 
addi x21, x21, -527 # sub immediate from rs1 to counter offset
sw x6, 527 (x21) # store value to put something in memory
lw x14, 527(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 80)

# Testcase cp_rs1 (Test source rs1 = x22)
li x17, 0x300e4f2e # initialize rs2
la x22, scratch # base address 
addi x22, x22, 329 # sub immediate from rs1 to counter offset
sw x17, -329 (x22) # store value to put something in memory
lw x26, -329(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 84)

# Testcase cp_rs1 (Test source rs1 = x23)
li x1, 0x1a7c6ea9 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 269 # sub immediate from rs1 to counter offset
sw x1, -269 (x23) # store value to put something in memory
lw x24, -269(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 88)

# Testcase cp_rs1 (Test source rs1 = x24)
li x16, 0xbe311feb # initialize rs2
la x24, scratch # base address 
addi x24, x24, 1829 # sub immediate from rs1 to counter offset
sw x16, -1829 (x24) # store value to put something in memory
lw x9, -1829(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 92)

# Testcase cp_rs1 (Test source rs1 = x25)
li x16, 0x04b98e8c # initialize rs2
la x25, scratch # base address 
addi x25, x25, 303 # sub immediate from rs1 to counter offset
sw x16, -303 (x25) # store value to put something in memory
lw x3, -303(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 96)

# Testcase cp_rs1 (Test source rs1 = x26)
li x16, 0xdaab216c # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1267 # sub immediate from rs1 to counter offset
sw x16, 1267 (x26) # store value to put something in memory
lw x6, 1267(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 100)

# Testcase cp_rs1 (Test source rs1 = x27)
li x22, 0x91f52137 # initialize rs2
la x27, scratch # base address 
addi x27, x27, 44 # sub immediate from rs1 to counter offset
sw x22, -44 (x27) # store value to put something in memory
lw x25, -44(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 104)

# Testcase cp_rs1 (Test source rs1 = x28)
li x22, 0x3a32e5eb # initialize rs2
la x28, scratch # base address 
addi x28, x28, 859 # sub immediate from rs1 to counter offset
sw x22, -859 (x28) # store value to put something in memory
lw x12, -859(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 108)

# Testcase cp_rs1 (Test source rs1 = x29)
li x17, 0xa4828f34 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 368 # sub immediate from rs1 to counter offset
sw x17, -368 (x29) # store value to put something in memory
lw x25, -368(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 112)

# Testcase cp_rs1 (Test source rs1 = x30)
li x11, 0x49f95d14 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -758 # sub immediate from rs1 to counter offset
sw x11, 758 (x30) # store value to put something in memory
lw x2, 758(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 116)

# Testcase cp_rs1 (Test source rs1 = x31)
li x13, 0xe80c5c91 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -2003 # sub immediate from rs1 to counter offset
sw x13, 2003 (x31) # store value to put something in memory
lw x17, 2003(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 120)

# Testcase cp_rd (Test destination rd = x0)
li x15, 0x79976897 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1785 # sub immediate from rs1 to counter offset
sw x15, -1785 (x1) # store value to put something in memory
lw x0, -1785(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 124)

# Testcase cp_rd (Test destination rd = x1)
li x10, 0xa945d9cb # initialize rs2
la x3, scratch # base address 
addi x3, x3, -264 # sub immediate from rs1 to counter offset
sw x10, 264 (x3) # store value to put something in memory
lw x1, 264(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rd (Test destination rd = x2)
li x19, 0xc29abbba # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1164 # sub immediate from rs1 to counter offset
sw x19, 1164 (x27) # store value to put something in memory
lw x2, 1164(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 132)

# Testcase cp_rd (Test destination rd = x3)
li x6, 0x04643f5a # initialize rs2
la x26, scratch # base address 
addi x26, x26, -962 # sub immediate from rs1 to counter offset
sw x6, 962 (x26) # store value to put something in memory
lw x3, 962(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x20, 0xda51303a # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1902 # sub immediate from rs1 to counter offset
sw x20, 1902 (x13) # store value to put something in memory
lw x4, 1902(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 140)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x18, 0x0adf5b85 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -105 # sub immediate from rs1 to counter offset
sw x18, 105 (x9) # store value to put something in memory
lw x5, 105(x9) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x8, 0xc2282022 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -163 # sub immediate from rs1 to counter offset
sw x8, 163 (x4) # store value to put something in memory
lw x6, 163(x4) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 148)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x3, 0x8b702071 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1733 # sub immediate from rs1 to counter offset
sw x3, -1733 (x12) # store value to put something in memory
lw x7, -1733(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rd (Test destination rd = x8)
li x2, 0x60fc1be6 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 798 # sub immediate from rs1 to counter offset
sw x2, -798 (x21) # store value to put something in memory
lw x8, -798(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rd (Test destination rd = x9)
li x31, 0x5242c0bb # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1516 # sub immediate from rs1 to counter offset
sw x31, -1516 (x28) # store value to put something in memory
lw x9, -1516(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rd (Test destination rd = x10)
li x29, 0x385b73a7 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1808 # sub immediate from rs1 to counter offset
sw x29, -1808 (x8) # store value to put something in memory
lw x10, -1808(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 164)

# Testcase cp_rd (Test destination rd = x11)
li x28, 0x3a0bbdfd # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1530 # sub immediate from rs1 to counter offset
sw x28, -1530 (x23) # store value to put something in memory
lw x11, -1530(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rd (Test destination rd = x12)
li x23, 0xd4844208 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -79 # sub immediate from rs1 to counter offset
sw x23, 79 (x18) # store value to put something in memory
lw x12, 79(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rd (Test destination rd = x13)
li x12, 0x1ae30e51 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1520 # sub immediate from rs1 to counter offset
sw x12, -1520 (x28) # store value to put something in memory
lw x13, -1520(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rd (Test destination rd = x14)
li x1, 0xa4e514a7 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -2018 # sub immediate from rs1 to counter offset
sw x1, 2018 (x20) # store value to put something in memory
lw x14, 2018(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rd (Test destination rd = x15)
li x19, 0xe130457f # initialize rs2
la x12, scratch # base address 
addi x12, x12, 1772 # sub immediate from rs1 to counter offset
sw x19, -1772 (x12) # store value to put something in memory
lw x15, -1772(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rd (Test destination rd = x16)
li x2, 0x71d3dc03 # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1542 # sub immediate from rs1 to counter offset
sw x2, 1542 (x3) # store value to put something in memory
lw x16, 1542(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 188)

# Testcase cp_rd (Test destination rd = x17)
li x2, 0x5d88a967 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -989 # sub immediate from rs1 to counter offset
sw x2, 989 (x21) # store value to put something in memory
lw x17, 989(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rd (Test destination rd = x18)
li x31, 0xac068eb8 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1446 # sub immediate from rs1 to counter offset
sw x31, -1446 (x9) # store value to put something in memory
lw x18, -1446(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 196)

# Testcase cp_rd (Test destination rd = x19)
li x22, 0xa11197e1 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1043 # sub immediate from rs1 to counter offset
sw x22, 1043 (x18) # store value to put something in memory
lw x19, 1043(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cp_rd (Test destination rd = x20)
li x25, 0x2f5140a2 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -306 # sub immediate from rs1 to counter offset
sw x25, 306 (x15) # store value to put something in memory
lw x20, 306(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 204)

# Testcase cp_rd (Test destination rd = x21)
li x15, 0xdcba6a40 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1525 # sub immediate from rs1 to counter offset
sw x15, -1525 (x6) # store value to put something in memory
lw x21, -1525(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rd (Test destination rd = x22)
li x30, 0x5218065c # initialize rs2
la x9, scratch # base address 
addi x9, x9, 24 # sub immediate from rs1 to counter offset
sw x30, -24 (x9) # store value to put something in memory
lw x22, -24(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_rd (Test destination rd = x23)
li x28, 0x7e1afbea # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1929 # sub immediate from rs1 to counter offset
sw x28, -1929 (x6) # store value to put something in memory
lw x23, -1929(x6) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rd (Test destination rd = x24)
li x16, 0x402adf32 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 665 # sub immediate from rs1 to counter offset
sw x16, -665 (x3) # store value to put something in memory
lw x24, -665(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 220)

# Testcase cp_rd (Test destination rd = x25)
li x13, 0x0cbbe31b # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1128 # sub immediate from rs1 to counter offset
sw x13, 1128 (x21) # store value to put something in memory
lw x25, 1128(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cp_rd (Test destination rd = x26)
li x22, 0xe561ca9d # initialize rs2
la x19, scratch # base address 
addi x19, x19, 761 # sub immediate from rs1 to counter offset
sw x22, -761 (x19) # store value to put something in memory
lw x26, -761(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 228)

# Testcase cp_rd (Test destination rd = x27)
li x11, 0xebb1d48d # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1299 # sub immediate from rs1 to counter offset
sw x11, -1299 (x10) # store value to put something in memory
lw x27, -1299(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rd (Test destination rd = x28)
li x27, 0x10423aa5 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -162 # sub immediate from rs1 to counter offset
sw x27, 162 (x11) # store value to put something in memory
lw x28, 162(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rd (Test destination rd = x29)
li x18, 0x15735ae0 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 1633 # sub immediate from rs1 to counter offset
sw x18, -1633 (x11) # store value to put something in memory
lw x29, -1633(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rd (Test destination rd = x30)
li x26, 0x0d2b41c9 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -151 # sub immediate from rs1 to counter offset
sw x26, 151 (x17) # store value to put something in memory
lw x30, 151(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rd (Test destination rd = x31)
li x28, 0x0a927658 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -614 # sub immediate from rs1 to counter offset
sw x28, 614 (x14) # store value to put something in memory
lw x31, 614(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x26, 0xe445537b # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1260 # sub immediate from rs1 to counter offset
sw x26, -1260 (x1) # store value to put something in memory
lw x1, -1260(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x1, 0x9f1d59e7 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1332 # sub immediate from rs1 to counter offset
sw x1, 1332 (x2) # store value to put something in memory
lw x2, 1332(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x31, 0xfcc02309 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 667 # sub immediate from rs1 to counter offset
sw x31, -667 (x3) # store value to put something in memory
lw x3, -667(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x22, 0x9dd29aa0 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -327 # sub immediate from rs1 to counter offset
sw x22, 327 (x4) # store value to put something in memory
lw x4, 327(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0xbd0a103d # initialize rs2
la x5, scratch # base address 
addi x5, x5, -924 # sub immediate from rs1 to counter offset
sw x22, 924 (x5) # store value to put something in memory
lw x5, 924(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x13, 0xe2a06c3e # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1147 # sub immediate from rs1 to counter offset
sw x13, 1147 (x6) # store value to put something in memory
lw x6, 1147(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x4, 0x6e7d38f3 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1929 # sub immediate from rs1 to counter offset
sw x4, 1929 (x7) # store value to put something in memory
lw x7, 1929(x7) # perform operation
RVTEST_SIGUPD(x5, x0, x7, 276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x4, 0xa2dd466c # initialize rs2
la x8, scratch # base address 
addi x8, x8, -656 # sub immediate from rs1 to counter offset
sw x4, 656 (x8) # store value to put something in memory
lw x8, 656(x8) # perform operation
RVTEST_SIGUPD(x5, x0, x8, 280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x15, 0xe81dfca9 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -814 # sub immediate from rs1 to counter offset
sw x15, 814 (x9) # store value to put something in memory
lw x9, 814(x9) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x28, 0x80e25653 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1810 # sub immediate from rs1 to counter offset
sw x28, 1810 (x10) # store value to put something in memory
lw x10, 1810(x10) # perform operation
RVTEST_SIGUPD(x5, x0, x10, 288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x31, 0x47108b2f # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1997 # sub immediate from rs1 to counter offset
sw x31, 1997 (x11) # store value to put something in memory
lw x11, 1997(x11) # perform operation
RVTEST_SIGUPD(x5, x0, x11, 292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x8, 0x9c724a18 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 678 # sub immediate from rs1 to counter offset
sw x8, -678 (x12) # store value to put something in memory
lw x12, -678(x12) # perform operation
RVTEST_SIGUPD(x5, x0, x12, 296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x20, 0xe4965f57 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 1077 # sub immediate from rs1 to counter offset
sw x20, -1077 (x13) # store value to put something in memory
lw x13, -1077(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x13, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x16, 0x2ca998eb # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1420 # sub immediate from rs1 to counter offset
sw x16, 1420 (x14) # store value to put something in memory
lw x14, 1420(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x14, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x8, 0x800bddb7 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -321 # sub immediate from rs1 to counter offset
sw x8, 321 (x15) # store value to put something in memory
lw x15, 321(x15) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x10, 0x20004edd # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1976 # sub immediate from rs1 to counter offset
sw x10, -1976 (x16) # store value to put something in memory
lw x16, -1976(x16) # perform operation
RVTEST_SIGUPD(x5, x0, x16, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x4, 0x36e6a364 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1034 # sub immediate from rs1 to counter offset
sw x4, -1034 (x17) # store value to put something in memory
lw x17, -1034(x17) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x27, 0xc2ed9f33 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -2039 # sub immediate from rs1 to counter offset
sw x27, 2039 (x18) # store value to put something in memory
lw x18, 2039(x18) # perform operation
RVTEST_SIGUPD(x5, x0, x18, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x24, 0x9e3911b6 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 375 # sub immediate from rs1 to counter offset
sw x24, -375 (x19) # store value to put something in memory
lw x19, -375(x19) # perform operation
RVTEST_SIGUPD(x5, x0, x19, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x28, 0x8d01ba52 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -293 # sub immediate from rs1 to counter offset
sw x28, 293 (x20) # store value to put something in memory
lw x20, 293(x20) # perform operation
RVTEST_SIGUPD(x5, x0, x20, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x3, 0xaaf6f498 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 457 # sub immediate from rs1 to counter offset
sw x3, -457 (x21) # store value to put something in memory
lw x21, -457(x21) # perform operation
RVTEST_SIGUPD(x5, x0, x21, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x7, 0x1378083f # initialize rs2
la x22, scratch # base address 
addi x22, x22, -352 # sub immediate from rs1 to counter offset
sw x7, 352 (x22) # store value to put something in memory
lw x22, 352(x22) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x8, 0x9cf69374 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1001 # sub immediate from rs1 to counter offset
sw x8, -1001 (x23) # store value to put something in memory
lw x23, -1001(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x23, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x8, 0xe0e6b6f0 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -903 # sub immediate from rs1 to counter offset
sw x8, 903 (x24) # store value to put something in memory
lw x24, 903(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x24, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x12, 0xe8f840f6 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 127 # sub immediate from rs1 to counter offset
sw x12, -127 (x25) # store value to put something in memory
lw x25, -127(x25) # perform operation
RVTEST_SIGUPD(x5, x0, x25, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x21, 0xc9d17e84 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 476 # sub immediate from rs1 to counter offset
sw x21, -476 (x26) # store value to put something in memory
lw x26, -476(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x12, 0x0cf0740a # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1183 # sub immediate from rs1 to counter offset
sw x12, 1183 (x27) # store value to put something in memory
lw x27, 1183(x27) # perform operation
RVTEST_SIGUPD(x5, x0, x27, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x6, 0x05057358 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 895 # sub immediate from rs1 to counter offset
sw x6, -895 (x28) # store value to put something in memory
lw x28, -895(x28) # perform operation
RVTEST_SIGUPD(x5, x0, x28, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x24, 0x078f3379 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -175 # sub immediate from rs1 to counter offset
sw x24, 175 (x29) # store value to put something in memory
lw x29, 175(x29) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x23, 0xce21bae7 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -611 # sub immediate from rs1 to counter offset
sw x23, 611 (x30) # store value to put something in memory
lw x30, 611(x30) # perform operation
RVTEST_SIGUPD(x5, x0, x30, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x27, 0x22f841c8 # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1535 # sub immediate from rs1 to counter offset
sw x27, 1535 (x31) # store value to put something in memory
lw x31, 1535(x31) # perform operation
RVTEST_SIGUPD(x5, x0, x31, 372)

# Testcase cp_imm_corners
li x28, 0xef25c7b1 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 0 # sub immediate from rs1 to counter offset
sw x28, 0 (x31) # store value to put something in memory
lw x19, 0(x31) # perform operation
RVTEST_SIGUPD(x5, x0, x19, 376)

# Testcase cp_imm_corners
li x28, 0xd81c74d4 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1 # sub immediate from rs1 to counter offset
sw x28, 1 (x16) # store value to put something in memory
lw x15, 1(x16) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 380)

# Testcase cp_imm_corners
li x27, 0x6473144e # initialize rs2
la x26, scratch # base address 
addi x26, x26, -2 # sub immediate from rs1 to counter offset
sw x27, 2 (x26) # store value to put something in memory
lw x16, 2(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x16, 384)

# Testcase cp_imm_corners
li x27, 0x61cff3b5 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -3 # sub immediate from rs1 to counter offset
sw x27, 3 (x19) # store value to put something in memory
lw x26, 3(x19) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 388)

# Testcase cp_imm_corners
li x27, 0x96dc8883 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -4 # sub immediate from rs1 to counter offset
sw x27, 4 (x13) # store value to put something in memory
lw x3, 4(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x3, 392)

# Testcase cp_imm_corners
li x19, 0xf3d8d416 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -8 # sub immediate from rs1 to counter offset
sw x19, 8 (x6) # store value to put something in memory
lw x13, 8(x6) # perform operation
RVTEST_SIGUPD(x5, x0, x13, 396)

# Testcase cp_imm_corners
li x25, 0x8c101e44 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -16 # sub immediate from rs1 to counter offset
sw x25, 16 (x14) # store value to put something in memory
lw x21, 16(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x21, 400)

# Testcase cp_imm_corners
li x30, 0x6e8449ff # initialize rs2
la x23, scratch # base address 
addi x23, x23, -32 # sub immediate from rs1 to counter offset
sw x30, 32 (x23) # store value to put something in memory
lw x17, 32(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 404)

# Testcase cp_imm_corners
li x22, 0xd428550b # initialize rs2
la x13, scratch # base address 
addi x13, x13, -64 # sub immediate from rs1 to counter offset
sw x22, 64 (x13) # store value to put something in memory
lw x11, 64(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x11, 408)

# Testcase cp_imm_corners
li x24, 0x21b34b73 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -128 # sub immediate from rs1 to counter offset
sw x24, 128 (x30) # store value to put something in memory
lw x9, 128(x30) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 412)

# Testcase cp_imm_corners
li x3, 0x06f00486 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -256 # sub immediate from rs1 to counter offset
sw x3, 256 (x20) # store value to put something in memory
lw x22, 256(x20) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 416)

# Testcase cp_imm_corners
li x6, 0x62706e8f # initialize rs2
la x10, scratch # base address 
addi x10, x10, -512 # sub immediate from rs1 to counter offset
sw x6, 512 (x10) # store value to put something in memory
lw x4, 512(x10) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 420)

# Testcase cp_imm_corners
li x9, 0xaf97290b # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1023 # sub immediate from rs1 to counter offset
sw x9, 1023 (x23) # store value to put something in memory
lw x6, 1023(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x6, 424)

# Testcase cp_imm_corners
li x8, 0x7b1c2d1d # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1024 # sub immediate from rs1 to counter offset
sw x8, 1024 (x23) # store value to put something in memory
lw x10, 1024(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x10, 428)

# Testcase cp_imm_corners
li x11, 0x3a911027 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1795 # sub immediate from rs1 to counter offset
sw x11, 1795 (x26) # store value to put something in memory
lw x30, 1795(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x30, 432)

# Testcase cp_imm_corners
li x9, 0x20692ac8 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -2047 # sub immediate from rs1 to counter offset
sw x9, 2047 (x29) # store value to put something in memory
lw x17, 2047(x29) # perform operation
RVTEST_SIGUPD(x5, x0, x17, 436)

# Testcase cp_imm_corners
li x29, 0xa05db335 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 2047 # increment rs1 by 2047 
addi x4, x4, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x29, -2048 (x4) # store value to put something in memory
lw x6, -2048(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x6, 440)

# Testcase cp_imm_corners
li x27, 0x7d6be4b6 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 2047 # sub immediate from rs1 to counter offset
sw x27, -2047 (x10) # store value to put something in memory
lw x24, -2047(x10) # perform operation
RVTEST_SIGUPD(x5, x0, x24, 444)

# Testcase cp_imm_corners
li x18, 0xfd512714 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 2 # sub immediate from rs1 to counter offset
sw x18, -2 (x30) # store value to put something in memory
lw x27, -2(x30) # perform operation
RVTEST_SIGUPD(x5, x0, x27, 448)

# Testcase cp_imm_corners
li x12, 0x8aa15840 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1 # sub immediate from rs1 to counter offset
sw x12, -1 (x29) # store value to put something in memory
lw x1, -1(x29) # perform operation
RVTEST_SIGUPD(x5, x0, x1, 452)

# Testcase cp_gpr/fpr_hazard nohaz test
la x3, scratch
addi x3, x3, -1426
add x29, x1, x11 # perform first operation
lw x8, 1426(x3) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x19, scratch
addi x19, x19, -729
add x8, x29, x15 # perform first operation
lw x16, 729(x19) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x20, scratch
addi x20, x20, 742
add x8, x9, x31 # perform first operation
lw x28, -742(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x31, scratch
addi x31, x31, -1163
add x31, x31, x0 # perform first operation
lw x26, 1163(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x15, scratch
addi x15, x15, -192
add x15, x15, x0 # perform first operation
lw x4, 192(x15) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x29, scratch
addi x29, x29, -1480
add x29, x29, x0 # perform first operation
lw x28, 1480(x29) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x26, scratch
addi x26, x26, -292
add x25, x3, x1 # perform first operation
lw x25, 292(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x11, scratch
addi x11, x11, 916
add x2, x16, x22 # perform first operation
lw x2, -916(x11) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x22, scratch
addi x22, x22, -954
add x8, x1, x17 # perform first operation
lw x8, 954(x22) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x16, scratch
addi x16, x16, 818
add x22, x19, x18 # perform first operation
lw x19, -818(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x18, scratch
addi x18, x18, 1162
add x12, x16, x11 # perform first operation
lw x11, -1162(x18) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x19, scratch
addi x19, x19, 457
add x21, x29, x17 # perform first operation
lw x10, -457(x19) # perform second (triggering) operation

#.EQU SIGSIZE,456


// ******************
// Tests from: WALLY-COV-or.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x818f60b4 # initialize rs1
li x18, 0x74821bc9 # initialize rs2
or x17, x0, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x91585c0b # initialize rs1
li x19, 0xe6400f49 # initialize rs2
or x12, x1, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xd70aeaa9 # initialize rs1
li x10, 0xd52fb503 # initialize rs2
or x20, x2, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x16e6e961 # initialize rs1
li x12, 0xb395aa2e # initialize rs2
or x13, x3, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x5058b865 # initialize rs1
li x18, 0x0ea90643 # initialize rs2
or x29, x4, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xba7ea037 # initialize rs1
li x21, 0x0613f2cf # initialize rs2
or x18, x5, x21 # perform operation
RVTEST_SIGUPD(x6, x0, x18, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x0e4c6930 # initialize rs1
li x13, 0x6705e419 # initialize rs2
or x3, x6, x13 # perform operation
RVTEST_SIGUPD(x7, x0, x3, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xe3f6b699 # initialize rs1
li x3, 0x9533ca47 # initialize rs2
or x29, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x34b0b5d6 # initialize rs1
li x14, 0xbea6556b # initialize rs2
or x19, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x2193f458 # initialize rs1
li x30, 0x191ea306 # initialize rs2
or x12, x9, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xdecc85c2 # initialize rs1
li x5, 0xcf322292 # initialize rs2
or x24, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x46fcca10 # initialize rs1
li x17, 0x2a45e982 # initialize rs2
or x24, x11, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xa5bb15f3 # initialize rs1
li x8, 0xc58f7a9c # initialize rs2
or x18, x12, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xa3f1c987 # initialize rs1
li x29, 0x52550d77 # initialize rs2
or x7, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x3a8c5089 # initialize rs1
li x21, 0xfecc6491 # initialize rs2
or x25, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xb0656e13 # initialize rs1
li x2, 0x44c06ba3 # initialize rs2
or x28, x15, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x53deec64 # initialize rs1
li x19, 0xff62ef4f # initialize rs2
or x10, x16, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xfae6e9b5 # initialize rs1
li x30, 0xeb92e666 # initialize rs2
or x15, x17, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x417fb992 # initialize rs1
li x20, 0x73d5a3d5 # initialize rs2
or x1, x18, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x2db7b354 # initialize rs1
li x30, 0x614e5093 # initialize rs2
or x27, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x1693b890 # initialize rs1
li x24, 0x039fe123 # initialize rs2
or x9, x20, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x65d7fe30 # initialize rs1
li x9, 0x3b47485f # initialize rs2
or x13, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x9df6936d # initialize rs1
li x30, 0x883df180 # initialize rs2
or x15, x22, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x3ea2090c # initialize rs1
li x22, 0x3d908d81 # initialize rs2
or x6, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xa7090ee8 # initialize rs1
li x31, 0x999adfb6 # initialize rs2
or x23, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xe9bbfc7b # initialize rs1
li x9, 0x1d6c4051 # initialize rs2
or x27, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x41329676 # initialize rs1
li x28, 0x1986ec7f # initialize rs2
or x3, x26, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xbcd822c0 # initialize rs1
li x15, 0xfa3e7163 # initialize rs2
or x1, x27, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x2550b994 # initialize rs1
li x31, 0xb36930fa # initialize rs2
or x30, x28, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x9000b02c # initialize rs1
li x2, 0x818f7af4 # initialize rs2
or x20, x29, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x7382808f # initialize rs1
li x21, 0x26faa633 # initialize rs2
or x18, x30, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x1b29cb78 # initialize rs1
li x11, 0x287b4d76 # initialize rs2
or x28, x31, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x5, 0xdb0e6b7f # initialize rs1
li x0, 0x90dcaf8b # initialize rs2
or x3, x5, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x12, 0xa171ef18 # initialize rs1
li x1, 0xfae7df25 # initialize rs2
or x27, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x10, 0xa5d4edb8 # initialize rs1
li x2, 0x112d1b8d # initialize rs2
or x11, x10, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x13, 0x806e6504 # initialize rs1
li x3, 0xfc50724e # initialize rs2
or x28, x13, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0xbbc12b40 # initialize rs1
li x4, 0xb49732fb # initialize rs2
or x27, x9, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x9, 0x069f9432 # initialize rs1
li x5, 0x4865d39a # initialize rs2
or x1, x9, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x8, 0x1505276a # initialize rs1
li x6, 0xf25a635f # initialize rs2
or x7, x8, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
li x2, 0xac9f85dc # initialize rs1
li x7, 0xb7a7eff2 # initialize rs2
or x31, x2, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x1, 0x246c2011 # initialize rs1
li x8, 0x42a85b5b # initialize rs2
or x11, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x15, 0x01e2fb83 # initialize rs1
li x9, 0x0582821e # initialize rs2
or x12, x15, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x1, 0x8ed5c3e5 # initialize rs1
li x10, 0xc2bf2afd # initialize rs2
or x27, x1, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x1, 0xaba011a3 # initialize rs1
li x11, 0xc06d85a2 # initialize rs2
or x30, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x22, 0x800bc19a # initialize rs1
li x12, 0x95551523 # initialize rs2
or x28, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x29, 0xa13a0097 # initialize rs1
li x13, 0x6b1038ec # initialize rs2
or x14, x29, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x12, 0xab98edd7 # initialize rs1
li x14, 0xb07afe65 # initialize rs2
or x27, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x24, 0x96c6dbae # initialize rs1
li x15, 0x3b7eb5d7 # initialize rs2
or x1, x24, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x10, 0xe037eacc # initialize rs1
li x16, 0xb5b844a6 # initialize rs2
or x13, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x16, 0x23f2c3c5 # initialize rs1
li x17, 0xb51660e0 # initialize rs2
or x22, x16, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x20, 0x6cdaf266 # initialize rs1
li x18, 0x0896b864 # initialize rs2
or x10, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x10, 0xd9c90de7 # initialize rs1
li x19, 0xa6cb446a # initialize rs2
or x15, x10, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x1, 0x7cadfd2f # initialize rs1
li x20, 0x4e35e99a # initialize rs2
or x9, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x26, 0x13f9d307 # initialize rs1
li x21, 0xdabbdeed # initialize rs2
or x2, x26, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x20, 0x96942f36 # initialize rs1
li x22, 0xc6efd67e # initialize rs2
or x5, x20, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x9, 0x9f04ae03 # initialize rs1
li x23, 0xc32ad7f3 # initialize rs2
or x31, x9, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x12, 0xcd4d7dc4 # initialize rs1
li x24, 0x438813f7 # initialize rs2
or x18, x12, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x15, 0xba9ed4c0 # initialize rs1
li x25, 0x3c83b988 # initialize rs2
or x10, x15, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x17, 0x87e1f2f8 # initialize rs1
li x26, 0x1334fc97 # initialize rs2
or x22, x17, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x5, 0x87b7d167 # initialize rs1
li x27, 0xf570cea5 # initialize rs2
or x18, x5, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x13, 0x9803839f # initialize rs1
li x28, 0x745ebfbf # initialize rs2
or x29, x13, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x3, 0xcc53e3fe # initialize rs1
li x29, 0xae8d0950 # initialize rs2
or x21, x3, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x11, 0x2751df06 # initialize rs1
li x30, 0x624b1140 # initialize rs2
or x25, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x24, 0x7e9684b6 # initialize rs1
li x31, 0x00f20e2b # initialize rs2
or x25, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 252)

# Testcase cp_rd (Test destination rd = x0)
li x17, 0x2554d23f # initialize rs1
li x21, 0x16755a91 # initialize rs2
or x0, x17, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x30, 0x2a5fa0aa # initialize rs1
li x6, 0x504f26b8 # initialize rs2
or x1, x30, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x25, 0x09437c6a # initialize rs1
li x30, 0xe37babec # initialize rs2
or x2, x25, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x20, 0xa4326559 # initialize rs1
li x11, 0x128dad87 # initialize rs2
or x3, x20, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x29, 0x94621ec8 # initialize rs1
li x6, 0x971c7cdd # initialize rs2
or x4, x29, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x13, 0x366c951e # initialize rs1
li x10, 0x42ffe716 # initialize rs2
or x5, x13, x10 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x1, 0xd54b492b # initialize rs1
li x27, 0x05e4855a # initialize rs2
or x6, x1, x27 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x25, 0x2c74dd38 # initialize rs1
li x4, 0xb41bbb0b # initialize rs2
or x7, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x7, 0x9e9d3612 # initialize rs1
li x6, 0x04031c89 # initialize rs2
or x8, x7, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x25, 0x262afa47 # initialize rs1
li x22, 0x51aceed0 # initialize rs2
or x9, x25, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x14, 0xa9fc82db # initialize rs1
li x30, 0x17804d5e # initialize rs2
or x10, x14, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x14, 0x259cac67 # initialize rs1
li x18, 0x70dcb139 # initialize rs2
or x11, x14, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x22, 0x94c341ba # initialize rs1
li x6, 0x26356581 # initialize rs2
or x12, x22, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x4, 0x058815ff # initialize rs1
li x26, 0x38474a92 # initialize rs2
or x13, x4, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x16, 0x0e584118 # initialize rs1
li x7, 0xbaf6ce9b # initialize rs2
or x14, x16, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x16, 0x1ab249ab # initialize rs1
li x9, 0xaad75928 # initialize rs2
or x15, x16, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x1, 0xa21c7eae # initialize rs1
li x7, 0x96bb3e04 # initialize rs2
or x16, x1, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x31, 0x462b48a1 # initialize rs1
li x19, 0xae2c8471 # initialize rs2
or x17, x31, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x2, 0xa01e18e6 # initialize rs1
li x31, 0x81b8e106 # initialize rs2
or x18, x2, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x27, 0xa3de41dd # initialize rs1
li x17, 0xb403c8f7 # initialize rs2
or x19, x27, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x19, 0xc09bc5d7 # initialize rs1
li x3, 0x5e130965 # initialize rs2
or x20, x19, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x17, 0x941f909e # initialize rs1
li x27, 0xf3c4264c # initialize rs2
or x21, x17, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x19, 0xbc4767b5 # initialize rs1
li x11, 0x3bdf7769 # initialize rs2
or x22, x19, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x28, 0xf42c9790 # initialize rs1
li x7, 0x24bc0840 # initialize rs2
or x23, x28, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x30, 0xadbe25ae # initialize rs1
li x20, 0xad9abe3e # initialize rs2
or x24, x30, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x13, 0x6a338851 # initialize rs1
li x4, 0x41a10935 # initialize rs2
or x25, x13, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x30, 0xfb2d2735 # initialize rs1
li x7, 0x75017037 # initialize rs2
or x26, x30, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x19, 0xb003c926 # initialize rs1
li x7, 0xdd85a729 # initialize rs2
or x27, x19, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x1, 0xc7a31a80 # initialize rs1
li x22, 0x856c541f # initialize rs2
or x28, x1, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x12, 0x22ea2b90 # initialize rs1
li x28, 0x030add4f # initialize rs2
or x29, x12, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x31, 0x785ccd43 # initialize rs1
li x6, 0xdd29180b # initialize rs2
or x30, x31, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x20, 0x81c660f4 # initialize rs1
li x6, 0x1289237d # initialize rs2
or x31, x20, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x31, 0x00000000 # initialize rs1
li x26, 0x02fd703b # initialize rs2
or x21, x31, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x18, 0x00000001 # initialize rs1
li x17, 0xb10bb8c6 # initialize rs2
or x23, x18, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x21, 0x00000002 # initialize rs1
li x13, 0x2b293ca9 # initialize rs2
or x10, x21, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x3, 0x80000000 # initialize rs1
li x23, 0x0491d734 # initialize rs2
or x8, x3, x23 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x23, 0x80000001 # initialize rs1
li x3, 0x61a73ef9 # initialize rs2
or x2, x23, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x29, 0x7fffffff # initialize rs1
li x20, 0xc467267a # initialize rs2
or x31, x29, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x7, 0x7ffffffe # initialize rs1
li x20, 0x2c3769d5 # initialize rs2
or x17, x7, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x30, 0xffffffff # initialize rs1
li x28, 0x751c5186 # initialize rs2
or x16, x30, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x3, 0xfffffffe # initialize rs1
li x25, 0xe14a0b3e # initialize rs2
or x31, x3, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x11, 0x0ccf1abb # initialize rs2
or x25, x31, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x13, 0xaaaaaaaa # initialize rs1
li x8, 0xd8857cdb # initialize rs2
or x29, x13, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x19, 0x55555555 # initialize rs1
li x12, 0x1dd6f90e # initialize rs2
or x28, x19, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x6, 0x3f298b99 # initialize rs1
li x25, 0x00000000 # initialize rs2
or x22, x6, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x2, 0xd1e97f24 # initialize rs1
li x29, 0x00000001 # initialize rs2
or x9, x2, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x9, 0x53b22d5d # initialize rs1
li x7, 0x00000002 # initialize rs2
or x28, x9, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x31, 0x388afd13 # initialize rs1
li x20, 0x80000000 # initialize rs2
or x16, x31, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x3, 0x3fbe008a # initialize rs1
li x14, 0x80000001 # initialize rs2
or x28, x3, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x28, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x18, 0x9b61cd44 # initialize rs1
li x11, 0x7fffffff # initialize rs2
or x6, x18, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x4, 0xe0962e48 # initialize rs1
li x18, 0x7ffffffe # initialize rs2
or x21, x4, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x11, 0xdb40aba7 # initialize rs1
li x29, 0xffffffff # initialize rs2
or x3, x11, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x15, 0x7b3d3eaa # initialize rs1
li x24, 0xfffffffe # initialize rs2
or x31, x15, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x14, 0x5b93f0ee # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
or x2, x14, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x28, 0x4b3ad873 # initialize rs1
li x14, 0xaaaaaaaa # initialize rs2
or x7, x28, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x27, 0x0caeb7bb # initialize rs1
li x12, 0x55555555 # initialize rs2
or x21, x27, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x00000000 # initialize rs1
li x24, 0x00000000 # initialize rs2
or x3, x12, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x11, 0x00000000 # initialize rs1
li x26, 0x00000001 # initialize rs2
or x10, x11, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x10, 0x00000000 # initialize rs1
li x6, 0x00000002 # initialize rs2
or x13, x10, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x21, 0x00000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
or x26, x21, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x19, 0x00000000 # initialize rs1
li x2, 0x80000001 # initialize rs2
or x30, x19, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x8, 0x00000000 # initialize rs1
li x11, 0x7fffffff # initialize rs2
or x2, x8, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x1, 0x00000000 # initialize rs1
li x31, 0x7ffffffe # initialize rs2
or x3, x1, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x19, 0x00000000 # initialize rs1
li x11, 0xffffffff # initialize rs2
or x12, x19, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x10, 0x00000000 # initialize rs1
li x16, 0xfffffffe # initialize rs2
or x13, x10, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x1, 0x00000000 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
or x29, x1, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x30, 0x00000000 # initialize rs1
li x3, 0xaaaaaaaa # initialize rs2
or x12, x30, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x11, 0x00000000 # initialize rs1
li x8, 0x55555555 # initialize rs2
or x27, x11, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x30, 0x00000001 # initialize rs1
li x18, 0x00000000 # initialize rs2
or x8, x30, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x8, 0x00000001 # initialize rs1
li x13, 0x00000001 # initialize rs2
or x21, x8, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x4, 0x00000001 # initialize rs1
li x2, 0x00000002 # initialize rs2
or x7, x4, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x13, 0x00000001 # initialize rs1
li x6, 0x80000000 # initialize rs2
or x17, x13, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x6, 0x00000001 # initialize rs1
li x24, 0x80000001 # initialize rs2
or x26, x6, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x28, 0x00000001 # initialize rs1
li x31, 0x7fffffff # initialize rs2
or x19, x28, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x7, 0x00000001 # initialize rs1
li x26, 0x7ffffffe # initialize rs2
or x13, x7, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x31, 0x00000001 # initialize rs1
li x4, 0xffffffff # initialize rs2
or x15, x31, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x21, 0x00000001 # initialize rs1
li x9, 0xfffffffe # initialize rs2
or x1, x21, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x28, 0x00000001 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
or x16, x28, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x8, 0x00000001 # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
or x31, x8, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x16, 0x00000001 # initialize rs1
li x26, 0x55555555 # initialize rs2
or x7, x16, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x16, 0x00000002 # initialize rs1
li x21, 0x00000000 # initialize rs2
or x24, x16, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x23, 0x00000002 # initialize rs1
li x3, 0x00000001 # initialize rs2
or x29, x23, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x8, 0x00000002 # initialize rs1
li x14, 0x00000002 # initialize rs2
or x13, x8, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x18, 0x00000002 # initialize rs1
li x17, 0x80000000 # initialize rs2
or x21, x18, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x16, 0x00000002 # initialize rs1
li x25, 0x80000001 # initialize rs2
or x10, x16, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x8, 0x00000002 # initialize rs1
li x15, 0x7fffffff # initialize rs2
or x20, x8, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x26, 0x00000002 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
or x7, x26, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x20, 0x00000002 # initialize rs1
li x6, 0xffffffff # initialize rs2
or x22, x20, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x4, 0x00000002 # initialize rs1
li x6, 0xfffffffe # initialize rs2
or x20, x4, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x8, 0x00000002 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
or x29, x8, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x24, 0x00000002 # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
or x26, x24, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x12, 0x00000002 # initialize rs1
li x21, 0x55555555 # initialize rs2
or x2, x12, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x31, 0x80000000 # initialize rs1
li x13, 0x00000000 # initialize rs2
or x25, x31, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x28, 0x80000000 # initialize rs1
li x18, 0x00000001 # initialize rs2
or x10, x28, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x11, 0x80000000 # initialize rs1
li x12, 0x00000002 # initialize rs2
or x8, x11, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x26, 0x80000000 # initialize rs1
li x1, 0x80000000 # initialize rs2
or x27, x26, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x16, 0x80000000 # initialize rs1
li x21, 0x80000001 # initialize rs2
or x3, x16, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x9, 0x80000000 # initialize rs1
li x12, 0x7fffffff # initialize rs2
or x3, x9, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x27, 0x80000000 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
or x22, x27, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x20, 0x80000000 # initialize rs1
li x21, 0xffffffff # initialize rs2
or x31, x20, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x9, 0x80000000 # initialize rs1
li x27, 0xfffffffe # initialize rs2
or x22, x9, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x21, 0x80000000 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
or x26, x21, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x18, 0x80000000 # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
or x13, x18, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x24, 0x80000000 # initialize rs1
li x27, 0x55555555 # initialize rs2
or x11, x24, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x13, 0x80000001 # initialize rs1
li x10, 0x00000000 # initialize rs2
or x9, x13, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x1, 0x80000001 # initialize rs1
li x12, 0x00000001 # initialize rs2
or x24, x1, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x14, 0x80000001 # initialize rs1
li x29, 0x00000002 # initialize rs2
or x13, x14, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x20, 0x80000001 # initialize rs1
li x13, 0x80000000 # initialize rs2
or x24, x20, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x3, 0x80000001 # initialize rs1
li x17, 0x80000001 # initialize rs2
or x12, x3, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x25, 0x80000001 # initialize rs1
li x13, 0x7fffffff # initialize rs2
or x18, x25, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x18, 0x80000001 # initialize rs1
li x29, 0x7ffffffe # initialize rs2
or x13, x18, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x20, 0x80000001 # initialize rs1
li x18, 0xffffffff # initialize rs2
or x16, x20, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x12, 0x80000001 # initialize rs1
li x8, 0xfffffffe # initialize rs2
or x11, x12, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x31, 0x80000001 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
or x27, x31, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x11, 0x80000001 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
or x16, x11, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x27, 0x80000001 # initialize rs1
li x3, 0x55555555 # initialize rs2
or x1, x27, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x27, 0x7fffffff # initialize rs1
li x9, 0x00000000 # initialize rs2
or x24, x27, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x26, 0x7fffffff # initialize rs1
li x7, 0x00000001 # initialize rs2
or x1, x26, x7 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x14, 0x7fffffff # initialize rs1
li x16, 0x00000002 # initialize rs2
or x11, x14, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x3, 0x7fffffff # initialize rs1
li x16, 0x80000000 # initialize rs2
or x14, x3, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x4, 0x7fffffff # initialize rs1
li x16, 0x80000001 # initialize rs2
or x24, x4, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x2, 0x7fffffff # initialize rs1
li x15, 0x7fffffff # initialize rs2
or x22, x2, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x17, 0x7fffffff # initialize rs1
li x25, 0x7ffffffe # initialize rs2
or x18, x17, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x30, 0x7fffffff # initialize rs1
li x10, 0xffffffff # initialize rs2
or x29, x30, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x21, 0x7fffffff # initialize rs1
li x3, 0xfffffffe # initialize rs2
or x15, x21, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x3, 0x7fffffff # initialize rs1
li x13, 0x5bbc8872 # initialize rs2
or x29, x3, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x14, 0x7fffffff # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
or x8, x14, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x7, 0x7fffffff # initialize rs1
li x31, 0x55555555 # initialize rs2
or x26, x7, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x26, 0x7ffffffe # initialize rs1
li x1, 0x00000000 # initialize rs2
or x2, x26, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x8, 0x7ffffffe # initialize rs1
li x6, 0x00000001 # initialize rs2
or x30, x8, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x21, 0x7ffffffe # initialize rs1
li x26, 0x00000002 # initialize rs2
or x14, x21, x26 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x22, 0x7ffffffe # initialize rs1
li x25, 0x80000000 # initialize rs2
or x16, x22, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x7, 0x7ffffffe # initialize rs1
li x12, 0x80000001 # initialize rs2
or x30, x7, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x29, 0x7ffffffe # initialize rs1
li x6, 0x7fffffff # initialize rs2
or x14, x29, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x1, 0x7ffffffe # initialize rs1
li x16, 0x7ffffffe # initialize rs2
or x31, x1, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x7, 0x7ffffffe # initialize rs1
li x18, 0xffffffff # initialize rs2
or x26, x7, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x1, 0x7ffffffe # initialize rs1
li x14, 0xfffffffe # initialize rs2
or x23, x1, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x10, 0x7ffffffe # initialize rs1
li x8, 0x5bbc8872 # initialize rs2
or x3, x10, x8 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x19, 0x7ffffffe # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
or x1, x19, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x30, 0x7ffffffe # initialize rs1
li x9, 0x55555555 # initialize rs2
or x31, x30, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x21, 0xffffffff # initialize rs1
li x1, 0x00000000 # initialize rs2
or x29, x21, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x22, 0xffffffff # initialize rs1
li x30, 0x00000001 # initialize rs2
or x25, x22, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x31, 0xffffffff # initialize rs1
li x24, 0x00000002 # initialize rs2
or x6, x31, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x21, 0xffffffff # initialize rs1
li x2, 0x80000000 # initialize rs2
or x10, x21, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x24, 0xffffffff # initialize rs1
li x14, 0x80000001 # initialize rs2
or x13, x24, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x13, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x25, 0xffffffff # initialize rs1
li x4, 0x7fffffff # initialize rs2
or x12, x25, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x26, 0xffffffff # initialize rs1
li x19, 0x7ffffffe # initialize rs2
or x25, x26, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x22, 0xffffffff # initialize rs1
li x29, 0xffffffff # initialize rs2
or x26, x22, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x11, 0xffffffff # initialize rs1
li x2, 0xfffffffe # initialize rs2
or x1, x11, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x1, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x16, 0xffffffff # initialize rs1
li x10, 0x5bbc8872 # initialize rs2
or x11, x16, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x21, 0xffffffff # initialize rs1
li x11, 0xaaaaaaaa # initialize rs2
or x9, x21, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x8, 0xffffffff # initialize rs1
li x13, 0x55555555 # initialize rs2
or x7, x8, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x12, 0xfffffffe # initialize rs1
li x29, 0x00000000 # initialize rs2
or x6, x12, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x25, 0xfffffffe # initialize rs1
li x29, 0x00000001 # initialize rs2
or x20, x25, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x9, 0xfffffffe # initialize rs1
li x11, 0x00000002 # initialize rs2
or x25, x9, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x3, 0xfffffffe # initialize rs1
li x28, 0x80000000 # initialize rs2
or x16, x3, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x16, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x22, 0xfffffffe # initialize rs1
li x28, 0x80000001 # initialize rs2
or x19, x22, x28 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x3, 0xfffffffe # initialize rs1
li x21, 0x7fffffff # initialize rs2
or x17, x3, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x2, 0xfffffffe # initialize rs1
li x4, 0x7ffffffe # initialize rs2
or x14, x2, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x14, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x19, 0xfffffffe # initialize rs1
li x9, 0xffffffff # initialize rs2
or x11, x19, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x19, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
or x12, x19, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x28, 0xfffffffe # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
or x21, x28, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x29, 0xfffffffe # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
or x9, x29, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x11, 0xfffffffe # initialize rs1
li x2, 0x55555555 # initialize rs2
or x17, x11, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x18, 0x5bbc8872 # initialize rs1
li x19, 0x00000000 # initialize rs2
or x9, x18, x19 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x4, 0x5bbc8872 # initialize rs1
li x25, 0x00000001 # initialize rs2
or x3, x4, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x19, 0x5bbc8872 # initialize rs1
li x12, 0x00000002 # initialize rs2
or x8, x19, x12 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x6, 0x5bbc8872 # initialize rs1
li x14, 0x80000000 # initialize rs2
or x30, x6, x14 # perform operation
RVTEST_SIGUPD(x5, x0, x30, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x27, 0x5bbc8872 # initialize rs1
li x10, 0x80000001 # initialize rs2
or x31, x27, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x31, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x10, 0x5bbc8872 # initialize rs1
li x20, 0x7fffffff # initialize rs2
or x15, x10, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x15, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x20, 0x5bbc8872 # initialize rs1
li x29, 0x7ffffffe # initialize rs2
or x9, x20, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x13, 0x5bbc8872 # initialize rs1
li x29, 0xffffffff # initialize rs2
or x27, x13, x29 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x9, 0x5bbc8872 # initialize rs1
li x21, 0xfffffffe # initialize rs2
or x27, x9, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x27, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x27, 0x5bbc8872 # initialize rs1
li x1, 0x5bbc8872 # initialize rs2
or x25, x27, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x7, 0x5bbc8872 # initialize rs1
li x13, 0xaaaaaaaa # initialize rs2
or x20, x7, x13 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x12, 0x5bbc8872 # initialize rs1
li x24, 0x55555555 # initialize rs2
or x21, x12, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x21, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x24, 0xaaaaaaaa # initialize rs1
li x18, 0x00000000 # initialize rs2
or x6, x24, x18 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x1, 0xaaaaaaaa # initialize rs1
li x22, 0x00000001 # initialize rs2
or x17, x1, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x17, 0xaaaaaaaa # initialize rs1
li x21, 0x00000002 # initialize rs2
or x8, x17, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x25, 0xaaaaaaaa # initialize rs1
li x22, 0x80000000 # initialize rs2
or x6, x25, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x6, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x10, 0xaaaaaaaa # initialize rs1
li x9, 0x80000001 # initialize rs2
or x17, x10, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x17, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x16, 0xaaaaaaaa # initialize rs1
li x15, 0x7fffffff # initialize rs2
or x23, x16, x15 # perform operation
RVTEST_SIGUPD(x5, x0, x23, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x24, 0xaaaaaaaa # initialize rs1
li x2, 0x7ffffffe # initialize rs2
or x4, x24, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x10, 0xaaaaaaaa # initialize rs1
li x17, 0xffffffff # initialize rs2
or x18, x10, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x28, 0xaaaaaaaa # initialize rs1
li x31, 0xfffffffe # initialize rs2
or x22, x28, x31 # perform operation
RVTEST_SIGUPD(x5, x0, x22, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x29, 0xaaaaaaaa # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
or x12, x29, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x12, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x27, 0xaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
or x4, x27, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x20, 0xaaaaaaaa # initialize rs1
li x27, 0x55555555 # initialize rs2
or x3, x20, x27 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x24, 0x55555555 # initialize rs1
li x16, 0x00000000 # initialize rs2
or x19, x24, x16 # perform operation
RVTEST_SIGUPD(x5, x0, x19, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x6, 0x55555555 # initialize rs1
li x10, 0x00000001 # initialize rs2
or x29, x6, x10 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x1, 0x55555555 # initialize rs1
li x25, 0x00000002 # initialize rs2
or x9, x1, x25 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x14, 0x55555555 # initialize rs1
li x4, 0x80000000 # initialize rs2
or x24, x14, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x24, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x16, 0x55555555 # initialize rs1
li x30, 0x80000001 # initialize rs2
or x25, x16, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x10, 0x55555555 # initialize rs1
li x21, 0x7fffffff # initialize rs2
or x9, x10, x21 # perform operation
RVTEST_SIGUPD(x5, x0, x9, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x18, 0x55555555 # initialize rs1
li x30, 0x7ffffffe # initialize rs2
or x2, x18, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x2, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x2, 0x55555555 # initialize rs1
li x9, 0xffffffff # initialize rs2
or x11, x2, x9 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x23, 0x55555555 # initialize rs1
li x6, 0xfffffffe # initialize rs2
or x18, x23, x6 # perform operation
RVTEST_SIGUPD(x5, x0, x18, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x2, 0x55555555 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
or x7, x2, x30 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x25, 0x55555555 # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
or x3, x25, x17 # perform operation
RVTEST_SIGUPD(x5, x0, x3, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x2, 0x55555555 # initialize rs1
li x22, 0x55555555 # initialize rs2
or x8, x2, x22 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xbd8b68c1 # initialize rs1
li x0, 0x09c388ba # initialize rs2
or x25, x0, x0 # perform operation
RVTEST_SIGUPD(x5, x0, x25, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x72965e40 # initialize rs1
li x1, 0xe4225276 # initialize rs2
or x26, x1, x1 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0x7203db67 # initialize rs1
li x2, 0x855ffddf # initialize rs2
or x10, x2, x2 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0x0fe4fbe8 # initialize rs1
li x3, 0xa7cb3cfb # initialize rs2
or x26, x3, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
li x4, 0xe05399ff # initialize rs1
li x4, 0xc255c6bc # initialize rs2
or x11, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x11, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x4daf1bd6 # initialize rs1
li x5, 0x30f8fbb7 # initialize rs2
or x8, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x8, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa3a45b12 # initialize rs1
li x6, 0x4ef603b4 # initialize rs2
or x7, x6, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
li x7, 0x4ddd4bd8 # initialize rs1
li x7, 0x7a7e76eb # initialize rs2
or x3, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xd6d96483 # initialize rs1
li x8, 0xb2d6d5a5 # initialize rs2
or x24, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0x5b13a6f7 # initialize rs1
li x9, 0xe217affa # initialize rs2
or x27, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x5c974d16 # initialize rs1
li x10, 0x08392c72 # initialize rs2
or x15, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xdef7afb3 # initialize rs1
li x11, 0x08d67cb0 # initialize rs2
or x7, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xa66e6e93 # initialize rs1
li x12, 0x9a6f958b # initialize rs2
or x21, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xd4adf22d # initialize rs1
li x13, 0xa614fb08 # initialize rs2
or x9, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0xcf5f4f58 # initialize rs1
li x14, 0xfbe0d2b1 # initialize rs2
or x13, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x3eb0bcdc # initialize rs1
li x15, 0xfda91dbe # initialize rs2
or x27, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0xd31be267 # initialize rs1
li x16, 0xdf28a898 # initialize rs2
or x11, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x3ec30249 # initialize rs1
li x17, 0x5d19a422 # initialize rs2
or x5, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x7349fc67 # initialize rs1
li x18, 0xecd75742 # initialize rs2
or x19, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x3bc6e3c1 # initialize rs1
li x19, 0x83de18da # initialize rs2
or x7, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0xca40b232 # initialize rs1
li x20, 0xccfc81cd # initialize rs2
or x27, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xd1abf494 # initialize rs1
li x21, 0xa73c39f1 # initialize rs2
or x25, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x2f57b8ef # initialize rs1
li x22, 0x5a52a06d # initialize rs2
or x12, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xc5bae45e # initialize rs1
li x23, 0xd2ab784f # initialize rs2
or x19, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x2d290490 # initialize rs1
li x24, 0x71d3399d # initialize rs2
or x17, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x48b63a6b # initialize rs1
li x25, 0xbcb7ed64 # initialize rs2
or x23, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0xc5fd2799 # initialize rs1
li x26, 0xa31771ea # initialize rs2
or x9, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x69fd4f66 # initialize rs1
li x27, 0xb0ebd907 # initialize rs2
or x26, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x62492b39 # initialize rs1
li x28, 0xae050cfb # initialize rs2
or x19, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xa0636b18 # initialize rs1
li x29, 0xeb0a1d4d # initialize rs2
or x26, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xbf4a63c3 # initialize rs1
li x30, 0x1c81d0a6 # initialize rs2
or x7, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xe7de761a # initialize rs1
li x31, 0x448e48ae # initialize rs2
or x12, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xe653f087 # initialize rs1
li x22, 0x81a671e4 # initialize rs2
or x0, x0, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x3cd09781 # initialize rs1
li x22, 0xbb40a1ad # initialize rs2
or x1, x1, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x79a7541b # initialize rs1
li x28, 0x8b471c77 # initialize rs2
or x2, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x9b9f09eb # initialize rs1
li x14, 0xfc1a86c2 # initialize rs2
or x3, x3, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x0f7c637e # initialize rs1
li x11, 0xee4fe9f3 # initialize rs2
or x4, x4, x11 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x76e58ea3 # initialize rs1
li x22, 0x6fa59640 # initialize rs2
or x5, x5, x22 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf21e38d4 # initialize rs1
li x21, 0xcdf33367 # initialize rs2
or x6, x6, x21 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x8e85f45e # initialize rs1
li x17, 0xf5dd0fb0 # initialize rs2
or x7, x7, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xdfd17802 # initialize rs1
li x14, 0xf450eb54 # initialize rs2
or x8, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x012eb1b8 # initialize rs1
li x12, 0x96819e0f # initialize rs2
or x9, x9, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xba14a95b # initialize rs1
li x26, 0x0f36406e # initialize rs2
or x10, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xb0ce7c9a # initialize rs1
li x9, 0x32a52ec6 # initialize rs2
or x11, x11, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x27b61b1c # initialize rs1
li x19, 0xa37009be # initialize rs2
or x12, x12, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x34a71622 # initialize rs1
li x13, 0xfd580fb8 # initialize rs2
or x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x42ccdef6 # initialize rs1
li x21, 0x0e064165 # initialize rs2
or x14, x14, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xfe94cda9 # initialize rs1
li x20, 0x88d34d75 # initialize rs2
or x15, x15, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xf6c67911 # initialize rs1
li x29, 0xb281fe6f # initialize rs2
or x16, x16, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x6d9ab82b # initialize rs1
li x1, 0xc34af89c # initialize rs2
or x17, x17, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x1993497d # initialize rs1
li x23, 0x5cd54135 # initialize rs2
or x18, x18, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x44f69f0e # initialize rs1
li x30, 0x577fdf9d # initialize rs2
or x19, x19, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xf58dbe84 # initialize rs1
li x18, 0xfef63742 # initialize rs2
or x20, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x39c38bb9 # initialize rs1
li x2, 0x23cd0b06 # initialize rs2
or x21, x21, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0x9b3367d0 # initialize rs1
li x29, 0x499d6878 # initialize rs2
or x22, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xd4528239 # initialize rs1
li x11, 0x971f3ac0 # initialize rs2
or x23, x23, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x25f753eb # initialize rs1
li x6, 0xc52055ac # initialize rs2
or x24, x24, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xba984f6d # initialize rs1
li x24, 0x170dd1c6 # initialize rs2
or x25, x25, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x0bf35502 # initialize rs1
li x25, 0x995657fa # initialize rs2
or x26, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x825c7dd5 # initialize rs1
li x24, 0xe2278e93 # initialize rs2
or x27, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x07784f31 # initialize rs1
li x3, 0x9d1df252 # initialize rs2
or x28, x28, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xa78c1a5b # initialize rs1
li x31, 0xb30f6ab0 # initialize rs2
or x29, x29, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xbf212a7a # initialize rs1
li x16, 0x61b2d07d # initialize rs2
or x30, x30, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x851cad2d # initialize rs1
li x6, 0x35c5d668 # initialize rs2
or x31, x31, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x22, 0xa41def0b # initialize rs1
li x0, 0x88526904 # initialize rs2
or x0, x22, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x28, 0xb63edbfa # initialize rs1
li x1, 0x138ae697 # initialize rs2
or x1, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x31, 0x33301dd1 # initialize rs1
li x2, 0xfba21be1 # initialize rs2
or x2, x31, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x7, 0x9bf791c7 # initialize rs1
li x3, 0x3bf435ac # initialize rs2
or x3, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0x2ce9584b # initialize rs1
li x4, 0x87d36676 # initialize rs2
or x4, x15, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x10, 0xbf9e92e9 # initialize rs1
li x5, 0x34a51255 # initialize rs2
or x5, x10, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x22, 0xa80d862b # initialize rs1
li x6, 0xd2a8dba3 # initialize rs2
or x6, x22, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x17, 0x79b7c75d # initialize rs1
li x7, 0x74a3dde2 # initialize rs2
or x7, x17, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x17, 0x3d9155fb # initialize rs1
li x8, 0x19dc20d5 # initialize rs2
or x8, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x25, 0xc068119a # initialize rs1
li x9, 0x30f68267 # initialize rs2
or x9, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x10, 0x2155bd2c # initialize rs1
li x10, 0x5739990b # initialize rs2
or x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x3, 0x13a54199 # initialize rs1
li x11, 0x1ec90586 # initialize rs2
or x11, x3, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x19, 0x8f6d78d4 # initialize rs1
li x12, 0x5624a127 # initialize rs2
or x12, x19, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0xd719bffb # initialize rs1
li x13, 0x9826834d # initialize rs2
or x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x5, 0x5d198f61 # initialize rs1
li x14, 0xcc9578cf # initialize rs2
or x14, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x7, 0x47c08e49 # initialize rs1
li x15, 0x68df5211 # initialize rs2
or x15, x7, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x1, 0xc335b292 # initialize rs1
li x16, 0x43b12a06 # initialize rs2
or x16, x1, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x9, 0xd1c6458c # initialize rs1
li x17, 0xcbcc3429 # initialize rs2
or x17, x9, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x3, 0xe7de142c # initialize rs1
li x18, 0xe64e4959 # initialize rs2
or x18, x3, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x23, 0x4cdfe305 # initialize rs1
li x19, 0x6416bba6 # initialize rs2
or x19, x23, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x1, 0x0e4f7748 # initialize rs1
li x20, 0x43af7fba # initialize rs2
or x20, x1, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x9, 0xc46da4f3 # initialize rs1
li x21, 0x73c7ff13 # initialize rs2
or x21, x9, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x2, 0x4136786e # initialize rs1
li x22, 0xdd24b31b # initialize rs2
or x22, x2, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x25, 0x3de5aea3 # initialize rs1
li x23, 0x96b7bdbd # initialize rs2
or x23, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x18, 0x4741205f # initialize rs1
li x24, 0x98771960 # initialize rs2
or x24, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x14, 0xaa8bd946 # initialize rs1
li x25, 0xb9809064 # initialize rs2
or x25, x14, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x13, 0x73fc29f6 # initialize rs1
li x26, 0x1d601b4f # initialize rs2
or x26, x13, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x9, 0x5de88dd6 # initialize rs1
li x27, 0xb35ad8cb # initialize rs2
or x27, x9, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x22, 0x6fff0110 # initialize rs1
li x28, 0xf4ab8822 # initialize rs2
or x28, x22, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x15, 0x215a2b9a # initialize rs1
li x29, 0xd4ff5dcc # initialize rs2
or x29, x15, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x11, 0xd5562cdb # initialize rs1
li x30, 0xac0c05b9 # initialize rs2
or x30, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x5, 0xf6b1e0b3 # initialize rs1
li x31, 0x33f9fb26 # initialize rs2
or x31, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0xda874c3f # initialize rs1
li x0, 0x3ed514c3 # initialize rs2
or x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x1b9bd89c # initialize rs1
li x1, 0x634a0e98 # initialize rs2
or x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0xfbaa2136 # initialize rs1
li x2, 0x3b561cb4 # initialize rs2
or x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0xfc6bad94 # initialize rs1
li x3, 0x1fd11401 # initialize rs2
or x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe90d7a17 # initialize rs1
li x4, 0x28138387 # initialize rs2
or x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x161fdb57 # initialize rs1
li x5, 0xaf773108 # initialize rs2
or x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x5329fa83 # initialize rs1
li x6, 0xef0e6ae7 # initialize rs2
or x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x0a16aee3 # initialize rs1
li x7, 0x394759db # initialize rs2
or x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x1383b96a # initialize rs1
li x8, 0xdcf0b002 # initialize rs2
or x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0x8fcadecd # initialize rs1
li x9, 0x20dc00aa # initialize rs2
or x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x82d7a8b6 # initialize rs1
li x10, 0x6984051b # initialize rs2
or x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xcde020e6 # initialize rs1
li x11, 0x285f6b1d # initialize rs2
or x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0x75e49a70 # initialize rs1
li x12, 0xce8e0d84 # initialize rs2
or x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0xe381498e # initialize rs1
li x13, 0x038a6abc # initialize rs2
or x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0xc772859c # initialize rs1
li x14, 0x595bfd53 # initialize rs2
or x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0xf924a4b4 # initialize rs1
li x15, 0x31e01562 # initialize rs2
or x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x1d23821e # initialize rs1
li x16, 0xfbeffaa4 # initialize rs2
or x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0xe768c79c # initialize rs1
li x17, 0x77a4b160 # initialize rs2
or x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0x8e942cbb # initialize rs1
li x18, 0x67c13ef5 # initialize rs2
or x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0x9078de20 # initialize rs1
li x19, 0x5c4dd8f3 # initialize rs2
or x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xc0f7119d # initialize rs1
li x20, 0x3d52b795 # initialize rs2
or x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x38b35c9f # initialize rs1
li x21, 0x41415b90 # initialize rs2
or x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x8105797f # initialize rs1
li x22, 0xe92505a2 # initialize rs2
or x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x930200ba # initialize rs1
li x23, 0x009ba456 # initialize rs2
or x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0x0cfc220b # initialize rs1
li x24, 0x30e934f7 # initialize rs2
or x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x8423d514 # initialize rs1
li x25, 0x216616fd # initialize rs2
or x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xe57ef4ee # initialize rs1
li x26, 0x0d7a1f46 # initialize rs2
or x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0xeaacb458 # initialize rs1
li x27, 0x314a897c # initialize rs2
or x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0x24f20fa9 # initialize rs1
li x28, 0x12085fcc # initialize rs2
or x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xbed5932b # initialize rs1
li x29, 0x40eab1b3 # initialize rs2
or x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0x8d483e35 # initialize rs1
li x30, 0x60abb5de # initialize rs2
or x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x21201545 # initialize rs1
li x31, 0x3aeb2e61 # initialize rs2
or x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x23, x24, x18 # perform first operation
or x8, x15, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x19, x6, x23 # perform first operation
or x9, x29, x18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x15, x31, x27 # perform first operation
or x23, x13, x17 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x1, x2, x11 # perform first operation
or x11, x1, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x14, x25 # perform first operation
or x25, x21, x22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x7, x27, x12 # perform first operation
or x7, x13, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x13, x24 # perform first operation
or x7, x2, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x8, x10, x15 # perform first operation
or x8, x24, x29 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x19, x3 # perform first operation
or x29, x13, x25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x23, x15, x10 # perform first operation
or x15, x30, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x2, x21, x1 # perform first operation
or x1, x14, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x24, x28, x26 # perform first operation
or x13, x2, x23 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-ori.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xb53eb29f # initialize rs1
ori x31, x0, 403 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x3dec1396 # initialize rs1
ori x6, x1, 2021 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x73ddec82 # initialize rs1
ori x30, x2, 634 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x96515377 # initialize rs1
ori x1, x3, 1548 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x1c527747 # initialize rs1
ori x10, x4, -1131 # perform operation
RVTEST_SIGUPD(x5, x0, x10, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x2cd2f28b # initialize rs1
ori x23, x5, 1389 # perform operation
RVTEST_SIGUPD(x6, x0, x23, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x27b6cfe5 # initialize rs1
ori x27, x6, -1628 # perform operation
RVTEST_SIGUPD(x7, x0, x27, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xaf22fe21 # initialize rs1
ori x16, x7, -627 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xe76a5546 # initialize rs1
ori x13, x8, -468 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x6ddcbe31 # initialize rs1
ori x10, x9, 976 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x89b8cb13 # initialize rs1
ori x26, x10, 1101 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x865ff5ab # initialize rs1
ori x14, x11, 1257 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x573f1235 # initialize rs1
ori x13, x12, -1929 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x4278c05f # initialize rs1
ori x20, x13, 1778 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xd8839b47 # initialize rs1
ori x6, x14, -1964 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xf4c25f85 # initialize rs1
ori x29, x15, 89 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x356c8125 # initialize rs1
ori x29, x16, -562 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x45c52bd8 # initialize rs1
ori x25, x17, -455 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x71c4fb0a # initialize rs1
ori x28, x18, -901 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x228c08a8 # initialize rs1
ori x6, x19, 284 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x4fae5149 # initialize rs1
ori x18, x20, 1542 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x15467450 # initialize rs1
ori x10, x21, 403 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xeb4236c0 # initialize rs1
ori x7, x22, -376 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xf43ac7b3 # initialize rs1
ori x30, x23, -1157 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xd6c69701 # initialize rs1
ori x16, x24, 870 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x0cfc05bc # initialize rs1
ori x3, x25, -160 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x48972452 # initialize rs1
ori x18, x26, -248 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe3e550ab # initialize rs1
ori x5, x27, -1649 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xbdf5b203 # initialize rs1
ori x2, x28, 1104 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x77ff3b4c # initialize rs1
ori x20, x29, -1030 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x72900e1a # initialize rs1
ori x10, x30, -65 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x28fc4f90 # initialize rs1
ori x25, x31, 186 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 124)

# Testcase cp_rd (Test destination rd = x0)
li x7, 0x6ee5d76a # initialize rs1
ori x0, x7, 807 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x16, 0x1e2dce6a # initialize rs1
ori x1, x16, 87 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x15, 0x32b65d09 # initialize rs1
ori x2, x15, -1091 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x24, 0xc447df94 # initialize rs1
ori x3, x24, -1112 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x24, 0x758e0cb0 # initialize rs1
ori x4, x24, 1041 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x18, 0x8dfd2e66 # initialize rs1
ori x5, x18, -314 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x18, 0xc083926e # initialize rs1
ori x6, x18, -187 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x30, 0xcb529664 # initialize rs1
ori x7, x30, 1841 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x22, 0x42a657e3 # initialize rs1
ori x8, x22, 1555 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x14, 0x22203d85 # initialize rs1
ori x9, x14, 497 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x5, 0xcfe1fa20 # initialize rs1
ori x10, x5, 711 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x5, 0xc8950dda # initialize rs1
ori x11, x5, -954 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x3, 0x4d5a595a # initialize rs1
ori x12, x3, 859 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x10, 0x2c114df3 # initialize rs1
ori x13, x10, 1914 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x26, 0x2dba6e2a # initialize rs1
ori x14, x26, 590 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x13, 0x6a51e758 # initialize rs1
ori x15, x13, -1452 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x13, 0xece10aa9 # initialize rs1
ori x16, x13, -1348 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x8, 0xcdb5fe57 # initialize rs1
ori x17, x8, 736 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x1, 0xc5b0b375 # initialize rs1
ori x18, x1, 206 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0xdc722cef # initialize rs1
ori x19, x28, -68 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x2, 0x2ac69c31 # initialize rs1
ori x20, x2, 1534 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x30, 0xccffa792 # initialize rs1
ori x21, x30, -1927 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x20, 0x6a1b834b # initialize rs1
ori x22, x20, -269 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x19, 0xccf7a79d # initialize rs1
ori x23, x19, -650 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x13, 0x77e404d8 # initialize rs1
ori x24, x13, -1066 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x7, 0xdb6c7913 # initialize rs1
ori x25, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x5, 0x1e9c4e49 # initialize rs1
ori x26, x5, 1994 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x30, 0x8b6f4a7c # initialize rs1
ori x27, x30, 1110 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x24, 0x057559b9 # initialize rs1
ori x28, x24, 1223 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x26, 0xcea2ff64 # initialize rs1
ori x29, x26, -509 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x3, 0x961b18b5 # initialize rs1
ori x30, x3, -1619 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x26, 0xaf3d5f89 # initialize rs1
ori x31, x26, -2007 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x23, 0x00000000 # initialize rs1
ori x30, x23, -65 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x8, 0x00000001 # initialize rs1
ori x21, x8, 1615 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x17, 0x00000002 # initialize rs1
ori x20, x17, -1606 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x19, 0x80000000 # initialize rs1
ori x8, x19, 167 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x5, 0x80000001 # initialize rs1
ori x30, x5, 393 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x17, 0x7fffffff # initialize rs1
ori x15, x17, -1847 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x31, 0x7ffffffe # initialize rs1
ori x18, x31, 589 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x1, 0xffffffff # initialize rs1
ori x3, x1, 1025 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x9, 0xfffffffe # initialize rs1
ori x14, x9, -208 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x5, 0x5bbc8872 # initialize rs1
ori x1, x5, -675 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x26, 0xaaaaaaaa # initialize rs1
ori x19, x26, 1904 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x22, 0x55555555 # initialize rs1
ori x23, x22, -572 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 300)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
ori x19, x15, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 304)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
ori x22, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 308)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000 # initialize rs1
ori x20, x11, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 312)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000 # initialize rs1
ori x27, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 316)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
ori x12, x15, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 320)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
ori x29, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 324)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000 # initialize rs1
ori x5, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 328)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
ori x3, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 332)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
ori x9, x31, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 336)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
ori x24, x31, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 340)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
ori x8, x29, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 344)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000 # initialize rs1
ori x14, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 348)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
ori x20, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 352)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
ori x21, x29, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 356)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000 # initialize rs1
ori x12, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 360)

# Testcase cr_rs1_imm_corners
li x28, 0x00000000 # initialize rs1
ori x2, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 364)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000 # initialize rs1
ori x23, x14, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 368)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000 # initialize rs1
ori x16, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 372)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
ori x6, x29, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 376)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000 # initialize rs1
ori x17, x8, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 380)

# Testcase cr_rs1_imm_corners
li x20, 0x00000001 # initialize rs1
ori x15, x20, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 384)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
ori x12, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 388)

# Testcase cr_rs1_imm_corners
li x3, 0x00000001 # initialize rs1
ori x28, x3, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 392)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
ori x12, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 396)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
ori x2, x28, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 400)

# Testcase cr_rs1_imm_corners
li x13, 0x00000001 # initialize rs1
ori x28, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 404)

# Testcase cr_rs1_imm_corners
li x27, 0x00000001 # initialize rs1
ori x5, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 408)

# Testcase cr_rs1_imm_corners
li x13, 0x00000001 # initialize rs1
ori x8, x13, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 412)

# Testcase cr_rs1_imm_corners
li x7, 0x00000001 # initialize rs1
ori x8, x7, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 416)

# Testcase cr_rs1_imm_corners
li x15, 0x00000001 # initialize rs1
ori x2, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 420)

# Testcase cr_rs1_imm_corners
li x19, 0x00000001 # initialize rs1
ori x25, x19, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 424)

# Testcase cr_rs1_imm_corners
li x7, 0x00000001 # initialize rs1
ori x21, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 428)

# Testcase cr_rs1_imm_corners
li x16, 0x00000001 # initialize rs1
ori x8, x16, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 432)

# Testcase cr_rs1_imm_corners
li x13, 0x00000001 # initialize rs1
ori x14, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 436)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
ori x25, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 440)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
ori x9, x2, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 444)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
ori x13, x5, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 448)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
ori x17, x5, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 452)

# Testcase cr_rs1_imm_corners
li x12, 0x00000001 # initialize rs1
ori x15, x12, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 456)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
ori x25, x28, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 460)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
ori x30, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 464)

# Testcase cr_rs1_imm_corners
li x5, 0x00000002 # initialize rs1
ori x13, x5, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 468)

# Testcase cr_rs1_imm_corners
li x26, 0x00000002 # initialize rs1
ori x12, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 472)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
ori x23, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 476)

# Testcase cr_rs1_imm_corners
li x7, 0x00000002 # initialize rs1
ori x24, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 480)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
ori x3, x13, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 484)

# Testcase cr_rs1_imm_corners
li x10, 0x00000002 # initialize rs1
ori x27, x10, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 488)

# Testcase cr_rs1_imm_corners
li x12, 0x00000002 # initialize rs1
ori x1, x12, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 492)

# Testcase cr_rs1_imm_corners
li x27, 0x00000002 # initialize rs1
ori x14, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 496)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
ori x3, x16, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 500)

# Testcase cr_rs1_imm_corners
li x1, 0x00000002 # initialize rs1
ori x5, x1, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 504)

# Testcase cr_rs1_imm_corners
li x15, 0x00000002 # initialize rs1
ori x19, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 508)

# Testcase cr_rs1_imm_corners
li x29, 0x00000002 # initialize rs1
ori x8, x29, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 512)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
ori x2, x16, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 516)

# Testcase cr_rs1_imm_corners
li x31, 0x00000002 # initialize rs1
ori x12, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 520)

# Testcase cr_rs1_imm_corners
li x24, 0x00000002 # initialize rs1
ori x29, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 524)

# Testcase cr_rs1_imm_corners
li x17, 0x00000002 # initialize rs1
ori x20, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 528)

# Testcase cr_rs1_imm_corners
li x25, 0x00000002 # initialize rs1
ori x27, x25, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 532)

# Testcase cr_rs1_imm_corners
li x8, 0x00000002 # initialize rs1
ori x24, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 536)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
ori x11, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 540)

# Testcase cr_rs1_imm_corners
li x11, 0x80000000 # initialize rs1
ori x1, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 544)

# Testcase cr_rs1_imm_corners
li x11, 0x80000000 # initialize rs1
ori x21, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 548)

# Testcase cr_rs1_imm_corners
li x5, 0x80000000 # initialize rs1
ori x10, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 552)

# Testcase cr_rs1_imm_corners
li x11, 0x80000000 # initialize rs1
ori x9, x11, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 556)

# Testcase cr_rs1_imm_corners
li x26, 0x80000000 # initialize rs1
ori x5, x26, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 560)

# Testcase cr_rs1_imm_corners
li x19, 0x80000000 # initialize rs1
ori x18, x19, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 564)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
ori x9, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 568)

# Testcase cr_rs1_imm_corners
li x31, 0x80000000 # initialize rs1
ori x27, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 572)

# Testcase cr_rs1_imm_corners
li x29, 0x80000000 # initialize rs1
ori x2, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 576)

# Testcase cr_rs1_imm_corners
li x7, 0x80000000 # initialize rs1
ori x12, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 580)

# Testcase cr_rs1_imm_corners
li x20, 0x80000000 # initialize rs1
ori x12, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 584)

# Testcase cr_rs1_imm_corners
li x10, 0x80000000 # initialize rs1
ori x17, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 588)

# Testcase cr_rs1_imm_corners
li x2, 0x80000000 # initialize rs1
ori x3, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 592)

# Testcase cr_rs1_imm_corners
li x28, 0x80000000 # initialize rs1
ori x13, x28, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 596)

# Testcase cr_rs1_imm_corners
li x3, 0x80000000 # initialize rs1
ori x7, x3, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 600)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
ori x28, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 604)

# Testcase cr_rs1_imm_corners
li x17, 0x80000000 # initialize rs1
ori x12, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 608)

# Testcase cr_rs1_imm_corners
li x9, 0x80000000 # initialize rs1
ori x11, x9, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 612)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
ori x7, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 616)

# Testcase cr_rs1_imm_corners
li x19, 0x80000000 # initialize rs1
ori x17, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 620)

# Testcase cr_rs1_imm_corners
li x3, 0x80000001 # initialize rs1
ori x30, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 624)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
ori x9, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 628)

# Testcase cr_rs1_imm_corners
li x6, 0x80000001 # initialize rs1
ori x14, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 632)

# Testcase cr_rs1_imm_corners
li x29, 0x80000001 # initialize rs1
ori x10, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 636)

# Testcase cr_rs1_imm_corners
li x9, 0x80000001 # initialize rs1
ori x13, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 640)

# Testcase cr_rs1_imm_corners
li x17, 0x80000001 # initialize rs1
ori x10, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 644)

# Testcase cr_rs1_imm_corners
li x2, 0x80000001 # initialize rs1
ori x16, x2, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 648)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
ori x8, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 652)

# Testcase cr_rs1_imm_corners
li x9, 0x80000001 # initialize rs1
ori x31, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 656)

# Testcase cr_rs1_imm_corners
li x20, 0x80000001 # initialize rs1
ori x25, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 660)

# Testcase cr_rs1_imm_corners
li x3, 0x80000001 # initialize rs1
ori x24, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 664)

# Testcase cr_rs1_imm_corners
li x27, 0x80000001 # initialize rs1
ori x6, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 668)

# Testcase cr_rs1_imm_corners
li x19, 0x80000001 # initialize rs1
ori x1, x19, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 672)

# Testcase cr_rs1_imm_corners
li x19, 0x80000001 # initialize rs1
ori x26, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 676)

# Testcase cr_rs1_imm_corners
li x7, 0x80000001 # initialize rs1
ori x16, x7, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 680)

# Testcase cr_rs1_imm_corners
li x25, 0x80000001 # initialize rs1
ori x17, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 684)

# Testcase cr_rs1_imm_corners
li x2, 0x80000001 # initialize rs1
ori x28, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 688)

# Testcase cr_rs1_imm_corners
li x19, 0x80000001 # initialize rs1
ori x13, x19, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 692)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
ori x12, x11, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 696)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
ori x11, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 700)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
ori x11, x2, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 704)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
ori x20, x17, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 708)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
ori x6, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 712)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffff # initialize rs1
ori x8, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 716)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
ori x14, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 720)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffff # initialize rs1
ori x29, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 724)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffff # initialize rs1
ori x18, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 728)

# Testcase cr_rs1_imm_corners
li x18, 0x7fffffff # initialize rs1
ori x29, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 732)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffff # initialize rs1
ori x15, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 736)

# Testcase cr_rs1_imm_corners
li x11, 0x7fffffff # initialize rs1
ori x18, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 740)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffff # initialize rs1
ori x21, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 744)

# Testcase cr_rs1_imm_corners
li x27, 0x7fffffff # initialize rs1
ori x28, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 748)

# Testcase cr_rs1_imm_corners
li x30, 0x7fffffff # initialize rs1
ori x17, x30, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 752)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffff # initialize rs1
ori x22, x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 756)

# Testcase cr_rs1_imm_corners
li x28, 0x7fffffff # initialize rs1
ori x16, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 760)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
ori x7, x6, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 764)

# Testcase cr_rs1_imm_corners
li x13, 0x7fffffff # initialize rs1
ori x1, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 768)

# Testcase cr_rs1_imm_corners
li x28, 0x7fffffff # initialize rs1
ori x17, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 772)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffff # initialize rs1
ori x31, x14, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 776)

# Testcase cr_rs1_imm_corners
li x15, 0x7fffffff # initialize rs1
ori x26, x15, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 780)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffe # initialize rs1
ori x10, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 784)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffe # initialize rs1
ori x24, x29, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 788)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffe # initialize rs1
ori x18, x29, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 792)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
ori x11, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 796)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
ori x7, x19, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 800)

# Testcase cr_rs1_imm_corners
li x21, 0x7ffffffe # initialize rs1
ori x8, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 804)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffe # initialize rs1
ori x29, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 808)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffe # initialize rs1
ori x26, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 812)

# Testcase cr_rs1_imm_corners
li x9, 0x7ffffffe # initialize rs1
ori x12, x9, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 816)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
ori x18, x24, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 820)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
ori x25, x19, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 824)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffe # initialize rs1
ori x19, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 828)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
ori x30, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 832)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffe # initialize rs1
ori x12, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 836)

# Testcase cr_rs1_imm_corners
li x10, 0x7ffffffe # initialize rs1
ori x31, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 840)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
ori x7, x19, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 844)

# Testcase cr_rs1_imm_corners
li x22, 0x7ffffffe # initialize rs1
ori x16, x22, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 848)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffe # initialize rs1
ori x25, x13, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 852)

# Testcase cr_rs1_imm_corners
li x17, 0x7ffffffe # initialize rs1
ori x26, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 856)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffe # initialize rs1
ori x5, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 860)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffff # initialize rs1
ori x25, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 864)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
ori x16, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 868)

# Testcase cr_rs1_imm_corners
li x20, 0xffffffff # initialize rs1
ori x29, x20, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 872)

# Testcase cr_rs1_imm_corners
li x29, 0xffffffff # initialize rs1
ori x12, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 876)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
ori x30, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
ori x5, x18, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 884)

# Testcase cr_rs1_imm_corners
li x31, 0xffffffff # initialize rs1
ori x18, x31, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 888)

# Testcase cr_rs1_imm_corners
li x10, 0xffffffff # initialize rs1
ori x11, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 892)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
ori x18, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 896)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffff # initialize rs1
ori x12, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 900)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
ori x15, x26, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 904)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffff # initialize rs1
ori x26, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 908)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffff # initialize rs1
ori x9, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 912)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffff # initialize rs1
ori x3, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 916)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
ori x3, x12, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 920)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
ori x7, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 924)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
ori x21, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 928)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffff # initialize rs1
ori x30, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 932)

# Testcase cr_rs1_imm_corners
li x16, 0xffffffff # initialize rs1
ori x8, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 936)

# Testcase cr_rs1_imm_corners
li x23, 0xffffffff # initialize rs1
ori x20, x23, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 940)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffe # initialize rs1
ori x18, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 944)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffe # initialize rs1
ori x25, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 948)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
ori x11, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 952)

# Testcase cr_rs1_imm_corners
li x17, 0xfffffffe # initialize rs1
ori x12, x17, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 956)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffe # initialize rs1
ori x25, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 960)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffe # initialize rs1
ori x6, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 964)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffe # initialize rs1
ori x21, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 968)

# Testcase cr_rs1_imm_corners
li x1, 0xfffffffe # initialize rs1
ori x10, x1, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 972)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffe # initialize rs1
ori x23, x27, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 976)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffe # initialize rs1
ori x10, x20, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 980)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
ori x29, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 984)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffe # initialize rs1
ori x15, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 988)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffe # initialize rs1
ori x14, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 992)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffe # initialize rs1
ori x5, x20, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 996)

# Testcase cr_rs1_imm_corners
li x28, 0xfffffffe # initialize rs1
ori x17, x28, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1000)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
ori x27, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1004)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
ori x20, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1008)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffe # initialize rs1
ori x2, x7, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1012)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffe # initialize rs1
ori x17, x6, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1016)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffe # initialize rs1
ori x26, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1020)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc8872 # initialize rs1
ori x26, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1024)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc8872 # initialize rs1
ori x25, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1028)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
ori x5, x21, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1032)

# Testcase cr_rs1_imm_corners
li x28, 0x5bbc8872 # initialize rs1
ori x11, x28, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1036)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc8872 # initialize rs1
ori x24, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1040)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc8872 # initialize rs1
ori x20, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1044)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc8872 # initialize rs1
ori x5, x22, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1048)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
ori x27, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1052)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
ori x28, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1056)

# Testcase cr_rs1_imm_corners
li x27, 0x5bbc8872 # initialize rs1
ori x3, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1060)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
ori x30, x29, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1064)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc8872 # initialize rs1
ori x14, x25, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1068)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
ori x17, x15, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1072)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
ori x1, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1076)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
ori x13, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1080)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc8872 # initialize rs1
ori x25, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1084)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc8872 # initialize rs1
ori x7, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1088)

# Testcase cr_rs1_imm_corners
li x26, 0x5bbc8872 # initialize rs1
ori x6, x26, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1092)

# Testcase cr_rs1_imm_corners
li x7, 0x5bbc8872 # initialize rs1
ori x24, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1096)

# Testcase cr_rs1_imm_corners
li x22, 0x5bbc8872 # initialize rs1
ori x27, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1100)

# Testcase cr_rs1_imm_corners
li x2, 0xaaaaaaaa # initialize rs1
ori x22, x2, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1104)

# Testcase cr_rs1_imm_corners
li x12, 0xaaaaaaaa # initialize rs1
ori x5, x12, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1108)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaa # initialize rs1
ori x28, x7, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1112)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaa # initialize rs1
ori x1, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1116)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
ori x28, x11, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1120)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaa # initialize rs1
ori x7, x21, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1124)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaa # initialize rs1
ori x9, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1128)

# Testcase cr_rs1_imm_corners
li x13, 0xaaaaaaaa # initialize rs1
ori x31, x13, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1132)

# Testcase cr_rs1_imm_corners
li x2, 0xaaaaaaaa # initialize rs1
ori x18, x2, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1136)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
ori x10, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1140)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
ori x1, x18, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1144)

# Testcase cr_rs1_imm_corners
li x7, 0xaaaaaaaa # initialize rs1
ori x17, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1148)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
ori x15, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1152)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
ori x20, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1156)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaa # initialize rs1
ori x13, x9, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1160)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
ori x12, x18, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1164)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
ori x14, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1168)

# Testcase cr_rs1_imm_corners
li x5, 0xaaaaaaaa # initialize rs1
ori x3, x5, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1172)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaa # initialize rs1
ori x26, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1176)

# Testcase cr_rs1_imm_corners
li x9, 0xaaaaaaaa # initialize rs1
ori x14, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1180)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
ori x12, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1184)

# Testcase cr_rs1_imm_corners
li x17, 0x55555555 # initialize rs1
ori x2, x17, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1188)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
ori x1, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1192)

# Testcase cr_rs1_imm_corners
li x23, 0x55555555 # initialize rs1
ori x9, x23, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1196)

# Testcase cr_rs1_imm_corners
li x31, 0x55555555 # initialize rs1
ori x12, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1200)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
ori x26, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1204)

# Testcase cr_rs1_imm_corners
li x30, 0x55555555 # initialize rs1
ori x15, x30, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1208)

# Testcase cr_rs1_imm_corners
li x9, 0x55555555 # initialize rs1
ori x25, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1212)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
ori x3, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1216)

# Testcase cr_rs1_imm_corners
li x7, 0x55555555 # initialize rs1
ori x11, x7, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1220)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
ori x26, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1224)

# Testcase cr_rs1_imm_corners
li x31, 0x55555555 # initialize rs1
ori x13, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1228)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
ori x24, x22, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1232)

# Testcase cr_rs1_imm_corners
li x10, 0x55555555 # initialize rs1
ori x3, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1236)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
ori x27, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1240)

# Testcase cr_rs1_imm_corners
li x1, 0x55555555 # initialize rs1
ori x3, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1244)

# Testcase cr_rs1_imm_corners
li x16, 0x55555555 # initialize rs1
ori x24, x16, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1248)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
ori x17, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
ori x27, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1256)

# Testcase cr_rs1_imm_corners
li x9, 0x55555555 # initialize rs1
ori x27, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x25270f02 # initialize rs1
ori x0, x0, -35 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x39180386 # initialize rs1
ori x1, x1, 1019 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x06a74fd4 # initialize rs1
ori x2, x2, -618 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xfe86ab70 # initialize rs1
ori x3, x3, -585 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb4234ba2 # initialize rs1
ori x4, x4, 486 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8ebabdcb # initialize rs1
ori x5, x5, -1955 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xbe25e45e # initialize rs1
ori x6, x6, 1642 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xaab707c6 # initialize rs1
ori x7, x7, 1451 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xd5ac0c6a # initialize rs1
ori x8, x8, 1650 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x9c7057b9 # initialize rs1
ori x9, x9, 123 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x3c84359e # initialize rs1
ori x10, x10, 911 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x21782db4 # initialize rs1
ori x11, x11, 1411 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x59089b2f # initialize rs1
ori x12, x12, 1673 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xe7a8fcff # initialize rs1
ori x13, x13, -447 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x04222dd4 # initialize rs1
ori x14, x14, 1747 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xf08111fe # initialize rs1
ori x15, x15, 399 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x94398ea7 # initialize rs1
ori x16, x16, -1191 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0xa7018a04 # initialize rs1
ori x17, x17, 1950 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x8595e4d7 # initialize rs1
ori x18, x18, 232 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x0bb0ef6b # initialize rs1
ori x19, x19, -1724 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xb7cbe6a1 # initialize rs1
ori x20, x20, -1171 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x6f5315bb # initialize rs1
ori x21, x21, -1022 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xd03f8f4b # initialize rs1
ori x22, x22, 1506 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xa2d57382 # initialize rs1
ori x23, x23, 1780 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x1e9d5f63 # initialize rs1
ori x24, x24, 1285 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0xfb78a279 # initialize rs1
ori x25, x25, -84 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x3e92d3cb # initialize rs1
ori x26, x26, 935 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x8dc5b879 # initialize rs1
ori x27, x27, 753 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xd16d22d0 # initialize rs1
ori x28, x28, -662 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x0aa4b91a # initialize rs1
ori x29, x29, -1897 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xc437d11a # initialize rs1
ori x30, x30, -1807 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x02608dd3 # initialize rs1
ori x31, x31, 1933 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x7, 0xa624e5b8 # initialize rs1
ori x6, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1392)

# Testcase cp_imm_corners
li x19, 0x139aa057 # initialize rs1
ori x20, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1396)

# Testcase cp_imm_corners
li x22, 0x5cc776d0 # initialize rs1
ori x6, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1400)

# Testcase cp_imm_corners
li x25, 0x6e6b0e0e # initialize rs1
ori x29, x25, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1404)

# Testcase cp_imm_corners
li x17, 0x9210f92a # initialize rs1
ori x15, x17, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1408)

# Testcase cp_imm_corners
li x17, 0xf1c7faf1 # initialize rs1
ori x26, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1412)

# Testcase cp_imm_corners
li x5, 0x89e01ac3 # initialize rs1
ori x15, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1416)

# Testcase cp_imm_corners
li x29, 0xf0b9cffb # initialize rs1
ori x5, x29, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1420)

# Testcase cp_imm_corners
li x10, 0xb2597076 # initialize rs1
ori x29, x10, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1424)

# Testcase cp_imm_corners
li x11, 0x4540e93e # initialize rs1
ori x14, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1428)

# Testcase cp_imm_corners
li x20, 0x2d1d01ac # initialize rs1
ori x19, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1432)

# Testcase cp_imm_corners
li x15, 0x46a9e77d # initialize rs1
ori x29, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1436)

# Testcase cp_imm_corners
li x23, 0x12e48e25 # initialize rs1
ori x2, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1440)

# Testcase cp_imm_corners
li x15, 0x7a304187 # initialize rs1
ori x1, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cp_imm_corners
li x21, 0xc84e7798 # initialize rs1
ori x11, x21, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1448)

# Testcase cp_imm_corners
li x8, 0xe5302cf5 # initialize rs1
ori x23, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1452)

# Testcase cp_imm_corners
li x27, 0x557ae80a # initialize rs1
ori x15, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1456)

# Testcase cp_imm_corners
li x11, 0x51fa616a # initialize rs1
ori x27, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1460)

# Testcase cp_imm_corners
li x21, 0xf2cccdd9 # initialize rs1
ori x8, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1464)

# Testcase cp_imm_corners
li x24, 0x31a98fac # initialize rs1
ori x5, x24, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x17, x29, x28 # perform first operation
ori x12, x5, -288 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x20, x27, x8 # perform first operation
ori x7, x5, -1669 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x16, x7, x14 # perform first operation
ori x23, x12, 701 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x30, x10, x13 # perform first operation
ori x30, x17, -1727 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x3, x14, x16 # perform first operation
ori x3, x27, -806 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x28, x6, x9 # perform first operation
ori x9, x7, 609 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x28, x26 # perform first operation
ori x23, x10, 1338 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x3, x23, x2 # perform first operation
ori x3, x28, -782 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x9, x19 # perform first operation
ori x12, x16, 1918 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x24, x20, x1 # perform first operation
ori x20, x16, 1619 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x6, x20, x15 # perform first operation
ori x15, x5, 1380 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x27, x25, x23 # perform first operation
ori x17, x7, 292 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-lh.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x27, 0xb8581295 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 606 # sub immediate from rs1 to counter offset
sw x27, -606 (x1) # store value to put something in memory
lh x26, -606(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x24, 0xa8def561 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -1297 # sub immediate from rs1 to counter offset
sw x24, 1297 (x2) # store value to put something in memory
lh x16, 1297(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 4)

# Testcase cp_rs1 (Test source rs1 = x3)
li x21, 0xa425b02e # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1514 # sub immediate from rs1 to counter offset
sw x21, 1514 (x3) # store value to put something in memory
lh x25, 1514(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 8)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x15, 0x8d0c2a44 # initialize rs2
la x4, scratch # base address 
addi x4, x4, 804 # sub immediate from rs1 to counter offset
sw x15, -804 (x4) # store value to put something in memory
lh x19, -804(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x19, 12)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x30, 0xd0b48425 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 507 # sub immediate from rs1 to counter offset
sw x30, -507 (x5) # store value to put something in memory
lh x3, -507(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x3, 16)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x5, 0x0ab5f12c # initialize rs2
la x6, scratch # base address 
addi x6, x6, 365 # sub immediate from rs1 to counter offset
sw x5, -365 (x6) # store value to put something in memory
lh x13, -365(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x13, 20)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x11, 0x559838d3 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -906 # sub immediate from rs1 to counter offset
sw x11, 906 (x7) # store value to put something in memory
lh x4, 906(x7) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 24)

# Testcase cp_rs1 (Test source rs1 = x8)
li x19, 0x38f97da9 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 196 # sub immediate from rs1 to counter offset
sw x19, -196 (x8) # store value to put something in memory
lh x15, -196(x8) # perform operation
RVTEST_SIGUPD(x5, x0, x15, 28)

# Testcase cp_rs1 (Test source rs1 = x9)
li x20, 0xdafc2218 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 915 # sub immediate from rs1 to counter offset
sw x20, -915 (x9) # store value to put something in memory
lh x14, -915(x9) # perform operation
RVTEST_SIGUPD(x5, x0, x14, 32)

# Testcase cp_rs1 (Test source rs1 = x10)
li x15, 0xd8f3a430 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1994 # sub immediate from rs1 to counter offset
sw x15, 1994 (x10) # store value to put something in memory
lh x22, 1994(x10) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 36)

# Testcase cp_rs1 (Test source rs1 = x11)
li x18, 0x216f1fe3 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 63 # sub immediate from rs1 to counter offset
sw x18, -63 (x11) # store value to put something in memory
lh x2, -63(x11) # perform operation
RVTEST_SIGUPD(x5, x0, x2, 40)

# Testcase cp_rs1 (Test source rs1 = x12)
li x29, 0x258ee0d2 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 576 # sub immediate from rs1 to counter offset
sw x29, -576 (x12) # store value to put something in memory
lh x7, -576(x12) # perform operation
RVTEST_SIGUPD(x5, x0, x7, 44)

# Testcase cp_rs1 (Test source rs1 = x13)
li x15, 0xe6fc77c2 # initialize rs2
la x13, scratch # base address 
addi x13, x13, 694 # sub immediate from rs1 to counter offset
sw x15, -694 (x13) # store value to put something in memory
lh x22, -694(x13) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 48)

# Testcase cp_rs1 (Test source rs1 = x14)
li x1, 0x0f7e3769 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -52 # sub immediate from rs1 to counter offset
sw x1, 52 (x14) # store value to put something in memory
lh x25, 52(x14) # perform operation
RVTEST_SIGUPD(x5, x0, x25, 52)

# Testcase cp_rs1 (Test source rs1 = x15)
li x22, 0x118e3fa4 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -923 # sub immediate from rs1 to counter offset
sw x22, 923 (x15) # store value to put something in memory
lh x13, 923(x15) # perform operation
RVTEST_SIGUPD(x5, x0, x13, 56)

# Testcase cp_rs1 (Test source rs1 = x16)
li x31, 0x6e582cbd # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1292 # sub immediate from rs1 to counter offset
sw x31, 1292 (x16) # store value to put something in memory
lh x26, 1292(x16) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 60)

# Testcase cp_rs1 (Test source rs1 = x17)
li x9, 0xdd2e61b0 # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1129 # sub immediate from rs1 to counter offset
sw x9, -1129 (x17) # store value to put something in memory
lh x31, -1129(x17) # perform operation
RVTEST_SIGUPD(x5, x0, x31, 64)

# Testcase cp_rs1 (Test source rs1 = x18)
li x15, 0xfcee463f # initialize rs2
la x18, scratch # base address 
addi x18, x18, -103 # sub immediate from rs1 to counter offset
sw x15, 103 (x18) # store value to put something in memory
lh x28, 103(x18) # perform operation
RVTEST_SIGUPD(x5, x0, x28, 68)

# Testcase cp_rs1 (Test source rs1 = x19)
li x1, 0x38613834 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -532 # sub immediate from rs1 to counter offset
sw x1, 532 (x19) # store value to put something in memory
lh x20, 532(x19) # perform operation
RVTEST_SIGUPD(x5, x0, x20, 72)

# Testcase cp_rs1 (Test source rs1 = x20)
li x3, 0xa712d3c8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 185 # sub immediate from rs1 to counter offset
sw x3, -185 (x20) # store value to put something in memory
lh x26, -185(x20) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 76)

# Testcase cp_rs1 (Test source rs1 = x21)
li x12, 0x941cc5ae # initialize rs2
la x21, scratch # base address 
addi x21, x21, 479 # sub immediate from rs1 to counter offset
sw x12, -479 (x21) # store value to put something in memory
lh x30, -479(x21) # perform operation
RVTEST_SIGUPD(x5, x0, x30, 80)

# Testcase cp_rs1 (Test source rs1 = x22)
li x3, 0x989af6d6 # initialize rs2
la x22, scratch # base address 
addi x22, x22, 1065 # sub immediate from rs1 to counter offset
sw x3, -1065 (x22) # store value to put something in memory
lh x6, -1065(x22) # perform operation
RVTEST_SIGUPD(x5, x0, x6, 84)

# Testcase cp_rs1 (Test source rs1 = x23)
li x7, 0xd8dffa87 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1162 # sub immediate from rs1 to counter offset
sw x7, 1162 (x23) # store value to put something in memory
lh x21, 1162(x23) # perform operation
RVTEST_SIGUPD(x5, x0, x21, 88)

# Testcase cp_rs1 (Test source rs1 = x24)
li x21, 0x420e6a04 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -993 # sub immediate from rs1 to counter offset
sw x21, 993 (x24) # store value to put something in memory
lh x29, 993(x24) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 92)

# Testcase cp_rs1 (Test source rs1 = x25)
li x23, 0x06c2f954 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1462 # sub immediate from rs1 to counter offset
sw x23, -1462 (x25) # store value to put something in memory
lh x29, -1462(x25) # perform operation
RVTEST_SIGUPD(x5, x0, x29, 96)

# Testcase cp_rs1 (Test source rs1 = x26)
li x29, 0xee3ea8f5 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 53 # sub immediate from rs1 to counter offset
sw x29, -53 (x26) # store value to put something in memory
lh x9, -53(x26) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 100)

# Testcase cp_rs1 (Test source rs1 = x27)
li x9, 0xe9c1eac0 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1600 # sub immediate from rs1 to counter offset
sw x9, 1600 (x27) # store value to put something in memory
lh x22, 1600(x27) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 104)

# Testcase cp_rs1 (Test source rs1 = x28)
li x8, 0xa0c0917f # initialize rs2
la x28, scratch # base address 
addi x28, x28, 168 # sub immediate from rs1 to counter offset
sw x8, -168 (x28) # store value to put something in memory
lh x18, -168(x28) # perform operation
RVTEST_SIGUPD(x5, x0, x18, 108)

# Testcase cp_rs1 (Test source rs1 = x29)
li x31, 0x8f65fe59 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -946 # sub immediate from rs1 to counter offset
sw x31, 946 (x29) # store value to put something in memory
lh x22, 946(x29) # perform operation
RVTEST_SIGUPD(x5, x0, x22, 112)

# Testcase cp_rs1 (Test source rs1 = x30)
li x2, 0x462284dd # initialize rs2
la x30, scratch # base address 
addi x30, x30, 1647 # sub immediate from rs1 to counter offset
sw x2, -1647 (x30) # store value to put something in memory
lh x9, -1647(x30) # perform operation
RVTEST_SIGUPD(x5, x0, x9, 116)

# Testcase cp_rs1 (Test source rs1 = x31)
li x16, 0x1c584eae # initialize rs2
la x31, scratch # base address 
addi x31, x31, 709 # sub immediate from rs1 to counter offset
sw x16, -709 (x31) # store value to put something in memory
lh x19, -709(x31) # perform operation
RVTEST_SIGUPD(x5, x0, x19, 120)

# Testcase cp_rd (Test destination rd = x0)
li x21, 0xfafe99ea # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1383 # sub immediate from rs1 to counter offset
sw x21, 1383 (x16) # store value to put something in memory
lh x0, 1383(x16) # perform operation
RVTEST_SIGUPD(x5, x0, x0, 124)

# Testcase cp_rd (Test destination rd = x1)
li x4, 0x7fa8175c # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1644 # sub immediate from rs1 to counter offset
sw x4, 1644 (x22) # store value to put something in memory
lh x1, 1644(x22) # perform operation
RVTEST_SIGUPD(x5, x0, x1, 128)

# Testcase cp_rd (Test destination rd = x2)
li x6, 0x426ad962 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -2013 # sub immediate from rs1 to counter offset
sw x6, 2013 (x9) # store value to put something in memory
lh x2, 2013(x9) # perform operation
RVTEST_SIGUPD(x5, x0, x2, 132)

# Testcase cp_rd (Test destination rd = x3)
li x13, 0x6a7df7f1 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1601 # sub immediate from rs1 to counter offset
sw x13, 1601 (x6) # store value to put something in memory
lh x3, 1601(x6) # perform operation
RVTEST_SIGUPD(x5, x0, x3, 136)

# Testcase cp_rd (Test destination rd = x4)
li x21, 0x2bd3ecde # initialize rs2
la x17, scratch # base address 
addi x17, x17, 1422 # sub immediate from rs1 to counter offset
sw x21, -1422 (x17) # store value to put something in memory
lh x4, -1422(x17) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 140)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x1, 0x823830b1 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1650 # sub immediate from rs1 to counter offset
sw x1, -1650 (x23) # store value to put something in memory
lh x5, -1650(x23) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rd (Test destination rd = x6)
mv x4, x6 # switch signature pointer register to avoid conflict with test
li x29, 0x7738f7af # initialize rs2
la x7, scratch # base address 
addi x7, x7, -677 # sub immediate from rs1 to counter offset
sw x29, 677 (x7) # store value to put something in memory
lh x6, 677(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 148)

# Testcase cp_rd (Test destination rd = x7)
li x2, 0x02b4bec3 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 433 # sub immediate from rs1 to counter offset
sw x2, -433 (x5) # store value to put something in memory
lh x7, -433(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rd (Test destination rd = x8)
li x6, 0x4f6a7e87 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1238 # sub immediate from rs1 to counter offset
sw x6, 1238 (x15) # store value to put something in memory
lh x8, 1238(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rd (Test destination rd = x9)
li x22, 0xd4c36cd8 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -910 # sub immediate from rs1 to counter offset
sw x22, 910 (x24) # store value to put something in memory
lh x9, 910(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rd (Test destination rd = x10)
li x5, 0x5fa200e8 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -383 # sub immediate from rs1 to counter offset
sw x5, 383 (x17) # store value to put something in memory
lh x10, 383(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 164)

# Testcase cp_rd (Test destination rd = x11)
li x15, 0x968542c4 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1325 # sub immediate from rs1 to counter offset
sw x15, 1325 (x20) # store value to put something in memory
lh x11, 1325(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rd (Test destination rd = x12)
li x28, 0x9043a243 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -302 # sub immediate from rs1 to counter offset
sw x28, 302 (x11) # store value to put something in memory
lh x12, 302(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rd (Test destination rd = x13)
li x5, 0xb2965e51 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1514 # sub immediate from rs1 to counter offset
sw x5, -1514 (x20) # store value to put something in memory
lh x13, -1514(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rd (Test destination rd = x14)
li x31, 0x8e094738 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -1379 # sub immediate from rs1 to counter offset
sw x31, 1379 (x18) # store value to put something in memory
lh x14, 1379(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rd (Test destination rd = x15)
li x23, 0xf63d0e53 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -553 # sub immediate from rs1 to counter offset
sw x23, 553 (x9) # store value to put something in memory
lh x15, 553(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rd (Test destination rd = x16)
li x30, 0x3235f290 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 929 # sub immediate from rs1 to counter offset
sw x30, -929 (x23) # store value to put something in memory
lh x16, -929(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 188)

# Testcase cp_rd (Test destination rd = x17)
li x22, 0x56274532 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 939 # sub immediate from rs1 to counter offset
sw x22, -939 (x9) # store value to put something in memory
lh x17, -939(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0xbefa88e7 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 123 # sub immediate from rs1 to counter offset
sw x7, -123 (x14) # store value to put something in memory
lh x18, -123(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 196)

# Testcase cp_rd (Test destination rd = x19)
li x17, 0x0651e680 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 955 # sub immediate from rs1 to counter offset
sw x17, -955 (x24) # store value to put something in memory
lh x19, -955(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cp_rd (Test destination rd = x20)
li x2, 0x62520abf # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1778 # sub immediate from rs1 to counter offset
sw x2, 1778 (x30) # store value to put something in memory
lh x20, 1778(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 204)

# Testcase cp_rd (Test destination rd = x21)
li x27, 0xc6872bbc # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1607 # sub immediate from rs1 to counter offset
sw x27, 1607 (x20) # store value to put something in memory
lh x21, 1607(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rd (Test destination rd = x22)
li x15, 0x7fcffa78 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1520 # sub immediate from rs1 to counter offset
sw x15, 1520 (x20) # store value to put something in memory
lh x22, 1520(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_rd (Test destination rd = x23)
li x12, 0xaaaa4ace # initialize rs2
la x10, scratch # base address 
addi x10, x10, 1991 # sub immediate from rs1 to counter offset
sw x12, -1991 (x10) # store value to put something in memory
lh x23, -1991(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rd (Test destination rd = x24)
li x29, 0xacc8f1ab # initialize rs2
la x5, scratch # base address 
addi x5, x5, -372 # sub immediate from rs1 to counter offset
sw x29, 372 (x5) # store value to put something in memory
lh x24, 372(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 220)

# Testcase cp_rd (Test destination rd = x25)
li x21, 0x60826de4 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1130 # sub immediate from rs1 to counter offset
sw x21, -1130 (x8) # store value to put something in memory
lh x25, -1130(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cp_rd (Test destination rd = x26)
li x2, 0x371382a3 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1194 # sub immediate from rs1 to counter offset
sw x2, -1194 (x3) # store value to put something in memory
lh x26, -1194(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 228)

# Testcase cp_rd (Test destination rd = x27)
li x21, 0x90d7154b # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1849 # sub immediate from rs1 to counter offset
sw x21, 1849 (x10) # store value to put something in memory
lh x27, 1849(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rd (Test destination rd = x28)
li x25, 0xd57d6f8c # initialize rs2
la x21, scratch # base address 
addi x21, x21, 975 # sub immediate from rs1 to counter offset
sw x25, -975 (x21) # store value to put something in memory
lh x28, -975(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rd (Test destination rd = x29)
li x11, 0x2602353a # initialize rs2
la x25, scratch # base address 
addi x25, x25, 2046 # sub immediate from rs1 to counter offset
sw x11, -2046 (x25) # store value to put something in memory
lh x29, -2046(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rd (Test destination rd = x30)
li x20, 0x6430efba # initialize rs2
la x5, scratch # base address 
addi x5, x5, 1512 # sub immediate from rs1 to counter offset
sw x20, -1512 (x5) # store value to put something in memory
lh x30, -1512(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rd (Test destination rd = x31)
li x19, 0xa948c5c2 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 464 # sub immediate from rs1 to counter offset
sw x19, -464 (x10) # store value to put something in memory
lh x31, -464(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x27, 0x93fdfc60 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1930 # sub immediate from rs1 to counter offset
sw x27, -1930 (x1) # store value to put something in memory
lh x1, -1930(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x23, 0xc7991ced # initialize rs2
la x2, scratch # base address 
addi x2, x2, -905 # sub immediate from rs1 to counter offset
sw x23, 905 (x2) # store value to put something in memory
lh x2, 905(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x14, 0x3b0b88ff # initialize rs2
la x3, scratch # base address 
addi x3, x3, 538 # sub immediate from rs1 to counter offset
sw x14, -538 (x3) # store value to put something in memory
lh x3, -538(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x6, 0xf807183a # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1240 # sub immediate from rs1 to counter offset
sw x6, 1240 (x4) # store value to put something in memory
lh x4, 1240(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x22, 0xc4f98458 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -1275 # sub immediate from rs1 to counter offset
sw x22, 1275 (x5) # store value to put something in memory
lh x5, 1275(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x10, 0xacde902f # initialize rs2
la x6, scratch # base address 
addi x6, x6, 856 # sub immediate from rs1 to counter offset
sw x10, -856 (x6) # store value to put something in memory
lh x6, -856(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x22, 0xafff64dd # initialize rs2
la x7, scratch # base address 
addi x7, x7, -833 # sub immediate from rs1 to counter offset
sw x22, 833 (x7) # store value to put something in memory
lh x7, 833(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x26, 0xfa04e1f4 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 937 # sub immediate from rs1 to counter offset
sw x26, -937 (x8) # store value to put something in memory
lh x8, -937(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x29, 0xcbe960a6 # initialize rs2
la x9, scratch # base address 
addi x9, x9, -933 # sub immediate from rs1 to counter offset
sw x29, 933 (x9) # store value to put something in memory
lh x9, 933(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x30, 0x0f886351 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -135 # sub immediate from rs1 to counter offset
sw x30, 135 (x10) # store value to put something in memory
lh x10, 135(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x18, 0x3239992d # initialize rs2
la x11, scratch # base address 
addi x11, x11, 940 # sub immediate from rs1 to counter offset
sw x18, -940 (x11) # store value to put something in memory
lh x11, -940(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x27, 0x28b03de5 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1254 # sub immediate from rs1 to counter offset
sw x27, 1254 (x12) # store value to put something in memory
lh x12, 1254(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x18, 0x9cf94f30 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -881 # sub immediate from rs1 to counter offset
sw x18, 881 (x13) # store value to put something in memory
lh x13, 881(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x18, 0x5ec5233e # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1177 # sub immediate from rs1 to counter offset
sw x18, -1177 (x14) # store value to put something in memory
lh x14, -1177(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x23, 0x287d0e74 # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1615 # sub immediate from rs1 to counter offset
sw x23, 1615 (x15) # store value to put something in memory
lh x15, 1615(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x7c5b509a # initialize rs2
la x16, scratch # base address 
addi x16, x16, 1915 # sub immediate from rs1 to counter offset
sw x16, -1915 (x16) # store value to put something in memory
lh x16, -1915(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x27, 0x2dcfeaf8 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1077 # sub immediate from rs1 to counter offset
sw x27, 1077 (x17) # store value to put something in memory
lh x17, 1077(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x12, 0xa690b00b # initialize rs2
la x18, scratch # base address 
addi x18, x18, 304 # sub immediate from rs1 to counter offset
sw x12, -304 (x18) # store value to put something in memory
lh x18, -304(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x5, 0x54bb0a1e # initialize rs2
la x19, scratch # base address 
addi x19, x19, -734 # sub immediate from rs1 to counter offset
sw x5, 734 (x19) # store value to put something in memory
lh x19, 734(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x26, 0x6c365a15 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 2003 # sub immediate from rs1 to counter offset
sw x26, -2003 (x20) # store value to put something in memory
lh x20, -2003(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x11, 0x5f7434f9 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 989 # sub immediate from rs1 to counter offset
sw x11, -989 (x21) # store value to put something in memory
lh x21, -989(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x31, 0x8524adc0 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -394 # sub immediate from rs1 to counter offset
sw x31, 394 (x22) # store value to put something in memory
lh x22, 394(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x7, 0x47d5682b # initialize rs2
la x23, scratch # base address 
addi x23, x23, 2013 # sub immediate from rs1 to counter offset
sw x7, -2013 (x23) # store value to put something in memory
lh x23, -2013(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x9, 0xb98b4dee # initialize rs2
la x24, scratch # base address 
addi x24, x24, -1513 # sub immediate from rs1 to counter offset
sw x9, 1513 (x24) # store value to put something in memory
lh x24, 1513(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x18, 0x9a0948c9 # initialize rs2
la x25, scratch # base address 
addi x25, x25, -1262 # sub immediate from rs1 to counter offset
sw x18, 1262 (x25) # store value to put something in memory
lh x25, 1262(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x28, 0x272296f1 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1119 # sub immediate from rs1 to counter offset
sw x28, 1119 (x26) # store value to put something in memory
lh x26, 1119(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x31, 0x32f28e23 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -1429 # sub immediate from rs1 to counter offset
sw x31, 1429 (x27) # store value to put something in memory
lh x27, 1429(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x23, 0xc602e3a8 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -812 # sub immediate from rs1 to counter offset
sw x23, 812 (x28) # store value to put something in memory
lh x28, 812(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x21, 0x5234a26a # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1785 # sub immediate from rs1 to counter offset
sw x21, 1785 (x29) # store value to put something in memory
lh x29, 1785(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x16, 0x849564a0 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 51 # sub immediate from rs1 to counter offset
sw x16, -51 (x30) # store value to put something in memory
lh x30, -51(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x22, 0xbed86cfa # initialize rs2
la x31, scratch # base address 
addi x31, x31, -1972 # sub immediate from rs1 to counter offset
sw x22, 1972 (x31) # store value to put something in memory
lh x31, 1972(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 372)

# Testcase cp_imm_corners
li x16, 0x3d3a643f # initialize rs2
la x9, scratch # base address 
addi x9, x9, 0 # sub immediate from rs1 to counter offset
sw x16, 0 (x9) # store value to put something in memory
lh x28, 0(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 376)

# Testcase cp_imm_corners
li x14, 0x67caf516 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1 # sub immediate from rs1 to counter offset
sw x14, 1 (x30) # store value to put something in memory
lh x5, 1(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 380)

# Testcase cp_imm_corners
li x9, 0x28f72ccc # initialize rs2
la x29, scratch # base address 
addi x29, x29, -2 # sub immediate from rs1 to counter offset
sw x9, 2 (x29) # store value to put something in memory
lh x28, 2(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 384)

# Testcase cp_imm_corners
li x27, 0x6307a102 # initialize rs2
la x24, scratch # base address 
addi x24, x24, -3 # sub immediate from rs1 to counter offset
sw x27, 3 (x24) # store value to put something in memory
lh x26, 3(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 388)

# Testcase cp_imm_corners
li x6, 0x4d8270b7 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -4 # sub immediate from rs1 to counter offset
sw x6, 4 (x19) # store value to put something in memory
lh x22, 4(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 392)

# Testcase cp_imm_corners
li x21, 0x1613ed7e # initialize rs2
la x9, scratch # base address 
addi x9, x9, -8 # sub immediate from rs1 to counter offset
sw x21, 8 (x9) # store value to put something in memory
lh x30, 8(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 396)

# Testcase cp_imm_corners
li x23, 0x17d12e0b # initialize rs2
la x29, scratch # base address 
addi x29, x29, -16 # sub immediate from rs1 to counter offset
sw x23, 16 (x29) # store value to put something in memory
lh x16, 16(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 400)

# Testcase cp_imm_corners
li x14, 0x399ae1af # initialize rs2
la x10, scratch # base address 
addi x10, x10, -32 # sub immediate from rs1 to counter offset
sw x14, 32 (x10) # store value to put something in memory
lh x21, 32(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 404)

# Testcase cp_imm_corners
li x31, 0x0acaea14 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -64 # sub immediate from rs1 to counter offset
sw x31, 64 (x7) # store value to put something in memory
lh x8, 64(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 408)

# Testcase cp_imm_corners
li x14, 0x7f62a8b7 # initialize rs2
la x30, scratch # base address 
addi x30, x30, -128 # sub immediate from rs1 to counter offset
sw x14, 128 (x30) # store value to put something in memory
lh x7, 128(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 412)

# Testcase cp_imm_corners
li x9, 0xa61c60af # initialize rs2
la x26, scratch # base address 
addi x26, x26, -256 # sub immediate from rs1 to counter offset
sw x9, 256 (x26) # store value to put something in memory
lh x14, 256(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 416)

# Testcase cp_imm_corners
li x14, 0xc73c4349 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -512 # sub immediate from rs1 to counter offset
sw x14, 512 (x5) # store value to put something in memory
lh x18, 512(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 420)

# Testcase cp_imm_corners
li x22, 0xc6c0f107 # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1023 # sub immediate from rs1 to counter offset
sw x22, 1023 (x16) # store value to put something in memory
lh x12, 1023(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 424)

# Testcase cp_imm_corners
li x13, 0x0910939d # initialize rs2
la x19, scratch # base address 
addi x19, x19, -1024 # sub immediate from rs1 to counter offset
sw x13, 1024 (x19) # store value to put something in memory
lh x5, 1024(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 428)

# Testcase cp_imm_corners
li x27, 0x4e986601 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -1795 # sub immediate from rs1 to counter offset
sw x27, 1795 (x14) # store value to put something in memory
lh x8, 1795(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 432)

# Testcase cp_imm_corners
li x6, 0x5c54b1f0 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -2047 # sub immediate from rs1 to counter offset
sw x6, 2047 (x7) # store value to put something in memory
lh x2, 2047(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 436)

# Testcase cp_imm_corners
li x16, 0xb16af3f3 # initialize rs2
la x7, scratch # base address 
addi x7, x7, 2047 # increment rs1 by 2047 
addi x7, x7, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x16, -2048 (x7) # store value to put something in memory
lh x8, -2048(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 440)

# Testcase cp_imm_corners
li x30, 0x19f778da # initialize rs2
la x13, scratch # base address 
addi x13, x13, 2047 # sub immediate from rs1 to counter offset
sw x30, -2047 (x13) # store value to put something in memory
lh x5, -2047(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 444)

# Testcase cp_imm_corners
li x29, 0xb407d2b7 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 2 # sub immediate from rs1 to counter offset
sw x29, -2 (x16) # store value to put something in memory
lh x23, -2(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 448)

# Testcase cp_imm_corners
li x15, 0x367b08fe # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1 # sub immediate from rs1 to counter offset
sw x15, -1 (x1) # store value to put something in memory
lh x19, -1(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 452)

# Testcase cp_gpr/fpr_hazard nohaz test
la x2, scratch
addi x2, x2, 1712
add x3, x14, x5 # perform first operation
lh x27, -1712(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x27, scratch
addi x27, x27, 615
add x8, x16, x10 # perform first operation
lh x28, -615(x27) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x13, scratch
addi x13, x13, -1264
add x12, x2, x3 # perform first operation
lh x29, 1264(x13) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x30, scratch
addi x30, x30, -633
add x30, x30, x0 # perform first operation
lh x15, 633(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x28, scratch
addi x28, x28, -1503
add x28, x28, x0 # perform first operation
lh x26, 1503(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x7, scratch
addi x7, x7, -1623
add x7, x7, x0 # perform first operation
lh x13, 1623(x7) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x10, scratch
addi x10, x10, 1056
add x30, x18, x7 # perform first operation
lh x30, -1056(x10) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x26, scratch
addi x26, x26, 1990
add x7, x15, x10 # perform first operation
lh x7, -1990(x26) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x20, scratch
addi x20, x20, -302
add x9, x24, x2 # perform first operation
lh x9, 302(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x2, scratch
addi x2, x2, -1713
add x6, x30, x12 # perform first operation
lh x30, 1713(x2) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x31, scratch
addi x31, x31, -2015
add x20, x28, x23 # perform first operation
lh x23, 2015(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x15, scratch
addi x15, x15, -848
add x2, x19, x13 # perform first operation
lh x25, 848(x15) # perform second (triggering) operation

#.EQU SIGSIZE,456


// ******************
// Tests from: WALLY-COV-bltu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x2da78482 # initialize rs1
li x22, 0x0eacbe6b # initialize rs2
bltu x0, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0x0eacbe6b # initialize rs1
li x22, 0x0eacbe6b # initialize rs2
bltu x0, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x7d0bb086 # initialize rs1
li x5, 0x53407e02 # initialize rs2
bltu x1, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x53407e02 # initialize rs1
li x5, 0x53407e02 # initialize rs2
bltu x1, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x33b075e5 # initialize rs1
li x12, 0x727b3318 # initialize rs2
bltu x2, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x727b3318 # initialize rs1
li x12, 0x727b3318 # initialize rs2
bltu x2, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x67490c49 # initialize rs1
li x7, 0x178cf179 # initialize rs2
bltu x3, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x178cf179 # initialize rs1
li x7, 0x178cf179 # initialize rs2
bltu x3, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x30cde239 # initialize rs1
li x6, 0x3117038e # initialize rs2
bltu x4, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x3117038e # initialize rs1
li x6, 0x3117038e # initialize rs2
bltu x4, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa45075c6 # initialize rs1
li x25, 0xa6bbfdc8 # initialize rs2
bltu x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xa6bbfdc8 # initialize rs1
li x25, 0xa6bbfdc8 # initialize rs2
bltu x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3ccb076b # initialize rs1
li x11, 0x6141059c # initialize rs2
bltu x6, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x6141059c # initialize rs1
li x11, 0x6141059c # initialize rs2
bltu x6, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x7)
mv x5, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd2ddbf2c # initialize rs1
li x21, 0xb0686d72 # initialize rs2
bltu x7, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xb0686d72 # initialize rs1
li x21, 0xb0686d72 # initialize rs2
bltu x7, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x8138fa13 # initialize rs1
li x31, 0xe18cd50f # initialize rs2
bltu x8, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xe18cd50f # initialize rs1
li x31, 0xe18cd50f # initialize rs2
bltu x8, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x600312f4 # initialize rs1
li x31, 0xc890ed77 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xc890ed77 # initialize rs1
li x31, 0xc890ed77 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x832ead0b # initialize rs1
li x8, 0x68bc9078 # initialize rs2
bltu x10, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x68bc9078 # initialize rs1
li x8, 0x68bc9078 # initialize rs2
bltu x10, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xbdbc7405 # initialize rs1
li x1, 0x7e18d2fb # initialize rs2
bltu x11, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7e18d2fb # initialize rs1
li x1, 0x7e18d2fb # initialize rs2
bltu x11, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0xbdf94071 # initialize rs1
li x13, 0xcbad455f # initialize rs2
bltu x12, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xcbad455f # initialize rs1
li x13, 0xcbad455f # initialize rs2
bltu x12, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x65ddd018 # initialize rs1
li x20, 0xef4ccc08 # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xef4ccc08 # initialize rs1
li x20, 0xef4ccc08 # initialize rs2
bltu x13, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xc976a675 # initialize rs1
li x9, 0xf676fe17 # initialize rs2
bltu x14, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xf676fe17 # initialize rs1
li x9, 0xf676fe17 # initialize rs2
bltu x14, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xcad151e0 # initialize rs1
li x9, 0x93141d1b # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x93141d1b # initialize rs1
li x9, 0x93141d1b # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x533113dc # initialize rs1
li x23, 0x66978fef # initialize rs2
bltu x16, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x66978fef # initialize rs1
li x23, 0x66978fef # initialize rs2
bltu x16, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x8ff8e426 # initialize rs1
li x21, 0x01efd4ff # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x01efd4ff # initialize rs1
li x21, 0x01efd4ff # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0x59d399ea # initialize rs1
li x3, 0xbd15655f # initialize rs2
bltu x18, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xbd15655f # initialize rs1
li x3, 0xbd15655f # initialize rs2
bltu x18, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0x787a7ad3 # initialize rs1
li x24, 0xeadf6029 # initialize rs2
bltu x19, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xeadf6029 # initialize rs1
li x24, 0xeadf6029 # initialize rs2
bltu x19, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe179a98a # initialize rs1
li x15, 0xedfa390a # initialize rs2
bltu x20, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xedfa390a # initialize rs1
li x15, 0xedfa390a # initialize rs2
bltu x20, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x92e3d10d # initialize rs1
li x15, 0xea3e25ef # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xea3e25ef # initialize rs1
li x15, 0xea3e25ef # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x07213a84 # initialize rs1
li x31, 0x442ed521 # initialize rs2
bltu x22, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x442ed521 # initialize rs1
li x31, 0x442ed521 # initialize rs2
bltu x22, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xd1d2aa48 # initialize rs1
li x28, 0x00f86894 # initialize rs2
bltu x23, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00f86894 # initialize rs1
li x28, 0x00f86894 # initialize rs2
bltu x23, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x9a2ae493 # initialize rs1
li x18, 0x00ca0393 # initialize rs2
bltu x24, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00ca0393 # initialize rs1
li x18, 0x00ca0393 # initialize rs2
bltu x24, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xe6cad200 # initialize rs1
li x22, 0x88278b4b # initialize rs2
bltu x25, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x88278b4b # initialize rs1
li x22, 0x88278b4b # initialize rs2
bltu x25, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xdde1ca1a # initialize rs1
li x15, 0xa1c7a11f # initialize rs2
bltu x26, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xa1c7a11f # initialize rs1
li x15, 0xa1c7a11f # initialize rs2
bltu x26, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xef065736 # initialize rs1
li x11, 0xff4cb063 # initialize rs2
bltu x27, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xff4cb063 # initialize rs1
li x11, 0xff4cb063 # initialize rs2
bltu x27, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xeaf7bcf6 # initialize rs1
li x15, 0x41f5548b # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x41f5548b # initialize rs1
li x15, 0x41f5548b # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x12557038 # initialize rs1
li x30, 0x1b498e9b # initialize rs2
bltu x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x1b498e9b # initialize rs1
li x30, 0x1b498e9b # initialize rs2
bltu x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x5617b794 # initialize rs1
li x16, 0x815345a9 # initialize rs2
bltu x30, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x815345a9 # initialize rs1
li x16, 0x815345a9 # initialize rs2
bltu x30, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xa68e60b2 # initialize rs1
li x24, 0x29cafd9b # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x29cafd9b # initialize rs1
li x24, 0x29cafd9b # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x0)
li x19, 0xdc39d961 # initialize rs1
li x0, 0xc98f059c # initialize rs2
bltu x19, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xc98f059c # initialize rs1
li x0, 0xc98f059c # initialize rs2
bltu x19, x0, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x1)
li x29, 0x3149940c # initialize rs1
li x1, 0x9b117e8f # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x9b117e8f # initialize rs1
li x1, 0x9b117e8f # initialize rs2
bltu x29, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x2)
li x3, 0x05585838 # initialize rs1
li x2, 0x0a085b51 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x0a085b51 # initialize rs1
li x2, 0x0a085b51 # initialize rs2
bltu x3, x2, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x3)
li x22, 0x67f420b2 # initialize rs1
li x3, 0x7a357c37 # initialize rs2
bltu x22, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x7a357c37 # initialize rs1
li x3, 0x7a357c37 # initialize rs2
bltu x22, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x4)
li x18, 0x4ad3efbc # initialize rs1
li x4, 0xf3ef8e0f # initialize rs2
bltu x18, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xf3ef8e0f # initialize rs1
li x4, 0xf3ef8e0f # initialize rs2
bltu x18, x4, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x21, 0x6c95bf81 # initialize rs1
li x5, 0x93dcbe28 # initialize rs2
bltu x21, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x93dcbe28 # initialize rs1
li x5, 0x93dcbe28 # initialize rs2
bltu x21, x5, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x18, 0x8f2d3431 # initialize rs1
li x6, 0xb291fdd0 # initialize rs2
bltu x18, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0xb291fdd0 # initialize rs1
li x6, 0xb291fdd0 # initialize rs2
bltu x18, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x16, 0x9b4d6a15 # initialize rs1
li x7, 0x57ebdf5b # initialize rs2
bltu x16, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x57ebdf5b # initialize rs1
li x7, 0x57ebdf5b # initialize rs2
bltu x16, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x8)
li x11, 0x8f5ad757 # initialize rs1
li x8, 0x3a7d1ed4 # initialize rs2
bltu x11, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x3a7d1ed4 # initialize rs1
li x8, 0x3a7d1ed4 # initialize rs2
bltu x11, x8, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x9)
li x15, 0x5e1dfd12 # initialize rs1
li x9, 0x59034022 # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x59034022 # initialize rs1
li x9, 0x59034022 # initialize rs2
bltu x15, x9, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x10)
li x23, 0xab939ada # initialize rs1
li x10, 0x2abfc01f # initialize rs2
bltu x23, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x2abfc01f # initialize rs1
li x10, 0x2abfc01f # initialize rs2
bltu x23, x10, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x11)
li x15, 0x6e7fba78 # initialize rs1
li x11, 0x52a4dce8 # initialize rs2
bltu x15, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x52a4dce8 # initialize rs1
li x11, 0x52a4dce8 # initialize rs2
bltu x15, x11, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x12)
li x5, 0xd9101f50 # initialize rs1
li x12, 0x0b2f8ec7 # initialize rs2
bltu x5, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x0b2f8ec7 # initialize rs1
li x12, 0x0b2f8ec7 # initialize rs2
bltu x5, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x13)
li x3, 0x69758d45 # initialize rs1
li x13, 0x116c6a5b # initialize rs2
bltu x3, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x116c6a5b # initialize rs1
li x13, 0x116c6a5b # initialize rs2
bltu x3, x13, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x14)
li x13, 0x209d88f8 # initialize rs1
li x14, 0x8dcbb5b3 # initialize rs2
bltu x13, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x8dcbb5b3 # initialize rs1
li x14, 0x8dcbb5b3 # initialize rs2
bltu x13, x14, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x15)
li x25, 0x762371e1 # initialize rs1
li x15, 0x79b1176e # initialize rs2
bltu x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x79b1176e # initialize rs1
li x15, 0x79b1176e # initialize rs2
bltu x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x16)
li x1, 0x3343b369 # initialize rs1
li x16, 0x7f759d3f # initialize rs2
bltu x1, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x7f759d3f # initialize rs1
li x16, 0x7f759d3f # initialize rs2
bltu x1, x16, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x17)
li x21, 0xbed44599 # initialize rs1
li x17, 0x12245a18 # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x12245a18 # initialize rs1
li x17, 0x12245a18 # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x18)
li x31, 0x301bf722 # initialize rs1
li x18, 0x1bddd9f2 # initialize rs2
bltu x31, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x1bddd9f2 # initialize rs1
li x18, 0x1bddd9f2 # initialize rs2
bltu x31, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x19)
li x15, 0xf8d02035 # initialize rs1
li x19, 0x93008aee # initialize rs2
bltu x15, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x93008aee # initialize rs1
li x19, 0x93008aee # initialize rs2
bltu x15, x19, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x20)
li x29, 0x86f961ea # initialize rs1
li x20, 0x0b31b932 # initialize rs2
bltu x29, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x0b31b932 # initialize rs1
li x20, 0x0b31b932 # initialize rs2
bltu x29, x20, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x21)
li x14, 0x4b774605 # initialize rs1
li x21, 0x227b7dbe # initialize rs2
bltu x14, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x227b7dbe # initialize rs1
li x21, 0x227b7dbe # initialize rs2
bltu x14, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x22)
li x17, 0xa60d40b8 # initialize rs1
li x22, 0x14ea273e # initialize rs2
bltu x17, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x14ea273e # initialize rs1
li x22, 0x14ea273e # initialize rs2
bltu x17, x22, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x23)
li x20, 0x965b8897 # initialize rs1
li x23, 0x57e7da3b # initialize rs2
bltu x20, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x57e7da3b # initialize rs1
li x23, 0x57e7da3b # initialize rs2
bltu x20, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x24)
li x20, 0x6ac35047 # initialize rs1
li x24, 0xbc271aa7 # initialize rs2
bltu x20, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xbc271aa7 # initialize rs1
li x24, 0xbc271aa7 # initialize rs2
bltu x20, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x25)
li x5, 0x1ef9fb09 # initialize rs1
li x25, 0x91b419f9 # initialize rs2
bltu x5, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x91b419f9 # initialize rs1
li x25, 0x91b419f9 # initialize rs2
bltu x5, x25, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x26)
li x13, 0xd123ab70 # initialize rs1
li x26, 0xdef6fe61 # initialize rs2
bltu x13, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xdef6fe61 # initialize rs1
li x26, 0xdef6fe61 # initialize rs2
bltu x13, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x27)
li x1, 0x635c4cb6 # initialize rs1
li x27, 0x01a1c078 # initialize rs2
bltu x1, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x01a1c078 # initialize rs1
li x27, 0x01a1c078 # initialize rs2
bltu x1, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x28)
li x2, 0xbfae7e1a # initialize rs1
li x28, 0xe1a92813 # initialize rs2
bltu x2, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xe1a92813 # initialize rs1
li x28, 0xe1a92813 # initialize rs2
bltu x2, x28, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x29)
li x20, 0x3bdaf0af # initialize rs1
li x29, 0xbb56c3ae # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xbb56c3ae # initialize rs1
li x29, 0xbb56c3ae # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x30)
li x27, 0x06b90143 # initialize rs1
li x30, 0xa51a39aa # initialize rs2
bltu x27, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xa51a39aa # initialize rs1
li x30, 0xa51a39aa # initialize rs2
bltu x27, x30, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2 (Test source rs2 = x31)
li x27, 0xe6bb8e3c # initialize rs1
li x31, 0x79901fdc # initialize rs2
bltu x27, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x79901fdc # initialize rs1
li x31, 0x79901fdc # initialize rs2
bltu x27, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x30, 0x00000000 # initialize rs1
li x31, 0xf25b3cf9 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xf25b3cf9 # initialize rs1
li x31, 0xf25b3cf9 # initialize rs2
bltu x30, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x28, 0x00000001 # initialize rs1
li x3, 0xbc4f3694 # initialize rs2
bltu x28, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xbc4f3694 # initialize rs1
li x3, 0xbc4f3694 # initialize rs2
bltu x28, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x11, 0x00000002 # initialize rs1
li x6, 0x455ff471 # initialize rs2
bltu x11, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x455ff471 # initialize rs1
li x6, 0x455ff471 # initialize rs2
bltu x11, x6, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x3, 0x80000000 # initialize rs1
li x21, 0x1d890aba # initialize rs2
bltu x3, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x1d890aba # initialize rs1
li x21, 0x1d890aba # initialize rs2
bltu x3, x21, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x11, 0x80000001 # initialize rs1
li x7, 0x6208ca7d # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x6208ca7d # initialize rs1
li x7, 0x6208ca7d # initialize rs2
bltu x11, x7, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x11, 0x7fffffff # initialize rs1
li x18, 0x440ec7d8 # initialize rs2
bltu x11, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x440ec7d8 # initialize rs1
li x18, 0x440ec7d8 # initialize rs2
bltu x11, x18, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x24, 0x7ffffffe # initialize rs1
li x12, 0xe9dc1e46 # initialize rs2
bltu x24, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0xe9dc1e46 # initialize rs1
li x12, 0xe9dc1e46 # initialize rs2
bltu x24, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x16, 0xffffffff # initialize rs1
li x17, 0x86c81743 # initialize rs2
bltu x16, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x86c81743 # initialize rs1
li x17, 0x86c81743 # initialize rs2
bltu x16, x17, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x23, 0xfffffffe # initialize rs1
li x3, 0x8d26b74c # initialize rs2
bltu x23, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x8d26b74c # initialize rs1
li x3, 0x8d26b74c # initialize rs2
bltu x23, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x16, 0x5bbc8872 # initialize rs1
li x12, 0x9c4e32f8 # initialize rs2
bltu x16, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x9c4e32f8 # initialize rs1
li x12, 0x9c4e32f8 # initialize rs2
bltu x16, x12, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x17, 0xaaaaaaaa # initialize rs1
li x29, 0xad0f642e # initialize rs2
bltu x17, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0xad0f642e # initialize rs1
li x29, 0xad0f642e # initialize rs2
bltu x17, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x26, 0x55555555 # initialize rs1
li x24, 0x951245f5 # initialize rs2
bltu x26, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x951245f5 # initialize rs1
li x24, 0x951245f5 # initialize rs2
bltu x26, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x14, 0xaf247ece # initialize rs1
li x24, 0x00000000 # initialize rs2
bltu x14, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000 # initialize rs1
li x24, 0x00000000 # initialize rs2
bltu x14, x24, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x17, 0xd25ce929 # initialize rs1
li x27, 0x00000001 # initialize rs2
bltu x17, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000001 # initialize rs1
li x27, 0x00000001 # initialize rs2
bltu x17, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x26, 0x9157fc79 # initialize rs1
li x29, 0x00000002 # initialize rs2
bltu x26, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000002 # initialize rs1
li x29, 0x00000002 # initialize rs2
bltu x26, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x28, 0x1fc96866 # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x28, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x27, 0x51d0758a # initialize rs1
li x3, 0x80000001 # initialize rs2
bltu x27, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
bltu x27, x3, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x11, 0xf2325d3c # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x8, 0xb8dc4262 # initialize rs1
li x26, 0x7ffffffe # initialize rs2
bltu x8, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x7ffffffe # initialize rs1
li x26, 0x7ffffffe # initialize rs2
bltu x8, x26, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x2, 0xf0502816 # initialize rs1
li x23, 0xffffffff # initialize rs2
bltu x2, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xffffffff # initialize rs1
li x23, 0xffffffff # initialize rs2
bltu x2, x23, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x23, 0xbeffb7db # initialize rs1
li x15, 0xfffffffe # initialize rs2
bltu x23, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x15, 0xfffffffe # initialize rs2
bltu x23, x15, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x12, 0x8d5d049b # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
bltu x12, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x5bbc8872 # initialize rs1
li x27, 0x5bbc8872 # initialize rs2
bltu x12, x27, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x15, 0xf176bc80 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xaaaaaaaa # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x20, 0xc7799ab6 # initialize rs1
li x29, 0x55555555 # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x55555555 # initialize rs1
li x29, 0x55555555 # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x12, 0x00000000 # initialize rs1
li x26, 0x00000000 # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000 # initialize rs1
li x26, 0x00000000 # initialize rs2
bltu x12, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x11, 0x00000000 # initialize rs1
li x10, 0x00000001 # initialize rs2
bltu x11, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x00000001 # initialize rs1
li x10, 0x00000001 # initialize rs2
bltu x11, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x1, 0x00000000 # initialize rs1
li x30, 0x00000002 # initialize rs2
bltu x1, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000002 # initialize rs1
li x30, 0x00000002 # initialize rs2
bltu x1, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x12, 0x00000000 # initialize rs1
li x20, 0x80000000 # initialize rs2
bltu x12, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x80000000 # initialize rs1
li x20, 0x80000000 # initialize rs2
bltu x12, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x26, 0x00000000 # initialize rs1
li x7, 0x80000001 # initialize rs2
bltu x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x80000001 # initialize rs1
li x7, 0x80000001 # initialize rs2
bltu x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x5, 0x00000000 # initialize rs1
li x22, 0x7fffffff # initialize rs2
bltu x5, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x7fffffff # initialize rs1
li x22, 0x7fffffff # initialize rs2
bltu x5, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x18, 0x00000000 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x18, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7ffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x18, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x22, 0x00000000 # initialize rs1
li x10, 0xffffffff # initialize rs2
bltu x22, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xffffffff # initialize rs1
li x10, 0xffffffff # initialize rs2
bltu x22, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x12, 0x00000000 # initialize rs1
li x11, 0xfffffffe # initialize rs2
bltu x12, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0xfffffffe # initialize rs1
li x11, 0xfffffffe # initialize rs2
bltu x12, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x20, 0x00000000 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bltu x20, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x5bbc8872 # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
bltu x20, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x20, 0x00000000 # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0xaaaaaaaa # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
bltu x20, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x2, 0x00000000 # initialize rs1
li x7, 0x55555555 # initialize rs2
bltu x2, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x55555555 # initialize rs1
li x7, 0x55555555 # initialize rs2
bltu x2, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x26, 0x00000001 # initialize rs1
li x1, 0x00000000 # initialize rs2
bltu x26, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000000 # initialize rs1
li x1, 0x00000000 # initialize rs2
bltu x26, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x18, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
bltu x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
bltu x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x23, 0x00000001 # initialize rs1
li x9, 0x00000002 # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x00000002 # initialize rs1
li x9, 0x00000002 # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x22, 0x00000001 # initialize rs1
li x7, 0x80000000 # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000000 # initialize rs1
li x7, 0x80000000 # initialize rs2
bltu x22, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x27, 0x00000001 # initialize rs1
li x2, 0x80000001 # initialize rs2
bltu x27, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x80000001 # initialize rs1
li x2, 0x80000001 # initialize rs2
bltu x27, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x16, 0x00000001 # initialize rs1
li x8, 0x7fffffff # initialize rs2
bltu x16, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7fffffff # initialize rs1
li x8, 0x7fffffff # initialize rs2
bltu x16, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x19, 0x00000001 # initialize rs1
li x21, 0x7ffffffe # initialize rs2
bltu x19, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffe # initialize rs1
li x21, 0x7ffffffe # initialize rs2
bltu x19, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x7, 0x00000001 # initialize rs1
li x21, 0xffffffff # initialize rs2
bltu x7, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xffffffff # initialize rs1
li x21, 0xffffffff # initialize rs2
bltu x7, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x22, 0x00000001 # initialize rs1
li x8, 0xfffffffe # initialize rs2
bltu x22, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0xfffffffe # initialize rs1
li x8, 0xfffffffe # initialize rs2
bltu x22, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x3, 0x00000001 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x5bbc8872 # initialize rs1
li x31, 0x5bbc8872 # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x7, 0x00000001 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bltu x7, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0xaaaaaaaa # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
bltu x7, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x23, 0x00000001 # initialize rs1
li x31, 0x55555555 # initialize rs2
bltu x23, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
bltu x23, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x30, 0x00000002 # initialize rs1
li x14, 0x00000000 # initialize rs2
bltu x30, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x00000000 # initialize rs1
li x14, 0x00000000 # initialize rs2
bltu x30, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x25, 0x00000002 # initialize rs1
li x11, 0x00000001 # initialize rs2
bltu x25, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0x00000001 # initialize rs1
li x11, 0x00000001 # initialize rs2
bltu x25, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x10, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bltu x10, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bltu x10, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x13, 0x00000002 # initialize rs1
li x29, 0x80000000 # initialize rs2
bltu x13, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x29, 0x80000000 # initialize rs2
bltu x13, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x15, 0x00000002 # initialize rs1
li x1, 0x80000001 # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x80000001 # initialize rs1
li x1, 0x80000001 # initialize rs2
bltu x15, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x20, 0x00000002 # initialize rs1
li x18, 0x7fffffff # initialize rs2
bltu x20, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x7fffffff # initialize rs1
li x18, 0x7fffffff # initialize rs2
bltu x20, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x15, 0x00000002 # initialize rs1
li x6, 0x7ffffffe # initialize rs2
bltu x15, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7ffffffe # initialize rs1
li x6, 0x7ffffffe # initialize rs2
bltu x15, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x26, 0x00000002 # initialize rs1
li x29, 0xffffffff # initialize rs2
bltu x26, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0xffffffff # initialize rs1
li x29, 0xffffffff # initialize rs2
bltu x26, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x27, 0x00000002 # initialize rs1
li x12, 0xfffffffe # initialize rs2
bltu x27, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xfffffffe # initialize rs1
li x12, 0xfffffffe # initialize rs2
bltu x27, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x26, 0x00000002 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bltu x26, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x5bbc8872 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bltu x26, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x16, 0x00000002 # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
bltu x16, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0xaaaaaaaa # initialize rs1
li x18, 0xaaaaaaaa # initialize rs2
bltu x16, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x30, 0x00000002 # initialize rs1
li x2, 0x55555555 # initialize rs2
bltu x30, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0x55555555 # initialize rs1
li x2, 0x55555555 # initialize rs2
bltu x30, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x28, 0x80000000 # initialize rs1
li x12, 0x00000000 # initialize rs2
bltu x28, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x00000000 # initialize rs1
li x12, 0x00000000 # initialize rs2
bltu x28, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x8, 0x80000000 # initialize rs1
li x18, 0x00000001 # initialize rs2
bltu x8, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x00000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
bltu x8, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x24, 0x80000000 # initialize rs1
li x18, 0x00000002 # initialize rs2
bltu x24, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x00000002 # initialize rs1
li x18, 0x00000002 # initialize rs2
bltu x24, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x9, 0x80000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
bltu x9, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x80000000 # initialize rs1
li x17, 0x80000000 # initialize rs2
bltu x9, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x3, 0x80000000 # initialize rs1
li x16, 0x80000001 # initialize rs2
bltu x3, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x80000001 # initialize rs1
li x16, 0x80000001 # initialize rs2
bltu x3, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x15, 0x80000000 # initialize rs1
li x16, 0x7fffffff # initialize rs2
bltu x15, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x7fffffff # initialize rs1
li x16, 0x7fffffff # initialize rs2
bltu x15, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x19, 0x80000000 # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bltu x19, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x7ffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bltu x19, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x28, 0x80000000 # initialize rs1
li x31, 0xffffffff # initialize rs2
bltu x28, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xffffffff # initialize rs1
li x31, 0xffffffff # initialize rs2
bltu x28, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x28, 0x80000000 # initialize rs1
li x7, 0xfffffffe # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xfffffffe # initialize rs1
li x7, 0xfffffffe # initialize rs2
bltu x28, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x8, 0x80000000 # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
bltu x8, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x5bbc8872 # initialize rs1
li x20, 0x5bbc8872 # initialize rs2
bltu x8, x20, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x28, 0x80000000 # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bltu x28, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0xaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bltu x28, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x12, 0x80000000 # initialize rs1
li x9, 0x55555555 # initialize rs2
bltu x12, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x55555555 # initialize rs1
li x9, 0x55555555 # initialize rs2
bltu x12, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x14, 0x80000001 # initialize rs1
li x6, 0x00000000 # initialize rs2
bltu x14, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
bltu x14, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x29, 0x80000001 # initialize rs1
li x7, 0x00000001 # initialize rs2
bltu x29, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000001 # initialize rs1
li x7, 0x00000001 # initialize rs2
bltu x29, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x15, 0x80000001 # initialize rs1
li x21, 0x00000002 # initialize rs2
bltu x15, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000002 # initialize rs1
li x21, 0x00000002 # initialize rs2
bltu x15, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x7, 0x80000001 # initialize rs1
li x3, 0x80000000 # initialize rs2
bltu x7, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x80000000 # initialize rs1
li x3, 0x80000000 # initialize rs2
bltu x7, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x8, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
bltu x8, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x80000001 # initialize rs1
li x25, 0x80000001 # initialize rs2
bltu x8, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x24, 0x80000001 # initialize rs1
li x2, 0x7fffffff # initialize rs2
bltu x24, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x7fffffff # initialize rs1
li x2, 0x7fffffff # initialize rs2
bltu x24, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x13, 0x80000001 # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bltu x13, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x7ffffffe # initialize rs1
li x8, 0x7ffffffe # initialize rs2
bltu x13, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x10, 0x80000001 # initialize rs1
li x16, 0xffffffff # initialize rs2
bltu x10, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xffffffff # initialize rs1
li x16, 0xffffffff # initialize rs2
bltu x10, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x23, 0x80000001 # initialize rs1
li x9, 0xfffffffe # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xfffffffe # initialize rs1
li x9, 0xfffffffe # initialize rs2
bltu x23, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x17, 0x80000001 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
bltu x17, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc8872 # initialize rs1
li x30, 0x5bbc8872 # initialize rs2
bltu x17, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x29, 0x80000001 # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bltu x29, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaa # initialize rs1
li x22, 0xaaaaaaaa # initialize rs2
bltu x29, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x24, 0x80000001 # initialize rs1
li x17, 0x55555555 # initialize rs2
bltu x24, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
bltu x24, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x21, 0x7fffffff # initialize rs1
li x6, 0x00000000 # initialize rs2
bltu x21, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000 # initialize rs1
li x6, 0x00000000 # initialize rs2
bltu x21, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x3, 0x7fffffff # initialize rs1
li x1, 0x00000001 # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0x00000001 # initialize rs1
li x1, 0x00000001 # initialize rs2
bltu x3, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x26, 0x7fffffff # initialize rs1
li x2, 0x00000002 # initialize rs2
bltu x26, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x00000002 # initialize rs1
li x2, 0x00000002 # initialize rs2
bltu x26, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x13, 0x7fffffff # initialize rs1
li x24, 0x80000000 # initialize rs2
bltu x13, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x80000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
bltu x13, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x21, 0x7fffffff # initialize rs1
li x22, 0x80000001 # initialize rs2
bltu x21, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000001 # initialize rs1
li x22, 0x80000001 # initialize rs2
bltu x21, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x18, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
bltu x18, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x7, 0x7fffffff # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7ffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x31, 0x7fffffff # initialize rs1
li x22, 0xffffffff # initialize rs2
bltu x31, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffff # initialize rs1
li x22, 0xffffffff # initialize rs2
bltu x31, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x3, 0x7fffffff # initialize rs1
li x31, 0xfffffffe # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffe # initialize rs1
li x31, 0xfffffffe # initialize rs2
bltu x3, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x2, 0x7fffffff # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
bltu x2, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x5bbc8872 # initialize rs1
li x17, 0x5bbc8872 # initialize rs2
bltu x2, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x29, 0x7fffffff # initialize rs1
li x10, 0xaaaaaaaa # initialize rs2
bltu x29, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0xaaaaaaaa # initialize rs1
li x10, 0xaaaaaaaa # initialize rs2
bltu x29, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x8, 0x7fffffff # initialize rs1
li x27, 0x55555555 # initialize rs2
bltu x8, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x55555555 # initialize rs1
li x27, 0x55555555 # initialize rs2
bltu x8, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x12, 0x7ffffffe # initialize rs1
li x24, 0x00000000 # initialize rs2
bltu x12, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000000 # initialize rs1
li x24, 0x00000000 # initialize rs2
bltu x12, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x12, 0x7ffffffe # initialize rs1
li x15, 0x00000001 # initialize rs2
bltu x12, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x00000001 # initialize rs1
li x15, 0x00000001 # initialize rs2
bltu x12, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x9, 0x7ffffffe # initialize rs1
li x13, 0x00000002 # initialize rs2
bltu x9, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x00000002 # initialize rs1
li x13, 0x00000002 # initialize rs2
bltu x9, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x1, 0x7ffffffe # initialize rs1
li x10, 0x80000000 # initialize rs2
bltu x1, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x80000000 # initialize rs1
li x10, 0x80000000 # initialize rs2
bltu x1, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x31, 0x7ffffffe # initialize rs1
li x6, 0x80000001 # initialize rs2
bltu x31, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x80000001 # initialize rs1
li x6, 0x80000001 # initialize rs2
bltu x31, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x21, 0x7ffffffe # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x21, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x21, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x9, 0x7ffffffe # initialize rs1
li x22, 0x7ffffffe # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x7ffffffe # initialize rs1
li x22, 0x7ffffffe # initialize rs2
bltu x9, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x31, 0x7ffffffe # initialize rs1
li x11, 0xffffffff # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xffffffff # initialize rs1
li x11, 0xffffffff # initialize rs2
bltu x31, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x3, 0x7ffffffe # initialize rs1
li x15, 0xfffffffe # initialize rs2
bltu x3, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xfffffffe # initialize rs1
li x15, 0xfffffffe # initialize rs2
bltu x3, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x28, 0x7ffffffe # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
bltu x28, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x5bbc8872 # initialize rs1
li x6, 0x5bbc8872 # initialize rs2
bltu x28, x6, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x21, 0x7ffffffe # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaa # initialize rs1
li x17, 0xaaaaaaaa # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x17, 0x7ffffffe # initialize rs1
li x7, 0x55555555 # initialize rs2
bltu x17, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x55555555 # initialize rs1
li x7, 0x55555555 # initialize rs2
bltu x17, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x20, 0xffffffff # initialize rs1
li x8, 0x00000000 # initialize rs2
bltu x20, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bltu x20, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x5, 0xffffffff # initialize rs1
li x27, 0x00000001 # initialize rs2
bltu x5, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x00000001 # initialize rs1
li x27, 0x00000001 # initialize rs2
bltu x5, x27, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x29, 0xffffffff # initialize rs1
li x30, 0x00000002 # initialize rs2
bltu x29, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000002 # initialize rs1
li x30, 0x00000002 # initialize rs2
bltu x29, x30, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x9, 0xffffffff # initialize rs1
li x31, 0x80000000 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x80000000 # initialize rs1
li x31, 0x80000000 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x19, 0xffffffff # initialize rs1
li x3, 0x80000001 # initialize rs2
bltu x19, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000001 # initialize rs1
li x3, 0x80000001 # initialize rs2
bltu x19, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x11, 0xffffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x29, 0x7fffffff # initialize rs2
bltu x11, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x21, 0xffffffff # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bltu x21, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x7ffffffe # initialize rs1
li x3, 0x7ffffffe # initialize rs2
bltu x21, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x25, 0xffffffff # initialize rs1
li x15, 0xffffffff # initialize rs2
bltu x25, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xffffffff # initialize rs1
li x15, 0xffffffff # initialize rs2
bltu x25, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x15, 0xffffffff # initialize rs1
li x25, 0xfffffffe # initialize rs2
bltu x15, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0xfffffffe # initialize rs1
li x25, 0xfffffffe # initialize rs2
bltu x15, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x24, 0xffffffff # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bltu x24, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5bbc8872 # initialize rs1
li x7, 0x5bbc8872 # initialize rs2
bltu x24, x7, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x19, 0xffffffff # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xaaaaaaaa # initialize rs1
li x2, 0xaaaaaaaa # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x27, 0xffffffff # initialize rs1
li x16, 0x55555555 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0x55555555 # initialize rs1
li x16, 0x55555555 # initialize rs2
bltu x27, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x21, 0xfffffffe # initialize rs1
li x28, 0x00000000 # initialize rs2
bltu x21, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000000 # initialize rs1
li x28, 0x00000000 # initialize rs2
bltu x21, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x15, 0xfffffffe # initialize rs1
li x22, 0x00000001 # initialize rs2
bltu x15, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000001 # initialize rs1
li x22, 0x00000001 # initialize rs2
bltu x15, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x21, 0xfffffffe # initialize rs1
li x17, 0x00000002 # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x00000002 # initialize rs1
li x17, 0x00000002 # initialize rs2
bltu x21, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x18, 0xfffffffe # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x18, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x18, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x22, 0xfffffffe # initialize rs1
li x18, 0x80000001 # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x80000001 # initialize rs1
li x18, 0x80000001 # initialize rs2
bltu x22, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x11, 0xfffffffe # initialize rs1
li x28, 0x7fffffff # initialize rs2
bltu x11, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x7fffffff # initialize rs1
li x28, 0x7fffffff # initialize rs2
bltu x11, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x7, 0xfffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x7ffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x7, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x6, 0xfffffffe # initialize rs1
li x3, 0xffffffff # initialize rs2
bltu x6, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xffffffff # initialize rs1
li x3, 0xffffffff # initialize rs2
bltu x6, x3, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x8, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bltu x8, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0xfffffffe # initialize rs1
li x5, 0xfffffffe # initialize rs2
bltu x8, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x7, 0xfffffffe # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
bltu x7, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x5bbc8872 # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
bltu x7, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x31, 0xfffffffe # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0xaaaaaaaa # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
bltu x31, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x31, 0xfffffffe # initialize rs1
li x17, 0x55555555 # initialize rs2
bltu x31, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x55555555 # initialize rs1
li x17, 0x55555555 # initialize rs2
bltu x31, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x18, 0x5bbc8872 # initialize rs1
li x29, 0x00000000 # initialize rs2
bltu x18, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x00000000 # initialize rs1
li x29, 0x00000000 # initialize rs2
bltu x18, x29, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x17, 0x5bbc8872 # initialize rs1
li x18, 0x00000001 # initialize rs2
bltu x17, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x00000001 # initialize rs1
li x18, 0x00000001 # initialize rs2
bltu x17, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x29, 0x5bbc8872 # initialize rs1
li x18, 0x00000002 # initialize rs2
bltu x29, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x00000002 # initialize rs1
li x18, 0x00000002 # initialize rs2
bltu x29, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x18, 0x5bbc8872 # initialize rs1
li x25, 0x80000000 # initialize rs2
bltu x18, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x80000000 # initialize rs1
li x25, 0x80000000 # initialize rs2
bltu x18, x25, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x19, 0x5bbc8872 # initialize rs1
li x2, 0x80000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x80000001 # initialize rs1
li x2, 0x80000001 # initialize rs2
bltu x19, x2, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x6, 0x5bbc8872 # initialize rs1
li x1, 0x7fffffff # initialize rs2
bltu x6, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x7fffffff # initialize rs1
li x1, 0x7fffffff # initialize rs2
bltu x6, x1, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x17, 0x5bbc8872 # initialize rs1
li x21, 0x7ffffffe # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x7ffffffe # initialize rs1
li x21, 0x7ffffffe # initialize rs2
bltu x17, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x14, 0x5bbc8872 # initialize rs1
li x12, 0xffffffff # initialize rs2
bltu x14, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xffffffff # initialize rs1
li x12, 0xffffffff # initialize rs2
bltu x14, x12, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x9, 0x5bbc8872 # initialize rs1
li x24, 0xfffffffe # initialize rs2
bltu x9, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0xfffffffe # initialize rs1
li x24, 0xfffffffe # initialize rs2
bltu x9, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x31, 0x5bbc8872 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
bltu x31, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x5bbc8872 # initialize rs1
li x21, 0x5bbc8872 # initialize rs2
bltu x31, x21, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x6, 0x5bbc8872 # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
bltu x6, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0xaaaaaaaa # initialize rs1
li x23, 0xaaaaaaaa # initialize rs2
bltu x6, x23, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x17, 0x5bbc8872 # initialize rs1
li x22, 0x55555555 # initialize rs2
bltu x17, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x55555555 # initialize rs1
li x22, 0x55555555 # initialize rs2
bltu x17, x22, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x15, 0xaaaaaaaa # initialize rs1
li x8, 0x00000000 # initialize rs2
bltu x15, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x00000000 # initialize rs1
li x8, 0x00000000 # initialize rs2
bltu x15, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x1, 0xaaaaaaaa # initialize rs1
li x24, 0x00000001 # initialize rs2
bltu x1, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x00000001 # initialize rs1
li x24, 0x00000001 # initialize rs2
bltu x1, x24, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x13, 0xaaaaaaaa # initialize rs1
li x10, 0x00000002 # initialize rs2
bltu x13, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0x00000002 # initialize rs1
li x10, 0x00000002 # initialize rs2
bltu x13, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x2, 0xaaaaaaaa # initialize rs1
li x10, 0x80000000 # initialize rs2
bltu x2, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0x80000000 # initialize rs1
li x10, 0x80000000 # initialize rs2
bltu x2, x10, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x23, 0xaaaaaaaa # initialize rs1
li x14, 0x80000001 # initialize rs2
bltu x23, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0x80000001 # initialize rs1
li x14, 0x80000001 # initialize rs2
bltu x23, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x16, 0xaaaaaaaa # initialize rs1
li x9, 0x7fffffff # initialize rs2
bltu x16, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x7fffffff # initialize rs1
li x9, 0x7fffffff # initialize rs2
bltu x16, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x29, 0xaaaaaaaa # initialize rs1
li x5, 0x7ffffffe # initialize rs2
bltu x29, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7ffffffe # initialize rs1
li x5, 0x7ffffffe # initialize rs2
bltu x29, x5, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x5, 0xaaaaaaaa # initialize rs1
li x8, 0xffffffff # initialize rs2
bltu x5, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0xffffffff # initialize rs1
li x8, 0xffffffff # initialize rs2
bltu x5, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x10, 0xaaaaaaaa # initialize rs1
li x13, 0xfffffffe # initialize rs2
bltu x10, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xfffffffe # initialize rs1
li x13, 0xfffffffe # initialize rs2
bltu x10, x13, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x24, 0xaaaaaaaa # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x5bbc8872 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
bltu x24, x14, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x21, 0xaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
bltu x21, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xaaaaaaaa # initialize rs1
li x26, 0xaaaaaaaa # initialize rs2
bltu x21, x26, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x12, 0xaaaaaaaa # initialize rs1
li x28, 0x55555555 # initialize rs2
bltu x12, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x55555555 # initialize rs1
li x28, 0x55555555 # initialize rs2
bltu x12, x28, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x7, 0x55555555 # initialize rs1
li x31, 0x00000000 # initialize rs2
bltu x7, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x00000000 # initialize rs1
li x31, 0x00000000 # initialize rs2
bltu x7, x31, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x20, 0x55555555 # initialize rs1
li x11, 0x00000001 # initialize rs2
bltu x20, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000001 # initialize rs1
li x11, 0x00000001 # initialize rs2
bltu x20, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x20, 0x55555555 # initialize rs1
li x16, 0x00000002 # initialize rs2
bltu x20, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x00000002 # initialize rs1
li x16, 0x00000002 # initialize rs2
bltu x20, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x21, 0x55555555 # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000000 # initialize rs1
li x15, 0x80000000 # initialize rs2
bltu x21, x15, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x21, 0x55555555 # initialize rs1
li x16, 0x80000001 # initialize rs2
bltu x21, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0x80000001 # initialize rs1
li x16, 0x80000001 # initialize rs2
bltu x21, x16, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x29, 0x55555555 # initialize rs1
li x8, 0x7fffffff # initialize rs2
bltu x29, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x7fffffff # initialize rs1
li x8, 0x7fffffff # initialize rs2
bltu x29, x8, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x26, 0x55555555 # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x26, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x7ffffffe # initialize rs1
li x17, 0x7ffffffe # initialize rs2
bltu x26, x17, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x19, 0x55555555 # initialize rs1
li x18, 0xffffffff # initialize rs2
bltu x19, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0xffffffff # initialize rs1
li x18, 0xffffffff # initialize rs2
bltu x19, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x14, 0x55555555 # initialize rs1
li x18, 0xfffffffe # initialize rs2
bltu x14, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0xfffffffe # initialize rs1
li x18, 0xfffffffe # initialize rs2
bltu x14, x18, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x17, 0x55555555 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bltu x17, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x5bbc8872 # initialize rs1
li x11, 0x5bbc8872 # initialize rs2
bltu x17, x11, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x3, 0x55555555 # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
bltu x3, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xaaaaaaaa # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
bltu x3, x9, 1f # perform operation
nop
nop
1:

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x9, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x55555555 # initialize rs1
li x31, 0x55555555 # initialize rs2
bltu x9, x31, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0xfd07a78a # initialize rs1
li x0, 0xd7c57a79 # initialize rs2
bltu x0, x0, 1f # perform operation
nop
nop
1:
# same values in both registers
li x0, 0xd7c57a79 # initialize rs1
li x0, 0xd7c57a79 # initialize rs2
bltu x0, x0, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0x52e33381 # initialize rs1
li x1, 0x5cd5429b # initialize rs2
bltu x1, x1, 1f # perform operation
nop
nop
1:
# same values in both registers
li x1, 0x5cd5429b # initialize rs1
li x1, 0x5cd5429b # initialize rs2
bltu x1, x1, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xea8a7dea # initialize rs1
li x2, 0xae1ce98a # initialize rs2
bltu x2, x2, 1f # perform operation
nop
nop
1:
# same values in both registers
li x2, 0xae1ce98a # initialize rs1
li x2, 0xae1ce98a # initialize rs2
bltu x2, x2, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xaba0fc43 # initialize rs1
li x3, 0xcb1e4e1c # initialize rs2
bltu x3, x3, 1f # perform operation
nop
nop
1:
# same values in both registers
li x3, 0xcb1e4e1c # initialize rs1
li x3, 0xcb1e4e1c # initialize rs2
bltu x3, x3, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc9e8c51d # initialize rs1
li x4, 0x6d585f82 # initialize rs2
bltu x4, x4, 1f # perform operation
nop
nop
1:
# same values in both registers
li x4, 0x6d585f82 # initialize rs1
li x4, 0x6d585f82 # initialize rs2
bltu x4, x4, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x45b36768 # initialize rs1
li x5, 0x74b48ef6 # initialize rs2
bltu x5, x5, 1f # perform operation
nop
nop
1:
# same values in both registers
li x5, 0x74b48ef6 # initialize rs1
li x5, 0x74b48ef6 # initialize rs2
bltu x5, x5, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xbbb4ac4e # initialize rs1
li x6, 0x60806dcb # initialize rs2
bltu x6, x6, 1f # perform operation
nop
nop
1:
# same values in both registers
li x6, 0x60806dcb # initialize rs1
li x6, 0x60806dcb # initialize rs2
bltu x6, x6, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x68c4e901 # initialize rs1
li x7, 0x1ffc6df3 # initialize rs2
bltu x7, x7, 1f # perform operation
nop
nop
1:
# same values in both registers
li x7, 0x1ffc6df3 # initialize rs1
li x7, 0x1ffc6df3 # initialize rs2
bltu x7, x7, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0xc42615f0 # initialize rs1
li x8, 0x8beff46a # initialize rs2
bltu x8, x8, 1f # perform operation
nop
nop
1:
# same values in both registers
li x8, 0x8beff46a # initialize rs1
li x8, 0x8beff46a # initialize rs2
bltu x8, x8, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xc434bc1f # initialize rs1
li x9, 0x1fb90d38 # initialize rs2
bltu x9, x9, 1f # perform operation
nop
nop
1:
# same values in both registers
li x9, 0x1fb90d38 # initialize rs1
li x9, 0x1fb90d38 # initialize rs2
bltu x9, x9, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0x7c5ad448 # initialize rs1
li x10, 0xcfc471d7 # initialize rs2
bltu x10, x10, 1f # perform operation
nop
nop
1:
# same values in both registers
li x10, 0xcfc471d7 # initialize rs1
li x10, 0xcfc471d7 # initialize rs2
bltu x10, x10, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0xb7471326 # initialize rs1
li x11, 0x4dbfec56 # initialize rs2
bltu x11, x11, 1f # perform operation
nop
nop
1:
# same values in both registers
li x11, 0x4dbfec56 # initialize rs1
li x11, 0x4dbfec56 # initialize rs2
bltu x11, x11, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0x9d5ab378 # initialize rs1
li x12, 0x21d54791 # initialize rs2
bltu x12, x12, 1f # perform operation
nop
nop
1:
# same values in both registers
li x12, 0x21d54791 # initialize rs1
li x12, 0x21d54791 # initialize rs2
bltu x12, x12, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xd2136db6 # initialize rs1
li x13, 0xb44c37cb # initialize rs2
bltu x13, x13, 1f # perform operation
nop
nop
1:
# same values in both registers
li x13, 0xb44c37cb # initialize rs1
li x13, 0xb44c37cb # initialize rs2
bltu x13, x13, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x0cb0a667 # initialize rs1
li x14, 0x6e8021f3 # initialize rs2
bltu x14, x14, 1f # perform operation
nop
nop
1:
# same values in both registers
li x14, 0x6e8021f3 # initialize rs1
li x14, 0x6e8021f3 # initialize rs2
bltu x14, x14, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x0be790e5 # initialize rs1
li x15, 0x373f41c8 # initialize rs2
bltu x15, x15, 1f # perform operation
nop
nop
1:
# same values in both registers
li x15, 0x373f41c8 # initialize rs1
li x15, 0x373f41c8 # initialize rs2
bltu x15, x15, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x7e857524 # initialize rs1
li x16, 0x9e9483ce # initialize rs2
bltu x16, x16, 1f # perform operation
nop
nop
1:
# same values in both registers
li x16, 0x9e9483ce # initialize rs1
li x16, 0x9e9483ce # initialize rs2
bltu x16, x16, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0x86258343 # initialize rs1
li x17, 0x3c9ab00a # initialize rs2
bltu x17, x17, 1f # perform operation
nop
nop
1:
# same values in both registers
li x17, 0x3c9ab00a # initialize rs1
li x17, 0x3c9ab00a # initialize rs2
bltu x17, x17, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0x2ef040a5 # initialize rs1
li x18, 0x675b0d56 # initialize rs2
bltu x18, x18, 1f # perform operation
nop
nop
1:
# same values in both registers
li x18, 0x675b0d56 # initialize rs1
li x18, 0x675b0d56 # initialize rs2
bltu x18, x18, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x65051d41 # initialize rs1
li x19, 0x26ac5b72 # initialize rs2
bltu x19, x19, 1f # perform operation
nop
nop
1:
# same values in both registers
li x19, 0x26ac5b72 # initialize rs1
li x19, 0x26ac5b72 # initialize rs2
bltu x19, x19, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x9256cea8 # initialize rs1
li x20, 0x73344b12 # initialize rs2
bltu x20, x20, 1f # perform operation
nop
nop
1:
# same values in both registers
li x20, 0x73344b12 # initialize rs1
li x20, 0x73344b12 # initialize rs2
bltu x20, x20, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xeb850020 # initialize rs1
li x21, 0xb69cbacb # initialize rs2
bltu x21, x21, 1f # perform operation
nop
nop
1:
# same values in both registers
li x21, 0xb69cbacb # initialize rs1
li x21, 0xb69cbacb # initialize rs2
bltu x21, x21, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0xa523575c # initialize rs1
li x22, 0x1114a2fe # initialize rs2
bltu x22, x22, 1f # perform operation
nop
nop
1:
# same values in both registers
li x22, 0x1114a2fe # initialize rs1
li x22, 0x1114a2fe # initialize rs2
bltu x22, x22, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0xc2b70173 # initialize rs1
li x23, 0xdbad3c99 # initialize rs2
bltu x23, x23, 1f # perform operation
nop
nop
1:
# same values in both registers
li x23, 0xdbad3c99 # initialize rs1
li x23, 0xdbad3c99 # initialize rs2
bltu x23, x23, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x3be52d22 # initialize rs1
li x24, 0x11f26d62 # initialize rs2
bltu x24, x24, 1f # perform operation
nop
nop
1:
# same values in both registers
li x24, 0x11f26d62 # initialize rs1
li x24, 0x11f26d62 # initialize rs2
bltu x24, x24, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x5b8c17b1 # initialize rs1
li x25, 0xce917af6 # initialize rs2
bltu x25, x25, 1f # perform operation
nop
nop
1:
# same values in both registers
li x25, 0xce917af6 # initialize rs1
li x25, 0xce917af6 # initialize rs2
bltu x25, x25, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x25278b44 # initialize rs1
li x26, 0x74ed181a # initialize rs2
bltu x26, x26, 1f # perform operation
nop
nop
1:
# same values in both registers
li x26, 0x74ed181a # initialize rs1
li x26, 0x74ed181a # initialize rs2
bltu x26, x26, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0x51ccd4e1 # initialize rs1
li x27, 0xa897f789 # initialize rs2
bltu x27, x27, 1f # perform operation
nop
nop
1:
# same values in both registers
li x27, 0xa897f789 # initialize rs1
li x27, 0xa897f789 # initialize rs2
bltu x27, x27, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x3e1a9527 # initialize rs1
li x28, 0x245fa5af # initialize rs2
bltu x28, x28, 1f # perform operation
nop
nop
1:
# same values in both registers
li x28, 0x245fa5af # initialize rs1
li x28, 0x245fa5af # initialize rs2
bltu x28, x28, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0xdd491842 # initialize rs1
li x29, 0x369013d1 # initialize rs2
bltu x29, x29, 1f # perform operation
nop
nop
1:
# same values in both registers
li x29, 0x369013d1 # initialize rs1
li x29, 0x369013d1 # initialize rs2
bltu x29, x29, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0x8d55899b # initialize rs1
li x30, 0xdab7a4ae # initialize rs2
bltu x30, x30, 1f # perform operation
nop
nop
1:
# same values in both registers
li x30, 0xdab7a4ae # initialize rs1
li x30, 0xdab7a4ae # initialize rs2
bltu x30, x30, 1f # perform operation
nop
nop
1:

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0x6fb5a773 # initialize rs1
li x31, 0x1a8d10ab # initialize rs2
bltu x31, x31, 1f # perform operation
nop
nop
1:
# same values in both registers
li x31, 0x1a8d10ab # initialize rs1
li x31, 0x1a8d10ab # initialize rs2
bltu x31, x31, 1f # perform operation
nop
nop
1:

# Testcase cp_offset negative bin
j 2f # jump past backward branch target
1: j 3f # backward branch target: jump past backward branch
2: bltu x0, x0, 1b # backward branch
3: nop # done with sequence

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x25, x23 # perform first operation
bltu x13, x15, arbitraryLabel25
nop
arbitraryLabel25:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x21, x17, x10 # perform first operation
bltu x8, x6, arbitraryLabel26
nop
arbitraryLabel26:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x1, x30, x8 # perform first operation
bltu x24, x7, arbitraryLabel27
nop
arbitraryLabel27:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x2, x9, x19 # perform first operation
bltu x2, x7, arbitraryLabel28
nop
arbitraryLabel28:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x13, x10, x14 # perform first operation
bltu x17, x13, arbitraryLabel29
nop
arbitraryLabel29:
nop
 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x18, x17, x27 # perform first operation
bltu x29, x17, arbitraryLabel30
nop
arbitraryLabel30:
nop
 # perform second (triggering) operation

#.EQU SIGSIZE,0


// ******************
// Tests from: WALLY-COV-lbu.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x1)
li x6, 0xfc94a007 # initialize rs2
la x1, scratch # base address 
addi x1, x1, -1995 # sub immediate from rs1 to counter offset
sw x6, 1995 (x1) # store value to put something in memory
lbu x23, 1995(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_rs1 (Test source rs1 = x2)
li x29, 0x12e328b9 # initialize rs2
la x2, scratch # base address 
addi x2, x2, -722 # sub immediate from rs1 to counter offset
sw x29, 722 (x2) # store value to put something in memory
lbu x27, 722(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 4)

# Testcase cp_rs1 (Test source rs1 = x3)
li x20, 0xda6e1d8f # initialize rs2
la x3, scratch # base address 
addi x3, x3, -1913 # sub immediate from rs1 to counter offset
sw x20, 1913 (x3) # store value to put something in memory
lbu x11, 1913(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 8)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0x8167d958 # initialize rs2
la x4, scratch # base address 
addi x4, x4, -799 # sub immediate from rs1 to counter offset
sw x9, 799 (x4) # store value to put something in memory
lbu x26, 799(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x26, 12)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0x787b5363 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -619 # sub immediate from rs1 to counter offset
sw x14, 619 (x5) # store value to put something in memory
lbu x8, 619(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x8, 16)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x2f94eec8 # initialize rs2
la x6, scratch # base address 
addi x6, x6, 1981 # sub immediate from rs1 to counter offset
sw x4, -1981 (x6) # store value to put something in memory
lbu x2, -1981(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x2, 20)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0x9795970f # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1672 # sub immediate from rs1 to counter offset
sw x12, 1672 (x7) # store value to put something in memory
lbu x5, 1672(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x5, 24)

# Testcase cp_rs1 (Test source rs1 = x8)
li x6, 0xab98e73c # initialize rs2
la x8, scratch # base address 
addi x8, x8, -1531 # sub immediate from rs1 to counter offset
sw x6, 1531 (x8) # store value to put something in memory
lbu x27, 1531(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 28)

# Testcase cp_rs1 (Test source rs1 = x9)
li x29, 0x5ed85afe # initialize rs2
la x9, scratch # base address 
addi x9, x9, -1054 # sub immediate from rs1 to counter offset
sw x29, 1054 (x9) # store value to put something in memory
lbu x25, 1054(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 32)

# Testcase cp_rs1 (Test source rs1 = x10)
li x21, 0x09d7f347 # initialize rs2
la x10, scratch # base address 
addi x10, x10, 133 # sub immediate from rs1 to counter offset
sw x21, -133 (x10) # store value to put something in memory
lbu x23, -133(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 36)

# Testcase cp_rs1 (Test source rs1 = x11)
li x21, 0x448f8262 # initialize rs2
la x11, scratch # base address 
addi x11, x11, -1058 # sub immediate from rs1 to counter offset
sw x21, 1058 (x11) # store value to put something in memory
lbu x20, 1058(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 40)

# Testcase cp_rs1 (Test source rs1 = x12)
li x13, 0x2b6a2d27 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -341 # sub immediate from rs1 to counter offset
sw x13, 341 (x12) # store value to put something in memory
lbu x29, 341(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 44)

# Testcase cp_rs1 (Test source rs1 = x13)
li x12, 0xa9f4d42e # initialize rs2
la x13, scratch # base address 
addi x13, x13, -181 # sub immediate from rs1 to counter offset
sw x12, 181 (x13) # store value to put something in memory
lbu x29, 181(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 48)

# Testcase cp_rs1 (Test source rs1 = x14)
li x5, 0x4993c7f6 # initialize rs2
la x14, scratch # base address 
addi x14, x14, -97 # sub immediate from rs1 to counter offset
sw x5, 97 (x14) # store value to put something in memory
lbu x19, 97(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 52)

# Testcase cp_rs1 (Test source rs1 = x15)
li x18, 0x5bd815bc # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1010 # sub immediate from rs1 to counter offset
sw x18, -1010 (x15) # store value to put something in memory
lbu x13, -1010(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 56)

# Testcase cp_rs1 (Test source rs1 = x16)
li x6, 0xae2e01cc # initialize rs2
la x16, scratch # base address 
addi x16, x16, -1961 # sub immediate from rs1 to counter offset
sw x6, 1961 (x16) # store value to put something in memory
lbu x15, 1961(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 60)

# Testcase cp_rs1 (Test source rs1 = x17)
li x24, 0xa9863c57 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1222 # sub immediate from rs1 to counter offset
sw x24, 1222 (x17) # store value to put something in memory
lbu x3, 1222(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 64)

# Testcase cp_rs1 (Test source rs1 = x18)
li x10, 0xdf2301ef # initialize rs2
la x18, scratch # base address 
addi x18, x18, 143 # sub immediate from rs1 to counter offset
sw x10, -143 (x18) # store value to put something in memory
lbu x21, -143(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 68)

# Testcase cp_rs1 (Test source rs1 = x19)
li x3, 0xdbf1effa # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1029 # sub immediate from rs1 to counter offset
sw x3, -1029 (x19) # store value to put something in memory
lbu x17, -1029(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 72)

# Testcase cp_rs1 (Test source rs1 = x20)
li x15, 0x4ad3000c # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1260 # sub immediate from rs1 to counter offset
sw x15, 1260 (x20) # store value to put something in memory
lbu x3, 1260(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 76)

# Testcase cp_rs1 (Test source rs1 = x21)
li x16, 0x82decf02 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 1772 # sub immediate from rs1 to counter offset
sw x16, -1772 (x21) # store value to put something in memory
lbu x11, -1772(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 80)

# Testcase cp_rs1 (Test source rs1 = x22)
li x9, 0xc5abb0d5 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1406 # sub immediate from rs1 to counter offset
sw x9, 1406 (x22) # store value to put something in memory
lbu x20, 1406(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 84)

# Testcase cp_rs1 (Test source rs1 = x23)
li x9, 0xb1fe28f9 # initialize rs2
la x23, scratch # base address 
addi x23, x23, 708 # sub immediate from rs1 to counter offset
sw x9, -708 (x23) # store value to put something in memory
lbu x19, -708(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 88)

# Testcase cp_rs1 (Test source rs1 = x24)
li x23, 0xb469c6c4 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 270 # sub immediate from rs1 to counter offset
sw x23, -270 (x24) # store value to put something in memory
lbu x1, -270(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 92)

# Testcase cp_rs1 (Test source rs1 = x25)
li x12, 0x9fe6e4bd # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1583 # sub immediate from rs1 to counter offset
sw x12, -1583 (x25) # store value to put something in memory
lbu x19, -1583(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 96)

# Testcase cp_rs1 (Test source rs1 = x26)
li x18, 0xcc5cdc97 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 149 # sub immediate from rs1 to counter offset
sw x18, -149 (x26) # store value to put something in memory
lbu x10, -149(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 100)

# Testcase cp_rs1 (Test source rs1 = x27)
li x15, 0x3fa00c9d # initialize rs2
la x27, scratch # base address 
addi x27, x27, -2005 # sub immediate from rs1 to counter offset
sw x15, 2005 (x27) # store value to put something in memory
lbu x23, 2005(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 104)

# Testcase cp_rs1 (Test source rs1 = x28)
li x18, 0xb23855fe # initialize rs2
la x28, scratch # base address 
addi x28, x28, -94 # sub immediate from rs1 to counter offset
sw x18, 94 (x28) # store value to put something in memory
lbu x9, 94(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 108)

# Testcase cp_rs1 (Test source rs1 = x29)
li x12, 0xaa6964c0 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1037 # sub immediate from rs1 to counter offset
sw x12, 1037 (x29) # store value to put something in memory
lbu x27, 1037(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 112)

# Testcase cp_rs1 (Test source rs1 = x30)
li x5, 0x0b841266 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 640 # sub immediate from rs1 to counter offset
sw x5, -640 (x30) # store value to put something in memory
lbu x7, -640(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 116)

# Testcase cp_rs1 (Test source rs1 = x31)
li x11, 0xeb5e136c # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1341 # sub immediate from rs1 to counter offset
sw x11, -1341 (x31) # store value to put something in memory
lbu x10, -1341(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 120)

# Testcase cp_rd (Test destination rd = x0)
li x27, 0x77508df5 # initialize rs2
la x26, scratch # base address 
addi x26, x26, 1805 # sub immediate from rs1 to counter offset
sw x27, -1805 (x26) # store value to put something in memory
lbu x0, -1805(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x0, 124)

# Testcase cp_rd (Test destination rd = x1)
li x3, 0xe6cbebf8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -493 # sub immediate from rs1 to counter offset
sw x3, 493 (x20) # store value to put something in memory
lbu x1, 493(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 128)

# Testcase cp_rd (Test destination rd = x2)
li x25, 0x6a3d1a90 # initialize rs2
la x28, scratch # base address 
addi x28, x28, 1507 # sub immediate from rs1 to counter offset
sw x25, -1507 (x28) # store value to put something in memory
lbu x2, -1507(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 132)

# Testcase cp_rd (Test destination rd = x3)
li x11, 0x7404c720 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1053 # sub immediate from rs1 to counter offset
sw x11, 1053 (x12) # store value to put something in memory
lbu x3, 1053(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 136)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0xd8e346b6 # initialize rs2
la x8, scratch # base address 
addi x8, x8, 1274 # sub immediate from rs1 to counter offset
sw x9, -1274 (x8) # store value to put something in memory
lbu x4, -1274(x8) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 140)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x8, 0x3c459858 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -1201 # sub immediate from rs1 to counter offset
sw x8, 1201 (x7) # store value to put something in memory
lbu x5, 1201(x7) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 144)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0xf7ffbfb5 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 648 # sub immediate from rs1 to counter offset
sw x17, -648 (x25) # store value to put something in memory
lbu x6, -648(x25) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 148)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x23, 0x974408de # initialize rs2
la x14, scratch # base address 
addi x14, x14, -343 # sub immediate from rs1 to counter offset
sw x23, 343 (x14) # store value to put something in memory
lbu x7, 343(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 152)

# Testcase cp_rd (Test destination rd = x8)
li x7, 0xf1d196f7 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 762 # sub immediate from rs1 to counter offset
sw x7, -762 (x12) # store value to put something in memory
lbu x8, -762(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 156)

# Testcase cp_rd (Test destination rd = x9)
li x17, 0xe59cd5f6 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 1586 # sub immediate from rs1 to counter offset
sw x17, -1586 (x14) # store value to put something in memory
lbu x9, -1586(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 160)

# Testcase cp_rd (Test destination rd = x10)
li x30, 0x615f088b # initialize rs2
la x25, scratch # base address 
addi x25, x25, -445 # sub immediate from rs1 to counter offset
sw x30, 445 (x25) # store value to put something in memory
lbu x10, 445(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 164)

# Testcase cp_rd (Test destination rd = x11)
li x23, 0xf58f4843 # initialize rs2
la x5, scratch # base address 
addi x5, x5, 413 # sub immediate from rs1 to counter offset
sw x23, -413 (x5) # store value to put something in memory
lbu x11, -413(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 168)

# Testcase cp_rd (Test destination rd = x12)
li x19, 0x73b428df # initialize rs2
la x30, scratch # base address 
addi x30, x30, 195 # sub immediate from rs1 to counter offset
sw x19, -195 (x30) # store value to put something in memory
lbu x12, -195(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 172)

# Testcase cp_rd (Test destination rd = x13)
li x23, 0xae4c5d0f # initialize rs2
la x14, scratch # base address 
addi x14, x14, -645 # sub immediate from rs1 to counter offset
sw x23, 645 (x14) # store value to put something in memory
lbu x13, 645(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 176)

# Testcase cp_rd (Test destination rd = x14)
li x22, 0x4de85e86 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1677 # sub immediate from rs1 to counter offset
sw x22, 1677 (x13) # store value to put something in memory
lbu x14, 1677(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 180)

# Testcase cp_rd (Test destination rd = x15)
li x31, 0x6b92af59 # initialize rs2
la x21, scratch # base address 
addi x21, x21, -1557 # sub immediate from rs1 to counter offset
sw x31, 1557 (x21) # store value to put something in memory
lbu x15, 1557(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 184)

# Testcase cp_rd (Test destination rd = x16)
li x10, 0xa0c13ec8 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1019 # sub immediate from rs1 to counter offset
sw x10, -1019 (x20) # store value to put something in memory
lbu x16, -1019(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 188)

# Testcase cp_rd (Test destination rd = x17)
li x3, 0xa870952c # initialize rs2
la x30, scratch # base address 
addi x30, x30, 838 # sub immediate from rs1 to counter offset
sw x3, -838 (x30) # store value to put something in memory
lbu x17, -838(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 192)

# Testcase cp_rd (Test destination rd = x18)
li x7, 0xa00505f5 # initialize rs2
la x19, scratch # base address 
addi x19, x19, 1336 # sub immediate from rs1 to counter offset
sw x7, -1336 (x19) # store value to put something in memory
lbu x18, -1336(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 196)

# Testcase cp_rd (Test destination rd = x19)
li x25, 0xa6ecd48b # initialize rs2
la x30, scratch # base address 
addi x30, x30, -1595 # sub immediate from rs1 to counter offset
sw x25, 1595 (x30) # store value to put something in memory
lbu x19, 1595(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 200)

# Testcase cp_rd (Test destination rd = x20)
li x16, 0x172ab03d # initialize rs2
la x21, scratch # base address 
addi x21, x21, -2001 # sub immediate from rs1 to counter offset
sw x16, 2001 (x21) # store value to put something in memory
lbu x20, 2001(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 204)

# Testcase cp_rd (Test destination rd = x21)
li x19, 0x7b69b5a3 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -724 # sub immediate from rs1 to counter offset
sw x19, 724 (x27) # store value to put something in memory
lbu x21, 724(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 208)

# Testcase cp_rd (Test destination rd = x22)
li x18, 0x5d9cf28c # initialize rs2
la x31, scratch # base address 
addi x31, x31, 435 # sub immediate from rs1 to counter offset
sw x18, -435 (x31) # store value to put something in memory
lbu x22, -435(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_rd (Test destination rd = x23)
li x31, 0x2f294108 # initialize rs2
la x15, scratch # base address 
addi x15, x15, 1542 # sub immediate from rs1 to counter offset
sw x31, -1542 (x15) # store value to put something in memory
lbu x23, -1542(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 216)

# Testcase cp_rd (Test destination rd = x24)
li x14, 0x62b42b18 # initialize rs2
la x20, scratch # base address 
addi x20, x20, 1884 # sub immediate from rs1 to counter offset
sw x14, -1884 (x20) # store value to put something in memory
lbu x24, -1884(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 220)

# Testcase cp_rd (Test destination rd = x25)
li x8, 0x167f9b11 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -619 # sub immediate from rs1 to counter offset
sw x8, 619 (x29) # store value to put something in memory
lbu x25, 619(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 224)

# Testcase cp_rd (Test destination rd = x26)
li x10, 0x88cddf98 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1652 # sub immediate from rs1 to counter offset
sw x10, -1652 (x3) # store value to put something in memory
lbu x26, -1652(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 228)

# Testcase cp_rd (Test destination rd = x27)
li x16, 0x66e964cb # initialize rs2
la x23, scratch # base address 
addi x23, x23, 456 # sub immediate from rs1 to counter offset
sw x16, -456 (x23) # store value to put something in memory
lbu x27, -456(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 232)

# Testcase cp_rd (Test destination rd = x28)
li x10, 0xef6b5209 # initialize rs2
la x20, scratch # base address 
addi x20, x20, -1933 # sub immediate from rs1 to counter offset
sw x10, 1933 (x20) # store value to put something in memory
lbu x28, 1933(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 236)

# Testcase cp_rd (Test destination rd = x29)
li x17, 0x4e436aa7 # initialize rs2
la x9, scratch # base address 
addi x9, x9, 931 # sub immediate from rs1 to counter offset
sw x17, -931 (x9) # store value to put something in memory
lbu x29, -931(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 240)

# Testcase cp_rd (Test destination rd = x30)
li x3, 0x33d446c0 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -866 # sub immediate from rs1 to counter offset
sw x3, 866 (x23) # store value to put something in memory
lbu x30, 866(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 244)

# Testcase cp_rd (Test destination rd = x31)
li x1, 0x44b598ff # initialize rs2
la x17, scratch # base address 
addi x17, x17, 883 # sub immediate from rs1 to counter offset
sw x1, -883 (x17) # store value to put something in memory
lbu x31, -883(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x24, 0xe4cfafe8 # initialize rs2
la x1, scratch # base address 
addi x1, x1, 1425 # sub immediate from rs1 to counter offset
sw x24, -1425 (x1) # store value to put something in memory
lbu x1, -1425(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x1, 252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x20, 0x25dedeb4 # initialize rs2
la x2, scratch # base address 
addi x2, x2, 14 # sub immediate from rs1 to counter offset
sw x20, -14 (x2) # store value to put something in memory
lbu x2, -14(x2) # perform operation
RVTEST_SIGUPD(x4, x0, x2, 256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x21, 0x3a99c3a0 # initialize rs2
la x3, scratch # base address 
addi x3, x3, 1138 # sub immediate from rs1 to counter offset
sw x21, -1138 (x3) # store value to put something in memory
lbu x3, -1138(x3) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x1, 0xe1b4466f # initialize rs2
la x4, scratch # base address 
addi x4, x4, -1593 # sub immediate from rs1 to counter offset
sw x1, 1593 (x4) # store value to put something in memory
lbu x4, 1593(x4) # perform operation
RVTEST_SIGUPD(x5, x0, x4, 264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x30, 0xc384fbec # initialize rs2
la x5, scratch # base address 
addi x5, x5, 764 # sub immediate from rs1 to counter offset
sw x30, -764 (x5) # store value to put something in memory
lbu x5, -764(x5) # perform operation
RVTEST_SIGUPD(x6, x0, x5, 268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x18, 0x0dbf2353 # initialize rs2
la x6, scratch # base address 
addi x6, x6, -1403 # sub immediate from rs1 to counter offset
sw x18, 1403 (x6) # store value to put something in memory
lbu x6, 1403(x6) # perform operation
RVTEST_SIGUPD(x7, x0, x6, 272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x31, 0x30122a5a # initialize rs2
la x7, scratch # base address 
addi x7, x7, -33 # sub immediate from rs1 to counter offset
sw x31, 33 (x7) # store value to put something in memory
lbu x7, 33(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x26, 0x44de03a3 # initialize rs2
la x8, scratch # base address 
addi x8, x8, -321 # sub immediate from rs1 to counter offset
sw x26, 321 (x8) # store value to put something in memory
lbu x8, 321(x8) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x11, 0x82acb14b # initialize rs2
la x9, scratch # base address 
addi x9, x9, 1658 # sub immediate from rs1 to counter offset
sw x11, -1658 (x9) # store value to put something in memory
lbu x9, -1658(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x9, 284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x17, 0xaca1d695 # initialize rs2
la x10, scratch # base address 
addi x10, x10, -1280 # sub immediate from rs1 to counter offset
sw x17, 1280 (x10) # store value to put something in memory
lbu x10, 1280(x10) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x1, 0x61b2ec55 # initialize rs2
la x11, scratch # base address 
addi x11, x11, 303 # sub immediate from rs1 to counter offset
sw x1, -303 (x11) # store value to put something in memory
lbu x11, -303(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x11, 292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x13, 0x0b524789 # initialize rs2
la x12, scratch # base address 
addi x12, x12, 625 # sub immediate from rs1 to counter offset
sw x13, -625 (x12) # store value to put something in memory
lbu x12, -625(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x24, 0xb7a2772b # initialize rs2
la x13, scratch # base address 
addi x13, x13, -1744 # sub immediate from rs1 to counter offset
sw x24, 1744 (x13) # store value to put something in memory
lbu x13, 1744(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x13, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x5, 0x48b09f2a # initialize rs2
la x14, scratch # base address 
addi x14, x14, 560 # sub immediate from rs1 to counter offset
sw x5, -560 (x14) # store value to put something in memory
lbu x14, -560(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x16, 0x3893a66e # initialize rs2
la x15, scratch # base address 
addi x15, x15, -1877 # sub immediate from rs1 to counter offset
sw x16, 1877 (x15) # store value to put something in memory
lbu x15, 1877(x15) # perform operation
RVTEST_SIGUPD(x4, x0, x15, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x20, 0xaff86b79 # initialize rs2
la x16, scratch # base address 
addi x16, x16, 699 # sub immediate from rs1 to counter offset
sw x20, -699 (x16) # store value to put something in memory
lbu x16, -699(x16) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x30, 0x75c1db40 # initialize rs2
la x17, scratch # base address 
addi x17, x17, -1713 # sub immediate from rs1 to counter offset
sw x30, 1713 (x17) # store value to put something in memory
lbu x17, 1713(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x11, 0x2497f154 # initialize rs2
la x18, scratch # base address 
addi x18, x18, 39 # sub immediate from rs1 to counter offset
sw x11, -39 (x18) # store value to put something in memory
lbu x18, -39(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x23, 0xdf1517c9 # initialize rs2
la x19, scratch # base address 
addi x19, x19, -409 # sub immediate from rs1 to counter offset
sw x23, 409 (x19) # store value to put something in memory
lbu x19, 409(x19) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x3, 0x6a87dc3a # initialize rs2
la x20, scratch # base address 
addi x20, x20, -175 # sub immediate from rs1 to counter offset
sw x3, 175 (x20) # store value to put something in memory
lbu x20, 175(x20) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x30, 0x26d13c56 # initialize rs2
la x21, scratch # base address 
addi x21, x21, 427 # sub immediate from rs1 to counter offset
sw x30, -427 (x21) # store value to put something in memory
lbu x21, -427(x21) # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x21, 0x9ba6cc54 # initialize rs2
la x22, scratch # base address 
addi x22, x22, -977 # sub immediate from rs1 to counter offset
sw x21, 977 (x22) # store value to put something in memory
lbu x22, 977(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x15, 0x5ecc0ea1 # initialize rs2
la x23, scratch # base address 
addi x23, x23, -1184 # sub immediate from rs1 to counter offset
sw x15, 1184 (x23) # store value to put something in memory
lbu x23, 1184(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x11, 0x5bc51e89 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 966 # sub immediate from rs1 to counter offset
sw x11, -966 (x24) # store value to put something in memory
lbu x24, -966(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x24, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x2, 0x68c45891 # initialize rs2
la x25, scratch # base address 
addi x25, x25, 1754 # sub immediate from rs1 to counter offset
sw x2, -1754 (x25) # store value to put something in memory
lbu x25, -1754(x25) # perform operation
RVTEST_SIGUPD(x4, x0, x25, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x2, 0xe1526309 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -207 # sub immediate from rs1 to counter offset
sw x2, 207 (x26) # store value to put something in memory
lbu x26, 207(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x26, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x28, 0x6f3e4771 # initialize rs2
la x27, scratch # base address 
addi x27, x27, -986 # sub immediate from rs1 to counter offset
sw x28, 986 (x27) # store value to put something in memory
lbu x27, 986(x27) # perform operation
RVTEST_SIGUPD(x4, x0, x27, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x24, 0x09010ace # initialize rs2
la x28, scratch # base address 
addi x28, x28, -260 # sub immediate from rs1 to counter offset
sw x24, 260 (x28) # store value to put something in memory
lbu x28, 260(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x57418496 # initialize rs2
la x29, scratch # base address 
addi x29, x29, 1033 # sub immediate from rs1 to counter offset
sw x29, -1033 (x29) # store value to put something in memory
lbu x29, -1033(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x29, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x17, 0x2b6eab15 # initialize rs2
la x30, scratch # base address 
addi x30, x30, 114 # sub immediate from rs1 to counter offset
sw x17, -114 (x30) # store value to put something in memory
lbu x30, -114(x30) # perform operation
RVTEST_SIGUPD(x4, x0, x30, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x665f4664 # initialize rs2
la x31, scratch # base address 
addi x31, x31, 1228 # sub immediate from rs1 to counter offset
sw x31, -1228 (x31) # store value to put something in memory
lbu x31, -1228(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x31, 372)

# Testcase cp_imm_corners
li x7, 0x2af16c84 # initialize rs2
la x24, scratch # base address 
addi x24, x24, 0 # sub immediate from rs1 to counter offset
sw x7, 0 (x24) # store value to put something in memory
lbu x16, 0(x24) # perform operation
RVTEST_SIGUPD(x4, x0, x16, 376)

# Testcase cp_imm_corners
li x31, 0x9da63866 # initialize rs2
la x29, scratch # base address 
addi x29, x29, -1 # sub immediate from rs1 to counter offset
sw x31, 1 (x29) # store value to put something in memory
lbu x28, 1(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x28, 380)

# Testcase cp_imm_corners
li x30, 0x59cce3c3 # initialize rs2
la x18, scratch # base address 
addi x18, x18, -2 # sub immediate from rs1 to counter offset
sw x30, 2 (x18) # store value to put something in memory
lbu x3, 2(x18) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 384)

# Testcase cp_imm_corners
li x12, 0xdd27918c # initialize rs2
la x31, scratch # base address 
addi x31, x31, -3 # sub immediate from rs1 to counter offset
sw x12, 3 (x31) # store value to put something in memory
lbu x22, 3(x31) # perform operation
RVTEST_SIGUPD(x4, x0, x22, 388)

# Testcase cp_imm_corners
li x21, 0xe0851b03 # initialize rs2
la x5, scratch # base address 
addi x5, x5, -4 # sub immediate from rs1 to counter offset
sw x21, 4 (x5) # store value to put something in memory
lbu x23, 4(x5) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 392)

# Testcase cp_imm_corners
li x17, 0xaebd446e # initialize rs2
la x29, scratch # base address 
addi x29, x29, -8 # sub immediate from rs1 to counter offset
sw x17, 8 (x29) # store value to put something in memory
lbu x7, 8(x29) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 396)

# Testcase cp_imm_corners
li x30, 0x69db00cd # initialize rs2
la x11, scratch # base address 
addi x11, x11, -16 # sub immediate from rs1 to counter offset
sw x30, 16 (x11) # store value to put something in memory
lbu x7, 16(x11) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 400)

# Testcase cp_imm_corners
li x6, 0xae394cfa # initialize rs2
la x17, scratch # base address 
addi x17, x17, -32 # sub immediate from rs1 to counter offset
sw x6, 32 (x17) # store value to put something in memory
lbu x12, 32(x17) # perform operation
RVTEST_SIGUPD(x4, x0, x12, 404)

# Testcase cp_imm_corners
li x3, 0x9aa44a6f # initialize rs2
la x1, scratch # base address 
addi x1, x1, -64 # sub immediate from rs1 to counter offset
sw x3, 64 (x1) # store value to put something in memory
lbu x6, 64(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x6, 408)

# Testcase cp_imm_corners
li x1, 0x35c728b6 # initialize rs2
la x13, scratch # base address 
addi x13, x13, -128 # sub immediate from rs1 to counter offset
sw x1, 128 (x13) # store value to put something in memory
lbu x14, 128(x13) # perform operation
RVTEST_SIGUPD(x4, x0, x14, 412)

# Testcase cp_imm_corners
li x6, 0xf4659494 # initialize rs2
la x28, scratch # base address 
addi x28, x28, -256 # sub immediate from rs1 to counter offset
sw x6, 256 (x28) # store value to put something in memory
lbu x8, 256(x28) # perform operation
RVTEST_SIGUPD(x4, x0, x8, 416)

# Testcase cp_imm_corners
li x23, 0xff9b46b1 # initialize rs2
la x7, scratch # base address 
addi x7, x7, -512 # sub immediate from rs1 to counter offset
sw x23, 512 (x7) # store value to put something in memory
lbu x3, 512(x7) # perform operation
RVTEST_SIGUPD(x4, x0, x3, 420)

# Testcase cp_imm_corners
li x12, 0xc547efa4 # initialize rs2
la x26, scratch # base address 
addi x26, x26, -1023 # sub immediate from rs1 to counter offset
sw x12, 1023 (x26) # store value to put something in memory
lbu x10, 1023(x26) # perform operation
RVTEST_SIGUPD(x4, x0, x10, 424)

# Testcase cp_imm_corners
li x6, 0x42955bec # initialize rs2
la x22, scratch # base address 
addi x22, x22, -1024 # sub immediate from rs1 to counter offset
sw x6, 1024 (x22) # store value to put something in memory
lbu x7, 1024(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 428)

# Testcase cp_imm_corners
li x3, 0x7b357fe6 # initialize rs2
la x12, scratch # base address 
addi x12, x12, -1795 # sub immediate from rs1 to counter offset
sw x3, 1795 (x12) # store value to put something in memory
lbu x17, 1795(x12) # perform operation
RVTEST_SIGUPD(x4, x0, x17, 432)

# Testcase cp_imm_corners
li x2, 0x6846b88e # initialize rs2
la x9, scratch # base address 
addi x9, x9, -2047 # sub immediate from rs1 to counter offset
sw x2, 2047 (x9) # store value to put something in memory
lbu x18, 2047(x9) # perform operation
RVTEST_SIGUPD(x4, x0, x18, 436)

# Testcase cp_imm_corners
li x13, 0x558525fa # initialize rs2
la x1, scratch # base address 
addi x1, x1, 2047 # increment rs1 by 2047 
addi x1, x1, 1 # increment rs1 to bump it by a total of 2048 to compensate for -2048
sw x13, -2048 (x1) # store value to put something in memory
lbu x23, -2048(x1) # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_imm_corners
li x25, 0x9c5cb6c2 # initialize rs2
la x14, scratch # base address 
addi x14, x14, 2047 # sub immediate from rs1 to counter offset
sw x25, -2047 (x14) # store value to put something in memory
lbu x19, -2047(x14) # perform operation
RVTEST_SIGUPD(x4, x0, x19, 444)

# Testcase cp_imm_corners
li x16, 0x8327316b # initialize rs2
la x22, scratch # base address 
addi x22, x22, 2 # sub immediate from rs1 to counter offset
sw x16, -2 (x22) # store value to put something in memory
lbu x7, -2(x22) # perform operation
RVTEST_SIGUPD(x4, x0, x7, 448)

# Testcase cp_imm_corners
li x7, 0xcb14552b # initialize rs2
la x23, scratch # base address 
addi x23, x23, 1 # sub immediate from rs1 to counter offset
sw x7, -1 (x23) # store value to put something in memory
lbu x20, -1(x23) # perform operation
RVTEST_SIGUPD(x4, x0, x20, 452)

# Testcase cp_gpr/fpr_hazard nohaz test
la x16, scratch
addi x16, x16, -572
add x27, x11, x26 # perform first operation
lbu x3, 572(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x15, scratch
addi x15, x15, 1029
add x12, x21, x25 # perform first operation
lbu x5, -1029(x15) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
la x31, scratch
addi x31, x31, 1841
add x28, x19, x22 # perform first operation
lbu x18, -1841(x31) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x16, scratch
addi x16, x16, 2036
add x16, x16, x0 # perform first operation
lbu x10, -2036(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x16, scratch
addi x16, x16, 1106
add x16, x16, x0 # perform first operation
lbu x27, -1106(x16) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
la x20, scratch
addi x20, x20, -95
add x20, x20, x0 # perform first operation
lbu x21, 95(x20) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x15, scratch
addi x15, x15, 510
add x20, x2, x7 # perform first operation
lbu x20, -510(x15) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x28, scratch
addi x28, x28, 1356
add x1, x8, x15 # perform first operation
lbu x1, -1356(x28) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
la x21, scratch
addi x21, x21, -191
add x13, x28, x8 # perform first operation
lbu x13, 191(x21) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x3, scratch
addi x3, x3, 1889
add x9, x6, x1 # perform first operation
lbu x6, -1889(x3) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x30, scratch
addi x30, x30, -1284
add x22, x28, x26 # perform first operation
lbu x26, 1284(x30) # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
la x5, scratch
addi x5, x5, -685
add x22, x27, x28 # perform first operation
lbu x12, 685(x5) # perform second (triggering) operation

#.EQU SIGSIZE,456


// ******************
// Tests from: WALLY-COV-slti.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0xda1bbd69 # initialize rs1
slti x23, x0, 1112 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x1b6e8be6 # initialize rs1
slti x17, x1, 1380 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x3e610675 # initialize rs1
slti x29, x2, 39 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0xcf8ed45e # initialize rs1
slti x31, x3, 891 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x3010a3df # initialize rs1
slti x20, x4, 756 # perform operation
RVTEST_SIGUPD(x5, x0, x20, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x23d420bf # initialize rs1
slti x8, x5, 1488 # perform operation
RVTEST_SIGUPD(x6, x0, x8, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xdbabcdf5 # initialize rs1
slti x13, x6, 1918 # perform operation
RVTEST_SIGUPD(x7, x0, x13, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xfc6adb9d # initialize rs1
slti x19, x7, -1781 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x2713ae6c # initialize rs1
slti x30, x8, -411 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x5f13dff4 # initialize rs1
slti x16, x9, -577 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x91a031d5 # initialize rs1
slti x12, x10, -53 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x54bcf748 # initialize rs1
slti x24, x11, 326 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x097533c6 # initialize rs1
slti x29, x12, -146 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xc87a88f1 # initialize rs1
slti x9, x13, 1925 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xa90cf208 # initialize rs1
slti x27, x14, 1516 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0xd7c4de97 # initialize rs1
slti x17, x15, -1699 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xccddfc7c # initialize rs1
slti x12, x16, -195 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x0b090945 # initialize rs1
slti x6, x17, 1862 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xb409334e # initialize rs1
slti x17, x18, -466 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xb59b7a63 # initialize rs1
slti x17, x19, -1001 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xda313832 # initialize rs1
slti x24, x20, 1111 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0xeb1b4e84 # initialize rs1
slti x27, x21, 1857 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xe057ff97 # initialize rs1
slti x24, x22, 682 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x4ad4971e # initialize rs1
slti x8, x23, 1269 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x048963a1 # initialize rs1
slti x16, x24, -1866 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xc4942c49 # initialize rs1
slti x19, x25, 850 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x4cc35c39 # initialize rs1
slti x21, x26, 1788 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x2ff5ee2f # initialize rs1
slti x6, x27, -903 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0xfee42c19 # initialize rs1
slti x25, x28, 1264 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0xf4c35e0f # initialize rs1
slti x11, x29, -1283 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x3b47e086 # initialize rs1
slti x29, x30, 1041 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0xc3f4e858 # initialize rs1
slti x3, x31, -940 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 124)

# Testcase cp_rd (Test destination rd = x0)
li x22, 0xb3fe3a3a # initialize rs1
slti x0, x22, 767 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x12, 0xa1ecd401 # initialize rs1
slti x1, x12, -1378 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x16, 0xd54020fc # initialize rs1
slti x2, x16, 1149 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x25, 0xdd9fe28b # initialize rs1
slti x3, x25, -1408 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x20, 0x6d52f683 # initialize rs1
slti x4, x20, 1517 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x4, 0xa4532e18 # initialize rs1
slti x5, x4, 1915 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0xaa3a44e7 # initialize rs1
slti x6, x24, 999 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x1, 0x61f6abfd # initialize rs1
slti x7, x1, -1054 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x29, 0xf11959a0 # initialize rs1
slti x8, x29, -375 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x21, 0xd12a115c # initialize rs1
slti x9, x21, 270 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x12, 0x0d14083b # initialize rs1
slti x10, x12, -629 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x9, 0xc0e43097 # initialize rs1
slti x11, x9, 909 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x19, 0x449ef692 # initialize rs1
slti x12, x19, 1467 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x11, 0x9368bde4 # initialize rs1
slti x13, x11, -437 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x27, 0x44ffee6d # initialize rs1
slti x14, x27, -252 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x18, 0xa8ad54c9 # initialize rs1
slti x15, x18, 1505 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x30, 0x80eb4352 # initialize rs1
slti x16, x30, 1764 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x25, 0xa15f32b7 # initialize rs1
slti x17, x25, 403 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x30, 0xfc0728d0 # initialize rs1
slti x18, x30, -445 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x28, 0x46388947 # initialize rs1
slti x19, x28, 1400 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x7, 0x4a5e8ea5 # initialize rs1
slti x20, x7, -815 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x9, 0x55f5bec7 # initialize rs1
slti x21, x9, 1856 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x19, 0x1ddfeceb # initialize rs1
slti x22, x19, 1558 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x30, 0x4db6bf79 # initialize rs1
slti x23, x30, -976 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x29, 0xafcdfa3a # initialize rs1
slti x24, x29, -314 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x11, 0x74b63bf1 # initialize rs1
slti x25, x11, 193 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x20, 0x219fedb5 # initialize rs1
slti x26, x20, 1650 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x15, 0x2fa2cf3a # initialize rs1
slti x27, x15, -640 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x1, 0x3eeb0941 # initialize rs1
slti x28, x1, 1395 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x24, 0xca798d98 # initialize rs1
slti x29, x24, -190 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x8, 0x479826bb # initialize rs1
slti x30, x8, 2043 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x3, 0x0a868fef # initialize rs1
slti x31, x3, 1888 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x29, 0x00000000 # initialize rs1
slti x15, x29, 929 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x28, 0x00000001 # initialize rs1
slti x3, x28, -879 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x13, 0x00000002 # initialize rs1
slti x25, x13, -735 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x29, 0x80000000 # initialize rs1
slti x24, x29, 785 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x2, 0x80000001 # initialize rs1
slti x16, x2, -852 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x12, 0x7fffffff # initialize rs1
slti x20, x12, -21 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x15, 0x7ffffffe # initialize rs1
slti x25, x15, -1543 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x8, 0xffffffff # initialize rs1
slti x3, x8, -417 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x29, 0xfffffffe # initialize rs1
slti x8, x29, 619 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x25, 0x5bbc8872 # initialize rs1
slti x26, x25, -1671 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x25, 0xaaaaaaaa # initialize rs1
slti x23, x25, -1180 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x21, 0x55555555 # initialize rs1
slti x12, x21, -1703 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 300)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000 # initialize rs1
slti x21, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 304)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000 # initialize rs1
slti x2, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 308)

# Testcase cr_rs1_imm_corners
li x15, 0x00000000 # initialize rs1
slti x7, x15, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 312)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000 # initialize rs1
slti x26, x12, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 316)

# Testcase cr_rs1_imm_corners
li x30, 0x00000000 # initialize rs1
slti x12, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 320)

# Testcase cr_rs1_imm_corners
li x14, 0x00000000 # initialize rs1
slti x1, x14, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 324)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000 # initialize rs1
slti x10, x5, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 328)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
slti x21, x31, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 332)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000 # initialize rs1
slti x31, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 336)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
slti x16, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 340)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
slti x29, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 344)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000 # initialize rs1
slti x12, x27, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 348)

# Testcase cr_rs1_imm_corners
li x10, 0x00000000 # initialize rs1
slti x21, x10, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 352)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
slti x29, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 356)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
slti x13, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 360)

# Testcase cr_rs1_imm_corners
li x1, 0x00000000 # initialize rs1
slti x2, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 364)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
slti x12, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 368)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000 # initialize rs1
slti x11, x8, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 372)

# Testcase cr_rs1_imm_corners
li x16, 0x00000000 # initialize rs1
slti x18, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 376)

# Testcase cr_rs1_imm_corners
li x25, 0x00000000 # initialize rs1
slti x17, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 380)

# Testcase cr_rs1_imm_corners
li x16, 0x00000001 # initialize rs1
slti x25, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 384)

# Testcase cr_rs1_imm_corners
li x12, 0x00000001 # initialize rs1
slti x11, x12, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 388)

# Testcase cr_rs1_imm_corners
li x19, 0x00000001 # initialize rs1
slti x20, x19, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 392)

# Testcase cr_rs1_imm_corners
li x24, 0x00000001 # initialize rs1
slti x6, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 396)

# Testcase cr_rs1_imm_corners
li x25, 0x00000001 # initialize rs1
slti x6, x25, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 400)

# Testcase cr_rs1_imm_corners
li x9, 0x00000001 # initialize rs1
slti x7, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 404)

# Testcase cr_rs1_imm_corners
li x25, 0x00000001 # initialize rs1
slti x18, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 408)

# Testcase cr_rs1_imm_corners
li x23, 0x00000001 # initialize rs1
slti x14, x23, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 412)

# Testcase cr_rs1_imm_corners
li x12, 0x00000001 # initialize rs1
slti x28, x12, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 416)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
slti x7, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 420)

# Testcase cr_rs1_imm_corners
li x11, 0x00000001 # initialize rs1
slti x2, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 424)

# Testcase cr_rs1_imm_corners
li x24, 0x00000001 # initialize rs1
slti x11, x24, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 428)

# Testcase cr_rs1_imm_corners
li x23, 0x00000001 # initialize rs1
slti x28, x23, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 432)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
slti x29, x5, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 436)

# Testcase cr_rs1_imm_corners
li x22, 0x00000001 # initialize rs1
slti x6, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 440)

# Testcase cr_rs1_imm_corners
li x18, 0x00000001 # initialize rs1
slti x1, x18, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 444)

# Testcase cr_rs1_imm_corners
li x7, 0x00000001 # initialize rs1
slti x9, x7, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 448)

# Testcase cr_rs1_imm_corners
li x14, 0x00000001 # initialize rs1
slti x20, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 452)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
slti x14, x5, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 456)

# Testcase cr_rs1_imm_corners
li x26, 0x00000001 # initialize rs1
slti x28, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 460)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
slti x31, x14, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 464)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
slti x29, x20, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 468)

# Testcase cr_rs1_imm_corners
li x26, 0x00000002 # initialize rs1
slti x30, x26, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 472)

# Testcase cr_rs1_imm_corners
li x5, 0x00000002 # initialize rs1
slti x13, x5, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 476)

# Testcase cr_rs1_imm_corners
li x27, 0x00000002 # initialize rs1
slti x11, x27, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 480)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
slti x18, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 484)

# Testcase cr_rs1_imm_corners
li x7, 0x00000002 # initialize rs1
slti x11, x7, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 488)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
slti x9, x13, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 492)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
slti x7, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 496)

# Testcase cr_rs1_imm_corners
li x12, 0x00000002 # initialize rs1
slti x15, x12, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 500)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
slti x24, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 504)

# Testcase cr_rs1_imm_corners
li x26, 0x00000002 # initialize rs1
slti x8, x26, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 508)

# Testcase cr_rs1_imm_corners
li x6, 0x00000002 # initialize rs1
slti x19, x6, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 512)

# Testcase cr_rs1_imm_corners
li x9, 0x00000002 # initialize rs1
slti x24, x9, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 516)

# Testcase cr_rs1_imm_corners
li x27, 0x00000002 # initialize rs1
slti x26, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 520)

# Testcase cr_rs1_imm_corners
li x22, 0x00000002 # initialize rs1
slti x5, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 524)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
slti x21, x13, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 528)

# Testcase cr_rs1_imm_corners
li x17, 0x00000002 # initialize rs1
slti x29, x17, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 532)

# Testcase cr_rs1_imm_corners
li x7, 0x00000002 # initialize rs1
slti x2, x7, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 536)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
slti x3, x16, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 540)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
slti x21, x24, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 544)

# Testcase cr_rs1_imm_corners
li x9, 0x80000000 # initialize rs1
slti x14, x9, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 548)

# Testcase cr_rs1_imm_corners
li x17, 0x80000000 # initialize rs1
slti x10, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 552)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
slti x13, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 556)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
slti x19, x13, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 560)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
slti x1, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 564)

# Testcase cr_rs1_imm_corners
li x17, 0x80000000 # initialize rs1
slti x3, x17, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 568)

# Testcase cr_rs1_imm_corners
li x3, 0x80000000 # initialize rs1
slti x15, x3, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 572)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
slti x22, x24, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 576)

# Testcase cr_rs1_imm_corners
li x2, 0x80000000 # initialize rs1
slti x17, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 580)

# Testcase cr_rs1_imm_corners
li x13, 0x80000000 # initialize rs1
slti x14, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 584)

# Testcase cr_rs1_imm_corners
li x31, 0x80000000 # initialize rs1
slti x23, x31, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 588)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
slti x6, x22, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 592)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
slti x23, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 596)

# Testcase cr_rs1_imm_corners
li x14, 0x80000000 # initialize rs1
slti x15, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 600)

# Testcase cr_rs1_imm_corners
li x1, 0x80000000 # initialize rs1
slti x22, x1, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 604)

# Testcase cr_rs1_imm_corners
li x27, 0x80000000 # initialize rs1
slti x18, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 608)

# Testcase cr_rs1_imm_corners
li x26, 0x80000000 # initialize rs1
slti x21, x26, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 612)

# Testcase cr_rs1_imm_corners
li x27, 0x80000000 # initialize rs1
slti x25, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 616)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
slti x19, x12, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 620)

# Testcase cr_rs1_imm_corners
li x3, 0x80000001 # initialize rs1
slti x31, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 624)

# Testcase cr_rs1_imm_corners
li x1, 0x80000001 # initialize rs1
slti x22, x1, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 628)

# Testcase cr_rs1_imm_corners
li x5, 0x80000001 # initialize rs1
slti x28, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 632)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
slti x12, x10, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 636)

# Testcase cr_rs1_imm_corners
li x22, 0x80000001 # initialize rs1
slti x2, x22, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 640)

# Testcase cr_rs1_imm_corners
li x20, 0x80000001 # initialize rs1
slti x22, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 644)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
slti x14, x11, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 648)

# Testcase cr_rs1_imm_corners
li x20, 0x80000001 # initialize rs1
slti x31, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 652)

# Testcase cr_rs1_imm_corners
li x22, 0x80000001 # initialize rs1
slti x2, x22, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 656)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
slti x5, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 660)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
slti x31, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 664)

# Testcase cr_rs1_imm_corners
li x3, 0x80000001 # initialize rs1
slti x11, x3, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 668)

# Testcase cr_rs1_imm_corners
li x24, 0x80000001 # initialize rs1
slti x9, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 672)

# Testcase cr_rs1_imm_corners
li x17, 0x80000001 # initialize rs1
slti x28, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 676)

# Testcase cr_rs1_imm_corners
li x14, 0x80000001 # initialize rs1
slti x20, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 680)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
slti x30, x12, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 684)

# Testcase cr_rs1_imm_corners
li x3, 0x80000001 # initialize rs1
slti x1, x3, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 688)

# Testcase cr_rs1_imm_corners
li x1, 0x80000001 # initialize rs1
slti x2, x1, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 692)

# Testcase cr_rs1_imm_corners
li x22, 0x80000001 # initialize rs1
slti x17, x22, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 696)

# Testcase cr_rs1_imm_corners
li x26, 0x80000001 # initialize rs1
slti x3, x26, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 700)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
slti x9, x6, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 704)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffff # initialize rs1
slti x23, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 708)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffff # initialize rs1
slti x27, x16, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 712)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
slti x19, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 716)

# Testcase cr_rs1_imm_corners
li x8, 0x7fffffff # initialize rs1
slti x28, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 720)

# Testcase cr_rs1_imm_corners
li x11, 0x7fffffff # initialize rs1
slti x25, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 724)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
slti x29, x2, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 728)

# Testcase cr_rs1_imm_corners
li x7, 0x7fffffff # initialize rs1
slti x14, x7, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 732)

# Testcase cr_rs1_imm_corners
li x19, 0x7fffffff # initialize rs1
slti x31, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 736)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffff # initialize rs1
slti x19, x5, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 740)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
slti x7, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 744)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
slti x19, x17, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 748)

# Testcase cr_rs1_imm_corners
li x3, 0x7fffffff # initialize rs1
slti x2, x3, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 752)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
slti x11, x26, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 756)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
slti x9, x21, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 760)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffff # initialize rs1
slti x8, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 764)

# Testcase cr_rs1_imm_corners
li x2, 0x7fffffff # initialize rs1
slti x15, x2, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 768)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
slti x14, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 772)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
slti x19, x17, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 776)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
slti x24, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 780)

# Testcase cr_rs1_imm_corners
li x5, 0x7ffffffe # initialize rs1
slti x31, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 784)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffe # initialize rs1
slti x3, x25, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 788)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
slti x15, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 792)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
slti x28, x3, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 796)

# Testcase cr_rs1_imm_corners
li x31, 0x7ffffffe # initialize rs1
slti x23, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 800)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
slti x27, x24, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 804)

# Testcase cr_rs1_imm_corners
li x13, 0x7ffffffe # initialize rs1
slti x20, x13, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 808)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
slti x13, x15, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 812)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
slti x23, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 816)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffe # initialize rs1
slti x1, x25, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 820)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
slti x11, x27, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 824)

# Testcase cr_rs1_imm_corners
li x7, 0x7ffffffe # initialize rs1
slti x27, x7, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 828)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
slti x24, x27, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 832)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
slti x23, x3, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 836)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffe # initialize rs1
slti x1, x8, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 840)

# Testcase cr_rs1_imm_corners
li x20, 0x7ffffffe # initialize rs1
slti x3, x20, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 844)

# Testcase cr_rs1_imm_corners
li x24, 0x7ffffffe # initialize rs1
slti x3, x24, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 848)

# Testcase cr_rs1_imm_corners
li x12, 0x7ffffffe # initialize rs1
slti x2, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 852)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
slti x15, x16, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 856)

# Testcase cr_rs1_imm_corners
li x3, 0x7ffffffe # initialize rs1
slti x23, x3, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 860)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffff # initialize rs1
slti x5, x1, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 864)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
slti x16, x26, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 868)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
slti x12, x18, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 872)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffff # initialize rs1
slti x7, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 876)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
slti x3, x26, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 880)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffff # initialize rs1
slti x20, x9, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 884)

# Testcase cr_rs1_imm_corners
li x8, 0xffffffff # initialize rs1
slti x6, x8, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 888)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffff # initialize rs1
slti x27, x19, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 892)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffff # initialize rs1
slti x16, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 896)

# Testcase cr_rs1_imm_corners
li x6, 0xffffffff # initialize rs1
slti x30, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 900)

# Testcase cr_rs1_imm_corners
li x12, 0xffffffff # initialize rs1
slti x17, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 904)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffff # initialize rs1
slti x31, x22, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 908)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
slti x23, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 912)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffff # initialize rs1
slti x12, x7, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 916)

# Testcase cr_rs1_imm_corners
li x22, 0xffffffff # initialize rs1
slti x31, x22, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 920)

# Testcase cr_rs1_imm_corners
li x23, 0xffffffff # initialize rs1
slti x2, x23, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 924)

# Testcase cr_rs1_imm_corners
li x17, 0xffffffff # initialize rs1
slti x9, x17, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 928)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffff # initialize rs1
slti x19, x28, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 932)

# Testcase cr_rs1_imm_corners
li x23, 0xffffffff # initialize rs1
slti x14, x23, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 936)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffff # initialize rs1
slti x1, x13, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 940)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
slti x9, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 944)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffe # initialize rs1
slti x20, x15, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 948)

# Testcase cr_rs1_imm_corners
li x6, 0xfffffffe # initialize rs1
slti x18, x6, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 952)

# Testcase cr_rs1_imm_corners
li x1, 0xfffffffe # initialize rs1
slti x22, x1, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 956)

# Testcase cr_rs1_imm_corners
li x31, 0xfffffffe # initialize rs1
slti x19, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 960)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffe # initialize rs1
slti x27, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 964)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffe # initialize rs1
slti x5, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 968)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffe # initialize rs1
slti x13, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 972)

# Testcase cr_rs1_imm_corners
li x13, 0xfffffffe # initialize rs1
slti x21, x13, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 976)

# Testcase cr_rs1_imm_corners
li x22, 0xfffffffe # initialize rs1
slti x25, x22, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 980)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
slti x27, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 984)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffe # initialize rs1
slti x31, x12, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 988)

# Testcase cr_rs1_imm_corners
li x26, 0xfffffffe # initialize rs1
slti x25, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 992)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
slti x28, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 996)

# Testcase cr_rs1_imm_corners
li x10, 0xfffffffe # initialize rs1
slti x5, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1000)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
slti x14, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1004)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffe # initialize rs1
slti x30, x27, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1008)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
slti x19, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1012)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffe # initialize rs1
slti x1, x8, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1016)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
slti x31, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1020)

# Testcase cr_rs1_imm_corners
li x3, 0x5bbc8872 # initialize rs1
slti x20, x3, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1024)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc8872 # initialize rs1
slti x24, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1028)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
slti x7, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1032)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc8872 # initialize rs1
slti x22, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1036)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc8872 # initialize rs1
slti x25, x9, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1040)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
slti x3, x10, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1044)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc8872 # initialize rs1
slti x29, x30, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1048)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc8872 # initialize rs1
slti x11, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1052)

# Testcase cr_rs1_imm_corners
li x15, 0x5bbc8872 # initialize rs1
slti x27, x15, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1056)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
slti x21, x10, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1060)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
slti x31, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_imm_corners
li x5, 0x5bbc8872 # initialize rs1
slti x18, x5, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1068)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
slti x20, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1072)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc8872 # initialize rs1
slti x20, x8, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1076)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
slti x24, x10, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1080)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc8872 # initialize rs1
slti x27, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1084)

# Testcase cr_rs1_imm_corners
li x10, 0x5bbc8872 # initialize rs1
slti x23, x10, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1088)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc8872 # initialize rs1
slti x10, x11, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1092)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
slti x18, x19, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1096)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc8872 # initialize rs1
slti x15, x14, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1100)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
slti x12, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1104)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
slti x6, x31, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1108)

# Testcase cr_rs1_imm_corners
li x5, 0xaaaaaaaa # initialize rs1
slti x13, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1112)

# Testcase cr_rs1_imm_corners
li x30, 0xaaaaaaaa # initialize rs1
slti x22, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1116)

# Testcase cr_rs1_imm_corners
li x2, 0xaaaaaaaa # initialize rs1
slti x15, x2, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1120)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
slti x8, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1124)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaa # initialize rs1
slti x1, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1128)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
slti x16, x18, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1132)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaa # initialize rs1
slti x30, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1136)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaa # initialize rs1
slti x9, x1, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1140)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
slti x27, x25, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1144)

# Testcase cr_rs1_imm_corners
li x6, 0xaaaaaaaa # initialize rs1
slti x28, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1148)

# Testcase cr_rs1_imm_corners
li x31, 0xaaaaaaaa # initialize rs1
slti x26, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1152)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaa # initialize rs1
slti x31, x15, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1156)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
slti x11, x18, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1160)

# Testcase cr_rs1_imm_corners
li x14, 0xaaaaaaaa # initialize rs1
slti x23, x14, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1164)

# Testcase cr_rs1_imm_corners
li x26, 0xaaaaaaaa # initialize rs1
slti x11, x26, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1168)

# Testcase cr_rs1_imm_corners
li x27, 0xaaaaaaaa # initialize rs1
slti x7, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1172)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
slti x20, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1176)

# Testcase cr_rs1_imm_corners
li x19, 0xaaaaaaaa # initialize rs1
slti x21, x19, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1180)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
slti x27, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1184)

# Testcase cr_rs1_imm_corners
li x30, 0x55555555 # initialize rs1
slti x19, x30, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1188)

# Testcase cr_rs1_imm_corners
li x17, 0x55555555 # initialize rs1
slti x28, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1192)

# Testcase cr_rs1_imm_corners
li x18, 0x55555555 # initialize rs1
slti x26, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1196)

# Testcase cr_rs1_imm_corners
li x18, 0x55555555 # initialize rs1
slti x2, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1200)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
slti x5, x22, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1204)

# Testcase cr_rs1_imm_corners
li x6, 0x55555555 # initialize rs1
slti x10, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1208)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
slti x8, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1212)

# Testcase cr_rs1_imm_corners
li x11, 0x55555555 # initialize rs1
slti x18, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1216)

# Testcase cr_rs1_imm_corners
li x8, 0x55555555 # initialize rs1
slti x16, x8, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1220)

# Testcase cr_rs1_imm_corners
li x16, 0x55555555 # initialize rs1
slti x14, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1224)

# Testcase cr_rs1_imm_corners
li x2, 0x55555555 # initialize rs1
slti x23, x2, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1228)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
slti x20, x21, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1232)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
slti x27, x22, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1236)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
slti x11, x21, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1240)

# Testcase cr_rs1_imm_corners
li x25, 0x55555555 # initialize rs1
slti x22, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1244)

# Testcase cr_rs1_imm_corners
li x23, 0x55555555 # initialize rs1
slti x30, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1248)

# Testcase cr_rs1_imm_corners
li x26, 0x55555555 # initialize rs1
slti x11, x26, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1252)

# Testcase cr_rs1_imm_corners
li x24, 0x55555555 # initialize rs1
slti x9, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1256)

# Testcase cr_rs1_imm_corners
li x28, 0x55555555 # initialize rs1
slti x1, x28, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xeb779fe0 # initialize rs1
slti x0, x0, -1754 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x09aa51ca # initialize rs1
slti x1, x1, 573 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x8aa809fe # initialize rs1
slti x2, x2, -1068 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xfd3ac247 # initialize rs1
slti x3, x3, 1804 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x33b774a0 # initialize rs1
slti x4, x4, -1408 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xb1193360 # initialize rs1
slti x5, x5, -1195 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb9997b52 # initialize rs1
slti x6, x6, -1770 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xf93da620 # initialize rs1
slti x7, x7, 1298 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xd3bd7383 # initialize rs1
slti x8, x8, 311 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x02b86a1a # initialize rs1
slti x9, x9, 115 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0xbcf75eaf # initialize rs1
slti x10, x10, -1860 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0x1980b9a2 # initialize rs1
slti x11, x11, -36 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xe111941b # initialize rs1
slti x12, x12, 2029 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xb1889180 # initialize rs1
slti x13, x13, -244 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x816e54bb # initialize rs1
slti x14, x14, -1181 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x63082710 # initialize rs1
slti x15, x15, -396 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x3526dd3c # initialize rs1
slti x16, x16, 1323 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x61566005 # initialize rs1
slti x17, x17, 2017 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xbbe984b5 # initialize rs1
slti x18, x18, 106 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xfa384dc7 # initialize rs1
slti x19, x19, -607 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xc54dc5f9 # initialize rs1
slti x20, x20, -535 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xdc5d41ec # initialize rs1
slti x21, x21, -787 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xe3ebf763 # initialize rs1
slti x22, x22, -207 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xd09a3f90 # initialize rs1
slti x23, x23, 423 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x0fb92eb9 # initialize rs1
slti x24, x24, 1689 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x13e80170 # initialize rs1
slti x25, x25, -1588 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x86e87b7e # initialize rs1
slti x26, x26, -15 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x02b4bb42 # initialize rs1
slti x27, x27, 556 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xf245cbf6 # initialize rs1
slti x28, x28, -1912 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xb2cb47df # initialize rs1
slti x29, x29, 185 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xf30ddaf4 # initialize rs1
slti x30, x30, 216 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0xa1d050b1 # initialize rs1
slti x31, x31, 667 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x22, 0xa3ac70f7 # initialize rs1
slti x9, x22, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1392)

# Testcase cp_imm_corners
li x19, 0xef3f3b9d # initialize rs1
slti x28, x19, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1396)

# Testcase cp_imm_corners
li x9, 0x45f7f82a # initialize rs1
slti x8, x9, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1400)

# Testcase cp_imm_corners
li x24, 0x6b1f4087 # initialize rs1
slti x3, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1404)

# Testcase cp_imm_corners
li x3, 0xa3e7fd2c # initialize rs1
slti x5, x3, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1408)

# Testcase cp_imm_corners
li x18, 0x199cbec3 # initialize rs1
slti x19, x18, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1412)

# Testcase cp_imm_corners
li x12, 0x9621ae57 # initialize rs1
slti x5, x12, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1416)

# Testcase cp_imm_corners
li x24, 0x99809f8a # initialize rs1
slti x30, x24, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1420)

# Testcase cp_imm_corners
li x23, 0x7d9e6fc0 # initialize rs1
slti x6, x23, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1424)

# Testcase cp_imm_corners
li x3, 0x95d88abc # initialize rs1
slti x31, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1428)

# Testcase cp_imm_corners
li x21, 0x2b94968e # initialize rs1
slti x6, x21, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1432)

# Testcase cp_imm_corners
li x1, 0xe6943abc # initialize rs1
slti x12, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1436)

# Testcase cp_imm_corners
li x31, 0xef7ff241 # initialize rs1
slti x9, x31, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1440)

# Testcase cp_imm_corners
li x31, 0xefad8d15 # initialize rs1
slti x24, x31, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1444)

# Testcase cp_imm_corners
li x11, 0x510bc947 # initialize rs1
slti x14, x11, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1448)

# Testcase cp_imm_corners
li x29, 0x85066254 # initialize rs1
slti x16, x29, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1452)

# Testcase cp_imm_corners
li x29, 0x50c73e8c # initialize rs1
slti x3, x29, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1456)

# Testcase cp_imm_corners
li x30, 0x7a51f410 # initialize rs1
slti x26, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1460)

# Testcase cp_imm_corners
li x21, 0xf9e1e1ba # initialize rs1
slti x25, x21, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1464)

# Testcase cp_imm_corners
li x9, 0x93a32f9d # initialize rs1
slti x21, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x22, x21, x23 # perform first operation
slti x13, x28, -539 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x13, x14, x29 # perform first operation
slti x19, x30, 654 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x20, x8 # perform first operation
slti x14, x7, -1776 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x1, x10, x18 # perform first operation
slti x10, x1, 763 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x23, x15 # perform first operation
slti x9, x25, -1393 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x6, x12 # perform first operation
slti x11, x14, 307 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x7, x13, x15 # perform first operation
slti x7, x3, -1213 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x1, x27, x11 # perform first operation
slti x1, x8, -1235 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x5, x10 # perform first operation
slti x12, x24, -1968 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x14, x16, x30 # perform first operation
slti x16, x19, 1714 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x19, x22 # perform first operation
slti x22, x30, 1621 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x22, x15, x19 # perform first operation
slti x25, x20, 696 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-xor.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x00212f2c # initialize rs1
li x7, 0xb8ef67c8 # initialize rs2
xor x26, x0, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x9be1ee99 # initialize rs1
li x25, 0x3a2d75c0 # initialize rs2
xor x14, x1, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0xee1edfc7 # initialize rs1
li x8, 0xe234188a # initialize rs2
xor x7, x2, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x0948139b # initialize rs1
li x24, 0x639c24f5 # initialize rs2
xor x13, x3, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x84b2c827 # initialize rs1
li x24, 0x59e99b58 # initialize rs2
xor x8, x4, x24 # perform operation
RVTEST_SIGUPD(x5, x0, x8, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xa94e3e71 # initialize rs1
li x25, 0x6ad456ce # initialize rs2
xor x7, x5, x25 # perform operation
RVTEST_SIGUPD(x6, x0, x7, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb19dcf47 # initialize rs1
li x9, 0xe4f285af # initialize rs2
xor x21, x6, x9 # perform operation
RVTEST_SIGUPD(x7, x0, x21, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x77267ce0 # initialize rs1
li x31, 0x415c2c94 # initialize rs2
xor x20, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x5c77349b # initialize rs1
li x14, 0xfa3f6b69 # initialize rs2
xor x16, x8, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0x9d91b347 # initialize rs1
li x13, 0x89437254 # initialize rs2
xor x6, x9, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xdf732fc1 # initialize rs1
li x24, 0x1b9490a6 # initialize rs2
xor x29, x10, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x0a04d111 # initialize rs1
li x18, 0x1728b992 # initialize rs2
xor x31, x11, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x650c00c6 # initialize rs1
li x1, 0x647fde58 # initialize rs2
xor x2, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xcee13d8e # initialize rs1
li x11, 0x0dac6a13 # initialize rs2
xor x7, x13, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x90500f39 # initialize rs1
li x23, 0xe8bbd888 # initialize rs2
xor x12, x14, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x97e07d23 # initialize rs1
li x3, 0x3d24fbcb # initialize rs2
xor x22, x15, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0xc7eef6f1 # initialize rs1
li x6, 0x62144caa # initialize rs2
xor x24, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xde685277 # initialize rs1
li x8, 0xe09ea2f0 # initialize rs2
xor x27, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xd6553f44 # initialize rs1
li x31, 0xf96eba45 # initialize rs2
xor x22, x18, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xabbd6ded # initialize rs1
li x8, 0xdf0f39c4 # initialize rs2
xor x17, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xe4b811ea # initialize rs1
li x18, 0x6a80d9b6 # initialize rs2
xor x13, x20, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x445d1760 # initialize rs1
li x10, 0xe391aee0 # initialize rs2
xor x2, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xfc695b43 # initialize rs1
li x26, 0x87baddef # initialize rs2
xor x16, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xadf8c9b6 # initialize rs1
li x3, 0x95a6e022 # initialize rs2
xor x29, x23, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xbba001d1 # initialize rs1
li x31, 0x8ff92957 # initialize rs2
xor x20, x24, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x977540c6 # initialize rs1
li x10, 0xe9d5a06d # initialize rs2
xor x8, x25, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x193d4d9d # initialize rs1
li x6, 0xb5fbe4ad # initialize rs2
xor x14, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x29de51e4 # initialize rs1
li x21, 0xe6c0f4e5 # initialize rs2
xor x7, x27, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x5f7d445c # initialize rs1
li x12, 0xa0a35cb7 # initialize rs2
xor x20, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x8c6b2eed # initialize rs1
li x28, 0x3670f4fa # initialize rs2
xor x1, x29, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x0816f678 # initialize rs1
li x1, 0x5ad53800 # initialize rs2
xor x29, x30, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x1ac071fb # initialize rs1
li x20, 0x02f139b8 # initialize rs2
xor x27, x31, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 124)

# Testcase cp_rs2 (Test source rs2 = x0)
li x2, 0x71ec18fd # initialize rs1
li x0, 0x597585a5 # initialize rs2
xor x7, x2, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 128)

# Testcase cp_rs2 (Test source rs2 = x1)
li x24, 0x0f0f22a0 # initialize rs1
li x1, 0x08a962ee # initialize rs2
xor x14, x24, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 132)

# Testcase cp_rs2 (Test source rs2 = x2)
li x12, 0x81662dbd # initialize rs1
li x2, 0xbbf72143 # initialize rs2
xor x14, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 136)

# Testcase cp_rs2 (Test source rs2 = x3)
li x1, 0xbfb06efd # initialize rs1
li x3, 0x3dc1021f # initialize rs2
xor x11, x1, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 140)

# Testcase cp_rs2 (Test source rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x23, 0xadf746e0 # initialize rs1
li x4, 0x0a52210d # initialize rs2
xor x26, x23, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 144)

# Testcase cp_rs2 (Test source rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x24, 0x10a2a248 # initialize rs1
li x5, 0xf676db88 # initialize rs2
xor x27, x24, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x27, 148)

# Testcase cp_rs2 (Test source rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x24, 0x4e76578c # initialize rs1
li x6, 0x5ebf567b # initialize rs2
xor x23, x24, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x23, 152)

# Testcase cp_rs2 (Test source rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x19, 0x1b2867fd # initialize rs1
li x7, 0x9d38c97f # initialize rs2
xor x6, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 156)

# Testcase cp_rs2 (Test source rs2 = x8)
li x19, 0x5502829c # initialize rs1
li x8, 0x10adfe93 # initialize rs2
xor x7, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 160)

# Testcase cp_rs2 (Test source rs2 = x9)
li x13, 0x60d230b2 # initialize rs1
li x9, 0x488a9e1e # initialize rs2
xor x3, x13, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 164)

# Testcase cp_rs2 (Test source rs2 = x10)
li x8, 0x1e57a53c # initialize rs1
li x10, 0xb74b1450 # initialize rs2
xor x7, x8, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 168)

# Testcase cp_rs2 (Test source rs2 = x11)
li x19, 0x7257fdba # initialize rs1
li x11, 0xb0cdeaf7 # initialize rs2
xor x10, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 172)

# Testcase cp_rs2 (Test source rs2 = x12)
li x22, 0x5c287b60 # initialize rs1
li x12, 0x1ed9b254 # initialize rs2
xor x27, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 176)

# Testcase cp_rs2 (Test source rs2 = x13)
li x30, 0xf2d6acda # initialize rs1
li x13, 0x863c2930 # initialize rs2
xor x27, x30, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 180)

# Testcase cp_rs2 (Test source rs2 = x14)
li x21, 0x94dabeed # initialize rs1
li x14, 0x04ade074 # initialize rs2
xor x13, x21, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 184)

# Testcase cp_rs2 (Test source rs2 = x15)
li x14, 0xbac4fa44 # initialize rs1
li x15, 0x4cc33f92 # initialize rs2
xor x1, x14, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 188)

# Testcase cp_rs2 (Test source rs2 = x16)
li x15, 0x3c70cc2d # initialize rs1
li x16, 0x4dfecb37 # initialize rs2
xor x20, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 192)

# Testcase cp_rs2 (Test source rs2 = x17)
li x27, 0xe63315d4 # initialize rs1
li x17, 0x90745a74 # initialize rs2
xor x14, x27, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 196)

# Testcase cp_rs2 (Test source rs2 = x18)
li x12, 0x025ecabd # initialize rs1
li x18, 0x5baae53d # initialize rs2
xor x20, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 200)

# Testcase cp_rs2 (Test source rs2 = x19)
li x20, 0xc7ad6180 # initialize rs1
li x19, 0x33af6e5d # initialize rs2
xor x12, x20, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 204)

# Testcase cp_rs2 (Test source rs2 = x20)
li x27, 0x37537d67 # initialize rs1
li x20, 0x4060aadb # initialize rs2
xor x3, x27, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 208)

# Testcase cp_rs2 (Test source rs2 = x21)
li x6, 0x9ed29504 # initialize rs1
li x21, 0x91b2e73b # initialize rs2
xor x28, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 212)

# Testcase cp_rs2 (Test source rs2 = x22)
li x14, 0xcefc1443 # initialize rs1
li x22, 0xcff61870 # initialize rs2
xor x10, x14, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 216)

# Testcase cp_rs2 (Test source rs2 = x23)
li x27, 0xf53e5e31 # initialize rs1
li x23, 0xac3c7165 # initialize rs2
xor x1, x27, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 220)

# Testcase cp_rs2 (Test source rs2 = x24)
li x26, 0xd6f41631 # initialize rs1
li x24, 0xa6a70098 # initialize rs2
xor x5, x26, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 224)

# Testcase cp_rs2 (Test source rs2 = x25)
li x8, 0xbbd64923 # initialize rs1
li x25, 0x0afd3808 # initialize rs2
xor x2, x8, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 228)

# Testcase cp_rs2 (Test source rs2 = x26)
li x23, 0xa3f8805b # initialize rs1
li x26, 0x86166cbb # initialize rs2
xor x3, x23, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 232)

# Testcase cp_rs2 (Test source rs2 = x27)
li x12, 0x11467d8f # initialize rs1
li x27, 0x4373a936 # initialize rs2
xor x23, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 236)

# Testcase cp_rs2 (Test source rs2 = x28)
li x19, 0xc0532eba # initialize rs1
li x28, 0xf98ff58e # initialize rs2
xor x11, x19, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 240)

# Testcase cp_rs2 (Test source rs2 = x29)
li x27, 0x25344f28 # initialize rs1
li x29, 0xfee4cdae # initialize rs2
xor x1, x27, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 244)

# Testcase cp_rs2 (Test source rs2 = x30)
li x18, 0xc06598d3 # initialize rs1
li x30, 0x182fadae # initialize rs2
xor x19, x18, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 248)

# Testcase cp_rs2 (Test source rs2 = x31)
li x20, 0xb8065a96 # initialize rs1
li x31, 0x5efcb2f5 # initialize rs2
xor x3, x20, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 252)

# Testcase cp_rd (Test destination rd = x0)
li x15, 0x12b96005 # initialize rs1
li x16, 0x23c42e05 # initialize rs2
xor x0, x15, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 256)

# Testcase cp_rd (Test destination rd = x1)
li x28, 0x4f40d375 # initialize rs1
li x21, 0x00b2f57b # initialize rs2
xor x1, x28, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 260)

# Testcase cp_rd (Test destination rd = x2)
li x26, 0x922cf533 # initialize rs1
li x29, 0x4eefdd45 # initialize rs2
xor x2, x26, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 264)

# Testcase cp_rd (Test destination rd = x3)
li x6, 0x13474239 # initialize rs1
li x14, 0x2ce389dd # initialize rs2
xor x3, x6, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x9, 0x1cee18da # initialize rs1
li x3, 0xeebaea85 # initialize rs2
xor x4, x9, x3 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 272)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x3, 0x6bfa7256 # initialize rs1
li x15, 0x95887150 # initialize rs2
xor x5, x3, x15 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 276)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x15, 0x1b48c60f # initialize rs1
li x29, 0x4908bc43 # initialize rs2
xor x6, x15, x29 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 280)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x29, 0x27f2f82d # initialize rs1
li x27, 0x95169790 # initialize rs2
xor x7, x29, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 284)

# Testcase cp_rd (Test destination rd = x8)
li x21, 0xd9e692f0 # initialize rs1
li x24, 0x7c107b54 # initialize rs2
xor x8, x21, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rd (Test destination rd = x9)
li x18, 0xa7539fb6 # initialize rs1
li x1, 0x9884d8bb # initialize rs2
xor x9, x18, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 292)

# Testcase cp_rd (Test destination rd = x10)
li x23, 0x126409cf # initialize rs1
li x21, 0x904f3eb9 # initialize rs2
xor x10, x23, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rd (Test destination rd = x11)
li x20, 0xf2eaab3d # initialize rs1
li x13, 0xf22492d0 # initialize rs2
xor x11, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 300)

# Testcase cp_rd (Test destination rd = x12)
li x7, 0x74db3507 # initialize rs1
li x9, 0x6f001bca # initialize rs2
xor x12, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 304)

# Testcase cp_rd (Test destination rd = x13)
li x9, 0x3d45fe22 # initialize rs1
li x10, 0xdaa3b522 # initialize rs2
xor x13, x9, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 308)

# Testcase cp_rd (Test destination rd = x14)
li x18, 0xed6d1be4 # initialize rs1
li x9, 0xea61187f # initialize rs2
xor x14, x18, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 312)

# Testcase cp_rd (Test destination rd = x15)
li x22, 0xcd9ff52a # initialize rs1
li x12, 0x8a466754 # initialize rs2
xor x15, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 316)

# Testcase cp_rd (Test destination rd = x16)
li x13, 0x7e4cc94d # initialize rs1
li x17, 0xccf6a05b # initialize rs2
xor x16, x13, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 320)

# Testcase cp_rd (Test destination rd = x17)
li x2, 0xf11699ab # initialize rs1
li x23, 0x35283107 # initialize rs2
xor x17, x2, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 324)

# Testcase cp_rd (Test destination rd = x18)
li x3, 0x05fa2b77 # initialize rs1
li x6, 0xe7f16499 # initialize rs2
xor x18, x3, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 328)

# Testcase cp_rd (Test destination rd = x19)
li x2, 0x4b288c49 # initialize rs1
li x26, 0xda863fbe # initialize rs2
xor x19, x2, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 332)

# Testcase cp_rd (Test destination rd = x20)
li x1, 0xbc87a194 # initialize rs1
li x31, 0xbd566827 # initialize rs2
xor x20, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 336)

# Testcase cp_rd (Test destination rd = x21)
li x23, 0x3c759a83 # initialize rs1
li x22, 0x91fa843b # initialize rs2
xor x21, x23, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 340)

# Testcase cp_rd (Test destination rd = x22)
li x27, 0x5ee8b2ed # initialize rs1
li x14, 0x7815337e # initialize rs2
xor x22, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 344)

# Testcase cp_rd (Test destination rd = x23)
li x23, 0xdb36d7c6 # initialize rs1
li x17, 0xe8e9cd50 # initialize rs2
xor x23, x23, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 348)

# Testcase cp_rd (Test destination rd = x24)
li x23, 0x558aaf1d # initialize rs1
li x6, 0x4f339734 # initialize rs2
xor x24, x23, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 352)

# Testcase cp_rd (Test destination rd = x25)
li x9, 0x3ad29221 # initialize rs1
li x6, 0xd899a76a # initialize rs2
xor x25, x9, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 356)

# Testcase cp_rd (Test destination rd = x26)
li x2, 0x0bce7fd6 # initialize rs1
li x20, 0xb459bb60 # initialize rs2
xor x26, x2, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 360)

# Testcase cp_rd (Test destination rd = x27)
li x5, 0xfec2c347 # initialize rs1
li x14, 0x68361ccc # initialize rs2
xor x27, x5, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 364)

# Testcase cp_rd (Test destination rd = x28)
li x20, 0xe4ada642 # initialize rs1
li x13, 0x6924f988 # initialize rs2
xor x28, x20, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 368)

# Testcase cp_rd (Test destination rd = x29)
li x24, 0x286cd7d0 # initialize rs1
li x5, 0x1e086231 # initialize rs2
xor x29, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cp_rd (Test destination rd = x30)
li x26, 0x3861726b # initialize rs1
li x31, 0x4046be41 # initialize rs2
xor x30, x26, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 376)

# Testcase cp_rd (Test destination rd = x31)
li x25, 0xba2c120d # initialize rs1
li x14, 0x17101c03 # initialize rs2
xor x31, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 380)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x5, 0x00000000 # initialize rs1
li x26, 0x1f8d932a # initialize rs2
xor x28, x5, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 384)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x1, 0x00000001 # initialize rs1
li x31, 0xcc7d838f # initialize rs2
xor x6, x1, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 388)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x8, 0x00000002 # initialize rs1
li x24, 0xd5d31827 # initialize rs2
xor x28, x8, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 392)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x12, 0x80000000 # initialize rs1
li x2, 0xf61d95ce # initialize rs2
xor x13, x12, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 396)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x25, 0x80000001 # initialize rs1
li x29, 0x4b2f1d24 # initialize rs2
xor x22, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 400)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x9, 0x7fffffff # initialize rs1
li x11, 0x1fc06a34 # initialize rs2
xor x15, x9, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 404)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x19, 0x7ffffffe # initialize rs1
li x6, 0x8cfba972 # initialize rs2
xor x22, x19, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 408)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x13, 0xffffffff # initialize rs1
li x22, 0x87be0732 # initialize rs2
xor x19, x13, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 412)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x27, 0xfffffffe # initialize rs1
li x16, 0x18cc094d # initialize rs2
xor x28, x27, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 416)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x17, 0x5bbc8872 # initialize rs1
li x8, 0xe6e95fb1 # initialize rs2
xor x31, x17, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 420)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x29, 0xaaaaaaaa # initialize rs1
li x16, 0xecfb45c2 # initialize rs2
xor x27, x29, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 424)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x10, 0x55555555 # initialize rs1
li x20, 0x176cc56d # initialize rs2
xor x11, x10, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 428)

# Testcase cp_rs2_corners (Test source rs2 value = 0x0)
li x22, 0xb694bc2b # initialize rs1
li x24, 0x00000000 # initialize rs2
xor x7, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 432)

# Testcase cp_rs2_corners (Test source rs2 value = 0x1)
li x17, 0xa951a390 # initialize rs1
li x27, 0x00000001 # initialize rs2
xor x23, x17, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 436)

# Testcase cp_rs2_corners (Test source rs2 value = 0x2)
li x22, 0x0f8f3736 # initialize rs1
li x2, 0x00000002 # initialize rs2
xor x23, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 440)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000000)
li x18, 0x17b59073 # initialize rs1
li x11, 0x80000000 # initialize rs2
xor x30, x18, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 444)

# Testcase cp_rs2_corners (Test source rs2 value = 0x80000001)
li x22, 0x88cdd3e4 # initialize rs1
li x8, 0x80000001 # initialize rs2
xor x16, x22, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 448)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7fffffff)
li x13, 0xeb19bab0 # initialize rs1
li x29, 0x7fffffff # initialize rs2
xor x24, x13, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 452)

# Testcase cp_rs2_corners (Test source rs2 value = 0x7ffffffe)
li x20, 0x1376872f # initialize rs1
li x25, 0x7ffffffe # initialize rs2
xor x24, x20, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 456)

# Testcase cp_rs2_corners (Test source rs2 value = 0xffffffff)
li x22, 0x96c1da71 # initialize rs1
li x21, 0xffffffff # initialize rs2
xor x26, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 460)

# Testcase cp_rs2_corners (Test source rs2 value = 0xfffffffe)
li x9, 0xdda315d3 # initialize rs1
li x24, 0xfffffffe # initialize rs2
xor x16, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 464)

# Testcase cp_rs2_corners (Test source rs2 value = 0x5bbc8872)
li x16, 0xe6a94d6d # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
xor x23, x16, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 468)

# Testcase cp_rs2_corners (Test source rs2 value = 0xaaaaaaaa)
li x2, 0xb6cca2e3 # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
xor x31, x2, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 472)

# Testcase cp_rs2_corners (Test source rs2 value = 0x55555555)
li x23, 0xd209fe07 # initialize rs1
li x29, 0x55555555 # initialize rs2
xor x24, x23, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 476)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x0)
li x11, 0x00000000 # initialize rs1
li x16, 0x00000000 # initialize rs2
xor x26, x11, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 480)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x1)
li x23, 0x00000000 # initialize rs1
li x15, 0x00000001 # initialize rs2
xor x19, x23, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 484)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x2)
li x31, 0x00000000 # initialize rs1
li x5, 0x00000002 # initialize rs2
xor x12, x31, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 488)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000000)
li x27, 0x00000000 # initialize rs1
li x24, 0x80000000 # initialize rs2
xor x26, x27, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 492)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x80000001)
li x25, 0x00000000 # initialize rs1
li x29, 0x80000001 # initialize rs2
xor x10, x25, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 496)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7fffffff)
li x20, 0x00000000 # initialize rs1
li x29, 0x7fffffff # initialize rs2
xor x10, x20, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 500)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x7ffffffe)
li x1, 0x00000000 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
xor x16, x1, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 504)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xffffffff)
li x17, 0x00000000 # initialize rs1
li x31, 0xffffffff # initialize rs2
xor x29, x17, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 508)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xfffffffe)
li x28, 0x00000000 # initialize rs1
li x6, 0xfffffffe # initialize rs2
xor x24, x28, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 512)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x5bbc8872)
li x12, 0x00000000 # initialize rs1
li x1, 0x5bbc8872 # initialize rs2
xor x6, x12, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 516)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0xaaaaaaaa)
li x19, 0x00000000 # initialize rs1
li x15, 0xaaaaaaaa # initialize rs2
xor x28, x19, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 520)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x0 rs2 = 0x55555555)
li x7, 0x00000000 # initialize rs1
li x3, 0x55555555 # initialize rs2
xor x13, x7, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 524)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x0)
li x12, 0x00000001 # initialize rs1
li x27, 0x00000000 # initialize rs2
xor x30, x12, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 528)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x1)
li x2, 0x00000001 # initialize rs1
li x1, 0x00000001 # initialize rs2
xor x12, x2, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 532)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x2)
li x18, 0x00000001 # initialize rs1
li x2, 0x00000002 # initialize rs2
xor x6, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 536)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000000)
li x6, 0x00000001 # initialize rs1
li x12, 0x80000000 # initialize rs2
xor x10, x6, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 540)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x80000001)
li x24, 0x00000001 # initialize rs1
li x30, 0x80000001 # initialize rs2
xor x5, x24, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 544)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7fffffff)
li x23, 0x00000001 # initialize rs1
li x8, 0x7fffffff # initialize rs2
xor x5, x23, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 548)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x7ffffffe)
li x23, 0x00000001 # initialize rs1
li x20, 0x7ffffffe # initialize rs2
xor x21, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 552)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xffffffff)
li x17, 0x00000001 # initialize rs1
li x29, 0xffffffff # initialize rs2
xor x23, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 556)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xfffffffe)
li x12, 0x00000001 # initialize rs1
li x18, 0xfffffffe # initialize rs2
xor x17, x12, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 560)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x5bbc8872)
li x27, 0x00000001 # initialize rs1
li x3, 0x5bbc8872 # initialize rs2
xor x1, x27, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 564)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0xaaaaaaaa)
li x20, 0x00000001 # initialize rs1
li x14, 0xaaaaaaaa # initialize rs2
xor x21, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 568)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x1 rs2 = 0x55555555)
li x14, 0x00000001 # initialize rs1
li x11, 0x55555555 # initialize rs2
xor x6, x14, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 572)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x0)
li x16, 0x00000002 # initialize rs1
li x27, 0x00000000 # initialize rs2
xor x31, x16, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 576)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x1)
li x28, 0x00000002 # initialize rs1
li x29, 0x00000001 # initialize rs2
xor x11, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 580)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x2)
li x26, 0x00000002 # initialize rs1
li x6, 0x00000002 # initialize rs2
xor x8, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 584)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000000)
li x21, 0x00000002 # initialize rs1
li x30, 0x80000000 # initialize rs2
xor x27, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 588)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x80000001)
li x22, 0x00000002 # initialize rs1
li x9, 0x80000001 # initialize rs2
xor x29, x22, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 592)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7fffffff)
li x5, 0x00000002 # initialize rs1
li x22, 0x7fffffff # initialize rs2
xor x14, x5, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 596)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x7ffffffe)
li x5, 0x00000002 # initialize rs1
li x24, 0x7ffffffe # initialize rs2
xor x18, x5, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 600)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xffffffff)
li x9, 0x00000002 # initialize rs1
li x25, 0xffffffff # initialize rs2
xor x20, x9, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 604)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xfffffffe)
li x25, 0x00000002 # initialize rs1
li x9, 0xfffffffe # initialize rs2
xor x7, x25, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 608)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x5bbc8872)
li x20, 0x00000002 # initialize rs1
li x14, 0x5bbc8872 # initialize rs2
xor x26, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 612)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0xaaaaaaaa)
li x15, 0x00000002 # initialize rs1
li x24, 0xaaaaaaaa # initialize rs2
xor x21, x15, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 616)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x2 rs2 = 0x55555555)
li x19, 0x00000002 # initialize rs1
li x8, 0x55555555 # initialize rs2
xor x25, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 620)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x0)
li x6, 0x80000000 # initialize rs1
li x21, 0x00000000 # initialize rs2
xor x15, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 624)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x1)
li x17, 0x80000000 # initialize rs1
li x28, 0x00000001 # initialize rs2
xor x7, x17, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 628)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x2)
li x29, 0x80000000 # initialize rs1
li x9, 0x00000002 # initialize rs2
xor x31, x29, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 632)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000000)
li x6, 0x80000000 # initialize rs1
li x30, 0x80000000 # initialize rs2
xor x25, x6, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 636)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x80000001)
li x18, 0x80000000 # initialize rs1
li x29, 0x80000001 # initialize rs2
xor x19, x18, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 640)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7fffffff)
li x5, 0x80000000 # initialize rs1
li x16, 0x7fffffff # initialize rs2
xor x28, x5, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 644)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x7ffffffe)
li x27, 0x80000000 # initialize rs1
li x22, 0x7ffffffe # initialize rs2
xor x18, x27, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 648)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xffffffff)
li x15, 0x80000000 # initialize rs1
li x8, 0xffffffff # initialize rs2
xor x21, x15, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 652)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xfffffffe)
li x18, 0x80000000 # initialize rs1
li x2, 0xfffffffe # initialize rs2
xor x28, x18, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 656)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x5bbc8872)
li x9, 0x80000000 # initialize rs1
li x24, 0x5bbc8872 # initialize rs2
xor x14, x9, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 660)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0xaaaaaaaa)
li x25, 0x80000000 # initialize rs1
li x5, 0xaaaaaaaa # initialize rs2
xor x30, x25, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 664)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000000 rs2 = 0x55555555)
li x22, 0x80000000 # initialize rs1
li x29, 0x55555555 # initialize rs2
xor x18, x22, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 668)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x0)
li x22, 0x80000001 # initialize rs1
li x17, 0x00000000 # initialize rs2
xor x27, x22, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 672)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x1)
li x21, 0x80000001 # initialize rs1
li x19, 0x00000001 # initialize rs2
xor x23, x21, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 676)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x2)
li x16, 0x80000001 # initialize rs1
li x15, 0x00000002 # initialize rs2
xor x5, x16, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 680)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000000)
li x26, 0x80000001 # initialize rs1
li x2, 0x80000000 # initialize rs2
xor x11, x26, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 684)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x80000001)
li x21, 0x80000001 # initialize rs1
li x26, 0x80000001 # initialize rs2
xor x19, x21, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 688)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7fffffff)
li x15, 0x80000001 # initialize rs1
li x11, 0x7fffffff # initialize rs2
xor x9, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 692)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x7ffffffe)
li x26, 0x80000001 # initialize rs1
li x10, 0x7ffffffe # initialize rs2
xor x24, x26, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 696)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xffffffff)
li x16, 0x80000001 # initialize rs1
li x6, 0xffffffff # initialize rs2
xor x27, x16, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 700)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xfffffffe)
li x17, 0x80000001 # initialize rs1
li x22, 0xfffffffe # initialize rs2
xor x15, x17, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 704)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x5bbc8872)
li x17, 0x80000001 # initialize rs1
li x18, 0x5bbc8872 # initialize rs2
xor x31, x17, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 708)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0xaaaaaaaa)
li x28, 0x80000001 # initialize rs1
li x19, 0xaaaaaaaa # initialize rs2
xor x29, x28, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 712)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x80000001 rs2 = 0x55555555)
li x14, 0x80000001 # initialize rs1
li x5, 0x55555555 # initialize rs2
xor x9, x14, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 716)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x0)
li x24, 0x7fffffff # initialize rs1
li x19, 0x00000000 # initialize rs2
xor x5, x24, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 720)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x1)
li x24, 0x7fffffff # initialize rs1
li x9, 0x00000001 # initialize rs2
xor x23, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 724)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x2)
li x25, 0x7fffffff # initialize rs1
li x27, 0x00000002 # initialize rs2
xor x10, x25, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 728)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000000)
li x22, 0x7fffffff # initialize rs1
li x10, 0x80000000 # initialize rs2
xor x5, x22, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 732)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x80000001)
li x8, 0x7fffffff # initialize rs1
li x13, 0x80000001 # initialize rs2
xor x31, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 736)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7fffffff)
li x18, 0x7fffffff # initialize rs1
li x24, 0x7fffffff # initialize rs2
xor x16, x18, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 740)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x7ffffffe)
li x19, 0x7fffffff # initialize rs1
li x7, 0x7ffffffe # initialize rs2
xor x3, x19, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 744)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xffffffff)
li x10, 0x7fffffff # initialize rs1
li x25, 0xffffffff # initialize rs2
xor x12, x10, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 748)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xfffffffe)
li x22, 0x7fffffff # initialize rs1
li x25, 0xfffffffe # initialize rs2
xor x18, x22, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 752)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x5bbc8872)
li x2, 0x7fffffff # initialize rs1
li x28, 0x5bbc8872 # initialize rs2
xor x23, x2, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 756)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0xaaaaaaaa)
li x11, 0x7fffffff # initialize rs1
li x31, 0xaaaaaaaa # initialize rs2
xor x20, x11, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 760)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7fffffff rs2 = 0x55555555)
li x7, 0x7fffffff # initialize rs1
li x2, 0x55555555 # initialize rs2
xor x9, x7, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 764)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x0)
li x13, 0x7ffffffe # initialize rs1
li x24, 0x00000000 # initialize rs2
xor x21, x13, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 768)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x1)
li x1, 0x7ffffffe # initialize rs1
li x6, 0x00000001 # initialize rs2
xor x9, x1, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 772)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x2)
li x2, 0x7ffffffe # initialize rs1
li x12, 0x00000002 # initialize rs2
xor x18, x2, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 776)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000000)
li x6, 0x7ffffffe # initialize rs1
li x15, 0x80000000 # initialize rs2
xor x7, x6, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 780)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x80000001)
li x8, 0x7ffffffe # initialize rs1
li x16, 0x80000001 # initialize rs2
xor x9, x8, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 784)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7fffffff)
li x1, 0x7ffffffe # initialize rs1
li x11, 0x7fffffff # initialize rs2
xor x8, x1, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 788)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x7ffffffe)
li x19, 0x7ffffffe # initialize rs1
li x11, 0x7ffffffe # initialize rs2
xor x5, x19, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 792)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xffffffff)
li x17, 0x7ffffffe # initialize rs1
li x15, 0xffffffff # initialize rs2
xor x20, x17, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 796)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xfffffffe)
li x6, 0x7ffffffe # initialize rs1
li x21, 0xfffffffe # initialize rs2
xor x23, x6, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 800)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x5bbc8872)
li x21, 0x7ffffffe # initialize rs1
li x9, 0x5bbc8872 # initialize rs2
xor x27, x21, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 804)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0xaaaaaaaa)
li x13, 0x7ffffffe # initialize rs1
li x21, 0xaaaaaaaa # initialize rs2
xor x24, x13, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 808)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x7ffffffe rs2 = 0x55555555)
li x5, 0x7ffffffe # initialize rs1
li x13, 0x55555555 # initialize rs2
xor x16, x5, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 812)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x0)
li x28, 0xffffffff # initialize rs1
li x20, 0x00000000 # initialize rs2
xor x1, x28, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 816)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x1)
li x25, 0xffffffff # initialize rs1
li x14, 0x00000001 # initialize rs2
xor x6, x25, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 820)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x2)
li x15, 0xffffffff # initialize rs1
li x26, 0x00000002 # initialize rs2
xor x1, x15, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 824)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000000)
li x27, 0xffffffff # initialize rs1
li x14, 0x80000000 # initialize rs2
xor x8, x27, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 828)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x80000001)
li x20, 0xffffffff # initialize rs1
li x5, 0x80000001 # initialize rs2
xor x30, x20, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 832)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7fffffff)
li x29, 0xffffffff # initialize rs1
li x20, 0x7fffffff # initialize rs2
xor x28, x29, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 836)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x7ffffffe)
li x2, 0xffffffff # initialize rs1
li x9, 0x7ffffffe # initialize rs2
xor x13, x2, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 840)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xffffffff)
li x9, 0xffffffff # initialize rs1
li x28, 0xffffffff # initialize rs2
xor x11, x9, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 844)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xfffffffe)
li x1, 0xffffffff # initialize rs1
li x27, 0xfffffffe # initialize rs2
xor x2, x1, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 848)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x5bbc8872)
li x9, 0xffffffff # initialize rs1
li x19, 0x5bbc8872 # initialize rs2
xor x29, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 852)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0xaaaaaaaa)
li x10, 0xffffffff # initialize rs1
li x16, 0xaaaaaaaa # initialize rs2
xor x23, x10, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 856)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xffffffff rs2 = 0x55555555)
li x22, 0xffffffff # initialize rs1
li x27, 0x55555555 # initialize rs2
xor x31, x22, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 860)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x0)
li x5, 0xfffffffe # initialize rs1
li x31, 0x00000000 # initialize rs2
xor x17, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 864)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x1)
li x11, 0xfffffffe # initialize rs1
li x21, 0x00000001 # initialize rs2
xor x25, x11, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 868)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x2)
li x13, 0xfffffffe # initialize rs1
li x30, 0x00000002 # initialize rs2
xor x12, x13, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 872)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000000)
li x26, 0xfffffffe # initialize rs1
li x25, 0x80000000 # initialize rs2
xor x21, x26, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 876)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x80000001)
li x25, 0xfffffffe # initialize rs1
li x23, 0x80000001 # initialize rs2
xor x21, x25, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 880)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7fffffff)
li x10, 0xfffffffe # initialize rs1
li x26, 0x7fffffff # initialize rs2
xor x3, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 884)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x7ffffffe)
li x31, 0xfffffffe # initialize rs1
li x10, 0x7ffffffe # initialize rs2
xor x25, x31, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 888)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xffffffff)
li x18, 0xfffffffe # initialize rs1
li x12, 0xffffffff # initialize rs2
xor x1, x18, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 892)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xfffffffe)
li x11, 0xfffffffe # initialize rs1
li x20, 0xfffffffe # initialize rs2
xor x14, x11, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 896)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x5bbc8872)
li x22, 0xfffffffe # initialize rs1
li x26, 0x5bbc8872 # initialize rs2
xor x23, x22, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 900)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0xaaaaaaaa)
li x7, 0xfffffffe # initialize rs1
li x9, 0xaaaaaaaa # initialize rs2
xor x24, x7, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 904)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xfffffffe rs2 = 0x55555555)
li x31, 0xfffffffe # initialize rs1
li x18, 0x55555555 # initialize rs2
xor x29, x31, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 908)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x0)
li x20, 0x5bbc8872 # initialize rs1
li x14, 0x00000000 # initialize rs2
xor x26, x20, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 912)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x1)
li x7, 0x5bbc8872 # initialize rs1
li x31, 0x00000001 # initialize rs2
xor x24, x7, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 916)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x2)
li x16, 0x5bbc8872 # initialize rs1
li x25, 0x00000002 # initialize rs2
xor x29, x16, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 920)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000000)
li x29, 0x5bbc8872 # initialize rs1
li x1, 0x80000000 # initialize rs2
xor x8, x29, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 924)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x80000001)
li x21, 0x5bbc8872 # initialize rs1
li x10, 0x80000001 # initialize rs2
xor x5, x21, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 928)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7fffffff)
li x20, 0x5bbc8872 # initialize rs1
li x26, 0x7fffffff # initialize rs2
xor x2, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 932)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x7ffffffe)
li x10, 0x5bbc8872 # initialize rs1
li x26, 0x7ffffffe # initialize rs2
xor x8, x10, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 936)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xffffffff)
li x24, 0x5bbc8872 # initialize rs1
li x5, 0xffffffff # initialize rs2
xor x3, x24, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 940)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xfffffffe)
li x11, 0x5bbc8872 # initialize rs1
li x12, 0xfffffffe # initialize rs2
xor x19, x11, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 944)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x5bbc8872)
li x8, 0x5bbc8872 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
xor x23, x8, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 948)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0xaaaaaaaa)
li x28, 0x5bbc8872 # initialize rs1
li x1, 0xaaaaaaaa # initialize rs2
xor x13, x28, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 952)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x5bbc8872 rs2 = 0x55555555)
li x9, 0x5bbc8872 # initialize rs1
li x3, 0x55555555 # initialize rs2
xor x13, x9, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 956)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x0)
li x16, 0xaaaaaaaa # initialize rs1
li x31, 0x00000000 # initialize rs2
xor x19, x16, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 960)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x1)
li x22, 0xaaaaaaaa # initialize rs1
li x20, 0x00000001 # initialize rs2
xor x27, x22, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 964)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x2)
li x14, 0xaaaaaaaa # initialize rs1
li x3, 0x00000002 # initialize rs2
xor x7, x14, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 968)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000000)
li x17, 0xaaaaaaaa # initialize rs1
li x20, 0x80000000 # initialize rs2
xor x25, x17, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 972)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x80000001)
li x12, 0xaaaaaaaa # initialize rs1
li x14, 0x80000001 # initialize rs2
xor x2, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 976)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7fffffff)
li x22, 0xaaaaaaaa # initialize rs1
li x6, 0x7fffffff # initialize rs2
xor x9, x22, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 980)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x7ffffffe)
li x10, 0xaaaaaaaa # initialize rs1
li x23, 0x7ffffffe # initialize rs2
xor x30, x10, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 984)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xffffffff)
li x25, 0xaaaaaaaa # initialize rs1
li x31, 0xffffffff # initialize rs2
xor x12, x25, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 988)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xfffffffe)
li x9, 0xaaaaaaaa # initialize rs1
li x16, 0xfffffffe # initialize rs2
xor x21, x9, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 992)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x5bbc8872)
li x16, 0xaaaaaaaa # initialize rs1
li x2, 0x5bbc8872 # initialize rs2
xor x30, x16, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 996)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0xaaaaaaaa)
li x1, 0xaaaaaaaa # initialize rs1
li x30, 0xaaaaaaaa # initialize rs2
xor x8, x1, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1000)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0xaaaaaaaa rs2 = 0x55555555)
li x11, 0xaaaaaaaa # initialize rs1
li x30, 0x55555555 # initialize rs2
xor x16, x11, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1004)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x0)
li x10, 0x55555555 # initialize rs1
li x11, 0x00000000 # initialize rs2
xor x22, x10, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1008)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x1)
li x18, 0x55555555 # initialize rs1
li x28, 0x00000001 # initialize rs2
xor x7, x18, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1012)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x2)
li x15, 0x55555555 # initialize rs1
li x22, 0x00000002 # initialize rs2
xor x14, x15, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1016)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000000)
li x2, 0x55555555 # initialize rs1
li x18, 0x80000000 # initialize rs2
xor x8, x2, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1020)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x80000001)
li x22, 0x55555555 # initialize rs1
li x21, 0x80000001 # initialize rs2
xor x13, x22, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1024)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7fffffff)
li x7, 0x55555555 # initialize rs1
li x8, 0x7fffffff # initialize rs2
xor x22, x7, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1028)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x7ffffffe)
li x8, 0x55555555 # initialize rs1
li x13, 0x7ffffffe # initialize rs2
xor x5, x8, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1032)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xffffffff)
li x29, 0x55555555 # initialize rs1
li x8, 0xffffffff # initialize rs2
xor x28, x29, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1036)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xfffffffe)
li x19, 0x55555555 # initialize rs1
li x8, 0xfffffffe # initialize rs2
xor x11, x19, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1040)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x5bbc8872)
li x17, 0x55555555 # initialize rs1
li x29, 0x5bbc8872 # initialize rs2
xor x21, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1044)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0xaaaaaaaa)
li x28, 0x55555555 # initialize rs1
li x29, 0xaaaaaaaa # initialize rs2
xor x31, x28, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1048)

# Testcase cr_rs1_rs2_corners (Test source rs1 = 0x55555555 rs2 = 0x55555555)
li x11, 0x55555555 # initialize rs1
li x7, 0x55555555 # initialize rs2
xor x31, x11, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1052)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x0)
li x0, 0x3515dd64 # initialize rs1
li x0, 0x884a4a9e # initialize rs2
xor x22, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1056)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x1)
li x1, 0xcd7798b6 # initialize rs1
li x1, 0x64db6b88 # initialize rs2
xor x8, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1060)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x2)
li x2, 0xe747f221 # initialize rs1
li x2, 0x580a4d1f # initialize rs2
xor x15, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1064)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x3)
li x3, 0xefb6d5d8 # initialize rs1
li x3, 0xca0d6117 # initialize rs2
xor x17, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1068)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x291b6858 # initialize rs1
li x4, 0x383e9f95 # initialize rs2
xor x26, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x26, 1072)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x8d527ba9 # initialize rs1
li x5, 0x1afa9665 # initialize rs2
xor x11, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x11, 1076)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x6fe7e1ef # initialize rs1
li x6, 0x360a26d5 # initialize rs2
xor x21, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x21, 1080)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x0a3ff6f8 # initialize rs1
li x7, 0x1ac00f15 # initialize rs2
xor x12, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1084)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x8)
li x8, 0x32f02994 # initialize rs1
li x8, 0x7d2dac76 # initialize rs2
xor x29, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1088)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x9)
li x9, 0xa01bfa99 # initialize rs1
li x9, 0x82a45b58 # initialize rs2
xor x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1092)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x10)
li x10, 0xa368b252 # initialize rs1
li x10, 0x96561257 # initialize rs2
xor x24, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1096)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x11)
li x11, 0x7f9bc14b # initialize rs1
li x11, 0xf1110233 # initialize rs2
xor x19, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1100)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x12)
li x12, 0xa721a2d8 # initialize rs1
li x12, 0x029b3a7e # initialize rs2
xor x28, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1104)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x13)
li x13, 0xecc3079c # initialize rs1
li x13, 0x7f4b4883 # initialize rs2
xor x26, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1108)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x14)
li x14, 0x00360d7e # initialize rs1
li x14, 0xd482187d # initialize rs2
xor x28, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1112)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x15)
li x15, 0x3e54940a # initialize rs1
li x15, 0xc84ffa70 # initialize rs2
xor x6, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1116)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x16)
li x16, 0x56b1e3a7 # initialize rs1
li x16, 0x362b5a6d # initialize rs2
xor x9, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1120)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x17)
li x17, 0xd676840b # initialize rs1
li x17, 0x890f9dc8 # initialize rs2
xor x27, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1124)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x18)
li x18, 0xcbc9655f # initialize rs1
li x18, 0xfe20fe69 # initialize rs2
xor x17, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1128)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x19)
li x19, 0x91f31051 # initialize rs1
li x19, 0x36935af9 # initialize rs2
xor x30, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1132)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x20)
li x20, 0x0b5361bf # initialize rs1
li x20, 0xc8a377c8 # initialize rs2
xor x22, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1136)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x21)
li x21, 0xe12119b1 # initialize rs1
li x21, 0x291e1b3b # initialize rs2
xor x28, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1140)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x22)
li x22, 0x7b3ad9a6 # initialize rs1
li x22, 0xd980d3d9 # initialize rs2
xor x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1144)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x23)
li x23, 0x0e807adc # initialize rs1
li x23, 0xa5fde671 # initialize rs2
xor x6, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1148)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x24)
li x24, 0x9748cf11 # initialize rs1
li x24, 0xf85c0b16 # initialize rs2
xor x19, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1152)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x25)
li x25, 0x40d3de78 # initialize rs1
li x25, 0x74f5ea99 # initialize rs2
xor x21, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1156)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x26)
li x26, 0x0a191101 # initialize rs1
li x26, 0xb90e5314 # initialize rs2
xor x19, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1160)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x27)
li x27, 0xebc4ac46 # initialize rs1
li x27, 0x3976665f # initialize rs2
xor x30, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1164)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x28)
li x28, 0x2367b556 # initialize rs1
li x28, 0x50037fa0 # initialize rs2
xor x18, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1168)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x29)
li x29, 0x98453b74 # initialize rs1
li x29, 0x7ad34402 # initialize rs2
xor x30, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1172)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x30)
li x30, 0xd79a88d1 # initialize rs1
li x30, 0x82693063 # initialize rs2
xor x15, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1176)

# Testcase cmp_rs1_rs2 (Test rs1 = rs2 = x31)
li x31, 0xc482d077 # initialize rs1
li x31, 0x76176777 # initialize rs2
xor x12, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1180)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x8d0ddf62 # initialize rs1
li x2, 0xade1a95c # initialize rs2
xor x0, x0, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1184)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x781557e3 # initialize rs1
li x5, 0xb335ee8f # initialize rs2
xor x1, x1, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1188)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x41c220f8 # initialize rs1
li x6, 0x76c9e918 # initialize rs2
xor x2, x2, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1192)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x20b7baa2 # initialize rs1
li x10, 0xde97e2cb # initialize rs2
xor x3, x3, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1196)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x27ab39c3 # initialize rs1
li x20, 0x43c0b42f # initialize rs2
xor x4, x4, x20 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1200)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xe510c23e # initialize rs1
li x12, 0x97928f93 # initialize rs2
xor x5, x5, x12 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1204)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xcf8849ef # initialize rs1
li x31, 0xd0635e73 # initialize rs2
xor x6, x6, x31 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1208)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x220faef2 # initialize rs1
li x27, 0x4a0cd902 # initialize rs2
xor x7, x7, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0xa74d9359 # initialize rs1
li x27, 0x48cea134 # initialize rs2
xor x8, x8, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1216)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x609d247b # initialize rs1
li x19, 0x6eae2a78 # initialize rs2
xor x9, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1220)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x0c6e9a57 # initialize rs1
li x5, 0x5d748717 # initialize rs2
xor x10, x10, x5 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1224)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xe3a11b24 # initialize rs1
li x28, 0xf08c7597 # initialize rs2
xor x11, x11, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1228)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xc2974d29 # initialize rs1
li x22, 0x1e617080 # initialize rs2
xor x12, x12, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1232)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0xd4515293 # initialize rs1
li x31, 0x14f983fe # initialize rs2
xor x13, x13, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1236)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xda15a15d # initialize rs1
li x29, 0x47de3c56 # initialize rs2
xor x14, x14, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1240)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x9fd5e44a # initialize rs1
li x12, 0x982ffba6 # initialize rs2
xor x15, x15, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1244)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0x6a0a84c8 # initialize rs1
li x1, 0xb993d178 # initialize rs2
xor x16, x16, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1248)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x04346f05 # initialize rs1
li x2, 0x39c17861 # initialize rs2
xor x17, x17, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1252)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0x623835cb # initialize rs1
li x13, 0x7efb9214 # initialize rs2
xor x18, x18, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1256)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xa366f668 # initialize rs1
li x20, 0xec16d8c5 # initialize rs2
xor x19, x19, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x16d9449d # initialize rs1
li x26, 0xfb924e43 # initialize rs2
xor x20, x20, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0x6bb95824 # initialize rs1
li x30, 0x0ec63210 # initialize rs2
xor x21, x21, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xd36df628 # initialize rs1
li x12, 0x3336088d # initialize rs2
xor x22, x22, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xb567a616 # initialize rs1
li x9, 0x669effe4 # initialize rs2
xor x23, x23, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0xb1484bba # initialize rs1
li x29, 0x8734bad0 # initialize rs2
xor x24, x24, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x2cc3dc75 # initialize rs1
li x11, 0x0d6b0055 # initialize rs2
xor x25, x25, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x15e7aea0 # initialize rs1
li x6, 0xe0cb2332 # initialize rs2
xor x26, x26, x6 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x425dc5b0 # initialize rs1
li x31, 0xed1edcb9 # initialize rs2
xor x27, x27, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0x74425223 # initialize rs1
li x23, 0x6d0e2e77 # initialize rs2
xor x28, x28, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0xe5e52b21 # initialize rs1
li x12, 0xd5a0c7a9 # initialize rs2
xor x29, x29, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0xeddbbecc # initialize rs1
li x3, 0x67c2d518 # initialize rs2
xor x30, x30, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x44fb28b4 # initialize rs1
li x12, 0x05aefd0e # initialize rs2
xor x31, x31, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1308)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x0)
li x29, 0x31af80e9 # initialize rs1
li x0, 0x5d30add4 # initialize rs2
xor x0, x29, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1312)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x1)
li x25, 0x23fe7673 # initialize rs1
li x1, 0xbb0616a3 # initialize rs2
xor x1, x25, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1316)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x2)
li x22, 0x222cfa65 # initialize rs1
li x2, 0x8a5bf221 # initialize rs2
xor x2, x22, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1320)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x3)
li x12, 0x2ae24b7e # initialize rs1
li x3, 0x9b40fd74 # initialize rs2
xor x3, x12, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1324)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x28, 0xc5b0d41b # initialize rs1
li x4, 0x2e429093 # initialize rs2
xor x4, x28, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1328)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x7, 0xd46ed553 # initialize rs1
li x5, 0x44335724 # initialize rs2
xor x5, x7, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1332)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x28, 0x94707113 # initialize rs1
li x6, 0x2c6e793b # initialize rs2
xor x6, x28, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1336)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x31, 0xbe833f67 # initialize rs1
li x7, 0x36dfc1de # initialize rs2
xor x7, x31, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1340)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x8)
li x1, 0x47144cc3 # initialize rs1
li x8, 0xce44295d # initialize rs2
xor x8, x1, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1344)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x9)
li x24, 0x507077e0 # initialize rs1
li x9, 0xeb61f021 # initialize rs2
xor x9, x24, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1348)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x10)
li x18, 0xdc1b0a7c # initialize rs1
li x10, 0x196c0aee # initialize rs2
xor x10, x18, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1352)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x11)
li x15, 0x71a11254 # initialize rs1
li x11, 0x5a3e5d5a # initialize rs2
xor x11, x15, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1356)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x12)
li x28, 0xc88c281e # initialize rs1
li x12, 0x3da01640 # initialize rs2
xor x12, x28, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1360)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x13)
li x28, 0x29cf9004 # initialize rs1
li x13, 0xa459f163 # initialize rs2
xor x13, x28, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1364)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x14)
li x12, 0x49955399 # initialize rs1
li x14, 0xdff1dd1d # initialize rs2
xor x14, x12, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1368)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x15)
li x13, 0x22373261 # initialize rs1
li x15, 0x7f6e5a5f # initialize rs2
xor x15, x13, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1372)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x16)
li x17, 0xf4a3c44c # initialize rs1
li x16, 0x2f1ac34d # initialize rs2
xor x16, x17, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1376)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x17)
li x28, 0xc5bb7336 # initialize rs1
li x17, 0xfc92925f # initialize rs2
xor x17, x28, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1380)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x18)
li x30, 0x33634d3e # initialize rs1
li x18, 0x68e01e70 # initialize rs2
xor x18, x30, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1384)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x19)
li x9, 0x628656c8 # initialize rs1
li x19, 0x286b3989 # initialize rs2
xor x19, x9, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1388)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x20)
li x23, 0xf3933e0a # initialize rs1
li x20, 0x7d3c02bf # initialize rs2
xor x20, x23, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1392)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x21)
li x31, 0x53ffaf31 # initialize rs1
li x21, 0xc8a8f755 # initialize rs2
xor x21, x31, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1396)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x22)
li x19, 0x7fda01c3 # initialize rs1
li x22, 0xe6f6dc81 # initialize rs2
xor x22, x19, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1400)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x23)
li x30, 0x08b9560a # initialize rs1
li x23, 0xcf4026d6 # initialize rs2
xor x23, x30, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1404)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x24)
li x22, 0xbc8656be # initialize rs1
li x24, 0x95ea7814 # initialize rs2
xor x24, x22, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x25)
li x7, 0xdf77df0c # initialize rs1
li x25, 0x7c225d1d # initialize rs2
xor x25, x7, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1412)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x26)
li x18, 0xc131a0e3 # initialize rs1
li x26, 0x19367c8d # initialize rs2
xor x26, x18, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1416)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x27)
li x26, 0x59a2b660 # initialize rs1
li x27, 0xf5230eea # initialize rs2
xor x27, x26, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1420)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x28)
li x15, 0xcebeebfb # initialize rs1
li x28, 0xe10f353d # initialize rs2
xor x28, x15, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1424)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x29)
li x17, 0xa2657222 # initialize rs1
li x29, 0x2d6cc89c # initialize rs2
xor x29, x17, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1428)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x30)
li x12, 0x02686a37 # initialize rs1
li x30, 0xcbd3db9e # initialize rs2
xor x30, x12, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1432)

# Testcase cmp_rd_rs2 (Test rd = rs2 = x31)
li x5, 0x905dd8b0 # initialize rs1
li x31, 0x74cdd999 # initialize rs2
xor x31, x5, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1436)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x0)
li x0, 0x51052c1f # initialize rs1
li x0, 0x57c0d2fe # initialize rs2
xor x0, x0, x0 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1440)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x1)
li x1, 0x9f192a43 # initialize rs1
li x1, 0x4fe165ce # initialize rs2
xor x1, x1, x1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1444)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x2)
li x2, 0x75d77dfd # initialize rs1
li x2, 0x98b65eb7 # initialize rs2
xor x2, x2, x2 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1448)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x3)
li x3, 0x6980b488 # initialize rs1
li x3, 0x052aa22e # initialize rs2
xor x3, x3, x3 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1452)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xb7f43823 # initialize rs1
li x4, 0x5026a461 # initialize rs2
xor x4, x4, x4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1456)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xdbeaa7a7 # initialize rs1
li x5, 0x7e387c09 # initialize rs2
xor x5, x5, x5 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1460)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xf58eccdc # initialize rs1
li x6, 0x7b2535e3 # initialize rs2
xor x6, x6, x6 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1464)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xd6d3682e # initialize rs1
li x7, 0x8b8200a0 # initialize rs2
xor x7, x7, x7 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1468)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x8)
li x8, 0x30a05ade # initialize rs1
li x8, 0x740680b5 # initialize rs2
xor x8, x8, x8 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1472)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x9)
li x9, 0xd8e17241 # initialize rs1
li x9, 0x29dfee45 # initialize rs2
xor x9, x9, x9 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1476)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x10)
li x10, 0x6357daca # initialize rs1
li x10, 0xd9ce5d30 # initialize rs2
xor x10, x10, x10 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1480)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x11)
li x11, 0xdce3e744 # initialize rs1
li x11, 0xeaf4d694 # initialize rs2
xor x11, x11, x11 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1484)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x12)
li x12, 0xf20431ef # initialize rs1
li x12, 0x7f8caba7 # initialize rs2
xor x12, x12, x12 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1488)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x13)
li x13, 0x82285a4a # initialize rs1
li x13, 0xcc4b6d1e # initialize rs2
xor x13, x13, x13 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1492)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x14)
li x14, 0x65c72e4c # initialize rs1
li x14, 0xea4b6800 # initialize rs2
xor x14, x14, x14 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1496)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x15)
li x15, 0x5c38c903 # initialize rs1
li x15, 0x88c1de2b # initialize rs2
xor x15, x15, x15 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1500)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x16)
li x16, 0x2caedc60 # initialize rs1
li x16, 0x5d6c4ba8 # initialize rs2
xor x16, x16, x16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1504)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x17)
li x17, 0x5c59e01a # initialize rs1
li x17, 0xef7f0958 # initialize rs2
xor x17, x17, x17 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1508)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x18)
li x18, 0xee8da022 # initialize rs1
li x18, 0x189e2f30 # initialize rs2
xor x18, x18, x18 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1512)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x19)
li x19, 0xbe71076f # initialize rs1
li x19, 0xa1110a17 # initialize rs2
xor x19, x19, x19 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1516)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x20)
li x20, 0xad7a637c # initialize rs1
li x20, 0x02949c6a # initialize rs2
xor x20, x20, x20 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1520)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x21)
li x21, 0x09fb7b09 # initialize rs1
li x21, 0xcb8fed3a # initialize rs2
xor x21, x21, x21 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1524)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x22)
li x22, 0x89af7a20 # initialize rs1
li x22, 0x4ad4f1dd # initialize rs2
xor x22, x22, x22 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1528)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x23)
li x23, 0x22f4cfe3 # initialize rs1
li x23, 0xab956ead # initialize rs2
xor x23, x23, x23 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1532)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x24)
li x24, 0xc1321834 # initialize rs1
li x24, 0x2a77d9de # initialize rs2
xor x24, x24, x24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1536)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x25)
li x25, 0x2a125021 # initialize rs1
li x25, 0xad38aea1 # initialize rs2
xor x25, x25, x25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1540)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x26)
li x26, 0xb26abee1 # initialize rs1
li x26, 0x38b3d070 # initialize rs2
xor x26, x26, x26 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1544)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x27)
li x27, 0x2a62d17a # initialize rs1
li x27, 0x5d90f3e0 # initialize rs2
xor x27, x27, x27 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1548)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x28)
li x28, 0xa9372437 # initialize rs1
li x28, 0x254c531b # initialize rs2
xor x28, x28, x28 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1552)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x29)
li x29, 0xa28b3d0a # initialize rs1
li x29, 0x648d66b5 # initialize rs2
xor x29, x29, x29 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1556)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x30)
li x30, 0xd7bef08a # initialize rs1
li x30, 0xe553b24a # initialize rs2
xor x30, x30, x30 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1560)

# Testcase cmp_rd_rs1_rs2 (Test rd = rs1 = rs2 = x31)
li x31, 0x0ff89733 # initialize rs1
li x31, 0xcb92f57d # initialize rs2
xor x31, x31, x31 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1564)

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x2, x25 # perform first operation
xor x11, x24, x13 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x12, x21 # perform first operation
xor x16, x2, x14 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x7, x16 # perform first operation
xor x12, x27, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x16, x22, x21 # perform first operation
xor x22, x16, x28 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x9, x6, x22 # perform first operation
xor x9, x7, x9 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x19, x27 # perform first operation
xor x19, x29, x26 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x23, x19 # perform first operation
xor x12, x10, x1 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x26, x20 # perform first operation
xor x29, x8, x23 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x20, x26, x12 # perform first operation
xor x20, x28, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x29, x18, x26 # perform first operation
xor x18, x25, x10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x25, x15 # perform first operation
xor x15, x23, x24 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x1, x30 # perform first operation
xor x12, x14, x18 # perform second (triggering) operation

#.EQU SIGSIZE,1568


// ******************
// Tests from: WALLY-COV-srli.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x5438eff4 # initialize rs1
srli x7, x0, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x5cc95375 # initialize rs1
srli x11, x1, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x404ac40d # initialize rs1
srli x3, x2, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x447cf148 # initialize rs1
srli x10, x3, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xe6d9d567 # initialize rs1
srli x29, x4, 8 # perform operation
RVTEST_SIGUPD(x5, x0, x29, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xbae84679 # initialize rs1
srli x18, x5, 0 # perform operation
RVTEST_SIGUPD(x6, x0, x18, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x7a959d8e # initialize rs1
srli x19, x6, 31 # perform operation
RVTEST_SIGUPD(x7, x0, x19, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0xa232ddbb # initialize rs1
srli x14, x7, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0x5b1cbac7 # initialize rs1
srli x15, x8, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xc57ee5a5 # initialize rs1
srli x26, x9, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0x2904e398 # initialize rs1
srli x13, x10, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0x338da610 # initialize rs1
srli x2, x11, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x9634ece9 # initialize rs1
srli x25, x12, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0xc32d153e # initialize rs1
srli x3, x13, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0xdfe7d19f # initialize rs1
srli x31, x14, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x21b120e8 # initialize rs1
srli x30, x15, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x90285cd6 # initialize rs1
srli x11, x16, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0xe91bb09d # initialize rs1
srli x1, x17, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xfac96fa6 # initialize rs1
srli x8, x18, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xbf9c43a1 # initialize rs1
srli x27, x19, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0x96d86afc # initialize rs1
srli x29, x20, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x577f2b5c # initialize rs1
srli x2, x21, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0x6ffb1143 # initialize rs1
srli x1, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0x44314aa1 # initialize rs1
srli x31, x23, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0x582b23be # initialize rs1
srli x13, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0x4cd06e9b # initialize rs1
srli x5, x25, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0x8055b292 # initialize rs1
srli x16, x26, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0x5478c325 # initialize rs1
srli x29, x27, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x4bd6fd0d # initialize rs1
srli x15, x28, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x068b915b # initialize rs1
srli x19, x29, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x44b5b233 # initialize rs1
srli x24, x30, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x7f8a46bb # initialize rs1
srli x20, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 124)

# Testcase cp_rd (Test destination rd = x0)
li x6, 0xc36a6d75 # initialize rs1
srli x0, x6, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x6, 0x01497309 # initialize rs1
srli x1, x6, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x19, 0x075eab2c # initialize rs1
srli x2, x19, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x28, 0x80ccd1a9 # initialize rs1
srli x3, x28, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x13, 0xbfc849c9 # initialize rs1
srli x4, x13, 17 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x14, 0x7a896a05 # initialize rs1
srli x5, x14, 7 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x4, 0x50339fb8 # initialize rs1
srli x6, x4, 23 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x12, 0xfee5ecff # initialize rs1
srli x7, x12, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x6, 0xc055f943 # initialize rs1
srli x8, x6, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x6, 0x4965a0fb # initialize rs1
srli x9, x6, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x5, 0x0f3e2b07 # initialize rs1
srli x10, x5, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x2, 0x4e6083f9 # initialize rs1
srli x11, x2, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x31, 0xd8f934cf # initialize rs1
srli x12, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x8, 0x0eefd252 # initialize rs1
srli x13, x8, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x13, 0x87ecf47a # initialize rs1
srli x14, x13, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x30, 0x31261c72 # initialize rs1
srli x15, x30, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x22, 0x8e43a1ef # initialize rs1
srli x16, x22, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x2, 0x1a35af82 # initialize rs1
srli x17, x2, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x16, 0xd732bf4d # initialize rs1
srli x18, x16, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x12, 0x46f5f873 # initialize rs1
srli x19, x12, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x24, 0x14936da2 # initialize rs1
srli x20, x24, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x22, 0xb97f7c26 # initialize rs1
srli x21, x22, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x1, 0x8112ceb6 # initialize rs1
srli x22, x1, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x14, 0x84947cb3 # initialize rs1
srli x23, x14, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x1, 0xa6281aee # initialize rs1
srli x24, x1, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x27, 0x353a2c62 # initialize rs1
srli x25, x27, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x13, 0xf239e544 # initialize rs1
srli x26, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x1, 0x59fa02de # initialize rs1
srli x27, x1, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x14, 0x6db81d89 # initialize rs1
srli x28, x14, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x19, 0x4c0290a3 # initialize rs1
srli x29, x19, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x8, 0x60887ab9 # initialize rs1
srli x30, x8, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x1, 0xc5bec4b1 # initialize rs1
srli x31, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x7, 0x00000000 # initialize rs1
srli x21, x7, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x30, 0x00000001 # initialize rs1
srli x24, x30, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x28, 0x00000002 # initialize rs1
srli x11, x28, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x15, 0x80000000 # initialize rs1
srli x3, x15, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x19, 0x80000001 # initialize rs1
srli x17, x19, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x31, 0x7fffffff # initialize rs1
srli x12, x31, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x7, 0x7ffffffe # initialize rs1
srli x29, x7, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x21, 0xffffffff # initialize rs1
srli x30, x21, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x12, 0xfffffffe # initialize rs1
srli x25, x12, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x3, 0x5bbc8872 # initialize rs1
srli x30, x3, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x25, 0xaaaaaaaa # initialize rs1
srli x10, x25, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x21, 0x55555555 # initialize rs1
srli x16, x21, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0x34e6a4a5 # initialize rs1
srli x0, x0, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0x3c6e574d # initialize rs1
srli x1, x1, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0x3c2e8fff # initialize rs1
srli x2, x2, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0xbfce9c17 # initialize rs1
srli x3, x3, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x6617b559 # initialize rs1
srli x4, x4, 4 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x4e57a6c8 # initialize rs1
srli x5, x5, 7 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xb6e3da3d # initialize rs1
srli x6, x6, 13 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x360fcea8 # initialize rs1
srli x7, x7, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x9c3178e8 # initialize rs1
srli x8, x8, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0xab9b5bf5 # initialize rs1
srli x9, x9, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x42073308 # initialize rs1
srli x10, x10, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xfc49f6eb # initialize rs1
srli x11, x11, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0x45367832 # initialize rs1
srli x12, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x47e07546 # initialize rs1
srli x13, x13, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0x3296b96e # initialize rs1
srli x14, x14, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0x70cd6c9d # initialize rs1
srli x15, x15, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xed25f34c # initialize rs1
srli x16, x16, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x1b08f9d1 # initialize rs1
srli x17, x17, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xbcc90052 # initialize rs1
srli x18, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0x8d77d5de # initialize rs1
srli x19, x19, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0x10f1e689 # initialize rs1
srli x20, x20, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xf9ed6ca0 # initialize rs1
srli x21, x21, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 388)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xf2b78c53 # initialize rs1
srli x22, x22, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 392)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0xfbf96f3c # initialize rs1
srli x23, x23, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 396)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x52dd8c9f # initialize rs1
srli x24, x24, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 400)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x94cdb397 # initialize rs1
srli x25, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 404)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0xa698ef94 # initialize rs1
srli x26, x26, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 408)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x21b219f0 # initialize rs1
srli x27, x27, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 412)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xf38bb808 # initialize rs1
srli x28, x28, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 416)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x61d2609c # initialize rs1
srli x29, x29, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 420)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x1aeb5584 # initialize rs1
srli x30, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 424)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x8453653b # initialize rs1
srli x31, x31, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 428)

# Testcase cp_uimm (Test bit = 0)
li x28, 0xba030269 # initialize rs1
srli x11, x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 432)

# Testcase cp_uimm (Test bit = 1)
li x10, 0x2215bdbb # initialize rs1
srli x26, x10, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 436)

# Testcase cp_uimm (Test bit = 2)
li x22, 0x85775463 # initialize rs1
srli x13, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 440)

# Testcase cp_uimm (Test bit = 3)
li x30, 0xcb32329b # initialize rs1
srli x1, x30, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 444)

# Testcase cp_uimm (Test bit = 4)
li x14, 0x0bc6b08b # initialize rs1
srli x8, x14, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 448)

# Testcase cp_uimm (Test bit = 5)
li x12, 0x89b314c1 # initialize rs1
srli x31, x12, 5 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 452)

# Testcase cp_uimm (Test bit = 6)
li x8, 0xabe85822 # initialize rs1
srli x10, x8, 6 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 456)

# Testcase cp_uimm (Test bit = 7)
li x31, 0x7ca16fae # initialize rs1
srli x24, x31, 7 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 460)

# Testcase cp_uimm (Test bit = 8)
li x11, 0x4081324e # initialize rs1
srli x16, x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 464)

# Testcase cp_uimm (Test bit = 9)
li x13, 0x2e46b22b # initialize rs1
srli x1, x13, 9 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 468)

# Testcase cp_uimm (Test bit = 10)
li x11, 0x677e84a5 # initialize rs1
srli x20, x11, 10 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 472)

# Testcase cp_uimm (Test bit = 11)
li x13, 0x7a9670b1 # initialize rs1
srli x12, x13, 11 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 476)

# Testcase cp_uimm (Test bit = 12)
li x3, 0x76cbc69e # initialize rs1
srli x24, x3, 12 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 480)

# Testcase cp_uimm (Test bit = 13)
li x26, 0xceac79c6 # initialize rs1
srli x10, x26, 13 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 484)

# Testcase cp_uimm (Test bit = 14)
li x13, 0xde3e812c # initialize rs1
srli x26, x13, 14 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 488)

# Testcase cp_uimm (Test bit = 15)
li x30, 0xfb47958c # initialize rs1
srli x5, x30, 15 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 492)

# Testcase cp_uimm (Test bit = 16)
li x25, 0xd84669a2 # initialize rs1
srli x16, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 496)

# Testcase cp_uimm (Test bit = 17)
li x22, 0x73595d81 # initialize rs1
srli x13, x22, 17 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 500)

# Testcase cp_uimm (Test bit = 18)
li x30, 0xc868d018 # initialize rs1
srli x3, x30, 18 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 504)

# Testcase cp_uimm (Test bit = 19)
li x3, 0xbceced79 # initialize rs1
srli x20, x3, 19 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 508)

# Testcase cp_uimm (Test bit = 20)
li x17, 0xe04ec6ea # initialize rs1
srli x19, x17, 20 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 512)

# Testcase cp_uimm (Test bit = 21)
li x20, 0x25f7e144 # initialize rs1
srli x26, x20, 21 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 516)

# Testcase cp_uimm (Test bit = 22)
li x13, 0xb796746a # initialize rs1
srli x16, x13, 22 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 520)

# Testcase cp_uimm (Test bit = 23)
li x3, 0x1b21e4d9 # initialize rs1
srli x22, x3, 23 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 524)

# Testcase cp_uimm (Test bit = 24)
li x11, 0xae284ef9 # initialize rs1
srli x9, x11, 24 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 528)

# Testcase cp_uimm (Test bit = 25)
li x3, 0x991f0f17 # initialize rs1
srli x25, x3, 25 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 532)

# Testcase cp_uimm (Test bit = 26)
li x25, 0x1272115d # initialize rs1
srli x28, x25, 26 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 536)

# Testcase cp_uimm (Test bit = 27)
li x5, 0x989b68ec # initialize rs1
srli x19, x5, 27 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 540)

# Testcase cp_uimm (Test bit = 28)
li x20, 0xa0258652 # initialize rs1
srli x18, x20, 28 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 544)

# Testcase cp_uimm (Test bit = 29)
li x9, 0xaaa2d14f # initialize rs1
srli x3, x9, 29 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 548)

# Testcase cp_uimm (Test bit = 30)
li x6, 0x153becd2 # initialize rs1
srli x13, x6, 30 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 552)

# Testcase cp_uimm (Test bit = 31)
li x21, 0xb60c8785 # initialize rs1
srli x2, x21, 31 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 556)

# Testcase cp_gpr/fpr_hazard nohaz test
add x31, x21, x3 # perform first operation
srli x17, x22, 20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x28, x13, x10 # perform first operation
srli x25, x24, 22 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x17, x13 # perform first operation
srli x22, x12, 5 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x1, x5, x15 # perform first operation
srli x1, x1, 15 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x26, x3, x7 # perform first operation
srli x26, x10, 0 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x21, x22, x30 # perform first operation
srli x30, x21, 21 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x15, x6, x30 # perform first operation
srli x15, x28, 25 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x24, x25, x17 # perform first operation
srli x24, x15, 20 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x15, x10, x24 # perform first operation
srli x15, x12, 16 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x16, x26, x3 # perform first operation
srli x26, x24, 18 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x30, x22 # perform first operation
srli x22, x6, 10 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x24, x17, x2 # perform first operation
srli x28, x7, 24 # perform second (triggering) operation

#.EQU SIGSIZE,560


// ******************
// Tests from: WALLY-COV-addi.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rs1 (Test source rs1 = x0)
li x0, 0x90ecac29 # initialize rs1
addi x6, x0, -1545 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 0)

# Testcase cp_rs1 (Test source rs1 = x1)
li x1, 0x1cf1ef82 # initialize rs1
addi x19, x1, 950 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 4)

# Testcase cp_rs1 (Test source rs1 = x2)
li x2, 0x4a7af0fe # initialize rs1
addi x20, x2, 1550 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 8)

# Testcase cp_rs1 (Test source rs1 = x3)
li x3, 0x2f3dd45c # initialize rs1
addi x10, x3, 203 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 12)

# Testcase cp_rs1 (Test source rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0x6e75f4cc # initialize rs1
addi x7, x4, -172 # perform operation
RVTEST_SIGUPD(x5, x0, x7, 16)

# Testcase cp_rs1 (Test source rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0x51af9fe2 # initialize rs1
addi x1, x5, -251 # perform operation
RVTEST_SIGUPD(x6, x0, x1, 20)

# Testcase cp_rs1 (Test source rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0x3a248708 # initialize rs1
addi x27, x6, -1234 # perform operation
RVTEST_SIGUPD(x7, x0, x27, 24)

# Testcase cp_rs1 (Test source rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x20fac0d2 # initialize rs1
addi x18, x7, 36 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 28)

# Testcase cp_rs1 (Test source rs1 = x8)
li x8, 0xb2f42dec # initialize rs1
addi x29, x8, 756 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 32)

# Testcase cp_rs1 (Test source rs1 = x9)
li x9, 0xa96e622d # initialize rs1
addi x23, x9, -1944 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 36)

# Testcase cp_rs1 (Test source rs1 = x10)
li x10, 0xcc87ebba # initialize rs1
addi x17, x10, -1977 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 40)

# Testcase cp_rs1 (Test source rs1 = x11)
li x11, 0xa42da1d8 # initialize rs1
addi x31, x11, 392 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 44)

# Testcase cp_rs1 (Test source rs1 = x12)
li x12, 0x8c86f957 # initialize rs1
addi x23, x12, 1172 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 48)

# Testcase cp_rs1 (Test source rs1 = x13)
li x13, 0x31f2cdd5 # initialize rs1
addi x19, x13, 1126 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 52)

# Testcase cp_rs1 (Test source rs1 = x14)
li x14, 0x2db55913 # initialize rs1
addi x12, x14, -1185 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 56)

# Testcase cp_rs1 (Test source rs1 = x15)
li x15, 0x1a5201f9 # initialize rs1
addi x26, x15, 1634 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 60)

# Testcase cp_rs1 (Test source rs1 = x16)
li x16, 0x5fb5a6d2 # initialize rs1
addi x11, x16, -1386 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 64)

# Testcase cp_rs1 (Test source rs1 = x17)
li x17, 0x2467b08c # initialize rs1
addi x22, x17, -1767 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 68)

# Testcase cp_rs1 (Test source rs1 = x18)
li x18, 0xf79564fb # initialize rs1
addi x27, x18, -1989 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 72)

# Testcase cp_rs1 (Test source rs1 = x19)
li x19, 0xcd960187 # initialize rs1
addi x1, x19, 325 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 76)

# Testcase cp_rs1 (Test source rs1 = x20)
li x20, 0xf62351f9 # initialize rs1
addi x25, x20, -1032 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 80)

# Testcase cp_rs1 (Test source rs1 = x21)
li x21, 0x4c794215 # initialize rs1
addi x26, x21, 486 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 84)

# Testcase cp_rs1 (Test source rs1 = x22)
li x22, 0xebcf1a22 # initialize rs1
addi x29, x22, -1634 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 88)

# Testcase cp_rs1 (Test source rs1 = x23)
li x23, 0xafb512aa # initialize rs1
addi x3, x23, 594 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 92)

# Testcase cp_rs1 (Test source rs1 = x24)
li x24, 0xbfb93d24 # initialize rs1
addi x28, x24, 1057 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 96)

# Testcase cp_rs1 (Test source rs1 = x25)
li x25, 0xb047d466 # initialize rs1
addi x10, x25, 667 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 100)

# Testcase cp_rs1 (Test source rs1 = x26)
li x26, 0xca89db54 # initialize rs1
addi x17, x26, -812 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 104)

# Testcase cp_rs1 (Test source rs1 = x27)
li x27, 0xe67a00ed # initialize rs1
addi x11, x27, 1981 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 108)

# Testcase cp_rs1 (Test source rs1 = x28)
li x28, 0x7d1a0beb # initialize rs1
addi x1, x28, -1413 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 112)

# Testcase cp_rs1 (Test source rs1 = x29)
li x29, 0x69bf336b # initialize rs1
addi x1, x29, 152 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 116)

# Testcase cp_rs1 (Test source rs1 = x30)
li x30, 0x627a225d # initialize rs1
addi x14, x30, 1081 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 120)

# Testcase cp_rs1 (Test source rs1 = x31)
li x31, 0x1adbabbf # initialize rs1
addi x29, x31, -1513 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 124)

# Testcase cp_rd (Test destination rd = x0)
li x20, 0x4f4f3287 # initialize rs1
addi x0, x20, -430 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 128)

# Testcase cp_rd (Test destination rd = x1)
li x1, 0xbaf6bb20 # initialize rs1
addi x1, x1, -598 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 132)

# Testcase cp_rd (Test destination rd = x2)
li x29, 0x5678fd44 # initialize rs1
addi x2, x29, 1984 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 136)

# Testcase cp_rd (Test destination rd = x3)
li x25, 0x480d8251 # initialize rs1
addi x3, x25, 1429 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 140)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x14, 0x870e2e91 # initialize rs1
addi x4, x14, -851 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 144)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x10, 0x90e841df # initialize rs1
addi x5, x10, 1886 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 148)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x17, 0xb5a7428a # initialize rs1
addi x6, x17, 1101 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 152)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x30, 0x4ee3c859 # initialize rs1
addi x7, x30, 294 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 156)

# Testcase cp_rd (Test destination rd = x8)
li x3, 0x8af70b96 # initialize rs1
addi x8, x3, 162 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 160)

# Testcase cp_rd (Test destination rd = x9)
li x22, 0x3847dca1 # initialize rs1
addi x9, x22, -197 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 164)

# Testcase cp_rd (Test destination rd = x10)
li x10, 0xdc65dc5d # initialize rs1
addi x10, x10, -268 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 168)

# Testcase cp_rd (Test destination rd = x11)
li x3, 0x40581916 # initialize rs1
addi x11, x3, 1135 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 172)

# Testcase cp_rd (Test destination rd = x12)
li x12, 0x9bfd803b # initialize rs1
addi x12, x12, 209 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 176)

# Testcase cp_rd (Test destination rd = x13)
li x10, 0xc41404fb # initialize rs1
addi x13, x10, 833 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 180)

# Testcase cp_rd (Test destination rd = x14)
li x1, 0xd4b179ea # initialize rs1
addi x14, x1, -952 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 184)

# Testcase cp_rd (Test destination rd = x15)
li x14, 0x6fcffa45 # initialize rs1
addi x15, x14, -1288 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 188)

# Testcase cp_rd (Test destination rd = x16)
li x19, 0x7d1002a7 # initialize rs1
addi x16, x19, 1936 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 192)

# Testcase cp_rd (Test destination rd = x17)
li x7, 0x011de3e1 # initialize rs1
addi x17, x7, -970 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 196)

# Testcase cp_rd (Test destination rd = x18)
li x14, 0xce92222a # initialize rs1
addi x18, x14, -1460 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 200)

# Testcase cp_rd (Test destination rd = x19)
li x2, 0x81ef4bf0 # initialize rs1
addi x19, x2, -132 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 204)

# Testcase cp_rd (Test destination rd = x20)
li x30, 0x603a7dcb # initialize rs1
addi x20, x30, 500 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 208)

# Testcase cp_rd (Test destination rd = x21)
li x12, 0x6c1fd397 # initialize rs1
addi x21, x12, -1636 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 212)

# Testcase cp_rd (Test destination rd = x22)
li x5, 0x1496af87 # initialize rs1
addi x22, x5, 1580 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 216)

# Testcase cp_rd (Test destination rd = x23)
li x26, 0x60ac8f8b # initialize rs1
addi x23, x26, -1497 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 220)

# Testcase cp_rd (Test destination rd = x24)
li x27, 0x6aacec24 # initialize rs1
addi x24, x27, -572 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 224)

# Testcase cp_rd (Test destination rd = x25)
li x16, 0xd58f056d # initialize rs1
addi x25, x16, 1963 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 228)

# Testcase cp_rd (Test destination rd = x26)
li x17, 0x2ac4dfb7 # initialize rs1
addi x26, x17, 314 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_rd (Test destination rd = x27)
li x17, 0xdb3a4df2 # initialize rs1
addi x27, x17, 178 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 236)

# Testcase cp_rd (Test destination rd = x28)
li x20, 0x1771b5f7 # initialize rs1
addi x28, x20, -1883 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 240)

# Testcase cp_rd (Test destination rd = x29)
li x29, 0xf7ed6bcd # initialize rs1
addi x29, x29, -1224 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 244)

# Testcase cp_rd (Test destination rd = x30)
li x6, 0x0504d9cd # initialize rs1
addi x30, x6, -1264 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 248)

# Testcase cp_rd (Test destination rd = x31)
li x2, 0x39dc9c46 # initialize rs1
addi x31, x2, -1645 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 252)

# Testcase cp_rs1_corners (Test source rs1 value = 0x0)
li x20, 0x00000000 # initialize rs1
addi x9, x20, -626 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 256)

# Testcase cp_rs1_corners (Test source rs1 value = 0x1)
li x20, 0x00000001 # initialize rs1
addi x27, x20, -1658 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 260)

# Testcase cp_rs1_corners (Test source rs1 value = 0x2)
li x26, 0x00000002 # initialize rs1
addi x15, x26, 81 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 264)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000000)
li x27, 0x80000000 # initialize rs1
addi x21, x27, 534 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 268)

# Testcase cp_rs1_corners (Test source rs1 value = 0x80000001)
li x16, 0x80000001 # initialize rs1
addi x25, x16, 825 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 272)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7fffffff)
li x26, 0x7fffffff # initialize rs1
addi x1, x26, 1859 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 276)

# Testcase cp_rs1_corners (Test source rs1 value = 0x7ffffffe)
li x14, 0x7ffffffe # initialize rs1
addi x24, x14, 1074 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 280)

# Testcase cp_rs1_corners (Test source rs1 value = 0xffffffff)
li x2, 0xffffffff # initialize rs1
addi x24, x2, 514 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 284)

# Testcase cp_rs1_corners (Test source rs1 value = 0xfffffffe)
li x20, 0xfffffffe # initialize rs1
addi x8, x20, 1453 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 288)

# Testcase cp_rs1_corners (Test source rs1 value = 0x5bbc8872)
li x12, 0x5bbc8872 # initialize rs1
addi x20, x12, 513 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 292)

# Testcase cp_rs1_corners (Test source rs1 value = 0xaaaaaaaa)
li x9, 0xaaaaaaaa # initialize rs1
addi x25, x9, -650 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 296)

# Testcase cp_rs1_corners (Test source rs1 value = 0x55555555)
li x7, 0x55555555 # initialize rs1
addi x1, x7, -734 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 300)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
addi x2, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 304)

# Testcase cr_rs1_imm_corners
li x6, 0x00000000 # initialize rs1
addi x20, x6, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 308)

# Testcase cr_rs1_imm_corners
li x8, 0x00000000 # initialize rs1
addi x13, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 312)

# Testcase cr_rs1_imm_corners
li x18, 0x00000000 # initialize rs1
addi x9, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 316)

# Testcase cr_rs1_imm_corners
li x29, 0x00000000 # initialize rs1
addi x2, x29, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 320)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000 # initialize rs1
addi x14, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 324)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000 # initialize rs1
addi x14, x27, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 328)

# Testcase cr_rs1_imm_corners
li x5, 0x00000000 # initialize rs1
addi x10, x5, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 332)

# Testcase cr_rs1_imm_corners
li x31, 0x00000000 # initialize rs1
addi x25, x31, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 336)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000 # initialize rs1
addi x29, x11, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 340)

# Testcase cr_rs1_imm_corners
li x20, 0x00000000 # initialize rs1
addi x5, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 344)

# Testcase cr_rs1_imm_corners
li x21, 0x00000000 # initialize rs1
addi x31, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 348)

# Testcase cr_rs1_imm_corners
li x12, 0x00000000 # initialize rs1
addi x26, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 352)

# Testcase cr_rs1_imm_corners
li x2, 0x00000000 # initialize rs1
addi x28, x2, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 356)

# Testcase cr_rs1_imm_corners
li x27, 0x00000000 # initialize rs1
addi x6, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 360)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000 # initialize rs1
addi x26, x24, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 364)

# Testcase cr_rs1_imm_corners
li x11, 0x00000000 # initialize rs1
addi x14, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 368)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000 # initialize rs1
addi x29, x24, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 372)

# Testcase cr_rs1_imm_corners
li x24, 0x00000000 # initialize rs1
addi x21, x24, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 376)

# Testcase cr_rs1_imm_corners
li x17, 0x00000000 # initialize rs1
addi x13, x17, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 380)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
addi x29, x5, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 384)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
addi x3, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 388)

# Testcase cr_rs1_imm_corners
li x5, 0x00000001 # initialize rs1
addi x15, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 392)

# Testcase cr_rs1_imm_corners
li x6, 0x00000001 # initialize rs1
addi x28, x6, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 396)

# Testcase cr_rs1_imm_corners
li x7, 0x00000001 # initialize rs1
addi x11, x7, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 400)

# Testcase cr_rs1_imm_corners
li x3, 0x00000001 # initialize rs1
addi x30, x3, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 404)

# Testcase cr_rs1_imm_corners
li x26, 0x00000001 # initialize rs1
addi x27, x26, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 408)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
addi x25, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 412)

# Testcase cr_rs1_imm_corners
li x31, 0x00000001 # initialize rs1
addi x18, x31, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 416)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
addi x9, x28, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 420)

# Testcase cr_rs1_imm_corners
li x14, 0x00000001 # initialize rs1
addi x5, x14, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 424)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
addi x27, x21, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 428)

# Testcase cr_rs1_imm_corners
li x2, 0x00000001 # initialize rs1
addi x21, x2, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 432)

# Testcase cr_rs1_imm_corners
li x14, 0x00000001 # initialize rs1
addi x28, x14, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 436)

# Testcase cr_rs1_imm_corners
li x13, 0x00000001 # initialize rs1
addi x26, x13, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 440)

# Testcase cr_rs1_imm_corners
li x3, 0x00000001 # initialize rs1
addi x2, x3, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 444)

# Testcase cr_rs1_imm_corners
li x21, 0x00000001 # initialize rs1
addi x28, x21, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 448)

# Testcase cr_rs1_imm_corners
li x12, 0x00000001 # initialize rs1
addi x26, x12, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 452)

# Testcase cr_rs1_imm_corners
li x28, 0x00000001 # initialize rs1
addi x6, x28, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 456)

# Testcase cr_rs1_imm_corners
li x10, 0x00000001 # initialize rs1
addi x12, x10, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 460)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
addi x12, x16, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 464)

# Testcase cr_rs1_imm_corners
li x13, 0x00000002 # initialize rs1
addi x24, x13, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 468)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
addi x31, x20, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 472)

# Testcase cr_rs1_imm_corners
li x21, 0x00000002 # initialize rs1
addi x12, x21, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 476)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
addi x23, x16, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 480)

# Testcase cr_rs1_imm_corners
li x17, 0x00000002 # initialize rs1
addi x19, x17, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 484)

# Testcase cr_rs1_imm_corners
li x16, 0x00000002 # initialize rs1
addi x15, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 488)

# Testcase cr_rs1_imm_corners
li x9, 0x00000002 # initialize rs1
addi x11, x9, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 492)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
addi x8, x20, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 496)

# Testcase cr_rs1_imm_corners
li x14, 0x00000002 # initialize rs1
addi x27, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 500)

# Testcase cr_rs1_imm_corners
li x23, 0x00000002 # initialize rs1
addi x3, x23, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 504)

# Testcase cr_rs1_imm_corners
li x8, 0x00000002 # initialize rs1
addi x5, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 508)

# Testcase cr_rs1_imm_corners
li x20, 0x00000002 # initialize rs1
addi x16, x20, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 512)

# Testcase cr_rs1_imm_corners
li x24, 0x00000002 # initialize rs1
addi x3, x24, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 516)

# Testcase cr_rs1_imm_corners
li x27, 0x00000002 # initialize rs1
addi x26, x27, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 520)

# Testcase cr_rs1_imm_corners
li x10, 0x00000002 # initialize rs1
addi x20, x10, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 524)

# Testcase cr_rs1_imm_corners
li x28, 0x00000002 # initialize rs1
addi x5, x28, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 528)

# Testcase cr_rs1_imm_corners
li x3, 0x00000002 # initialize rs1
addi x11, x3, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 532)

# Testcase cr_rs1_imm_corners
li x1, 0x00000002 # initialize rs1
addi x29, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 536)

# Testcase cr_rs1_imm_corners
li x8, 0x00000002 # initialize rs1
addi x28, x8, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 540)

# Testcase cr_rs1_imm_corners
li x11, 0x80000000 # initialize rs1
addi x27, x11, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 544)

# Testcase cr_rs1_imm_corners
li x7, 0x80000000 # initialize rs1
addi x27, x7, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 548)

# Testcase cr_rs1_imm_corners
li x10, 0x80000000 # initialize rs1
addi x26, x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 552)

# Testcase cr_rs1_imm_corners
li x24, 0x80000000 # initialize rs1
addi x19, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 556)

# Testcase cr_rs1_imm_corners
li x12, 0x80000000 # initialize rs1
addi x6, x12, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 560)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
addi x26, x30, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 564)

# Testcase cr_rs1_imm_corners
li x22, 0x80000000 # initialize rs1
addi x19, x22, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 568)

# Testcase cr_rs1_imm_corners
li x16, 0x80000000 # initialize rs1
addi x1, x16, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 572)

# Testcase cr_rs1_imm_corners
li x21, 0x80000000 # initialize rs1
addi x24, x21, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 576)

# Testcase cr_rs1_imm_corners
li x9, 0x80000000 # initialize rs1
addi x16, x9, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 580)

# Testcase cr_rs1_imm_corners
li x6, 0x80000000 # initialize rs1
addi x25, x6, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 584)

# Testcase cr_rs1_imm_corners
li x8, 0x80000000 # initialize rs1
addi x5, x8, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 588)

# Testcase cr_rs1_imm_corners
li x5, 0x80000000 # initialize rs1
addi x27, x5, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 592)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
addi x9, x30, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 596)

# Testcase cr_rs1_imm_corners
li x15, 0x80000000 # initialize rs1
addi x21, x15, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 600)

# Testcase cr_rs1_imm_corners
li x20, 0x80000000 # initialize rs1
addi x12, x20, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 604)

# Testcase cr_rs1_imm_corners
li x18, 0x80000000 # initialize rs1
addi x27, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 608)

# Testcase cr_rs1_imm_corners
li x30, 0x80000000 # initialize rs1
addi x31, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 612)

# Testcase cr_rs1_imm_corners
li x2, 0x80000000 # initialize rs1
addi x18, x2, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 616)

# Testcase cr_rs1_imm_corners
li x1, 0x80000000 # initialize rs1
addi x23, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 620)

# Testcase cr_rs1_imm_corners
li x7, 0x80000001 # initialize rs1
addi x24, x7, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 624)

# Testcase cr_rs1_imm_corners
li x28, 0x80000001 # initialize rs1
addi x3, x28, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 628)

# Testcase cr_rs1_imm_corners
li x17, 0x80000001 # initialize rs1
addi x11, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 632)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
addi x5, x18, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 636)

# Testcase cr_rs1_imm_corners
li x30, 0x80000001 # initialize rs1
addi x15, x30, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 640)

# Testcase cr_rs1_imm_corners
li x1, 0x80000001 # initialize rs1
addi x22, x1, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 644)

# Testcase cr_rs1_imm_corners
li x18, 0x80000001 # initialize rs1
addi x10, x18, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 648)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
addi x16, x10, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 652)

# Testcase cr_rs1_imm_corners
li x11, 0x80000001 # initialize rs1
addi x19, x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 656)

# Testcase cr_rs1_imm_corners
li x6, 0x80000001 # initialize rs1
addi x27, x6, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 660)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
addi x7, x12, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 664)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
addi x3, x10, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 668)

# Testcase cr_rs1_imm_corners
li x12, 0x80000001 # initialize rs1
addi x9, x12, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 672)

# Testcase cr_rs1_imm_corners
li x10, 0x80000001 # initialize rs1
addi x11, x10, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 676)

# Testcase cr_rs1_imm_corners
li x23, 0x80000001 # initialize rs1
addi x7, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 680)

# Testcase cr_rs1_imm_corners
li x25, 0x80000001 # initialize rs1
addi x28, x25, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 684)

# Testcase cr_rs1_imm_corners
li x9, 0x80000001 # initialize rs1
addi x20, x9, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 688)

# Testcase cr_rs1_imm_corners
li x6, 0x80000001 # initialize rs1
addi x5, x6, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 692)

# Testcase cr_rs1_imm_corners
li x6, 0x80000001 # initialize rs1
addi x1, x6, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 696)

# Testcase cr_rs1_imm_corners
li x20, 0x80000001 # initialize rs1
addi x26, x20, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 700)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffff # initialize rs1
addi x27, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 704)

# Testcase cr_rs1_imm_corners
li x23, 0x7fffffff # initialize rs1
addi x13, x23, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 708)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
addi x1, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 712)

# Testcase cr_rs1_imm_corners
li x29, 0x7fffffff # initialize rs1
addi x8, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 716)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
addi x29, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 720)

# Testcase cr_rs1_imm_corners
li x12, 0x7fffffff # initialize rs1
addi x9, x12, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 724)

# Testcase cr_rs1_imm_corners
li x21, 0x7fffffff # initialize rs1
addi x8, x21, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 728)

# Testcase cr_rs1_imm_corners
li x14, 0x7fffffff # initialize rs1
addi x3, x14, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 732)

# Testcase cr_rs1_imm_corners
li x26, 0x7fffffff # initialize rs1
addi x19, x26, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 736)

# Testcase cr_rs1_imm_corners
li x17, 0x7fffffff # initialize rs1
addi x27, x17, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 740)

# Testcase cr_rs1_imm_corners
li x20, 0x7fffffff # initialize rs1
addi x22, x20, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 744)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
addi x12, x6, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 748)

# Testcase cr_rs1_imm_corners
li x24, 0x7fffffff # initialize rs1
addi x23, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 752)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
addi x2, x6, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 756)

# Testcase cr_rs1_imm_corners
li x31, 0x7fffffff # initialize rs1
addi x5, x31, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 760)

# Testcase cr_rs1_imm_corners
li x5, 0x7fffffff # initialize rs1
addi x30, x5, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 764)

# Testcase cr_rs1_imm_corners
li x6, 0x7fffffff # initialize rs1
addi x8, x6, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 768)

# Testcase cr_rs1_imm_corners
li x16, 0x7fffffff # initialize rs1
addi x31, x16, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 772)

# Testcase cr_rs1_imm_corners
li x1, 0x7fffffff # initialize rs1
addi x9, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 776)

# Testcase cr_rs1_imm_corners
li x25, 0x7fffffff # initialize rs1
addi x24, x25, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 780)

# Testcase cr_rs1_imm_corners
li x19, 0x7ffffffe # initialize rs1
addi x6, x19, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 784)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
addi x17, x14, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 788)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
addi x21, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 792)

# Testcase cr_rs1_imm_corners
li x22, 0x7ffffffe # initialize rs1
addi x24, x22, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 796)

# Testcase cr_rs1_imm_corners
li x1, 0x7ffffffe # initialize rs1
addi x9, x1, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 800)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
addi x31, x27, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 804)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
addi x26, x14, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 808)

# Testcase cr_rs1_imm_corners
li x11, 0x7ffffffe # initialize rs1
addi x23, x11, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 812)

# Testcase cr_rs1_imm_corners
li x29, 0x7ffffffe # initialize rs1
addi x2, x29, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 816)

# Testcase cr_rs1_imm_corners
li x23, 0x7ffffffe # initialize rs1
addi x24, x23, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 820)

# Testcase cr_rs1_imm_corners
li x16, 0x7ffffffe # initialize rs1
addi x15, x16, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 824)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
addi x31, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 828)

# Testcase cr_rs1_imm_corners
li x25, 0x7ffffffe # initialize rs1
addi x8, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 832)

# Testcase cr_rs1_imm_corners
li x27, 0x7ffffffe # initialize rs1
addi x20, x27, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 836)

# Testcase cr_rs1_imm_corners
li x14, 0x7ffffffe # initialize rs1
addi x12, x14, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 840)

# Testcase cr_rs1_imm_corners
li x28, 0x7ffffffe # initialize rs1
addi x1, x28, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 844)

# Testcase cr_rs1_imm_corners
li x8, 0x7ffffffe # initialize rs1
addi x28, x8, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 848)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
addi x23, x15, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 852)

# Testcase cr_rs1_imm_corners
li x15, 0x7ffffffe # initialize rs1
addi x23, x15, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 856)

# Testcase cr_rs1_imm_corners
li x22, 0x7ffffffe # initialize rs1
addi x14, x22, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 860)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
addi x20, x21, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 864)

# Testcase cr_rs1_imm_corners
li x11, 0xffffffff # initialize rs1
addi x6, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 868)

# Testcase cr_rs1_imm_corners
li x7, 0xffffffff # initialize rs1
addi x8, x7, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 872)

# Testcase cr_rs1_imm_corners
li x24, 0xffffffff # initialize rs1
addi x8, x24, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 876)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffff # initialize rs1
addi x30, x5, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 880)

# Testcase cr_rs1_imm_corners
li x26, 0xffffffff # initialize rs1
addi x11, x26, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 884)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffff # initialize rs1
addi x24, x19, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 888)

# Testcase cr_rs1_imm_corners
li x21, 0xffffffff # initialize rs1
addi x5, x21, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 892)

# Testcase cr_rs1_imm_corners
li x19, 0xffffffff # initialize rs1
addi x28, x19, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 896)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffff # initialize rs1
addi x10, x27, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 900)

# Testcase cr_rs1_imm_corners
li x3, 0xffffffff # initialize rs1
addi x23, x3, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 904)

# Testcase cr_rs1_imm_corners
li x28, 0xffffffff # initialize rs1
addi x12, x28, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 908)

# Testcase cr_rs1_imm_corners
li x18, 0xffffffff # initialize rs1
addi x26, x18, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 912)

# Testcase cr_rs1_imm_corners
li x13, 0xffffffff # initialize rs1
addi x2, x13, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 916)

# Testcase cr_rs1_imm_corners
li x5, 0xffffffff # initialize rs1
addi x26, x5, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 920)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
addi x28, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 924)

# Testcase cr_rs1_imm_corners
li x30, 0xffffffff # initialize rs1
addi x31, x30, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 928)

# Testcase cr_rs1_imm_corners
li x27, 0xffffffff # initialize rs1
addi x14, x27, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 932)

# Testcase cr_rs1_imm_corners
li x9, 0xffffffff # initialize rs1
addi x31, x9, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 936)

# Testcase cr_rs1_imm_corners
li x1, 0xffffffff # initialize rs1
addi x13, x1, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 940)

# Testcase cr_rs1_imm_corners
li x12, 0xfffffffe # initialize rs1
addi x26, x12, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 944)

# Testcase cr_rs1_imm_corners
li x21, 0xfffffffe # initialize rs1
addi x26, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 948)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffe # initialize rs1
addi x21, x5, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 952)

# Testcase cr_rs1_imm_corners
li x5, 0xfffffffe # initialize rs1
addi x19, x5, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 956)

# Testcase cr_rs1_imm_corners
li x18, 0xfffffffe # initialize rs1
addi x27, x18, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 960)

# Testcase cr_rs1_imm_corners
li x16, 0xfffffffe # initialize rs1
addi x17, x16, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 964)

# Testcase cr_rs1_imm_corners
li x25, 0xfffffffe # initialize rs1
addi x11, x25, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 968)

# Testcase cr_rs1_imm_corners
li x20, 0xfffffffe # initialize rs1
addi x26, x20, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 972)

# Testcase cr_rs1_imm_corners
li x3, 0xfffffffe # initialize rs1
addi x6, x3, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 976)

# Testcase cr_rs1_imm_corners
li x14, 0xfffffffe # initialize rs1
addi x29, x14, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 980)

# Testcase cr_rs1_imm_corners
li x19, 0xfffffffe # initialize rs1
addi x14, x19, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 984)

# Testcase cr_rs1_imm_corners
li x15, 0xfffffffe # initialize rs1
addi x3, x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 988)

# Testcase cr_rs1_imm_corners
li x24, 0xfffffffe # initialize rs1
addi x15, x24, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 992)

# Testcase cr_rs1_imm_corners
li x17, 0xfffffffe # initialize rs1
addi x25, x17, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 996)

# Testcase cr_rs1_imm_corners
li x23, 0xfffffffe # initialize rs1
addi x6, x23, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1000)

# Testcase cr_rs1_imm_corners
li x8, 0xfffffffe # initialize rs1
addi x17, x8, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1004)

# Testcase cr_rs1_imm_corners
li x11, 0xfffffffe # initialize rs1
addi x23, x11, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1008)

# Testcase cr_rs1_imm_corners
li x30, 0xfffffffe # initialize rs1
addi x11, x30, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1012)

# Testcase cr_rs1_imm_corners
li x27, 0xfffffffe # initialize rs1
addi x10, x27, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1016)

# Testcase cr_rs1_imm_corners
li x7, 0xfffffffe # initialize rs1
addi x8, x7, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1020)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
addi x27, x29, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1024)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc8872 # initialize rs1
addi x12, x11, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1028)

# Testcase cr_rs1_imm_corners
li x8, 0x5bbc8872 # initialize rs1
addi x3, x8, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1032)

# Testcase cr_rs1_imm_corners
li x29, 0x5bbc8872 # initialize rs1
addi x15, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1036)

# Testcase cr_rs1_imm_corners
li x6, 0x5bbc8872 # initialize rs1
addi x14, x6, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1040)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc8872 # initialize rs1
addi x7, x20, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1044)

# Testcase cr_rs1_imm_corners
li x20, 0x5bbc8872 # initialize rs1
addi x26, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1048)

# Testcase cr_rs1_imm_corners
li x2, 0x5bbc8872 # initialize rs1
addi x3, x2, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1052)

# Testcase cr_rs1_imm_corners
li x16, 0x5bbc8872 # initialize rs1
addi x18, x16, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1056)

# Testcase cr_rs1_imm_corners
li x21, 0x5bbc8872 # initialize rs1
addi x16, x21, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1060)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc8872 # initialize rs1
addi x31, x11, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1064)

# Testcase cr_rs1_imm_corners
li x13, 0x5bbc8872 # initialize rs1
addi x29, x13, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1068)

# Testcase cr_rs1_imm_corners
li x11, 0x5bbc8872 # initialize rs1
addi x24, x11, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1072)

# Testcase cr_rs1_imm_corners
li x19, 0x5bbc8872 # initialize rs1
addi x20, x19, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1076)

# Testcase cr_rs1_imm_corners
li x1, 0x5bbc8872 # initialize rs1
addi x17, x1, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1080)

# Testcase cr_rs1_imm_corners
li x30, 0x5bbc8872 # initialize rs1
addi x20, x30, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1084)

# Testcase cr_rs1_imm_corners
li x25, 0x5bbc8872 # initialize rs1
addi x14, x25, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1088)

# Testcase cr_rs1_imm_corners
li x14, 0x5bbc8872 # initialize rs1
addi x20, x14, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1092)

# Testcase cr_rs1_imm_corners
li x18, 0x5bbc8872 # initialize rs1
addi x26, x18, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1096)

# Testcase cr_rs1_imm_corners
li x9, 0x5bbc8872 # initialize rs1
addi x28, x9, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1100)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
addi x12, x25, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1104)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
addi x18, x22, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1108)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
addi x5, x22, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1112)

# Testcase cr_rs1_imm_corners
li x29, 0xaaaaaaaa # initialize rs1
addi x30, x29, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1116)

# Testcase cr_rs1_imm_corners
li x17, 0xaaaaaaaa # initialize rs1
addi x12, x17, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1120)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
addi x27, x18, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1124)

# Testcase cr_rs1_imm_corners
li x16, 0xaaaaaaaa # initialize rs1
addi x18, x16, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1128)

# Testcase cr_rs1_imm_corners
li x22, 0xaaaaaaaa # initialize rs1
addi x15, x22, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1132)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
addi x1, x25, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1136)

# Testcase cr_rs1_imm_corners
li x15, 0xaaaaaaaa # initialize rs1
addi x13, x15, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1140)

# Testcase cr_rs1_imm_corners
li x8, 0xaaaaaaaa # initialize rs1
addi x25, x8, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1144)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
addi x30, x11, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1148)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
addi x12, x25, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1152)

# Testcase cr_rs1_imm_corners
li x25, 0xaaaaaaaa # initialize rs1
addi x20, x25, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1156)

# Testcase cr_rs1_imm_corners
li x24, 0xaaaaaaaa # initialize rs1
addi x11, x24, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1160)

# Testcase cr_rs1_imm_corners
li x11, 0xaaaaaaaa # initialize rs1
addi x5, x11, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1164)

# Testcase cr_rs1_imm_corners
li x18, 0xaaaaaaaa # initialize rs1
addi x12, x18, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1168)

# Testcase cr_rs1_imm_corners
li x10, 0xaaaaaaaa # initialize rs1
addi x9, x10, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1172)

# Testcase cr_rs1_imm_corners
li x1, 0xaaaaaaaa # initialize rs1
addi x28, x1, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1176)

# Testcase cr_rs1_imm_corners
li x21, 0xaaaaaaaa # initialize rs1
addi x27, x21, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1180)

# Testcase cr_rs1_imm_corners
li x8, 0x55555555 # initialize rs1
addi x27, x8, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1184)

# Testcase cr_rs1_imm_corners
li x2, 0x55555555 # initialize rs1
addi x22, x2, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1188)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
addi x21, x14, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1192)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
addi x21, x3, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1196)

# Testcase cr_rs1_imm_corners
li x8, 0x55555555 # initialize rs1
addi x5, x8, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1200)

# Testcase cr_rs1_imm_corners
li x5, 0x55555555 # initialize rs1
addi x15, x5, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1204)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
addi x5, x20, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1208)

# Testcase cr_rs1_imm_corners
li x6, 0x55555555 # initialize rs1
addi x7, x6, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1212)

# Testcase cr_rs1_imm_corners
li x1, 0x55555555 # initialize rs1
addi x10, x1, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1216)

# Testcase cr_rs1_imm_corners
li x3, 0x55555555 # initialize rs1
addi x5, x3, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 1220)

# Testcase cr_rs1_imm_corners
li x13, 0x55555555 # initialize rs1
addi x19, x13, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1224)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
addi x22, x14, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1228)

# Testcase cr_rs1_imm_corners
li x26, 0x55555555 # initialize rs1
addi x27, x26, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1232)

# Testcase cr_rs1_imm_corners
li x21, 0x55555555 # initialize rs1
addi x20, x21, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1236)

# Testcase cr_rs1_imm_corners
li x29, 0x55555555 # initialize rs1
addi x26, x29, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1240)

# Testcase cr_rs1_imm_corners
li x22, 0x55555555 # initialize rs1
addi x3, x22, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1244)

# Testcase cr_rs1_imm_corners
li x23, 0x55555555 # initialize rs1
addi x3, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1248)

# Testcase cr_rs1_imm_corners
li x16, 0x55555555 # initialize rs1
addi x2, x16, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1252)

# Testcase cr_rs1_imm_corners
li x20, 0x55555555 # initialize rs1
addi x13, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1256)

# Testcase cr_rs1_imm_corners
li x14, 0x55555555 # initialize rs1
addi x27, x14, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1260)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x0)
li x0, 0xaca0964c # initialize rs1
addi x0, x0, -31 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 1264)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x1)
li x1, 0xb58a1d9d # initialize rs1
addi x1, x1, -1390 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1268)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x2)
li x2, 0xce18c5b3 # initialize rs1
addi x2, x2, -677 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 1272)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x3)
li x3, 0x06517846 # initialize rs1
addi x3, x3, -1330 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1276)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
li x4, 0xc9f8b4fa # initialize rs1
addi x4, x4, -1524 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 1280)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
li x5, 0xc6206b37 # initialize rs1
addi x5, x5, -1237 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 1284)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
li x6, 0xa4dc6462 # initialize rs1
addi x6, x6, 901 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 1288)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
li x7, 0x7fc2dcda # initialize rs1
addi x7, x7, 1399 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 1292)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x8)
li x8, 0x81b5f763 # initialize rs1
addi x8, x8, -537 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1296)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x9)
li x9, 0x52ee7de9 # initialize rs1
addi x9, x9, -1384 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 1300)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x10)
li x10, 0x8a68b9de # initialize rs1
addi x10, x10, 1979 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1304)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x11)
li x11, 0xa8e3660e # initialize rs1
addi x11, x11, -160 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 1308)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x12)
li x12, 0xa5b5c7d6 # initialize rs1
addi x12, x12, 338 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 1312)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x13)
li x13, 0x367cdd3b # initialize rs1
addi x13, x13, -415 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 1316)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x14)
li x14, 0xb47abde2 # initialize rs1
addi x14, x14, 1400 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1320)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x15)
li x15, 0xe65ffd87 # initialize rs1
addi x15, x15, 178 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 1324)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x16)
li x16, 0xde399021 # initialize rs1
addi x16, x16, -776 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1328)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x17)
li x17, 0x9d098ce3 # initialize rs1
addi x17, x17, -1921 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 1332)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x18)
li x18, 0xb5c013d2 # initialize rs1
addi x18, x18, -1068 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 1336)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x19)
li x19, 0xf54296c0 # initialize rs1
addi x19, x19, -877 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 1340)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x20)
li x20, 0xd8fa9fc1 # initialize rs1
addi x20, x20, 1227 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1344)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x21)
li x21, 0xf610b5a9 # initialize rs1
addi x21, x21, 1281 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1348)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x22)
li x22, 0xf197b6f0 # initialize rs1
addi x22, x22, 1855 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 1352)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x23)
li x23, 0x9cecfa05 # initialize rs1
addi x23, x23, 33 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 1356)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x24)
li x24, 0x87728697 # initialize rs1
addi x24, x24, -28 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1360)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x25)
li x25, 0x55e0f965 # initialize rs1
addi x25, x25, -1667 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1364)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x26)
li x26, 0x9b5849bf # initialize rs1
addi x26, x26, -762 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1368)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x27)
li x27, 0x06a32716 # initialize rs1
addi x27, x27, 1555 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 1372)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x28)
li x28, 0xc92509b4 # initialize rs1
addi x28, x28, -555 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1376)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x29)
li x29, 0x1514a9fa # initialize rs1
addi x29, x29, -1362 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1380)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x30)
li x30, 0x5b1cdf0d # initialize rs1
addi x30, x30, 1580 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 1384)

# Testcase cmp_rd_rs1 (Test rd = rs1 = x31)
li x31, 0x76da6b32 # initialize rs1
addi x31, x31, -2026 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1388)

# Testcase cp_imm_corners
li x23, 0x64345ea3 # initialize rs1
addi x31, x23, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1392)

# Testcase cp_imm_corners
li x21, 0xcab15077 # initialize rs1
addi x1, x21, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1396)

# Testcase cp_imm_corners
li x17, 0xbbe226cc # initialize rs1
addi x28, x17, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 1400)

# Testcase cp_imm_corners
li x16, 0xdb39363d # initialize rs1
addi x21, x16, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1404)

# Testcase cp_imm_corners
li x21, 0x6433a268 # initialize rs1
addi x24, x21, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 1408)

# Testcase cp_imm_corners
li x2, 0x15967bf0 # initialize rs1
addi x21, x2, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 1412)

# Testcase cp_imm_corners
li x6, 0x660e7524 # initialize rs1
addi x25, x6, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 1416)

# Testcase cp_imm_corners
li x8, 0x88e67302 # initialize rs1
addi x26, x8, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 1420)

# Testcase cp_imm_corners
li x17, 0x365ed6ae # initialize rs1
addi x29, x17, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 1424)

# Testcase cp_imm_corners
li x2, 0x30755d0c # initialize rs1
addi x6, x2, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 1428)

# Testcase cp_imm_corners
li x31, 0xf1467e0f # initialize rs1
addi x10, x31, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 1432)

# Testcase cp_imm_corners
li x1, 0xe1ba26bd # initialize rs1
addi x3, x1, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1436)

# Testcase cp_imm_corners
li x17, 0x2a47384a # initialize rs1
addi x31, x17, 1023 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1440)

# Testcase cp_imm_corners
li x23, 0xdbd326b3 # initialize rs1
addi x3, x23, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 1444)

# Testcase cp_imm_corners
li x6, 0x981a3503 # initialize rs1
addi x14, x6, 1795 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 1448)

# Testcase cp_imm_corners
li x13, 0xa51c507e # initialize rs1
addi x1, x13, 2047 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 1452)

# Testcase cp_imm_corners
li x23, 0xf61256a1 # initialize rs1
addi x20, x23, -2048 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 1456)

# Testcase cp_imm_corners
li x18, 0x5e006aa3 # initialize rs1
addi x16, x18, -2047 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 1460)

# Testcase cp_imm_corners
li x20, 0x9d9009dc # initialize rs1
addi x31, x20, -2 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 1464)

# Testcase cp_imm_corners
li x28, 0xa31f3a64 # initialize rs1
addi x8, x28, -1 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 1468)

# Testcase cp_gpr/fpr_hazard nohaz test
add x30, x3, x29 # perform first operation
addi x8, x13, -389 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x18, x9, x6 # perform first operation
addi x16, x7, 865 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x9, x29, x31 # perform first operation
addi x22, x8, -567 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x20, x8, x17 # perform first operation
addi x8, x17, 1383 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x17, x22, x18 # perform first operation
addi x18, x6, -1696 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard raw test
add x29, x23, x13 # perform first operation
addi x17, x2, 1286 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x28, x16, x14 # perform first operation
addi x28, x1, -1649 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x29, x6, x10 # perform first operation
addi x29, x12, 581 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x20, x27 # perform first operation
addi x12, x16, -424 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x5, x26, x22 # perform first operation
addi x26, x30, 765 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x7, x16, x29 # perform first operation
addi x29, x27, -246 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x9, x31, x25 # perform first operation
addi x17, x7, -1431 # perform second (triggering) operation

#.EQU SIGSIZE,1472


// ******************
// Tests from: WALLY-COV-auipc.S
// ******************


# initialize signature pointer
la x4, begin_signature

    
# Testcase cp_rd (Test destination rd = x0)
auipc x0, 547433 # perform operation
RVTEST_SIGUPD(x4, x0, x0, 0)

# Testcase cp_rd (Test destination rd = x1)
auipc x1, 503605 # perform operation
RVTEST_SIGUPD(x4, x0, x1, 4)

# Testcase cp_rd (Test destination rd = x2)
auipc x2, 657256 # perform operation
RVTEST_SIGUPD(x4, x0, x2, 8)

# Testcase cp_rd (Test destination rd = x3)
auipc x3, 672062 # perform operation
RVTEST_SIGUPD(x4, x0, x3, 12)

# Testcase cp_rd (Test destination rd = x4)
mv x5, x4 # switch signature pointer register to avoid conflict with test
auipc x4, 946639 # perform operation
RVTEST_SIGUPD(x5, x0, x4, 16)

# Testcase cp_rd (Test destination rd = x5)
mv x6, x5 # switch signature pointer register to avoid conflict with test
auipc x5, 73928 # perform operation
RVTEST_SIGUPD(x6, x0, x5, 20)

# Testcase cp_rd (Test destination rd = x6)
mv x7, x6 # switch signature pointer register to avoid conflict with test
auipc x6, 776930 # perform operation
RVTEST_SIGUPD(x7, x0, x6, 24)

# Testcase cp_rd (Test destination rd = x7)
mv x4, x7 # switch signature pointer register to avoid conflict with test
auipc x7, 682454 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 28)

# Testcase cp_rd (Test destination rd = x8)
auipc x8, 475948 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 32)

# Testcase cp_rd (Test destination rd = x9)
auipc x9, 294523 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 36)

# Testcase cp_rd (Test destination rd = x10)
auipc x10, 852320 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 40)

# Testcase cp_rd (Test destination rd = x11)
auipc x11, 67470 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 44)

# Testcase cp_rd (Test destination rd = x12)
auipc x12, 250500 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 48)

# Testcase cp_rd (Test destination rd = x13)
auipc x13, 123493 # perform operation
RVTEST_SIGUPD(x4, x0, x13, 52)

# Testcase cp_rd (Test destination rd = x14)
auipc x14, 252827 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 56)

# Testcase cp_rd (Test destination rd = x15)
auipc x15, 131675 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 60)

# Testcase cp_rd (Test destination rd = x16)
auipc x16, 558171 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 64)

# Testcase cp_rd (Test destination rd = x17)
auipc x17, 1000533 # perform operation
RVTEST_SIGUPD(x4, x0, x17, 68)

# Testcase cp_rd (Test destination rd = x18)
auipc x18, 1034874 # perform operation
RVTEST_SIGUPD(x4, x0, x18, 72)

# Testcase cp_rd (Test destination rd = x19)
auipc x19, 123485 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 76)

# Testcase cp_rd (Test destination rd = x20)
auipc x20, 702460 # perform operation
RVTEST_SIGUPD(x4, x0, x20, 80)

# Testcase cp_rd (Test destination rd = x21)
auipc x21, 795794 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 84)

# Testcase cp_rd (Test destination rd = x22)
auipc x22, 629038 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 88)

# Testcase cp_rd (Test destination rd = x23)
auipc x23, 155966 # perform operation
RVTEST_SIGUPD(x4, x0, x23, 92)

# Testcase cp_rd (Test destination rd = x24)
auipc x24, 14810 # perform operation
RVTEST_SIGUPD(x4, x0, x24, 96)

# Testcase cp_rd (Test destination rd = x25)
auipc x25, 197469 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 100)

# Testcase cp_rd (Test destination rd = x26)
auipc x26, 770617 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 104)

# Testcase cp_rd (Test destination rd = x27)
auipc x27, 547962 # perform operation
RVTEST_SIGUPD(x4, x0, x27, 108)

# Testcase cp_rd (Test destination rd = x28)
auipc x28, 953230 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 112)

# Testcase cp_rd (Test destination rd = x29)
auipc x29, 572066 # perform operation
RVTEST_SIGUPD(x4, x0, x29, 116)

# Testcase cp_rd (Test destination rd = x30)
auipc x30, 152289 # perform operation
RVTEST_SIGUPD(x4, x0, x30, 120)

# Testcase cp_rd (Test destination rd = x31)
auipc x31, 308396 # perform operation
RVTEST_SIGUPD(x4, x0, x31, 124)

# Testcase cp_imm_corners
auipc x28, 0 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 128)

# Testcase cp_imm_corners
auipc x12, 1 # perform operation
RVTEST_SIGUPD(x4, x0, x12, 132)

# Testcase cp_imm_corners
auipc x10, 2 # perform operation
RVTEST_SIGUPD(x4, x0, x10, 136)

# Testcase cp_imm_corners
auipc x8, 3 # perform operation
RVTEST_SIGUPD(x4, x0, x8, 140)

# Testcase cp_imm_corners
auipc x28, 4 # perform operation
RVTEST_SIGUPD(x4, x0, x28, 144)

# Testcase cp_imm_corners
auipc x11, 8 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 148)

# Testcase cp_imm_corners
auipc x9, 16 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 152)

# Testcase cp_imm_corners
auipc x26, 32 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 156)

# Testcase cp_imm_corners
auipc x11, 64 # perform operation
RVTEST_SIGUPD(x4, x0, x11, 160)

# Testcase cp_imm_corners
auipc x19, 128 # perform operation
RVTEST_SIGUPD(x4, x0, x19, 164)

# Testcase cp_imm_corners
auipc x22, 256 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 168)

# Testcase cp_imm_corners
auipc x15, 512 # perform operation
RVTEST_SIGUPD(x4, x0, x15, 172)

# Testcase cp_imm_corners
auipc x5, 1024 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 176)

# Testcase cp_imm_corners
auipc x25, 2048 # perform operation
RVTEST_SIGUPD(x4, x0, x25, 180)

# Testcase cp_imm_corners
auipc x9, 4096 # perform operation
RVTEST_SIGUPD(x4, x0, x9, 184)

# Testcase cp_imm_corners
auipc x21, 8192 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 188)

# Testcase cp_imm_corners
auipc x6, 16384 # perform operation
RVTEST_SIGUPD(x4, x0, x6, 192)

# Testcase cp_imm_corners
auipc x7, 32768 # perform operation
RVTEST_SIGUPD(x4, x0, x7, 196)

# Testcase cp_imm_corners
auipc x14, 65536 # perform operation
RVTEST_SIGUPD(x4, x0, x14, 200)

# Testcase cp_imm_corners
auipc x22, 131072 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 204)

# Testcase cp_imm_corners
auipc x26, 262144 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 208)

# Testcase cp_imm_corners
auipc x22, 524286 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 212)

# Testcase cp_imm_corners
auipc x16, 524287 # perform operation
RVTEST_SIGUPD(x4, x0, x16, 216)

# Testcase cp_imm_corners
auipc x21, 524288 # perform operation
RVTEST_SIGUPD(x4, x0, x21, 220)

# Testcase cp_imm_corners
auipc x5, 524289 # perform operation
RVTEST_SIGUPD(x4, x0, x5, 224)

# Testcase cp_imm_corners
auipc x22, 1048574 # perform operation
RVTEST_SIGUPD(x4, x0, x22, 228)

# Testcase cp_imm_corners
auipc x26, 1048575 # perform operation
RVTEST_SIGUPD(x4, x0, x26, 232)

# Testcase cp_gpr/fpr_hazard nohaz test
add x29, x14, x27 # perform first operation
auipc x26, 749882 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x27, x12, x31 # perform first operation
auipc x2, 806918 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard nohaz test
add x14, x31, x11 # perform first operation
auipc x13, 830362 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x9, x2, x6 # perform first operation
auipc x9, 53529 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x12, x15, x8 # perform first operation
auipc x12, 676176 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard waw test
add x23, x10, x7 # perform first operation
auipc x23, 996355 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x18, x10, x23 # perform first operation
auipc x10, 25698 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x31, x27, x13 # perform first operation
auipc x13, 728816 # perform second (triggering) operation

# Testcase cp_gpr/fpr_hazard war test
add x17, x29, x21 # perform first operation
auipc x26, 258156 # perform second (triggering) operation

#.EQU SIGSIZE,236
.EQU SIGSIZE,28944 #combined


write_tohost:
    la t1, tohost
    li t0, 1
    sw t0, 0(t1)
    sw zero, 4(t1)

self_loop:
    j self_loop

.data

.align 4
scratch:
    .bss 136

.data 

.section .tohost 
tohost: # write to HTIF
    .dword 0
fromhost:
    .dword 0

.align 4
begin_signature:
    .fill SIGSIZE*8/__riscv_xlen,__riscv_xlen/8,0xdeadbeef
end_signature:

.end

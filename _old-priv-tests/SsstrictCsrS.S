///////////////////////////////////////////
// SsstrictCsrS.S
//
// Written: Roman De Santos rdesantos@hmc.edu 11 March 2025
//
// Purpose: Functional coverage test for Ssstrict supervisor Csrs in S mode
//
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
///////////////////////////////////////////

#include "WALLY-init-lib.h"

main:

# set up fast trap handler for uncompressed illegal instructions
# because Zicsr tests will throw a lot of illegal instruction traps while attempting to access CSRs
# This cuts the instruction count and runtime by nearly 2x
# However, don't blindly use this handler in other privileged tests
# Note this uses the normal trap handler if the instruction is compressed
la t0, trap_handler_fastuncompressedillegalinstr
csrw mtvec, t0

/////////////////////////////////
// Autogenerated code pasted in from csrtests.py to hit the following coverpoints
// cp_csrr                  Read all 4096 CSRs in M mode
// cp_csrw_edges          Write all zeroes and all ones to 4096 CSRs in M mode
// cp_csrc                  Clear all 4096 CSRs in M mode
// cp_csrs                  Set all 4096 CSRs in M mode
/////////////////////////////////

//load into supervisor mode
li a0, 1
ecall

#include "ZicsrS-CSR-Tests.h"

/////////////////////////////////
// cp_shadow_m
/////////////////////////////////

    //load into machine privilege mode
    li a0, 3
    ecall

    li t0, -1            # Load -1 into t0 (rs1 edge: all ones)
    csrrw x0, mstatus, t0 # Write ones to mstatus

    # Write to mstatus (CSR 0x300)
    li t0, 0             # Load 0 into t0 (rs1 edge: zero)
    csrrw x0, mstatus, t0 # Write zero to mstatus

    li t0, -1            # Load -1 into t0 (rs1 edge: all ones)
    csrrw x0, mie, t0     # Write ones to mie

    # Write to mie (CSR 0x304)
    li t0, 0             # Load 0 into t0 (rs1 edge: zero)
    csrrw x0, mie, t0     # Write zero to mie

    li t0, -1            # Load -1 into t0 (rs1 edge: all ones)
    csrrw x0, mip, t0     # Write ones to mip

    # Write to mip (CSR 0x344)
    li t0, 0             # Load 0 into t0 (rs1 edge: zero)
    csrrw x0, mip, t0     # Write zero to mip

finish:
    j done
